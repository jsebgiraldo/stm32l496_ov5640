
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af4  08009af4  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009afc  08009afc  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08009b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000110  08009c14  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08009c14  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186c1  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343e  00000000  00000000  00038801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d425  00000000  00000000  0003e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ae4  00000000  00000000  0006b85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108972  00000000  00000000  00082341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018acb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f0c  00000000  00000000  0018ad04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800926c 	.word	0x0800926c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	0800926c 	.word	0x0800926c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f007 fda5 	bl	80080f8 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08009284 	.word	0x08009284
 800060c:	080094e0 	.word	0x080094e0
 8000610:	08009288 	.word	0x08009288

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f007 fd65 	bl	80080f8 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08009284 	.word	0x08009284
 8000658:	080094f4 	.word	0x080094f4
 800065c:	08009288 	.word	0x08009288

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f007 fd3f 	bl	80080f8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08009284 	.word	0x08009284
 80006a4:	08009508 	.word	0x08009508
 80006a8:	08009288 	.word	0x08009288

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f007 fd15 	bl	80080f8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f007 fd6c 	bl	80081ac <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f007 fd07 	bl	80080f8 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f007 fcf2 	bl	80080f8 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	080092ac 	.word	0x080092ac
 8000724:	08009520 	.word	0x08009520
 8000728:	08009288 	.word	0x08009288
 800072c:	08009284 	.word	0x08009284
 8000730:	080092bc 	.word	0x080092bc

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f007 fcd5 	bl	80080f8 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08009284 	.word	0x08009284
 800076c:	08009534 	.word	0x08009534
 8000770:	08009288 	.word	0x08009288

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f007 fcaf 	bl	80080f8 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080092d8 	.word	0x080092d8
 80007bc:	08009548 	.word	0x08009548
 80007c0:	08009288 	.word	0x08009288

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f007 fc85 	bl	80080f8 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080092ec 	.word	0x080092ec
 800082c:	08009558 	.word	0x08009558
 8000830:	08009288 	.word	0x08009288

08000834 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  while (1);
 8000838:	e7fe      	b.n	8000838 <BSP_ErrorHandler+0x4>
	...

0800083c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8000840:	4812      	ldr	r0, [pc, #72]	; (800088c <I2C2_Init+0x50>)
 8000842:	f004 fcfc 	bl	800523e <HAL_I2C_GetState>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11d      	bne.n	8000888 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <I2C2_Init+0x50>)
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <I2C2_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <I2C2_Init+0x50>)
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <I2C2_Init+0x58>)
 8000856:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <I2C2_Init+0x50>)
 800085a:	2270      	movs	r2, #112	; 0x70
 800085c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <I2C2_Init+0x50>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <I2C2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <I2C2_Init+0x50>)
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <I2C2_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <I2C2_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <I2C2_Init+0x50>)
 800087e:	f000 f80b 	bl	8000898 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <I2C2_Init+0x50>)
 8000884:	f004 f8d4 	bl	8004a30 <HAL_I2C_Init>
  }
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000012c 	.word	0x2000012c
 8000890:	40005800 	.word	0x40005800
 8000894:	40403e5d 	.word	0x40403e5d

08000898 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ae      	sub	sp, #184	; 0xb8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a37      	ldr	r2, [pc, #220]	; (8000984 <I2C2_MspInit+0xec>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d168      	bne.n	800097c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80008ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f005 fe5b 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <I2C2_MspInit+0xf0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a31      	ldr	r2, [pc, #196]	; (8000988 <I2C2_MspInit+0xf0>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <I2C2_MspInit+0xf0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <I2C2_MspInit+0xf0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <I2C2_MspInit+0xf0>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <I2C2_MspInit+0xf0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 80008ee:	2310      	movs	r3, #16
 80008f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8000906:	2304      	movs	r3, #4
 8000908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800090c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000910:	4619      	mov	r1, r3
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <I2C2_MspInit+0xf4>)
 8000914:	f003 fdbe 	bl	8004494 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8000920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000924:	4619      	mov	r1, r3
 8000926:	481a      	ldr	r0, [pc, #104]	; (8000990 <I2C2_MspInit+0xf8>)
 8000928:	f003 fdb4 	bl	8004494 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <I2C2_MspInit+0xf0>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <I2C2_MspInit+0xf0>)
 8000932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000936:	6593      	str	r3, [r2, #88]	; 0x58
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <I2C2_MspInit+0xf0>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <I2C2_MspInit+0xf0>)
 8000946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <I2C2_MspInit+0xf0>)
 800094a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <I2C2_MspInit+0xf0>)
 8000952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <I2C2_MspInit+0xf0>)
 8000956:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800095a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2021      	movs	r0, #33	; 0x21
 8000962:	f003 f9bc 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8000966:	2021      	movs	r0, #33	; 0x21
 8000968:	f003 f9d5 	bl	8003d16 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2022      	movs	r0, #34	; 0x22
 8000972:	f003 f9b4 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8000976:	2022      	movs	r0, #34	; 0x22
 8000978:	f003 f9cd 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  }
}
 800097c:	bf00      	nop
 800097e:	37b8      	adds	r7, #184	; 0xb8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40005800 	.word	0x40005800
 8000988:	40021000 	.word	0x40021000
 800098c:	48001c00 	.word	0x48001c00
 8000990:	48000400 	.word	0x48000400

08000994 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <I2C2_DeInit+0x20>)
 800099a:	f004 fc50 	bl	800523e <HAL_I2C_GetState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <I2C2_DeInit+0x20>)
 80009a6:	f004 f8d2 	bl	8004b4e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80009aa:	4802      	ldr	r0, [pc, #8]	; (80009b4 <I2C2_DeInit+0x20>)
 80009ac:	f000 f804 	bl	80009b8 <I2C2_MspDeInit>
  }
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000012c 	.word	0x2000012c

080009b8 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <I2C2_MspDeInit+0x8c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d138      	bne.n	8000a3c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <I2C2_MspDeInit+0x90>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 80009fa:	2110      	movs	r1, #16
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <I2C2_MspDeInit+0x94>)
 80009fe:	f003 fedb 	bl	80047b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <I2C2_MspDeInit+0x98>)
 8000a08:	f003 fed6 	bl	80047b8 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a16:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a1e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <I2C2_MspDeInit+0x90>)
 8000a2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a2e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8000a30:	2021      	movs	r0, #33	; 0x21
 8000a32:	f003 f97e 	bl	8003d32 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8000a36:	2022      	movs	r0, #34	; 0x22
 8000a38:	f003 f97b 	bl	8003d32 <HAL_NVIC_DisableIRQ>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40005800 	.word	0x40005800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48001c00 	.word	0x48001c00
 8000a50:	48000400 	.word	0x48000400

08000a54 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4623      	mov	r3, r4
 8000a64:	80fb      	strh	r3, [r7, #6]
 8000a66:	4603      	mov	r3, r0
 8000a68:	80bb      	strh	r3, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a76:	b672      	cpsid	i
}
 8000a78:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <I2C2_WriteData+0x5c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	8878      	ldrh	r0, [r7, #2]
 8000a80:	88ba      	ldrh	r2, [r7, #4]
 8000a82:	88f9      	ldrh	r1, [r7, #6]
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	1c7b      	adds	r3, r7, #1
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <I2C2_WriteData+0x60>)
 8000a92:	f004 f89f 	bl	8004bd4 <HAL_I2C_Mem_Write>
 8000a96:	4603      	mov	r3, r0
 8000a98:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a9a:	b662      	cpsie	i
}
 8000a9c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8000aa4:	f000 f890 	bl	8000bc8 <I2C2_Error>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	2000012c 	.word	0x2000012c

08000ab8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af04      	add	r7, sp, #16
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad2:	b672      	cpsid	i
}
 8000ad4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <I2C2_ReadData+0x60>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	8878      	ldrh	r0, [r7, #2]
 8000adc:	88ba      	ldrh	r2, [r7, #4]
 8000ade:	88f9      	ldrh	r1, [r7, #6]
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	f107 030e 	add.w	r3, r7, #14
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <I2C2_ReadData+0x64>)
 8000af0:	f004 f984 	bl	8004dfc <HAL_I2C_Mem_Read>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000af8:	b662      	cpsie	i
}
 8000afa:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8000b02:	f000 f861 	bl	8000bc8 <I2C2_Error>
    HAL_Delay(200);
 8000b06:	20c8      	movs	r0, #200	; 0xc8
 8000b08:	f002 ffc6 	bl	8003a98 <HAL_Delay>
  }

  return value;
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	2000012c 	.word	0x2000012c

08000b20 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8000b38:	88f9      	ldrh	r1, [r7, #6]
 8000b3a:	2332      	movs	r3, #50	; 0x32
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <I2C2_isDeviceReady+0x48>)
 8000b40:	f004 fa76 	bl	8005030 <HAL_I2C_IsDeviceReady>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b48:	b662      	cpsie	i
}
 8000b4a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8000b52:	f000 f839 	bl	8000bc8 <I2C2_Error>
    HAL_Delay(200);
 8000b56:	20c8      	movs	r0, #200	; 0xc8
 8000b58:	f002 ff9e 	bl	8003a98 <HAL_Delay>
  }

  return value;
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000012c 	.word	0x2000012c

08000b6c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4603      	mov	r3, r0
 8000b76:	81fb      	strh	r3, [r7, #14]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	81bb      	strh	r3, [r7, #12]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <I2C2_ReadBuffer+0x54>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	8978      	ldrh	r0, [r7, #10]
 8000b8e:	89ba      	ldrh	r2, [r7, #12]
 8000b90:	89f9      	ldrh	r1, [r7, #14]
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	8c3b      	ldrh	r3, [r7, #32]
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <I2C2_ReadBuffer+0x58>)
 8000ba0:	f004 f92c 	bl	8004dfc <HAL_I2C_Mem_Read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ba8:	b662      	cpsie	i
}
 8000baa:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8000bb2:	f000 f809 	bl	8000bc8 <I2C2_Error>
  }

  return status;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	2000012c 	.word	0x2000012c

08000bc8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8000bcc:	f7ff fe32 	bl	8000834 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <I2C2_Error+0x18>)
 8000bd2:	f003 ffbc 	bl	8004b4e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8000bd6:	f7ff fe31 	bl	800083c <I2C2_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000012c 	.word	0x2000012c

08000be4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8000be8:	f7ff fe28 	bl	800083c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8000bec:	2104      	movs	r1, #4
 8000bee:	2084      	movs	r0, #132	; 0x84
 8000bf0:	f7ff ff96 	bl	8000b20 <I2C2_isDeviceReady>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8000bfa:	f7ff fe1b 	bl	8000834 <BSP_ErrorHandler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8000c22:	2340      	movs	r3, #64	; 0x40
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	480e      	ldr	r0, [pc, #56]	; (8000c74 <MFX_IO_DeInit+0x70>)
 8000c3a:	f003 fc2b 	bl	8004494 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f003 f877 	bl	8003d32 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MFX_IO_DeInit+0x6c>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MFX_IO_DeInit+0x74>)
 8000c60:	f003 fdaa 	bl	80047b8 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8000c64:	f7ff fe96 	bl	8000994 <I2C2_DeInit>
}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48001c00 	.word	0x48001c00
 8000c78:	48000800 	.word	0x48000800

08000c7c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MFX_IO_ITConfig+0x54>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MFX_IO_ITConfig+0x54>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MFX_IO_ITConfig+0x54>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000caa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MFX_IO_ITConfig+0x58>)
 8000cb2:	f003 fbef 	bl	8004494 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	210f      	movs	r1, #15
 8000cba:	2017      	movs	r0, #23
 8000cbc:	f003 f80f 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8000cc0:	2017      	movs	r0, #23
 8000cc2:	f003 f828 	bl	8003d16 <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MFX_IO_EnableWakeupPin+0x40>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <MFX_IO_EnableWakeupPin+0x40>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MFX_IO_EnableWakeupPin+0x40>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MFX_IO_EnableWakeupPin+0x44>)
 8000d0c:	f003 fbc2 	bl	8004494 <HAL_GPIO_Init>
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48001c00 	.word	0x48001c00

08000d20 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MFX_IO_Wakeup+0x24>)
 8000d2a:	f003 fe37 	bl	800499c <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f002 feb2 	bl	8003a98 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <MFX_IO_Wakeup+0x24>)
 8000d3a:	f003 fe2f 	bl	800499c <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48001c00 	.word	0x48001c00

08000d48 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	460b      	mov	r3, r1
 8000d54:	717b      	strb	r3, [r7, #5]
 8000d56:	4613      	mov	r3, r2
 8000d58:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	b299      	uxth	r1, r3
 8000d5e:	793b      	ldrb	r3, [r7, #4]
 8000d60:	88f8      	ldrh	r0, [r7, #6]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f7ff fe76 	bl	8000a54 <I2C2_WriteData>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	b299      	uxth	r1, r3
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	2201      	movs	r2, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe95 	bl	8000ab8 <I2C2_ReadData>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	81fb      	strh	r3, [r7, #14]
 8000da6:	460b      	mov	r3, r1
 8000da8:	737b      	strb	r3, [r7, #13]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000dae:	7b7b      	ldrb	r3, [r7, #13]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	89f8      	ldrh	r0, [r7, #14]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f7ff fed6 	bl	8000b6c <I2C2_ReadBuffer>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29b      	uxth	r3, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f002 fe5f 	bl	8003a98 <HAL_Delay>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OV5640_IO_t              IOCtx;
	static OV5640_Object_t   OV5640Obj;

	/* Configure the audio driver */
	IOCtx.Address     = 0x78U; //# CAMERA_OV5640_ADDRESS
 8000df2:	2378      	movs	r3, #120	; 0x78
 8000df4:	833b      	strh	r3, [r7, #24]
	IOCtx.Init        = I2C2_Init;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <BSP_CAMERA_Init+0xec>)
 8000df8:	613b      	str	r3, [r7, #16]
	IOCtx.DeInit      = I2C2_DeInit;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <BSP_CAMERA_Init+0xf0>)
 8000dfc:	617b      	str	r3, [r7, #20]

  /* Get the DCMI handle structure */
  phdcmi = &hdcmi;
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <BSP_CAMERA_Init+0xf4>)
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t CameraId;
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <BSP_CAMERA_Init+0xf8>)
 8000e0a:	f001 ff71 	bl	8002cf0 <OV5640_RegisterBusIO>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <BSP_CAMERA_Init+0x36>
  {
	  printf("OV5640_RegisterBusIO ERROR!\r\n");
 8000e14:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <BSP_CAMERA_Init+0xfc>)
 8000e16:	f007 fe2d 	bl	8008a74 <puts>
  }
  /* Read ID of Camera module via I2C */
  if (OV5640_ReadID(&OV5640Obj, &CameraId) == OV5640_ID)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <BSP_CAMERA_Init+0xf8>)
 8000e22:	f002 faa7 	bl	8003374 <OV5640_ReadID>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f245 6240 	movw	r2, #22080	; 0x5640
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d146      	bne.n	8000ebe <BSP_CAMERA_Init+0xda>
  {
    /* Initialize the camera driver structure */
    //camera_drv = &ov5640_drv;
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <BSP_CAMERA_Init+0x100>)
 8000e32:	2278      	movs	r2, #120	; 0x78
 8000e34:	601a      	str	r2, [r3, #0]

    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d12d      	bne.n	8000e98 <BSP_CAMERA_Init+0xb4>
    {
      /* For 240x240 resolution, the OV9655 sensor is set to QVGA resolution
       * as OV9655 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      OV5640_Init(&OV5640Obj, RESOLUTION_R320x240, CAMERA_PF_RGB565);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4826      	ldr	r0, [pc, #152]	; (8000edc <BSP_CAMERA_Init+0xf8>)
 8000e42:	f001 ff7b 	bl	8002d3c <OV5640_Init>


      HAL_DCMI_ConfigCROP(phdcmi,
 8000e46:	23ef      	movs	r3, #239	; 0xef
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	f240 13df 	movw	r3, #479	; 0x1df
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2128      	movs	r1, #40	; 0x28
 8000e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e54:	f003 f88a 	bl	8003f6c <HAL_DCMI_ConfigCrop>
                          40,                 /* Crop in the middle of the VGA picture */
                          0,                 /* Same height (same number of lines: no need to crop vertically) */
                          (240 * 2) - 1,     /* 2 pixels clock needed to capture one pixel */
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
 8000e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5a:	f003 f8f3 	bl	8004044 <HAL_DCMI_EnableCrop>


      /* Set the RGB565 mode */
      MFX_IO_Write(CameraHwAddress, 0x12 /*OV9655_COM7*/, 0x63);
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <BSP_CAMERA_Init+0x100>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2263      	movs	r2, #99	; 0x63
 8000e66:	2112      	movs	r1, #18
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff6d 	bl	8000d48 <MFX_IO_Write>
      MFX_IO_Write(CameraHwAddress, 0x40 /*OV9655_COM15*/, 0x10);
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <BSP_CAMERA_Init+0x100>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	2210      	movs	r2, #16
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff65 	bl	8000d48 <MFX_IO_Write>
      /* Invert the HRef signal */
      MFX_IO_Write(CameraHwAddress, 0x15 /*OV9655_COM10*/, 0x08);
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <BSP_CAMERA_Init+0x100>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2208      	movs	r2, #8
 8000e86:	2115      	movs	r1, #21
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <MFX_IO_Write>
      HAL_Delay(500);
 8000e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e92:	f002 fe01 	bl	8003a98 <HAL_Delay>
 8000e96:	e00b      	b.n	8000eb0 <BSP_CAMERA_Init+0xcc>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <BSP_CAMERA_Init+0x104>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <BSP_CAMERA_Init+0x100>)
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 8000eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000eac:	f003 f8a0 	bl	8003ff0 <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <BSP_CAMERA_Init+0x108>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]

    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ebc:	e002      	b.n	8000ec4 <BSP_CAMERA_Init+0xe0>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return status;
 8000ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	0800083d 	.word	0x0800083d
 8000ed4:	08000995 	.word	0x08000995
 8000ed8:	200001bc 	.word	0x200001bc
 8000edc:	2000018c 	.word	0x2000018c
 8000ee0:	08009324 	.word	0x08009324
 8000ee4:	20000188 	.word	0x20000188
 8000ee8:	20000180 	.word	0x20000180
 8000eec:	20000184 	.word	0x20000184

08000ef0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8000ef8:	f000 f804 	bl	8000f04 <BSP_CAMERA_LineEventCallback>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8000f1a:	f000 f804 	bl	8000f26 <BSP_CAMERA_VsyncEventCallback>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_FrameEventCallback();
 8000f3c:	f000 f804 	bl	8000f48 <BSP_CAMERA_FrameEventCallback>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <BSP_CAMERA_FrameEventCallback>:
/**
  * @brief  Frame Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_FrameEventCallback can be implemented in the user file
   */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8000f5e:	f000 f804 	bl	8000f6a <BSP_CAMERA_ErrorCallback>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <BSP_IO_Init+0x78>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d128      	bne.n	8000fe0 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <BSP_IO_Init+0x7c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	2084      	movs	r0, #132	; 0x84
 8000f94:	4798      	blx	r3

    HAL_Delay(10);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f002 fd7e 	bl	8003a98 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <BSP_IO_Init+0x80>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2084      	movs	r0, #132	; 0x84
 8000fa2:	4798      	blx	r3
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	2b7b      	cmp	r3, #123	; 0x7b
 8000fac:	d002      	beq.n	8000fb4 <BSP_IO_Init+0x3c>
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	2b79      	cmp	r3, #121	; 0x79
 8000fb2:	d117      	bne.n	8000fe4 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <BSP_IO_Init+0x78>)
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <BSP_IO_Init+0x80>)
 8000fb8:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <BSP_IO_Init+0x78>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00f      	beq.n	8000fe4 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <BSP_IO_Init+0x78>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2084      	movs	r0, #132	; 0x84
 8000fcc:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <BSP_IO_Init+0x78>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	4909      	ldr	r1, [pc, #36]	; (8000ffc <BSP_IO_Init+0x84>)
 8000fd6:	2084      	movs	r0, #132	; 0x84
 8000fd8:	4798      	blx	r3

        ret = IO_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	e001      	b.n	8000fe4 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001b4 	.word	0x200001b4
 8000ff4:	20000030 	.word	0x20000030
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	000301ff 	.word	0x000301ff

08001000 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 ffd1 	bl	8001fb4 <mfxstm32l152_GetInstance>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d10e      	bne.n	800103a <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 800101c:	2000      	movs	r0, #0
 800101e:	f000 ffc9 	bl	8001fb4 <mfxstm32l152_GetInstance>
 8001022:	4603      	mov	r3, r0
 8001024:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d806      	bhi.n	800103a <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	b2d1      	uxtb	r1, r2
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <mfxstm32l152_Init+0x58>)
 8001034:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8001036:	f7ff fdd5 	bl	8000be4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	2102      	movs	r1, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f8db 	bl	80011fa <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f8fc 	bl	8001246 <mfxstm32l152_SetIrqOutPinType>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001b8 	.word	0x200001b8

0800105c <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 ffc3 	bl	8001ff4 <mfxstm32l152_ReleaseInstance>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2bff      	cmp	r3, #255	; 0xff
 8001076:	d001      	beq.n	800107c <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8001078:	f7ff fdc4 	bl	8000c04 <MFX_IO_DeInit>
  }
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe57 	bl	8000d48 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f7ff fe96 	bl	8000dcc <MFX_IO_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe45 	bl	8000d48 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80010be:	f7ff fe0b 	bl	8000cd8 <MFX_IO_EnableWakeupPin>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 ff6c 	bl	8001fb4 <mfxstm32l152_GetInstance>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d101      	bne.n	80010ea <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80010e6:	f7ff fdf7 	bl	8000cd8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80010ea:	f7ff fe19 	bl	8000d20 <MFX_IO_Wakeup>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff fe63 	bl	8000dcc <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8001106:	f7ff fd6d 	bl	8000be4 <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe2e 	bl	8000d70 <MFX_IO_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	b29b      	uxth	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	80fb      	strh	r3, [r7, #6]
 8001130:	4613      	mov	r3, r2
 8001132:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2142      	movs	r1, #66	; 0x42
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe17 	bl	8000d70 <MFX_IO_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	797b      	ldrb	r3, [r7, #5]
 800114a:	4313      	orrs	r3, r2
 800114c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	2142      	movs	r1, #66	; 0x42
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fdf7 	bl	8000d48 <MFX_IO_Write>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	460a      	mov	r2, r1
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	4613      	mov	r3, r2
 8001170:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2142      	movs	r1, #66	; 0x42
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fdf8 	bl	8000d70 <MFX_IO_Read>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8001184:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001188:	43db      	mvns	r3, r3
 800118a:	b25a      	sxtb	r2, r3
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	4013      	ands	r3, r2
 8001192:	b25b      	sxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2142      	movs	r1, #66	; 0x42
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fdd3 	bl	8000d48 <MFX_IO_Write>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	460a      	mov	r2, r1
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	4613      	mov	r3, r2
 80011b8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2108      	movs	r1, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fdd6 	bl	8000d70 <MFX_IO_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	4013      	ands	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	460a      	mov	r2, r1
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80011e6:	797a      	ldrb	r2, [r7, #5]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	2144      	movs	r1, #68	; 0x44
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fdab 	bl	8000d48 <MFX_IO_Write>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	460a      	mov	r2, r1
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	2141      	movs	r1, #65	; 0x41
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fdac 	bl	8000d70 <MFX_IO_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f023 0302 	bic.w	r3, r3, #2
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	797b      	ldrb	r3, [r7, #5]
 8001228:	4313      	orrs	r3, r2
 800122a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	2141      	movs	r1, #65	; 0x41
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fd88 	bl	8000d48 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fdc7 	bl	8000dcc <MFX_IO_Delay>

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	460a      	mov	r2, r1
 8001250:	80fb      	strh	r3, [r7, #6]
 8001252:	4613      	mov	r3, r2
 8001254:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2141      	movs	r1, #65	; 0x41
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd86 	bl	8000d70 <MFX_IO_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	4313      	orrs	r3, r2
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	2141      	movs	r1, #65	; 0x41
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd62 	bl	8000d48 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fda1 	bl	8000dcc <MFX_IO_Delay>

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	6039      	str	r1, [r7, #0]
 800129c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fd64 	bl	8000d70 <MFX_IO_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ba:	d304      	bcc.n	80012c6 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e003      	b.n	80012ce <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	f023 0308 	bic.w	r3, r3, #8
 80012cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd37 	bl	8000d48 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fd76 	bl	8000dcc <MFX_IO_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	80fb      	strh	r3, [r7, #6]
 80012f4:	4613      	mov	r3, r2
 80012f6:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80012fc:	797b      	ldrb	r3, [r7, #5]
 80012fe:	2b17      	cmp	r3, #23
 8001300:	f200 82d4 	bhi.w	80018ac <mfxstm32l152_IO_Config+0x5c4>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <mfxstm32l152_IO_Config+0x24>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800139d 	.word	0x0800139d
 8001310:	0800142d 	.word	0x0800142d
 8001314:	080014ed 	.word	0x080014ed
 8001318:	080015dd 	.word	0x080015dd
 800131c:	080016cd 	.word	0x080016cd
 8001320:	080017bd 	.word	0x080017bd
 8001324:	0800136d 	.word	0x0800136d
 8001328:	0800136d 	.word	0x0800136d
 800132c:	080013cd 	.word	0x080013cd
 8001330:	080013fd 	.word	0x080013fd
 8001334:	080018ad 	.word	0x080018ad
 8001338:	080014bd 	.word	0x080014bd
 800133c:	0800148d 	.word	0x0800148d
 8001340:	080018ad 	.word	0x080018ad
 8001344:	0800145d 	.word	0x0800145d
 8001348:	0800142d 	.word	0x0800142d
 800134c:	0800153d 	.word	0x0800153d
 8001350:	0800158d 	.word	0x0800158d
 8001354:	0800162d 	.word	0x0800162d
 8001358:	0800167d 	.word	0x0800167d
 800135c:	0800171d 	.word	0x0800171d
 8001360:	0800176d 	.word	0x0800176d
 8001364:	0800180d 	.word	0x0800180d
 8001368:	0800185d 	.word	0x0800185d
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fb67 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	2200      	movs	r2, #0
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa9d 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001382:	88f8      	ldrh	r0, [r7, #6]
 8001384:	2300      	movs	r3, #0
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	2164      	movs	r1, #100	; 0x64
 800138a:	f000 fe57 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800138e:	88f8      	ldrh	r0, [r7, #6]
 8001390:	2300      	movs	r3, #0
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	2168      	movs	r1, #104	; 0x68
 8001396:	f000 fe51 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 800139a:	e28a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fb4f 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2200      	movs	r2, #0
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fa85 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80013b2:	88f8      	ldrh	r0, [r7, #6]
 80013b4:	2300      	movs	r3, #0
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	2164      	movs	r1, #100	; 0x64
 80013ba:	f000 fe3f 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013be:	88f8      	ldrh	r0, [r7, #6]
 80013c0:	2301      	movs	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	2168      	movs	r1, #104	; 0x68
 80013c6:	f000 fe39 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 80013ca:	e272      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fb37 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	2200      	movs	r2, #0
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fa6d 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80013e2:	88f8      	ldrh	r0, [r7, #6]
 80013e4:	2301      	movs	r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	2164      	movs	r1, #100	; 0x64
 80013ea:	f000 fe27 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013ee:	88f8      	ldrh	r0, [r7, #6]
 80013f0:	2301      	movs	r3, #1
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	2168      	movs	r1, #104	; 0x68
 80013f6:	f000 fe21 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 80013fa:	e25a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fb1f 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	2200      	movs	r2, #0
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fa55 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001412:	88f8      	ldrh	r0, [r7, #6]
 8001414:	2301      	movs	r3, #1
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	2164      	movs	r1, #100	; 0x64
 800141a:	f000 fe0f 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800141e:	88f8      	ldrh	r0, [r7, #6]
 8001420:	2300      	movs	r3, #0
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	2168      	movs	r1, #104	; 0x68
 8001426:	f000 fe09 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 800142a:	e242      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fb07 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2201      	movs	r2, #1
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fa3d 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001442:	88f8      	ldrh	r0, [r7, #6]
 8001444:	2300      	movs	r3, #0
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	2164      	movs	r1, #100	; 0x64
 800144a:	f000 fdf7 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800144e:	88f8      	ldrh	r0, [r7, #6]
 8001450:	2300      	movs	r3, #0
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	2168      	movs	r1, #104	; 0x68
 8001456:	f000 fdf1 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 800145a:	e22a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 faef 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	2201      	movs	r2, #1
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fa25 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001472:	88f8      	ldrh	r0, [r7, #6]
 8001474:	2300      	movs	r3, #0
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	2164      	movs	r1, #100	; 0x64
 800147a:	f000 fddf 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800147e:	88f8      	ldrh	r0, [r7, #6]
 8001480:	2301      	movs	r3, #1
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	2168      	movs	r1, #104	; 0x68
 8001486:	f000 fdd9 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 800148a:	e212      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fad7 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2201      	movs	r2, #1
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fa0d 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80014a2:	88f8      	ldrh	r0, [r7, #6]
 80014a4:	2301      	movs	r3, #1
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	2164      	movs	r1, #100	; 0x64
 80014aa:	f000 fdc7 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80014ae:	88f8      	ldrh	r0, [r7, #6]
 80014b0:	2300      	movs	r3, #0
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	2168      	movs	r1, #104	; 0x68
 80014b6:	f000 fdc1 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 80014ba:	e1fa      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fabf 	bl	8001a44 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2201      	movs	r2, #1
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f9f5 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80014d2:	88f8      	ldrh	r0, [r7, #6]
 80014d4:	2301      	movs	r3, #1
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	2164      	movs	r1, #100	; 0x64
 80014da:	f000 fdaf 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80014de:	88f8      	ldrh	r0, [r7, #6]
 80014e0:	2301      	movs	r3, #1
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	2168      	movs	r1, #104	; 0x68
 80014e6:	f000 fda9 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    break;
 80014ea:	e1e2      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa7a 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2200      	movs	r2, #0
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f9de 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001500:	88f8      	ldrh	r0, [r7, #6]
 8001502:	2300      	movs	r3, #0
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	2164      	movs	r1, #100	; 0x64
 8001508:	f000 fd98 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800150c:	88f8      	ldrh	r0, [r7, #6]
 800150e:	2301      	movs	r3, #1
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	2168      	movs	r1, #104	; 0x68
 8001514:	f000 fd92 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2201      	movs	r2, #1
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f9de 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	2201      	movs	r2, #1
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f9ed 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fa75 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800153a:	e1ba      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fa52 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2200      	movs	r2, #0
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f9b6 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001550:	88f8      	ldrh	r0, [r7, #6]
 8001552:	2301      	movs	r3, #1
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	2164      	movs	r1, #100	; 0x64
 8001558:	f000 fd70 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800155c:	88f8      	ldrh	r0, [r7, #6]
 800155e:	2301      	movs	r3, #1
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	2168      	movs	r1, #104	; 0x68
 8001564:	f000 fd6a 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	2201      	movs	r2, #1
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f9b6 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2201      	movs	r2, #1
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f9c5 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fa4d 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800158a:	e192      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fa2a 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	2200      	movs	r2, #0
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f98e 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80015a0:	88f8      	ldrh	r0, [r7, #6]
 80015a2:	2301      	movs	r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	2164      	movs	r1, #100	; 0x64
 80015a8:	f000 fd48 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	2300      	movs	r3, #0
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	2168      	movs	r1, #104	; 0x68
 80015b4:	f000 fd42 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	2201      	movs	r2, #1
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f98e 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2201      	movs	r2, #1
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f99d 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fa25 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 80015da:	e16a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa02 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	2200      	movs	r2, #0
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f966 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80015f0:	88f8      	ldrh	r0, [r7, #6]
 80015f2:	2300      	movs	r3, #0
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	2164      	movs	r1, #100	; 0x64
 80015f8:	f000 fd20 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	2301      	movs	r3, #1
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	2168      	movs	r1, #104	; 0x68
 8001604:	f000 fd1a 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	2201      	movs	r2, #1
 800160c:	6839      	ldr	r1, [r7, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f966 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	2200      	movs	r2, #0
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f975 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f9fd 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800162a:	e142      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f9da 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	2200      	movs	r2, #0
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f93e 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001640:	88f8      	ldrh	r0, [r7, #6]
 8001642:	2301      	movs	r3, #1
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	2164      	movs	r1, #100	; 0x64
 8001648:	f000 fcf8 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800164c:	88f8      	ldrh	r0, [r7, #6]
 800164e:	2301      	movs	r3, #1
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	2168      	movs	r1, #104	; 0x68
 8001654:	f000 fcf2 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	2201      	movs	r2, #1
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f93e 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2200      	movs	r2, #0
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f94d 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f9d5 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800167a:	e11a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f9b2 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2200      	movs	r2, #0
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f916 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001690:	88f8      	ldrh	r0, [r7, #6]
 8001692:	2301      	movs	r3, #1
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	2164      	movs	r1, #100	; 0x64
 8001698:	f000 fcd0 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800169c:	88f8      	ldrh	r0, [r7, #6]
 800169e:	2300      	movs	r3, #0
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	2168      	movs	r1, #104	; 0x68
 80016a4:	f000 fcca 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	2201      	movs	r2, #1
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f916 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	2200      	movs	r2, #0
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f925 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	6839      	ldr	r1, [r7, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f9ad 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 80016ca:	e0f2      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f98a 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	2200      	movs	r2, #0
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f8ee 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80016e0:	88f8      	ldrh	r0, [r7, #6]
 80016e2:	2300      	movs	r3, #0
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	2164      	movs	r1, #100	; 0x64
 80016e8:	f000 fca8 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80016ec:	88f8      	ldrh	r0, [r7, #6]
 80016ee:	2301      	movs	r3, #1
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	2168      	movs	r1, #104	; 0x68
 80016f4:	f000 fca2 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	2200      	movs	r2, #0
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f8ee 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2200      	movs	r2, #0
 8001708:	6839      	ldr	r1, [r7, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f8fd 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f985 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800171a:	e0ca      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f962 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	2200      	movs	r2, #0
 8001728:	6839      	ldr	r1, [r7, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f8c6 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001730:	88f8      	ldrh	r0, [r7, #6]
 8001732:	2301      	movs	r3, #1
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	2164      	movs	r1, #100	; 0x64
 8001738:	f000 fc80 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800173c:	88f8      	ldrh	r0, [r7, #6]
 800173e:	2301      	movs	r3, #1
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	2168      	movs	r1, #104	; 0x68
 8001744:	f000 fc7a 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	2200      	movs	r2, #0
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f8c6 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	2200      	movs	r2, #0
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f8d5 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	6839      	ldr	r1, [r7, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f95d 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800176a:	e0a2      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f93a 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2200      	movs	r2, #0
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f89e 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001780:	88f8      	ldrh	r0, [r7, #6]
 8001782:	2301      	movs	r3, #1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	2164      	movs	r1, #100	; 0x64
 8001788:	f000 fc58 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800178c:	88f8      	ldrh	r0, [r7, #6]
 800178e:	2300      	movs	r3, #0
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	2168      	movs	r1, #104	; 0x68
 8001794:	f000 fc52 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	2200      	movs	r2, #0
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f89e 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	2200      	movs	r2, #0
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f8ad 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	6839      	ldr	r1, [r7, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f935 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 80017ba:	e07a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f912 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	2200      	movs	r2, #0
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f876 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80017d0:	88f8      	ldrh	r0, [r7, #6]
 80017d2:	2300      	movs	r3, #0
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	2164      	movs	r1, #100	; 0x64
 80017d8:	f000 fc30 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80017dc:	88f8      	ldrh	r0, [r7, #6]
 80017de:	2301      	movs	r3, #1
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	2168      	movs	r1, #104	; 0x68
 80017e4:	f000 fc2a 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	2200      	movs	r2, #0
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f876 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	2201      	movs	r2, #1
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f885 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f90d 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800180a:	e052      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8ea 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	2200      	movs	r2, #0
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f84e 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001820:	88f8      	ldrh	r0, [r7, #6]
 8001822:	2301      	movs	r3, #1
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	2164      	movs	r1, #100	; 0x64
 8001828:	f000 fc08 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800182c:	88f8      	ldrh	r0, [r7, #6]
 800182e:	2301      	movs	r3, #1
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	2168      	movs	r1, #104	; 0x68
 8001834:	f000 fc02 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	2200      	movs	r2, #0
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f84e 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	2201      	movs	r2, #1
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f85d 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f8e5 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 800185a:	e02a      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8c2 	bl	80019e8 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2200      	movs	r2, #0
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f826 	bl	80018bc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001870:	88f8      	ldrh	r0, [r7, #6]
 8001872:	2301      	movs	r3, #1
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	2164      	movs	r1, #100	; 0x64
 8001878:	f000 fbe0 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800187c:	88f8      	ldrh	r0, [r7, #6]
 800187e:	2300      	movs	r3, #0
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	2168      	movs	r1, #104	; 0x68
 8001884:	f000 fbda 	bl	800203c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	2200      	movs	r2, #0
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f826 	bl	80018e0 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2201      	movs	r2, #1
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f835 	bl	800190a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8bd 	bl	8001a24 <mfxstm32l152_IO_EnablePinIT>
    break;
 80018aa:	e002      	b.n	80018b2 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80018ac:	797b      	ldrb	r3, [r7, #5]
 80018ae:	73fb      	strb	r3, [r7, #15]
    break;
 80018b0:	bf00      	nop
  }

  return error_code;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	80fb      	strh	r3, [r7, #6]
 80018c8:	4613      	mov	r3, r2
 80018ca:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	88f8      	ldrh	r0, [r7, #6]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	2160      	movs	r1, #96	; 0x60
 80018d4:	f000 fbb2 	bl	800203c <mfxstm32l152_reg24_setPinValue>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	80fb      	strh	r3, [r7, #6]
 80018ec:	4613      	mov	r3, r2
 80018ee:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 80018f0:	797b      	ldrb	r3, [r7, #5]
 80018f2:	88f8      	ldrh	r0, [r7, #6]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	214c      	movs	r1, #76	; 0x4c
 80018f8:	f000 fba0 	bl	800203c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff fa65 	bl	8000dcc <MFX_IO_Delay>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	6039      	str	r1, [r7, #0]
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	88f8      	ldrh	r0, [r7, #6]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	2150      	movs	r1, #80	; 0x50
 8001922:	f000 fb8b 	bl	800203c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fa50 	bl	8000dcc <MFX_IO_Delay>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	80fb      	strh	r3, [r7, #6]
 8001940:	4613      	mov	r3, r2
 8001942:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800194a:	88f8      	ldrh	r0, [r7, #6]
 800194c:	2301      	movs	r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	216c      	movs	r1, #108	; 0x6c
 8001952:	f000 fb73 	bl	800203c <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8001956:	e005      	b.n	8001964 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8001958:	88f8      	ldrh	r0, [r7, #6]
 800195a:	2301      	movs	r3, #1
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	2170      	movs	r1, #112	; 0x70
 8001960:	f000 fb6c 	bl	800203c <mfxstm32l152_reg24_setPinValue>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	2110      	movs	r1, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9ed 	bl	8000d70 <MFX_IO_Read>
 8001996:	4603      	mov	r3, r0
 8001998:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	2111      	movs	r1, #17
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9e1 	bl	8000d70 <MFX_IO_Read>
 80019ae:	4603      	mov	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	2112      	movs	r1, #18
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f9d5 	bl	8000d70 <MFX_IO_Read>
 80019c6:	4603      	mov	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	021a      	lsls	r2, r3, #8
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	441a      	add	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4013      	ands	r3, r2
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80019f2:	f7ff f943 	bl	8000c7c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb92 	bl	8001124 <mfxstm32l152_EnableITSource>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fba3 	bl	8001162 <mfxstm32l152_DisableITSource>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001a30:	88f8      	ldrh	r0, [r7, #6]
 8001a32:	2301      	movs	r3, #1
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	2148      	movs	r1, #72	; 0x48
 8001a38:	f000 fb00 	bl	800203c <mfxstm32l152_reg24_setPinValue>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001a50:	88f8      	ldrh	r0, [r7, #6]
 8001a52:	2300      	movs	r3, #0
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	2148      	movs	r1, #72	; 0x48
 8001a58:	f000 faf0 	bl	800203c <mfxstm32l152_reg24_setPinValue>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	210c      	movs	r1, #12
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f971 	bl	8000d70 <MFX_IO_Read>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	210d      	movs	r1, #13
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f963 	bl	8000d70 <MFX_IO_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	210e      	movs	r1, #14
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f957 	bl	8000d70 <MFX_IO_Read>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	89bb      	ldrh	r3, [r7, #12]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4413      	add	r3, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4013      	ands	r3, r2
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	6039      	str	r1, [r7, #0]
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2154      	movs	r1, #84	; 0x54
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f91a 	bl	8000d48 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8001b1a:	7bba      	ldrb	r2, [r7, #14]
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	2155      	movs	r1, #85	; 0x55
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f911 	bl	8000d48 <MFX_IO_Write>
  }
  if (pin_16_23)
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001b2c:	7b7a      	ldrb	r2, [r7, #13]
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2156      	movs	r1, #86	; 0x56
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f908 	bl	8000d48 <MFX_IO_Write>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f90a 	bl	8000d70 <MFX_IO_Read>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f8e8 	bl	8000d48 <MFX_IO_Write>
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8001b80:	b084      	sub	sp, #16
 8001b82:	b590      	push	{r4, r7, lr}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4604      	mov	r4, r0
 8001b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b92:	4623      	mov	r3, r4
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2140      	movs	r1, #64	; 0x40
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f8e2 	bl	8000d70 <MFX_IO_Read>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	7bba      	ldrb	r2, [r7, #14]
 8001bca:	2140      	movs	r1, #64	; 0x40
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f8bb 	bl	8000d48 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001bd2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 030e 	and.w	r3, r3, #14
 8001bde:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001be0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	b25a      	sxtb	r2, r3
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8001bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c00:	b25a      	sxtb	r2, r3
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f896 	bl	8000d48 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001c1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c26:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8001c28:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c32:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	2181      	movs	r1, #129	; 0x81
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f87f 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8001c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	2182      	movs	r1, #130	; 0x82
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f873 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	2183      	movs	r1, #131	; 0x83
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f869 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8001c76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	2184      	movs	r1, #132	; 0x84
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f85d 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8001c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	2185      	movs	r1, #133	; 0x85
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f853 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8001ca2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	2186      	movs	r1, #134	; 0x86
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f847 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8001cba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	2187      	movs	r1, #135	; 0x87
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f83d 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	2188      	movs	r1, #136	; 0x88
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f831 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8001ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ce8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	2189      	movs	r1, #137	; 0x89
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f827 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8001cfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	218a      	movs	r1, #138	; 0x8a
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f81b 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001d12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	218b      	movs	r1, #139	; 0x8b
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f811 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8001d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001d28:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	2190      	movs	r1, #144	; 0x90
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f807 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8001d3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	2191      	movs	r1, #145	; 0x91
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fffd 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001d4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	2192      	movs	r1, #146	; 0x92
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fff3 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001d62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	2193      	movs	r1, #147	; 0x93
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffe9 	bl	8000d48 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8001d76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001d78:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	2194      	movs	r1, #148	; 0x94
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ffdf 	bl	8000d48 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8001d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	218c      	movs	r1, #140	; 0x8c
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ffd3 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8001da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	218d      	movs	r1, #141	; 0x8d
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ffc9 	bl	8000d48 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8001db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	218e      	movs	r1, #142	; 0x8e
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ffbd 	bl	8000d48 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001dce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dd0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	218f      	movs	r1, #143	; 0x8f
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffb3 	bl	8000d48 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001de2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001de6:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	2196      	movs	r1, #150	; 0x96
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ffa8 	bl	8000d48 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001df8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e02:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001e04:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	2197      	movs	r1, #151	; 0x97
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff91 	bl	8000d48 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001e26:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e2a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	2198      	movs	r1, #152	; 0x98
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff86 	bl	8000d48 <MFX_IO_Write>
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e46:	b004      	add	sp, #16
 8001e48:	4770      	bx	lr

08001e4a <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	6039      	str	r1, [r7, #0]
 8001e54:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	f107 020c 	add.w	r2, r7, #12
 8001e60:	2303      	movs	r3, #3
 8001e62:	2114      	movs	r1, #20
 8001e64:	f7fe ff98 	bl	8000d98 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	041a      	lsls	r2, r3, #16
 8001e6c:	7b7b      	ldrb	r3, [r7, #13]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	7bba      	ldrb	r2, [r7, #14]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	601a      	str	r2, [r3, #0]

}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001e8e:	f7fe fef5 	bl	8000c7c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2102      	movs	r1, #2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f944 	bl	8001124 <mfxstm32l152_EnableITSource>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f98f 	bl	80011d6 <mfxstm32l152_ClearGlobalIT>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f96b 	bl	80011aa <mfxstm32l152_GlobalITStatus>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f938 	bl	8001162 <mfxstm32l152_DisableITSource>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff2f 	bl	8000d70 <MFX_IO_Read>
 8001f12:	4603      	mov	r3, r0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff1e 	bl	8000d70 <MFX_IO_Read>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001f48:	f7fe fe98 	bl	8000c7c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	2104      	movs	r1, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f8e7 	bl	8001124 <mfxstm32l152_EnableITSource>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f932 	bl	80011d6 <mfxstm32l152_ClearGlobalIT>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2104      	movs	r1, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f90e 	bl	80011aa <mfxstm32l152_GlobalITStatus>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f8db 	bl	8001162 <mfxstm32l152_DisableITSource>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e00b      	b.n	8001fdc <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <mfxstm32l152_GetInstance+0x3c>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d101      	bne.n	8001fd6 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	e006      	b.n	8001fe4 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d9f0      	bls.n	8001fc4 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001fe2:	23ff      	movs	r3, #255	; 0xff
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200001b8 	.word	0x200001b8

08001ff4 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e00f      	b.n	8002024 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <mfxstm32l152_ReleaseInstance+0x44>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	b29b      	uxth	r3, r3
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	429a      	cmp	r2, r3
 8002010:	d105      	bne.n	800201e <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	4a08      	ldr	r2, [pc, #32]	; (8002038 <mfxstm32l152_ReleaseInstance+0x44>)
 8002016:	2100      	movs	r1, #0
 8002018:	54d1      	strb	r1, [r2, r3]
      return idx;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	e006      	b.n	800202c <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d9ec      	bls.n	8002004 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800202a:	23ff      	movs	r3, #255	; 0xff
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	200001b8 	.word	0x200001b8

0800203c <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	603a      	str	r2, [r7, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
 800204a:	460b      	mov	r3, r1
 800204c:	717b      	strb	r3, [r7, #5]
 800204e:	4613      	mov	r3, r2
 8002050:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8002066:	7bbb      	ldrb	r3, [r7, #14]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01e      	beq.n	80020aa <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 800206c:	797a      	ldrb	r2, [r7, #5]
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe7c 	bl	8000d70 <MFX_IO_Read>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800207c:	793b      	ldrb	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	7bbb      	ldrb	r3, [r7, #14]
 8002086:	4313      	orrs	r3, r2
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e008      	b.n	800209e <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 800208c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002090:	43db      	mvns	r3, r3
 8002092:	b25a      	sxtb	r2, r3
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	4013      	ands	r3, r2
 800209a:	b25b      	sxtb	r3, r3
 800209c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	7979      	ldrb	r1, [r7, #5]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fe4f 	bl	8000d48 <MFX_IO_Write>
  }

  if (pin_8_15)
 80020aa:	7b7b      	ldrb	r3, [r7, #13]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d022      	beq.n	80020f6 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fe58 	bl	8000d70 <MFX_IO_Read>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80020c4:	793b      	ldrb	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e008      	b.n	80020e6 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80020d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80020d8:	43db      	mvns	r3, r3
 80020da:	b25a      	sxtb	r2, r3
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80020e6:	797b      	ldrb	r3, [r7, #5]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2d9      	uxtb	r1, r3
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fe29 	bl	8000d48 <MFX_IO_Write>
  }

  if (pin_16_23)
 80020f6:	7b3b      	ldrb	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d022      	beq.n	8002142 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80020fc:	797b      	ldrb	r3, [r7, #5]
 80020fe:	3302      	adds	r3, #2
 8002100:	b2da      	uxtb	r2, r3
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fe32 	bl	8000d70 <MFX_IO_Read>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8002110:	793b      	ldrb	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	7b3b      	ldrb	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e008      	b.n	8002132 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8002120:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	b25a      	sxtb	r2, r3
 8002128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212c:	4013      	ands	r3, r2
 800212e:	b25b      	sxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8002132:	797b      	ldrb	r3, [r7, #5]
 8002134:	3302      	adds	r3, #2
 8002136:	b2d9      	uxtb	r1, r3
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe03 	bl	8000d48 <MFX_IO_Write>
  }
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	b29a      	uxth	r2, r3
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	4803      	ldr	r0, [pc, #12]	; (8002170 <_write+0x24>)
 8002162:	f004 ff1f 	bl	8006fa4 <HAL_UART_Transmit>
 8002166:	4603      	mov	r3, r0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000268 	.word	0x20000268

08002174 <print_startup_msg>:

static void print_startup_msg(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 8002178:	4809      	ldr	r0, [pc, #36]	; (80021a0 <print_startup_msg+0x2c>)
 800217a:	f006 fc7b 	bl	8008a74 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 800217e:	4909      	ldr	r1, [pc, #36]	; (80021a4 <print_startup_msg+0x30>)
 8002180:	4809      	ldr	r0, [pc, #36]	; (80021a8 <print_startup_msg+0x34>)
 8002182:	f006 fbf1 	bl	8008968 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 8002186:	4909      	ldr	r1, [pc, #36]	; (80021ac <print_startup_msg+0x38>)
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <print_startup_msg+0x3c>)
 800218a:	f006 fbed 	bl	8008968 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 800218e:	4909      	ldr	r1, [pc, #36]	; (80021b4 <print_startup_msg+0x40>)
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <print_startup_msg+0x44>)
 8002192:	f006 fbe9 	bl	8008968 <iprintf>
  printf("******************************************\r\n");
 8002196:	4802      	ldr	r0, [pc, #8]	; (80021a0 <print_startup_msg+0x2c>)
 8002198:	f006 fc6c 	bl	8008a74 <puts>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	08009390 	.word	0x08009390
 80021a4:	080093bc 	.word	0x080093bc
 80021a8:	080093c8 	.word	0x080093c8
 80021ac:	080093e4 	.word	0x080093e4
 80021b0:	080093e8 	.word	0x080093e8
 80021b4:	08009408 	.word	0x08009408
 80021b8:	08009414 	.word	0x08009414

080021bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 80021c6:	f001 fc5b 	bl	8003a80 <HAL_GetTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_GPIO_EXTI_Callback+0x40>)
 80021ce:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_GPIO_EXTI_Callback+0x40>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_GPIO_EXTI_Callback+0x44>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2bfa      	cmp	r3, #250	; 0xfa
 80021dc:	d90a      	bls.n	80021f4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_GPIO_EXTI_Callback+0x48>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fac4 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GPIO_EXTI_Callback+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_GPIO_EXTI_Callback+0x44>)
 80021f2:	6013      	str	r3, [r2, #0]
	}


}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000318 	.word	0x20000318
 8002200:	2000031c 	.word	0x2000031c
 8002204:	200002ec 	.word	0x200002ec

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220e:	f001 fbce 	bl	80039ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002212:	f000 f907 	bl	8002424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002216:	f000 fa07 	bl	8002628 <MX_GPIO_Init>
  MX_DCMI_Init();
 800221a:	f000 f989 	bl	8002530 <MX_DCMI_Init>
  MX_DMA_Init();
 800221e:	f000 f9eb 	bl	80025f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002222:	f000 f9b9 	bl	8002598 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002226:	f000 f956 	bl	80024d6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 800222a:	2114      	movs	r1, #20
 800222c:	486f      	ldr	r0, [pc, #444]	; (80023ec <main+0x1e4>)
 800222e:	f7fe fa3d 	bl	80006ac <ring_buffer_init>
 8002232:	4603      	mov	r3, r0
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <main+0x1e8>)
 8002236:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 8002238:	f7ff ff9c 	bl	8002174 <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 800223c:	f7fe fe9c 	bl	8000f78 <BSP_IO_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  if(ret == IO_OK)  printf_dbg("Expander OK\r\n");
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d111      	bne.n	800226e <main+0x66>
 800224a:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <main+0x1ec>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	4618      	mov	r0, r3
 8002250:	f006 fb8a 	bl	8008968 <iprintf>
 8002254:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <main+0x1f0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f006 fb85 	bl	8008968 <iprintf>
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <main+0x1ec>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4618      	mov	r0, r3
 8002264:	f006 fb80 	bl	8008968 <iprintf>
 8002268:	4864      	ldr	r0, [pc, #400]	; (80023fc <main+0x1f4>)
 800226a:	f006 fc03 	bl	8008a74 <puts>

  BSP_CAMERA_Init(RESOLUTION_R320x240);
 800226e:	2001      	movs	r0, #1
 8002270:	f7fe fdb8 	bl	8000de4 <BSP_CAMERA_Init>
  if(ret == CAMERA_OK) printf_dbg("Camera OK\r\n");
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d111      	bne.n	800229e <main+0x96>
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <main+0x1ec>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	4618      	mov	r0, r3
 8002280:	f006 fb72 	bl	8008968 <iprintf>
 8002284:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <main+0x1f0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fb6d 	bl	8008968 <iprintf>
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <main+0x1ec>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4618      	mov	r0, r3
 8002294:	f006 fb68 	bl	8008968 <iprintf>
 8002298:	4859      	ldr	r0, [pc, #356]	; (8002400 <main+0x1f8>)
 800229a:	f006 fbeb 	bl	8008a74 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <main+0x1e8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4958      	ldr	r1, [pc, #352]	; (8002404 <main+0x1fc>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fa8d 	bl	80007c4 <ring_buffer_get>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8098 	beq.w	80023e2 <main+0x1da>
	  {

		  switch (IRQ_event) {
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <main+0x1fc>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	d07a      	beq.n	80023b2 <main+0x1aa>
 80022bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c0:	f300 8091 	bgt.w	80023e6 <main+0x1de>
 80022c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c8:	d05b      	beq.n	8002382 <main+0x17a>
 80022ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ce:	f300 808a 	bgt.w	80023e6 <main+0x1de>
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d03b      	beq.n	8002350 <main+0x148>
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022dc:	f300 8083 	bgt.w	80023e6 <main+0x1de>
 80022e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e4:	d003      	beq.n	80022ee <main+0xe6>
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d019      	beq.n	8002320 <main+0x118>
				printf_dbg("JOY_SEL was pressed!\r\n");
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle

				break;
			default:
				break;
 80022ec:	e07b      	b.n	80023e6 <main+0x1de>
				printf_dbg("JOY_UP was pressed!\r\n");
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <main+0x1ec>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 fb38 	bl	8008968 <iprintf>
 80022f8:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <main+0x1f0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 fb33 	bl	8008968 <iprintf>
 8002302:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <main+0x1ec>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4618      	mov	r0, r3
 8002308:	f006 fb2e 	bl	8008968 <iprintf>
 800230c:	483e      	ldr	r0, [pc, #248]	; (8002408 <main+0x200>)
 800230e:	f006 fbb1 	bl	8008a74 <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	483c      	ldr	r0, [pc, #240]	; (800240c <main+0x204>)
 800231a:	f002 fb3f 	bl	800499c <HAL_GPIO_WritePin>
				break;
 800231e:	e063      	b.n	80023e8 <main+0x1e0>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <main+0x1ec>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fb1f 	bl	8008968 <iprintf>
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <main+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f006 fb1a 	bl	8008968 <iprintf>
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <main+0x1ec>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4618      	mov	r0, r3
 800233a:	f006 fb15 	bl	8008968 <iprintf>
 800233e:	4834      	ldr	r0, [pc, #208]	; (8002410 <main+0x208>)
 8002340:	f006 fb98 	bl	8008a74 <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_RESET);   // ON
 8002344:	2200      	movs	r2, #0
 8002346:	2104      	movs	r1, #4
 8002348:	4832      	ldr	r0, [pc, #200]	; (8002414 <main+0x20c>)
 800234a:	f002 fb27 	bl	800499c <HAL_GPIO_WritePin>
				break;
 800234e:	e04b      	b.n	80023e8 <main+0x1e0>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <main+0x1ec>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4618      	mov	r0, r3
 8002356:	f006 fb07 	bl	8008968 <iprintf>
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <main+0x1f0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f006 fb02 	bl	8008968 <iprintf>
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <main+0x1ec>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4618      	mov	r0, r3
 800236a:	f006 fafd 	bl	8008968 <iprintf>
 800236e:	482a      	ldr	r0, [pc, #168]	; (8002418 <main+0x210>)
 8002370:	f006 fb80 	bl	8008a74 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237a:	4824      	ldr	r0, [pc, #144]	; (800240c <main+0x204>)
 800237c:	f002 fb0e 	bl	800499c <HAL_GPIO_WritePin>
				break;
 8002380:	e032      	b.n	80023e8 <main+0x1e0>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <main+0x1ec>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4618      	mov	r0, r3
 8002388:	f006 faee 	bl	8008968 <iprintf>
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <main+0x1f0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f006 fae9 	bl	8008968 <iprintf>
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <main+0x1ec>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4618      	mov	r0, r3
 800239c:	f006 fae4 	bl	8008968 <iprintf>
 80023a0:	481e      	ldr	r0, [pc, #120]	; (800241c <main+0x214>)
 80023a2:	f006 fb67 	bl	8008a74 <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_SET);    // 0FF
 80023a6:	2201      	movs	r2, #1
 80023a8:	2104      	movs	r1, #4
 80023aa:	481a      	ldr	r0, [pc, #104]	; (8002414 <main+0x20c>)
 80023ac:	f002 faf6 	bl	800499c <HAL_GPIO_WritePin>
				break;
 80023b0:	e01a      	b.n	80023e8 <main+0x1e0>
				printf_dbg("JOY_SEL was pressed!\r\n");
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <main+0x1ec>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f006 fad6 	bl	8008968 <iprintf>
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <main+0x1f0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f006 fad1 	bl	8008968 <iprintf>
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <main+0x1ec>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f006 facc 	bl	8008968 <iprintf>
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <main+0x218>)
 80023d2:	f006 fb4f 	bl	8008a74 <puts>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	480c      	ldr	r0, [pc, #48]	; (800240c <main+0x204>)
 80023dc:	f002 faf6 	bl	80049cc <HAL_GPIO_TogglePin>
				break;
 80023e0:	e002      	b.n	80023e8 <main+0x1e0>
		}

	  }
 80023e2:	bf00      	nop
 80023e4:	e75b      	b.n	800229e <main+0x96>
				break;
 80023e6:	bf00      	nop
  {
 80023e8:	e759      	b.n	800229e <main+0x96>
 80023ea:	bf00      	nop
 80023ec:	200002f0 	.word	0x200002f0
 80023f0:	200002ec 	.word	0x200002ec
 80023f4:	2000007c 	.word	0x2000007c
 80023f8:	2000009c 	.word	0x2000009c
 80023fc:	0800942c 	.word	0x0800942c
 8002400:	0800943c 	.word	0x0800943c
 8002404:	20000320 	.word	0x20000320
 8002408:	08009448 	.word	0x08009448
 800240c:	48000400 	.word	0x48000400
 8002410:	08009460 	.word	0x08009460
 8002414:	48001c00 	.word	0x48001c00
 8002418:	08009478 	.word	0x08009478
 800241c:	08009490 	.word	0x08009490
 8002420:	080094a8 	.word	0x080094a8

08002424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b096      	sub	sp, #88	; 0x58
 8002428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	2244      	movs	r2, #68	; 0x44
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fec2 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002446:	f44f 7000 	mov.w	r0, #512	; 0x200
 800244a:	f003 f9bb 	bl	80057c4 <HAL_PWREx_ControlVoltageScaling>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002454:	f000 fc2e 	bl	8002cb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002458:	2322      	movs	r3, #34	; 0x22
 800245a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002462:	2301      	movs	r3, #1
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246a:	2302      	movs	r3, #2
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800246e:	2302      	movs	r3, #2
 8002470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002476:	230a      	movs	r3, #10
 8002478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800247a:	2302      	movs	r3, #2
 800247c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800247e:	2302      	movs	r3, #2
 8002480:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002482:	2302      	movs	r3, #2
 8002484:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fa00 	bl	8005890 <HAL_RCC_OscConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002496:	f000 fc0d 	bl	8002cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2303      	movs	r3, #3
 80024a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	2104      	movs	r1, #4
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fe06 	bl	80060c4 <HAL_RCC_ClockConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024be:	f000 fbf9 	bl	8002cb4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80024c8:	2000      	movs	r0, #0
 80024ca:	f003 fefb 	bl	80062c4 <HAL_RCC_MCOConfig>
}
 80024ce:	bf00      	nop
 80024d0:	3758      	adds	r7, #88	; 0x58
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2055      	movs	r0, #85	; 0x55
 80024e0:	f001 fbfd 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80024e4:	2055      	movs	r0, #85	; 0x55
 80024e6:	f001 fc16 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2044      	movs	r0, #68	; 0x44
 80024f0:	f001 fbf5 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80024f4:	2044      	movs	r0, #68	; 0x44
 80024f6:	f001 fc0e 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2028      	movs	r0, #40	; 0x28
 8002500:	f001 fbed 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002504:	2028      	movs	r0, #40	; 0x28
 8002506:	f001 fc06 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2017      	movs	r0, #23
 8002510:	f001 fbe5 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002514:	2017      	movs	r0, #23
 8002516:	f001 fbfe 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2026      	movs	r0, #38	; 0x26
 8002520:	f001 fbdd 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002524:	2026      	movs	r0, #38	; 0x26
 8002526:	f001 fbf6 	bl	8003d16 <HAL_NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MX_DCMI_Init+0x60>)
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <MX_DCMI_Init+0x64>)
 8002538:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <MX_DCMI_Init+0x60>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_DCMI_Init+0x60>)
 8002542:	2220      	movs	r2, #32
 8002544:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_DCMI_Init+0x60>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_DCMI_Init+0x60>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_DCMI_Init+0x60>)
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <MX_DCMI_Init+0x60>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_DCMI_Init+0x60>)
 8002560:	2208      	movs	r2, #8
 8002562:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <MX_DCMI_Init+0x60>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_DCMI_Init+0x60>)
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <MX_DCMI_Init+0x60>)
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_DCMI_Init+0x60>)
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	; (8002590 <MX_DCMI_Init+0x60>)
 800257e:	f001 fbf3 	bl	8003d68 <HAL_DCMI_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002588:	f000 fb94 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200001bc 	.word	0x200001bc
 8002594:	50050000 	.word	0x50050000

08002598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <MX_USART2_UART_Init+0x5c>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_USART2_UART_Init+0x58>)
 80025dc:	f004 fc94 	bl	8006f08 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025e6:	f000 fb65 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000268 	.word	0x20000268
 80025f4:	40004400 	.word	0x40004400

080025f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_DMA_Init+0x2c>)
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <MX_DMA_Init+0x2c>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6493      	str	r3, [r2, #72]	; 0x48
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_DMA_Init+0x2c>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000

08002628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800263e:	4bb1      	ldr	r3, [pc, #708]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4ab0      	ldr	r2, [pc, #704]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4bae      	ldr	r3, [pc, #696]	; (8002904 <MX_GPIO_Init+0x2dc>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002656:	4bab      	ldr	r3, [pc, #684]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	4aaa      	ldr	r2, [pc, #680]	; (8002904 <MX_GPIO_Init+0x2dc>)
 800265c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002662:	4ba8      	ldr	r3, [pc, #672]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800266e:	4ba5      	ldr	r3, [pc, #660]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	4aa4      	ldr	r2, [pc, #656]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267a:	4ba2      	ldr	r3, [pc, #648]	; (8002904 <MX_GPIO_Init+0x2dc>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	4b9f      	ldr	r3, [pc, #636]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	4a9e      	ldr	r2, [pc, #632]	; (8002904 <MX_GPIO_Init+0x2dc>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002692:	4b9c      	ldr	r3, [pc, #624]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b99      	ldr	r3, [pc, #612]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	4a98      	ldr	r2, [pc, #608]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026aa:	4b96      	ldr	r3, [pc, #600]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026b6:	4b93      	ldr	r3, [pc, #588]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a92      	ldr	r2, [pc, #584]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c2:	4b90      	ldr	r3, [pc, #576]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80026ce:	f003 f8cf 	bl	8005870 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d2:	4b8c      	ldr	r3, [pc, #560]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	4a8b      	ldr	r2, [pc, #556]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026de:	4b89      	ldr	r3, [pc, #548]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b86      	ldr	r3, [pc, #536]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a85      	ldr	r2, [pc, #532]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b83      	ldr	r3, [pc, #524]	; (8002904 <MX_GPIO_Init+0x2dc>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002702:	4b80      	ldr	r3, [pc, #512]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a7f      	ldr	r2, [pc, #508]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <MX_GPIO_Init+0x2dc>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	2114      	movs	r1, #20
 800271e:	487a      	ldr	r0, [pc, #488]	; (8002908 <MX_GPIO_Init+0x2e0>)
 8002720:	f002 f93c 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	4878      	ldr	r0, [pc, #480]	; (800290c <MX_GPIO_Init+0x2e4>)
 800272a:	f002 f937 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	2143      	movs	r1, #67	; 0x43
 8002732:	4875      	ldr	r0, [pc, #468]	; (8002908 <MX_GPIO_Init+0x2e0>)
 8002734:	f002 f932 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	4874      	ldr	r0, [pc, #464]	; (8002910 <MX_GPIO_Init+0x2e8>)
 800273e:	f002 f92d 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 8002742:	2201      	movs	r2, #1
 8002744:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002748:	4872      	ldr	r0, [pc, #456]	; (8002914 <MX_GPIO_Init+0x2ec>)
 800274a:	f002 f927 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800274e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002754:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800275a:	2302      	movs	r3, #2
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800275e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002762:	4619      	mov	r1, r3
 8002764:	4869      	ldr	r0, [pc, #420]	; (800290c <MX_GPIO_Init+0x2e4>)
 8002766:	f001 fe95 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 800276a:	2304      	movs	r3, #4
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002776:	2302      	movs	r3, #2
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	4619      	mov	r1, r3
 8002780:	4861      	ldr	r0, [pc, #388]	; (8002908 <MX_GPIO_Init+0x2e0>)
 8002782:	f001 fe87 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D11_Pin D4_Pin
                           D10_Pin D9_Pin D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8002786:	f64f 7383 	movw	r3, #65411	; 0xff83
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002798:	230c      	movs	r3, #12
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	485d      	ldr	r0, [pc, #372]	; (8002918 <MX_GPIO_Init+0x2f0>)
 80027a4:	f001 fe76 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80027a8:	2330      	movs	r3, #48	; 0x30
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027b8:	2305      	movs	r3, #5
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	4854      	ldr	r0, [pc, #336]	; (8002914 <MX_GPIO_Init+0x2ec>)
 80027c4:	f001 fe66 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80027c8:	f248 0320 	movw	r3, #32800	; 0x8020
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027da:	2305      	movs	r3, #5
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4619      	mov	r1, r3
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e8:	f001 fe54 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80027ec:	2301      	movs	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	4842      	ldr	r0, [pc, #264]	; (800290c <MX_GPIO_Init+0x2e4>)
 8002804:	f001 fe46 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NE_Pin PSRAM_A11_Pin PSRAM_A10_Pin PSRAM_A15_Pin
                           PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A12_Pin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8002808:	f240 233f 	movw	r3, #575	; 0x23f
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800281a:	230c      	movs	r3, #12
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002822:	4619      	mov	r1, r3
 8002824:	483d      	ldr	r0, [pc, #244]	; (800291c <MX_GPIO_Init+0x2f4>)
 8002826:	f001 fe35 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin OE_Pin D3_Pin WE_Pin
                           LCD_NE_Pin D1_Pin D0_Pin PSRAM_A17_Pin
                           PSRAM_A16_Pin PSRAM_A18_LCD_RS_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800282a:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800283c:	230c      	movs	r3, #12
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002844:	4619      	mov	r1, r3
 8002846:	4836      	ldr	r0, [pc, #216]	; (8002920 <MX_GPIO_Init+0x2f8>)
 8002848:	f001 fe24 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800284c:	2340      	movs	r3, #64	; 0x40
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800285c:	2303      	movs	r3, #3
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4829      	ldr	r0, [pc, #164]	; (800290c <MX_GPIO_Init+0x2e4>)
 8002868:	f001 fe14 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800286c:	2306      	movs	r3, #6
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800287c:	2305      	movs	r3, #5
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	4821      	ldr	r0, [pc, #132]	; (800290c <MX_GPIO_Init+0x2e4>)
 8002888:	f001 fe04 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800288c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800289e:	2303      	movs	r3, #3
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	4817      	ldr	r0, [pc, #92]	; (8002908 <MX_GPIO_Init+0x2e0>)
 80028aa:	f001 fdf3 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80028ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b4:	2312      	movs	r3, #18
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b8:	2301      	movs	r3, #1
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028c0:	2304      	movs	r3, #4
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <MX_GPIO_Init+0x2ec>)
 80028cc:	f001 fde2 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e0:	2307      	movs	r3, #7
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e8:	4619      	mov	r1, r3
 80028ea:	480a      	ldr	r0, [pc, #40]	; (8002914 <MX_GPIO_Init+0x2ec>)
 80028ec:	f001 fdd2 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80028f0:	235c      	movs	r3, #92	; 0x5c
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002900:	230d      	movs	r3, #13
 8002902:	e00f      	b.n	8002924 <MX_GPIO_Init+0x2fc>
 8002904:	40021000 	.word	0x40021000
 8002908:	48001c00 	.word	0x48001c00
 800290c:	48002000 	.word	0x48002000
 8002910:	48000800 	.word	0x48000800
 8002914:	48000400 	.word	0x48000400
 8002918:	48001000 	.word	0x48001000
 800291c:	48001800 	.word	0x48001800
 8002920:	48000c00 	.word	0x48000c00
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	4619      	mov	r1, r3
 800292c:	48bf      	ldr	r0, [pc, #764]	; (8002c2c <MX_GPIO_Init+0x604>)
 800292e:	f001 fdb1 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002944:	2302      	movs	r3, #2
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	48b8      	ldr	r0, [pc, #736]	; (8002c30 <MX_GPIO_Init+0x608>)
 8002950:	f001 fda0 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8002954:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002966:	2307      	movs	r3, #7
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800296a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296e:	4619      	mov	r1, r3
 8002970:	48b0      	ldr	r0, [pc, #704]	; (8002c34 <MX_GPIO_Init+0x60c>)
 8002972:	f001 fd8f 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002976:	2304      	movs	r3, #4
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002986:	230c      	movs	r3, #12
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298e:	4619      	mov	r1, r3
 8002990:	48a9      	ldr	r0, [pc, #676]	; (8002c38 <MX_GPIO_Init+0x610>)
 8002992:	f001 fd7f 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8002996:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80029a8:	230c      	movs	r3, #12
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	48a2      	ldr	r0, [pc, #648]	; (8002c3c <MX_GPIO_Init+0x614>)
 80029b4:	f001 fd6e 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	489d      	ldr	r0, [pc, #628]	; (8002c40 <MX_GPIO_Init+0x618>)
 80029cc:	f001 fd62 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80029d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029e2:	230a      	movs	r3, #10
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f001 fd50 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80029f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	488c      	ldr	r0, [pc, #560]	; (8002c3c <MX_GPIO_Init+0x614>)
 8002a0c:	f001 fd42 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8002a10:	2343      	movs	r3, #67	; 0x43
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a24:	4619      	mov	r1, r3
 8002a26:	4886      	ldr	r0, [pc, #536]	; (8002c40 <MX_GPIO_Init+0x618>)
 8002a28:	f001 fd34 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8002a2c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4619      	mov	r1, r3
 8002a48:	487e      	ldr	r0, [pc, #504]	; (8002c44 <MX_GPIO_Init+0x61c>)
 8002a4a:	f001 fd23 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8002a4e:	2340      	movs	r3, #64	; 0x40
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8002a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4875      	ldr	r0, [pc, #468]	; (8002c3c <MX_GPIO_Init+0x614>)
 8002a66:	f001 fd15 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8002a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	486c      	ldr	r0, [pc, #432]	; (8002c34 <MX_GPIO_Init+0x60c>)
 8002a82:	f001 fd07 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa6:	f001 fcf5 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8002aaa:	2384      	movs	r3, #132	; 0x84
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002aba:	2306      	movs	r3, #6
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	485d      	ldr	r0, [pc, #372]	; (8002c3c <MX_GPIO_Init+0x614>)
 8002ac6:	f001 fce5 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8002aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ad0:	230b      	movs	r3, #11
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	4859      	ldr	r0, [pc, #356]	; (8002c44 <MX_GPIO_Init+0x61c>)
 8002ae0:	f001 fcd8 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8002ae4:	231b      	movs	r3, #27
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ae8:	230b      	movs	r3, #11
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af4:	4619      	mov	r1, r3
 8002af6:	4851      	ldr	r0, [pc, #324]	; (8002c3c <MX_GPIO_Init+0x614>)
 8002af8:	f001 fccc 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002afc:	f640 0303 	movw	r3, #2051	; 0x803
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b0e:	230a      	movs	r3, #10
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	4619      	mov	r1, r3
 8002b18:	4845      	ldr	r0, [pc, #276]	; (8002c30 <MX_GPIO_Init+0x608>)
 8002b1a:	f001 fcbb 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002b1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b30:	2308      	movs	r3, #8
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	483e      	ldr	r0, [pc, #248]	; (8002c34 <MX_GPIO_Init+0x60c>)
 8002b3c:	f001 fcaa 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8002b40:	2320      	movs	r3, #32
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	4839      	ldr	r0, [pc, #228]	; (8002c3c <MX_GPIO_Init+0x614>)
 8002b56:	f001 fc9d 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b5e:	2311      	movs	r3, #17
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4833      	ldr	r0, [pc, #204]	; (8002c40 <MX_GPIO_Init+0x618>)
 8002b72:	f001 fc8f 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8002b76:	2312      	movs	r3, #18
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b7a:	230b      	movs	r3, #11
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f001 fc82 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8002b90:	23c8      	movs	r3, #200	; 0xc8
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bae:	f001 fc71 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8002bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	481e      	ldr	r0, [pc, #120]	; (8002c44 <MX_GPIO_Init+0x61c>)
 8002bca:	f001 fc63 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002be0:	2305      	movs	r3, #5
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4811      	ldr	r0, [pc, #68]	; (8002c30 <MX_GPIO_Init+0x608>)
 8002bec:	f001 fc52 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8002bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002bf6:	2311      	movs	r3, #17
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <MX_GPIO_Init+0x608>)
 8002c0a:	f001 fc43 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4803      	ldr	r0, [pc, #12]	; (8002c30 <MX_GPIO_Init+0x608>)
 8002c22:	f001 fc37 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2a:	e00d      	b.n	8002c48 <MX_GPIO_Init+0x620>
 8002c2c:	48001000 	.word	0x48001000
 8002c30:	48000400 	.word	0x48000400
 8002c34:	48001800 	.word	0x48001800
 8002c38:	48000c00 	.word	0x48000c00
 8002c3c:	48000800 	.word	0x48000800
 8002c40:	48001c00 	.word	0x48001c00
 8002c44:	48001400 	.word	0x48001400
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002c56:	230d      	movs	r3, #13
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4813      	ldr	r0, [pc, #76]	; (8002cb0 <MX_GPIO_Init+0x688>)
 8002c62:	f001 fc17 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002c78:	2306      	movs	r3, #6
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <MX_GPIO_Init+0x688>)
 8002c84:	f001 fc06 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c8e:	2311      	movs	r3, #17
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <MX_GPIO_Init+0x688>)
 8002ca2:	f001 fbf7 	bl	8004494 <HAL_GPIO_Init>

}
 8002ca6:	bf00      	nop
 8002ca8:	3738      	adds	r7, #56	; 0x38
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	48000400 	.word	0x48000400

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <Error_Handler+0x30>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 fe53 	bl	8008968 <iprintf>
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <Error_Handler+0x34>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f005 fe4e 	bl	8008968 <iprintf>
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <Error_Handler+0x30>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f005 fe49 	bl	8008968 <iprintf>
 8002cd6:	4805      	ldr	r0, [pc, #20]	; (8002cec <Error_Handler+0x38>)
 8002cd8:	f005 fe46 	bl	8008968 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cdc:	b672      	cpsid	i
}
 8002cde:	bf00      	nop
  __disable_irq();
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <Error_Handler+0x2c>
 8002ce2:	bf00      	nop
 8002ce4:	2000007c 	.word	0x2000007c
 8002ce8:	2000009c 	.word	0x2000009c
 8002cec:	080094c0 	.word	0x080094c0

08002cf0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]

  if (pObj == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <OV5640_RegisterBusIO+0x16>
  {
    return OV5640_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	e016      	b.n	8002d34 <OV5640_RegisterBusIO+0x44>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	891a      	ldrh	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	811a      	strh	r2, [r3, #8]

    if (pObj->IO.Init != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <OV5640_RegisterBusIO+0x40>
    {
      pObj->IO.Init();
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4798      	blx	r3
      return OV5640_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e001      	b.n	8002d34 <OV5640_RegisterBusIO+0x44>
    }

  }

  return OV5640_ERROR;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };


  if (pObj->IsInitialized == 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d15a      	bne.n	8002e0c <OV5640_Init+0xd0>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d80e      	bhi.n	8002d7a <OV5640_Init+0x3e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00f      	beq.n	8002d82 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d00c      	beq.n	8002d82 <OV5640_Init+0x46>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d009      	beq.n	8002d82 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b07      	cmp	r3, #7
 8002d72:	d006      	beq.n	8002d82 <OV5640_Init+0x46>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d003      	beq.n	8002d82 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e044      	b.n	8002e0c <OV5640_Init+0xd0>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e014      	b.n	8002db2 <OV5640_Init+0x76>
      {
        if (ret != OV5640_ERROR)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d00d      	beq.n	8002dac <OV5640_Init+0x70>
        {

          I2C2_WriteData(OV5640_ADDR, OV5640_Common[index][0], 2, (uint8_t)OV5640_Common[index][1]);
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <OV5640_Init+0xdc>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <OV5640_Init+0xdc>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	885b      	ldrh	r3, [r3, #2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2202      	movs	r2, #2
 8002da6:	2078      	movs	r0, #120	; 0x78
 8002da8:	f7fd fe54 	bl	8000a54 <I2C2_WriteData>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2bfd      	cmp	r3, #253	; 0xfd
 8002db6:	d9e7      	bls.n	8002d88 <OV5640_Init+0x4c>

        }
      }

      if (ret == OV5640_OK)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d126      	bne.n	8002e0c <OV5640_Init+0xd0>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f9af 	bl	8003124 <OV5640_SetResolution>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <OV5640_Init+0x98>
        {
          ret = OV5640_ERROR;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	e01b      	b.n	8002e0c <OV5640_Init+0xd0>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f820 	bl	8002e1c <OV5640_SetPixelFormat>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e010      	b.n	8002e0c <OV5640_Init+0xd0>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8002dea:	2300      	movs	r3, #0
 8002dec:	2201      	movs	r2, #1
 8002dee:	2101      	movs	r1, #1
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fa83 	bl	80032fc <OV5640_SetPolarities>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <OV5640_Init+0xc8>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e003      	b.n	8002e0c <OV5640_Init+0xd0>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8002e0c:	693b      	ldr	r3, [r7, #16]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08009568 	.word	0x08009568

08002e1c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00f      	beq.n	8002e50 <OV5640_SetPixelFormat+0x34>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d00c      	beq.n	8002e50 <OV5640_SetPixelFormat+0x34>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d009      	beq.n	8002e50 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b07      	cmp	r3, #7
 8002e40:	d006      	beq.n	8002e50 <OV5640_SetPixelFormat+0x34>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d003      	beq.n	8002e50 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e15a      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	f200 80c3 	bhi.w	8002fe0 <OV5640_SetPixelFormat+0x1c4>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <OV5640_SetPixelFormat+0x44>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002ed9 	.word	0x08002ed9
 8002e64:	08002e81 	.word	0x08002e81
 8002e68:	08002fe1 	.word	0x08002fe1
 8002e6c:	08002fe1 	.word	0x08002fe1
 8002e70:	08002fe1 	.word	0x08002fe1
 8002e74:	08002fe1 	.word	0x08002fe1
 8002e78:	08002f31 	.word	0x08002f31
 8002e7c:	08002f89 	.word	0x08002f89
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e024      	b.n	8002ed0 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d01d      	beq.n	8002eca <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8002e8e:	4aa0      	ldr	r2, [pc, #640]	; (8003110 <OV5640_SetPixelFormat+0x2f4>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	885b      	ldrh	r3, [r3, #2]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f103 0018 	add.w	r0, r3, #24
 8002ea2:	4a9b      	ldr	r2, [pc, #620]	; (8003110 <OV5640_SetPixelFormat+0x2f4>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002eaa:	f107 020f 	add.w	r2, r7, #15
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f000 fabf 	bl	8003432 <ov5640_write_reg>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e003      	b.n	8002eca <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fa83 	bl	80033d0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d9d7      	bls.n	8002e86 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8002ed6:	e09f      	b.n	8003018 <OV5640_SetPixelFormat+0x1fc>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e024      	b.n	8002f28 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d01d      	beq.n	8002f22 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8002ee6:	4a8b      	ldr	r2, [pc, #556]	; (8003114 <OV5640_SetPixelFormat+0x2f8>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	885b      	ldrh	r3, [r3, #2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f103 0018 	add.w	r0, r3, #24
 8002efa:	4a86      	ldr	r2, [pc, #536]	; (8003114 <OV5640_SetPixelFormat+0x2f8>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002f02:	f107 020f 	add.w	r2, r7, #15
 8002f06:	2301      	movs	r3, #1
 8002f08:	f000 fa93 	bl	8003432 <ov5640_write_reg>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e003      	b.n	8002f22 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fa57 	bl	80033d0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	3301      	adds	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d9d7      	bls.n	8002ede <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8002f2e:	e073      	b.n	8003018 <OV5640_SetPixelFormat+0x1fc>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e024      	b.n	8002f80 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d01d      	beq.n	8002f7a <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8002f3e:	4a76      	ldr	r2, [pc, #472]	; (8003118 <OV5640_SetPixelFormat+0x2fc>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	885b      	ldrh	r3, [r3, #2]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f103 0018 	add.w	r0, r3, #24
 8002f52:	4a71      	ldr	r2, [pc, #452]	; (8003118 <OV5640_SetPixelFormat+0x2fc>)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002f5a:	f107 020f 	add.w	r2, r7, #15
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f000 fa67 	bl	8003432 <ov5640_write_reg>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e003      	b.n	8002f7a <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002f72:	2101      	movs	r1, #1
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fa2b 	bl	80033d0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d9d7      	bls.n	8002f36 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8002f86:	e047      	b.n	8003018 <OV5640_SetPixelFormat+0x1fc>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e024      	b.n	8002fd8 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d01d      	beq.n	8002fd2 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8002f96:	4a61      	ldr	r2, [pc, #388]	; (800311c <OV5640_SetPixelFormat+0x300>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	885b      	ldrh	r3, [r3, #2]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f103 0018 	add.w	r0, r3, #24
 8002faa:	4a5c      	ldr	r2, [pc, #368]	; (800311c <OV5640_SetPixelFormat+0x300>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002fb2:	f107 020f 	add.w	r2, r7, #15
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f000 fa3b 	bl	8003432 <ov5640_write_reg>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e003      	b.n	8002fd2 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f9ff 	bl	80033d0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d9d7      	bls.n	8002f8e <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8002fde:	e01b      	b.n	8003018 <OV5640_SetPixelFormat+0x1fc>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e014      	b.n	8003010 <OV5640_SetPixelFormat+0x1f4>
        {
          if (ret != OV5640_ERROR)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d00d      	beq.n	800300a <OV5640_SetPixelFormat+0x1ee>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB565[index][0], 2, (uint8_t)OV5640_PF_RGB565[index][1]);
 8002fee:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <OV5640_SetPixelFormat+0x304>)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <OV5640_SetPixelFormat+0x304>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	885b      	ldrh	r3, [r3, #2]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2202      	movs	r2, #2
 8003004:	2078      	movs	r0, #120	; 0x78
 8003006:	f7fd fd25 	bl	8000a54 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3301      	adds	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d9e7      	bls.n	8002fe6 <OV5640_SetPixelFormat+0x1ca>
          }
        }
        break;
 8003016:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d173      	bne.n	8003106 <OV5640_SetPixelFormat+0x2ea>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f103 0018 	add.w	r0, r3, #24
 8003024:	f107 020f 	add.w	r2, r7, #15
 8003028:	2301      	movs	r3, #1
 800302a:	f643 0121 	movw	r1, #14369	; 0x3821
 800302e:	f000 f9e9 	bl	8003404 <ov5640_read_reg>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <OV5640_SetPixelFormat+0x224>
      {
        ret = OV5640_ERROR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e062      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
      }
      else
      {
        tmp |= (1 << 5);
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	f043 0320 	orr.w	r3, r3, #32
 8003046:	b2db      	uxtb	r3, r3
 8003048:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f103 0018 	add.w	r0, r3, #24
 8003050:	f107 020f 	add.w	r2, r7, #15
 8003054:	2301      	movs	r3, #1
 8003056:	f643 0121 	movw	r1, #14369	; 0x3821
 800305a:	f000 f9ea 	bl	8003432 <ov5640_write_reg>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <OV5640_SetPixelFormat+0x250>
        {
          ret = OV5640_ERROR;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e04c      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f103 0018 	add.w	r0, r3, #24
 8003072:	f107 020f 	add.w	r2, r7, #15
 8003076:	2301      	movs	r3, #1
 8003078:	f243 0102 	movw	r1, #12290	; 0x3002
 800307c:	f000 f9c2 	bl	8003404 <ov5640_read_reg>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <OV5640_SetPixelFormat+0x272>
          {
            ret = OV5640_ERROR;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e03b      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	f023 031c 	bic.w	r3, r3, #28
 8003094:	b2db      	uxtb	r3, r3
 8003096:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f103 0018 	add.w	r0, r3, #24
 800309e:	f107 020f 	add.w	r2, r7, #15
 80030a2:	2301      	movs	r3, #1
 80030a4:	f243 0102 	movw	r1, #12290	; 0x3002
 80030a8:	f000 f9c3 	bl	8003432 <ov5640_write_reg>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <OV5640_SetPixelFormat+0x29e>
            {
              ret = OV5640_ERROR;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e025      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f103 0018 	add.w	r0, r3, #24
 80030c0:	f107 020f 	add.w	r2, r7, #15
 80030c4:	2301      	movs	r3, #1
 80030c6:	f243 0106 	movw	r1, #12294	; 0x3006
 80030ca:	f000 f99b 	bl	8003404 <ov5640_read_reg>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <OV5640_SetPixelFormat+0x2c0>
              {
                ret = OV5640_ERROR;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e014      	b.n	8003106 <OV5640_SetPixelFormat+0x2ea>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f103 0018 	add.w	r0, r3, #24
 80030ec:	f107 020f 	add.w	r2, r7, #15
 80030f0:	2301      	movs	r3, #1
 80030f2:	f243 0106 	movw	r1, #12294	; 0x3006
 80030f6:	f000 f99c 	bl	8003432 <ov5640_write_reg>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <OV5640_SetPixelFormat+0x2ea>
                {
                  ret = OV5640_ERROR;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8003106:	697b      	ldr	r3, [r7, #20]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08009960 	.word	0x08009960
 8003114:	08009968 	.word	0x08009968
 8003118:	08009970 	.word	0x08009970
 800311c:	08009978 	.word	0x08009978
 8003120:	08009980 	.word	0x08009980

08003124 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d903      	bls.n	8003140 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e0cd      	b.n	80032dc <OV5640_SetResolution+0x1b8>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	f200 80c6 	bhi.w	80032d4 <OV5640_SetResolution+0x1b0>
 8003148:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <OV5640_SetResolution+0x2c>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003165 	.word	0x08003165
 8003154:	080031b3 	.word	0x080031b3
 8003158:	080031eb 	.word	0x080031eb
 800315c:	08003239 	.word	0x08003239
 8003160:	08003287 	.word	0x08003287
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e01f      	b.n	80031aa <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d018      	beq.n	80031a4 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003172:	4a5d      	ldr	r2, [pc, #372]	; (80032e8 <OV5640_SetResolution+0x1c4>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	885b      	ldrh	r3, [r3, #2]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0018 	add.w	r0, r3, #24
 8003186:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <OV5640_SetResolution+0x1c4>)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800318e:	f107 020f 	add.w	r2, r7, #15
 8003192:	2301      	movs	r3, #1
 8003194:	f000 f94d 	bl	8003432 <ov5640_write_reg>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3301      	adds	r3, #1
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d9dc      	bls.n	800316a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80031b0:	e094      	b.n	80032dc <OV5640_SetResolution+0x1b8>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e014      	b.n	80031e2 <OV5640_SetResolution+0xbe>
        {
          if (ret != OV5640_ERROR)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d00d      	beq.n	80031dc <OV5640_SetResolution+0xb8>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_QVGA[index][0], 2, (uint8_t)OV5640_QVGA[index][1]);
 80031c0:	4a4a      	ldr	r2, [pc, #296]	; (80032ec <OV5640_SetResolution+0x1c8>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80031c8:	4a48      	ldr	r2, [pc, #288]	; (80032ec <OV5640_SetResolution+0x1c8>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	885b      	ldrh	r3, [r3, #2]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2202      	movs	r2, #2
 80031d6:	2078      	movs	r0, #120	; 0x78
 80031d8:	f7fd fc3c 	bl	8000a54 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3301      	adds	r3, #1
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d9e7      	bls.n	80031b8 <OV5640_SetResolution+0x94>

          }
        }
        break;
 80031e8:	e078      	b.n	80032dc <OV5640_SetResolution+0x1b8>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e01f      	b.n	8003230 <OV5640_SetResolution+0x10c>
        {
          if (ret != OV5640_ERROR)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d018      	beq.n	800322a <OV5640_SetResolution+0x106>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80031f8:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <OV5640_SetResolution+0x1cc>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f103 0018 	add.w	r0, r3, #24
 800320c:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <OV5640_SetResolution+0x1cc>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003214:	f107 020f 	add.w	r2, r7, #15
 8003218:	2301      	movs	r3, #1
 800321a:	f000 f90a 	bl	8003432 <ov5640_write_reg>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <OV5640_SetResolution+0x106>
            {
              ret = OV5640_ERROR;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3301      	adds	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d9dc      	bls.n	80031f0 <OV5640_SetResolution+0xcc>
            }
          }
        }
        break;
 8003236:	e051      	b.n	80032dc <OV5640_SetResolution+0x1b8>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e01f      	b.n	800327e <OV5640_SetResolution+0x15a>
        {
          if (ret != OV5640_ERROR)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d018      	beq.n	8003278 <OV5640_SetResolution+0x154>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003246:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <OV5640_SetResolution+0x1d0>)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	885b      	ldrh	r3, [r3, #2]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f103 0018 	add.w	r0, r3, #24
 800325a:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <OV5640_SetResolution+0x1d0>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003262:	f107 020f 	add.w	r2, r7, #15
 8003266:	2301      	movs	r3, #1
 8003268:	f000 f8e3 	bl	8003432 <ov5640_write_reg>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <OV5640_SetResolution+0x154>
            {
              ret = OV5640_ERROR;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	3301      	adds	r3, #1
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d9dc      	bls.n	800323e <OV5640_SetResolution+0x11a>
            }
          }
        }
        break;
 8003284:	e02a      	b.n	80032dc <OV5640_SetResolution+0x1b8>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e01f      	b.n	80032cc <OV5640_SetResolution+0x1a8>
        {
          if (ret != OV5640_ERROR)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d018      	beq.n	80032c6 <OV5640_SetResolution+0x1a2>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <OV5640_SetResolution+0x1d4>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	885b      	ldrh	r3, [r3, #2]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f103 0018 	add.w	r0, r3, #24
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <OV5640_SetResolution+0x1d4>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80032b0:	f107 020f 	add.w	r2, r7, #15
 80032b4:	2301      	movs	r3, #1
 80032b6:	f000 f8bc 	bl	8003432 <ov5640_write_reg>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <OV5640_SetResolution+0x1a2>
            {
              ret = OV5640_ERROR;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3301      	adds	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d9dc      	bls.n	800328c <OV5640_SetResolution+0x168>
            }
          }
        }
        break;
 80032d2:	e003      	b.n	80032dc <OV5640_SetResolution+0x1b8>
      default:
        ret = OV5640_ERROR;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	617b      	str	r3, [r7, #20]
        break;
 80032da:	bf00      	nop
    }
  }

  return ret;
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	08009988 	.word	0x08009988
 80032ec:	08009998 	.word	0x08009998
 80032f0:	080099a8 	.word	0x080099a8
 80032f4:	080099b8 	.word	0x080099b8
 80032f8:	080099c8 	.word	0x080099c8

080032fc <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d011      	beq.n	8003338 <OV5640_SetPolarities+0x3c>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <OV5640_SetPolarities+0x24>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10b      	bne.n	8003338 <OV5640_SetPolarities+0x3c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <OV5640_SetPolarities+0x3c>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d006      	beq.n	8003340 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e014      	b.n	800336a <OV5640_SetPolarities+0x6e>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	015b      	lsls	r3, r3, #5
 8003346:	b2da      	uxtb	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	b2da      	uxtb	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	74fb      	strb	r3, [r7, #19]
    I2C2_WriteData(OV5640_ADDR, OV5640_POLARITY_CTRL, 2, tmp);
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2202      	movs	r2, #2
 8003360:	f244 7140 	movw	r1, #18240	; 0x4740
 8003364:	2078      	movs	r0, #120	; 0x78
 8003366:	f7fd fb75 	bl	8000a54 <I2C2_WriteData>

  }

  return ret;
 800336a:	697b      	ldr	r3, [r7, #20]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint16_t reg;

  /* Initialize I2C */
  pObj->IO.Init();
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4798      	blx	r3

  /* Prepare the camera to be configured */
  I2C2_WriteData(OV5640_ADDR, OV5640_SYSTEM_CTROL0, 2,0x80);
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	2202      	movs	r2, #2
 8003388:	f243 0108 	movw	r1, #12296	; 0x3008
 800338c:	2078      	movs	r0, #120	; 0x78
 800338e:	f7fd fb61 	bl	8000a54 <I2C2_WriteData>
  HAL_Delay(500);
 8003392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003396:	f000 fb7f 	bl	8003a98 <HAL_Delay>

  reg = I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_HIGH_BYTE, 2);
 800339a:	2202      	movs	r2, #2
 800339c:	f243 010a 	movw	r1, #12298	; 0x300a
 80033a0:	2078      	movs	r0, #120	; 0x78
 80033a2:	f7fd fb89 	bl	8000ab8 <I2C2_ReadData>
 80033a6:	4603      	mov	r3, r0
 80033a8:	81fb      	strh	r3, [r7, #14]
  reg <<= 8;
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	81fb      	strh	r3, [r7, #14]
  reg |= I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_LOW_BYTE, 2);
 80033b0:	2202      	movs	r2, #2
 80033b2:	f243 010b 	movw	r1, #12299	; 0x300b
 80033b6:	2078      	movs	r0, #120	; 0x78
 80033b8:	f7fd fb7e 	bl	8000ab8 <I2C2_ReadData>
 80033bc:	4603      	mov	r3, r0
 80033be:	b29a      	uxth	r2, r3
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	81fb      	strh	r3, [r7, #14]

 return reg;
 80033c6:	89fb      	ldrh	r3, [r7, #14]

}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4798      	blx	r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80033e4:	bf00      	nop
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4798      	blx	r3
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d8f5      	bhi.n	80033e6 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	460b      	mov	r3, r1
 8003412:	817b      	strh	r3, [r7, #10]
 8003414:	4613      	mov	r3, r2
 8003416:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685c      	ldr	r4, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6898      	ldr	r0, [r3, #8]
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	47a0      	blx	r4
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}

08003432 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003432:	b590      	push	{r4, r7, lr}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	460b      	mov	r3, r1
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	4613      	mov	r3, r2
 8003444:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6898      	ldr	r0, [r3, #8]
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	47a0      	blx	r4
 8003456:	4603      	mov	r3, r0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bd90      	pop	{r4, r7, pc}

08003460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_MspInit+0x44>)
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_MspInit+0x44>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6613      	str	r3, [r2, #96]	; 0x60
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_MspInit+0x44>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_MspInit+0x44>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_MspInit+0x44>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6593      	str	r3, [r2, #88]	; 0x58
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_MspInit+0x44>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_DCMI_MspInit+0x148>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f040 808d 	bne.w	80035e6 <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80034cc:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d0:	4a48      	ldr	r2, [pc, #288]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	4a42      	ldr	r2, [pc, #264]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 8003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003514:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 800351a:	f043 0310 	orr.w	r3, r3, #16
 800351e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003520:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_DCMI_MspInit+0x14c>)
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 800352c:	f645 7320 	movw	r3, #24352	; 0x5f20
 8003530:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353a:	2302      	movs	r3, #2
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800353e:	230a      	movs	r3, #10
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003542:	f107 031c 	add.w	r3, r7, #28
 8003546:	4619      	mov	r1, r3
 8003548:	482b      	ldr	r0, [pc, #172]	; (80035f8 <HAL_DCMI_MspInit+0x150>)
 800354a:	f000 ffa3 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800354e:	23b0      	movs	r3, #176	; 0xb0
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800355a:	2302      	movs	r3, #2
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800355e:	230a      	movs	r3, #10
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003562:	f107 031c 	add.w	r3, r7, #28
 8003566:	4619      	mov	r1, r3
 8003568:	4824      	ldr	r0, [pc, #144]	; (80035fc <HAL_DCMI_MspInit+0x154>)
 800356a:	f000 ff93 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800356e:	2320      	movs	r3, #32
 8003570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800357a:	2302      	movs	r3, #2
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800357e:	230a      	movs	r3, #10
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8003582:	f107 031c 	add.w	r3, r7, #28
 8003586:	4619      	mov	r1, r3
 8003588:	481d      	ldr	r0, [pc, #116]	; (8003600 <HAL_DCMI_MspInit+0x158>)
 800358a:	f000 ff83 	bl	8004494 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_DCMI_MspInit+0x160>)
 8003592:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 8003596:	2200      	movs	r2, #0
 8003598:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ba:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035be:	2220      	movs	r2, #32
 80035c0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80035c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80035ca:	480e      	ldr	r0, [pc, #56]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035cc:	f000 fd7c 	bl	80040c8 <HAL_DMA_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 80035d6:	f7ff fb6d 	bl	8002cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035de:	651a      	str	r2, [r3, #80]	; 0x50
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_DCMI_MspInit+0x15c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80035e6:	bf00      	nop
 80035e8:	3730      	adds	r7, #48	; 0x30
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	50050000 	.word	0x50050000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	48001c00 	.word	0x48001c00
 80035fc:	48002000 	.word	0x48002000
 8003600:	48001000 	.word	0x48001000
 8003604:	20000220 	.word	0x20000220
 8003608:	4002046c 	.word	0x4002046c

0800360c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0ae      	sub	sp, #184	; 0xb8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003624:	f107 0318 	add.w	r3, r7, #24
 8003628:	228c      	movs	r2, #140	; 0x8c
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f004 fdc5 	bl	80081bc <memset>
  if(huart->Instance==USART2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a32      	ldr	r2, [pc, #200]	; (8003700 <HAL_UART_MspInit+0xf4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d15c      	bne.n	80036f6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800363c:	2302      	movs	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003640:	2300      	movs	r3, #0
 8003642:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003644:	f107 0318 	add.w	r3, r7, #24
 8003648:	4618      	mov	r0, r3
 800364a:	f002 ff93 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003654:	f7ff fb2e 	bl	8002cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003658:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_UART_MspInit+0xf8>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_UART_MspInit+0xf8>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	6593      	str	r3, [r2, #88]	; 0x58
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_UART_MspInit+0xf8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_UART_MspInit+0xf8>)
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_UART_MspInit+0xf8>)
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_UART_MspInit+0xf8>)
 800367e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_UART_MspInit+0xf8>)
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_UART_MspInit+0xf8>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_UART_MspInit+0xf8>)
 8003696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80036a0:	2340      	movs	r3, #64	; 0x40
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036b8:	2307      	movs	r3, #7
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80036be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4810      	ldr	r0, [pc, #64]	; (8003708 <HAL_UART_MspInit+0xfc>)
 80036c6:	f000 fee5 	bl	8004494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80036ca:	2304      	movs	r3, #4
 80036cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036e2:	2307      	movs	r3, #7
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80036e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ec:	4619      	mov	r1, r3
 80036ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f2:	f000 fecf 	bl	8004494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036f6:	bf00      	nop
 80036f8:	37b8      	adds	r7, #184	; 0xb8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40004400 	.word	0x40004400
 8003704:	40021000 	.word	0x40021000
 8003708:	48000c00 	.word	0x48000c00

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <NMI_Handler+0x4>

08003712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <HardFault_Handler+0x4>

08003718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800371c:	e7fe      	b.n	800371c <MemManage_Handler+0x4>

0800371e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <UsageFault_Handler+0x4>

0800372a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003758:	f000 f97e 	bl	8003a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}

08003760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8003764:	2020      	movs	r0, #32
 8003766:	f001 f94b 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 800376a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800376e:	f001 f947 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 8003772:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003776:	f001 f943 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <USART2_IRQHandler+0x10>)
 8003786:	f003 fca1 	bl	80070cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000268 	.word	0x20000268

08003794 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8003798:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800379c:	f001 f930 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 80037a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80037a4:	f001 f92c 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 80037a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037ac:	f001 f928 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80037b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80037b4:	f001 f924 	bl	8004a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}

080037bc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <DMA2_Channel6_IRQHandler+0x10>)
 80037c2:	f000 fdb8 	bl	8004336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000220 	.word	0x20000220

080037d0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <DCMI_IRQHandler+0x10>)
 80037d6:	f000 fb4d 	bl	8003e74 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001bc 	.word	0x200001bc

080037e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	return 1;
 80037e8:	2301      	movs	r3, #1
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_kill>:

int _kill(int pid, int sig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037fe:	f004 fc99 	bl	8008134 <__errno>
 8003802:	4603      	mov	r3, r0
 8003804:	2216      	movs	r2, #22
 8003806:	601a      	str	r2, [r3, #0]
	return -1;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_exit>:

void _exit (int status)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffe7 	bl	80037f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003826:	e7fe      	b.n	8003826 <_exit+0x12>

08003828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e00a      	b.n	8003850 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800383a:	f3af 8000 	nop.w
 800383e:	4601      	mov	r1, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	60ba      	str	r2, [r7, #8]
 8003846:	b2ca      	uxtb	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	dbf0      	blt.n	800383a <_read+0x12>
	}

return len;
 8003858:	687b      	ldr	r3, [r7, #4]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	return -1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800388a:	605a      	str	r2, [r3, #4]
	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_isatty>:

int _isatty(int file)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	return 1;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <_sbrk+0x5c>)
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <_sbrk+0x60>)
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <_sbrk+0x64>)
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <_sbrk+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038fc:	f004 fc1a 	bl	8008134 <__errno>
 8003900:	4603      	mov	r3, r0
 8003902:	220c      	movs	r2, #12
 8003904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	e009      	b.n	8003920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_sbrk+0x64>)
 800391c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20050000 	.word	0x20050000
 800392c:	00000400 	.word	0x00000400
 8003930:	20000324 	.word	0x20000324
 8003934:	20000340 	.word	0x20000340

08003938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <SystemInit+0x20>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <SystemInit+0x20>)
 8003944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003960:	f7ff ffea 	bl	8003938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003964:	480c      	ldr	r0, [pc, #48]	; (8003998 <LoopForever+0x6>)
  ldr r1, =_edata
 8003966:	490d      	ldr	r1, [pc, #52]	; (800399c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <LoopForever+0xe>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800396c:	e002      	b.n	8003974 <LoopCopyDataInit>

0800396e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003972:	3304      	adds	r3, #4

08003974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003978:	d3f9      	bcc.n	800396e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800397c:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <LoopForever+0x16>)
  movs r3, #0
 800397e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003980:	e001      	b.n	8003986 <LoopFillZerobss>

08003982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003984:	3204      	adds	r2, #4

08003986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003988:	d3fb      	bcc.n	8003982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800398a:	f004 fbeb 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800398e:	f7fe fc3b 	bl	8002208 <main>

08003992 <LoopForever>:

LoopForever:
    b LoopForever
 8003992:	e7fe      	b.n	8003992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003994:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800399c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80039a0:	08009b04 	.word	0x08009b04
  ldr r2, =_sbss
 80039a4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80039a8:	2000033c 	.word	0x2000033c

080039ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC1_2_IRQHandler>

080039ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b8:	2003      	movs	r0, #3
 80039ba:	f000 f985 	bl	8003cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039be:	2000      	movs	r0, #0
 80039c0:	f000 f80e 	bl	80039e0 <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	71fb      	strb	r3, [r7, #7]
 80039ce:	e001      	b.n	80039d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039d0:	f7ff fd46 	bl	8003460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_InitTick+0x6c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d023      	beq.n	8003a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_InitTick+0x70>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_InitTick+0x6c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f99f 	bl	8003d4e <HAL_SYSTICK_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d809      	bhi.n	8003a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f000 f95b 	bl	8003cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a28:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <HAL_InitTick+0x74>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e007      	b.n	8003a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e004      	b.n	8003a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e001      	b.n	8003a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200000a8 	.word	0x200000a8
 8003a50:	200000a0 	.word	0x200000a0
 8003a54:	200000a4 	.word	0x200000a4

08003a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_IncTick+0x20>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_IncTick+0x24>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_IncTick+0x24>)
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	200000a8 	.word	0x200000a8
 8003a7c:	20000328 	.word	0x20000328

08003a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return uwTick;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_GetTick+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000328 	.word	0x20000328

08003a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7ff ffee 	bl	8003a80 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d005      	beq.n	8003abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_Delay+0x44>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003abe:	bf00      	nop
 8003ac0:	f7ff ffde 	bl	8003a80 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d8f7      	bhi.n	8003ac0 <HAL_Delay+0x28>
  {
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200000a8 	.word	0x200000a8

08003ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <__NVIC_EnableIRQ+0x38>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db12      	blt.n	8003bb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <__NVIC_DisableIRQ+0x44>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bac:	f3bf 8f4f 	dsb	sy
}
 8003bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bb2:	f3bf 8f6f 	isb	sy
}
 8003bb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db0a      	blt.n	8003bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	490c      	ldr	r1, [pc, #48]	; (8003c14 <__NVIC_SetPriority+0x4c>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf0:	e00a      	b.n	8003c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <__NVIC_SetPriority+0x50>)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	440b      	add	r3, r1
 8003c06:	761a      	strb	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000e100 	.word	0xe000e100
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf28      	it	cs
 8003c3a:	2304      	movcs	r3, #4
 8003c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d902      	bls.n	8003c4c <NVIC_EncodePriority+0x30>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <NVIC_EncodePriority+0x32>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	401a      	ands	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	4313      	orrs	r3, r2
         );
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c94:	d301      	bcc.n	8003c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00f      	b.n	8003cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <SysTick_Config+0x40>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	f7ff ff8e 	bl	8003bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <SysTick_Config+0x40>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <SysTick_Config+0x40>)
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	e000e010 	.word	0xe000e010

08003cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff05 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf0:	f7ff ff1a 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ff8e 	bl	8003c1c <NVIC_EncodePriority>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff5d 	bl	8003bc8 <__NVIC_SetPriority>
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff0d 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff1d 	bl	8003b80 <__NVIC_DisableIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff94 	bl	8003c84 <SysTick_Config>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e075      	b.n	8003e66 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fb8a 	bl	80034a8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003daa:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_DCMI_Init+0x108>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003dde:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003dea:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003df6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003e02:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003e0e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d112      	bne.n	8003e46 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7f1b      	ldrb	r3, [r3, #28]
 8003e24:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7f5b      	ldrb	r3, [r3, #29]
 8003e2a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003e2c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7f9b      	ldrb	r3, [r3, #30]
 8003e32:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003e34:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7fdb      	ldrb	r3, [r3, #31]
 8003e3c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003e42:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003e44:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 021f 	orr.w	r2, r2, #31
 8003e54:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	ffe0f007 	.word	0xffe0f007

08003e74 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2204      	movs	r2, #4
 8003e94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d014      	beq.n	8003ef2 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed4:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <HAL_DCMI_IRQHandler+0xf4>)
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f9e9 	bl	80042b4 <HAL_DMA_Abort_IT>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f8d3 	bl	8004098 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fc fff3 	bl	8000ef0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d006      	beq.n	8003f22 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fc fff8 	bl	8000f12 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d019      	beq.n	8003f60 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d10b      	bne.n	8003f52 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 021e 	bic.w	r2, r2, #30
 8003f48:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc ffea 	bl	8000f34 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	08004099 	.word	0x08004099

08003f6c <HAL_DCMI_ConfigCrop>:
  * @note For all the parameters, the actual value is the input data + 1 (e.g. YSize = 0x0 means 1 line,
  *       YSize = 0x1 means 2 lines, ...)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_DCMI_ConfigCrop+0x1c>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e02a      	b.n	8003fde <HAL_DCMI_ConfigCrop+0x72>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure CROP */
  MODIFY_REG(hdcmi->Instance->CWSIZER, (DCMI_CWSIZE_VLINE|DCMI_CWSIZE_CAPCNT), (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos)));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 21c0 	and.w	r1, r3, #3221274624	; 0xc000c000
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	041a      	lsls	r2, r3, #16
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(hdcmi->Instance->CWSTRTR, (DCMI_CWSTRT_VST|DCMI_CWSTRT_HOFFCNT), (X0 | (Y0 << DCMI_CWSTRT_VST_Pos)));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_DCMI_ConfigCrop+0x80>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	0411      	lsls	r1, r2, #16
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6213      	str	r3, [r2, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000c000 	.word	0xe000c000

08003ff0 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_DCMI_DisableCrop+0x16>
 8004002:	2302      	movs	r3, #2
 8004004:	e018      	b.n	8004038 <HAL_DCMI_DisableCrop+0x48>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0204 	bic.w	r2, r2, #4
 8004024:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_DCMI_EnableCrop+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e018      	b.n	800408c <HAL_DCMI_EnableCrop+0x48>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI Crop feature */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0204 	orr.w	r2, r2, #4
 8004078:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fc ff4b 	bl	8000f56 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e098      	b.n	800420c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <HAL_DMA_Init+0x150>)
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d80f      	bhi.n	8004106 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_DMA_Init+0x154>)
 80040ee:	4413      	add	r3, r2
 80040f0:	4a4b      	ldr	r2, [pc, #300]	; (8004220 <HAL_DMA_Init+0x158>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a48      	ldr	r2, [pc, #288]	; (8004224 <HAL_DMA_Init+0x15c>)
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
 8004104:	e00e      	b.n	8004124 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_DMA_Init+0x160>)
 800410e:	4413      	add	r3, r2
 8004110:	4a43      	ldr	r2, [pc, #268]	; (8004220 <HAL_DMA_Init+0x158>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	009a      	lsls	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_DMA_Init+0x164>)
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417e:	d039      	beq.n	80041f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	4a27      	ldr	r2, [pc, #156]	; (8004224 <HAL_DMA_Init+0x15c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d11a      	bne.n	80041c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_DMA_Init+0x168>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f003 031c 	and.w	r3, r3, #28
 8004196:	210f      	movs	r1, #15
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	4924      	ldr	r1, [pc, #144]	; (8004230 <HAL_DMA_Init+0x168>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041a4:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_DMA_Init+0x168>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 031c 	and.w	r3, r3, #28
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	491d      	ldr	r1, [pc, #116]	; (8004230 <HAL_DMA_Init+0x168>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
 80041be:	e019      	b.n	80041f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <HAL_DMA_Init+0x16c>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	f003 031c 	and.w	r3, r3, #28
 80041cc:	210f      	movs	r1, #15
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	4917      	ldr	r1, [pc, #92]	; (8004234 <HAL_DMA_Init+0x16c>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_DMA_Init+0x16c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f003 031c 	and.w	r3, r3, #28
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	4911      	ldr	r1, [pc, #68]	; (8004234 <HAL_DMA_Init+0x16c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40020407 	.word	0x40020407
 800421c:	bffdfff8 	.word	0xbffdfff8
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	40020000 	.word	0x40020000
 8004228:	bffdfbf8 	.word	0xbffdfbf8
 800422c:	40020400 	.word	0x40020400
 8004230:	400200a8 	.word	0x400200a8
 8004234:	400204a8 	.word	0x400204a8

08004238 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d008      	beq.n	8004262 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e022      	b.n	80042a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 020e 	bic.w	r2, r2, #14
 8004270:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 021c 	and.w	r2, r3, #28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d005      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2204      	movs	r2, #4
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	e029      	b.n	800432c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 020e 	bic.w	r2, r2, #14
 80042e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 021c 	and.w	r2, r3, #28
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
    }
  }
  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f003 031c 	and.w	r3, r3, #28
 8004356:	2204      	movs	r2, #4
 8004358:	409a      	lsls	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d026      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x7a>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d021      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0204 	bic.w	r2, r2, #4
 8004388:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f003 021c 	and.w	r2, r3, #28
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2104      	movs	r1, #4
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d071      	beq.n	800448a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043ae:	e06c      	b.n	800448a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f003 031c 	and.w	r3, r3, #28
 80043b8:	2202      	movs	r2, #2
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02e      	beq.n	8004422 <HAL_DMA_IRQHandler+0xec>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d029      	beq.n	8004422 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 020a 	bic.w	r2, r2, #10
 80043ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f003 021c 	and.w	r2, r3, #28
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2102      	movs	r1, #2
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d038      	beq.n	800448a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004420:	e033      	b.n	800448a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f003 031c 	and.w	r3, r3, #28
 800442a:	2208      	movs	r2, #8
 800442c:	409a      	lsls	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02a      	beq.n	800448c <HAL_DMA_IRQHandler+0x156>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d025      	beq.n	800448c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020e 	bic.w	r2, r2, #14
 800444e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	f003 021c 	and.w	r2, r3, #28
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f202 	lsl.w	r2, r1, r2
 8004462:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800448a:	bf00      	nop
 800448c:	bf00      	nop
}
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a2:	e166      	b.n	8004772 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8158 	beq.w	800476c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d005      	beq.n	80044d4 <HAL_GPIO_Init+0x40>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d130      	bne.n	8004536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	2203      	movs	r2, #3
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800450a:	2201      	movs	r2, #1
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 0201 	and.w	r2, r3, #1
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d017      	beq.n	8004572 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d123      	bne.n	80045c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	08da      	lsrs	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3208      	adds	r2, #8
 8004586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	220f      	movs	r2, #15
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3208      	adds	r2, #8
 80045c0:	6939      	ldr	r1, [r7, #16]
 80045c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	2203      	movs	r2, #3
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0203 	and.w	r2, r3, #3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80b2 	beq.w	800476c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004608:	4b61      	ldr	r3, [pc, #388]	; (8004790 <HAL_GPIO_Init+0x2fc>)
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	4a60      	ldr	r2, [pc, #384]	; (8004790 <HAL_GPIO_Init+0x2fc>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6613      	str	r3, [r2, #96]	; 0x60
 8004614:	4b5e      	ldr	r3, [pc, #376]	; (8004790 <HAL_GPIO_Init+0x2fc>)
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004620:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <HAL_GPIO_Init+0x300>)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	3302      	adds	r3, #2
 8004628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	220f      	movs	r2, #15
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800464a:	d02b      	beq.n	80046a4 <HAL_GPIO_Init+0x210>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x304>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d025      	beq.n	80046a0 <HAL_GPIO_Init+0x20c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x308>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01f      	beq.n	800469c <HAL_GPIO_Init+0x208>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x30c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d019      	beq.n	8004698 <HAL_GPIO_Init+0x204>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x310>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_GPIO_Init+0x200>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <HAL_GPIO_Init+0x314>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00d      	beq.n	8004690 <HAL_GPIO_Init+0x1fc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_GPIO_Init+0x318>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <HAL_GPIO_Init+0x1f8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_GPIO_Init+0x31c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_GPIO_Init+0x1f4>
 8004684:	2307      	movs	r3, #7
 8004686:	e00e      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 8004688:	2308      	movs	r3, #8
 800468a:	e00c      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 800468c:	2306      	movs	r3, #6
 800468e:	e00a      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 8004690:	2305      	movs	r3, #5
 8004692:	e008      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 8004694:	2304      	movs	r3, #4
 8004696:	e006      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 8004698:	2303      	movs	r3, #3
 800469a:	e004      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 800469c:	2302      	movs	r3, #2
 800469e:	e002      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_GPIO_Init+0x212>
 80046a4:	2300      	movs	r3, #0
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	f002 0203 	and.w	r2, r2, #3
 80046ac:	0092      	lsls	r2, r2, #2
 80046ae:	4093      	lsls	r3, r2
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046b6:	4937      	ldr	r1, [pc, #220]	; (8004794 <HAL_GPIO_Init+0x300>)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3302      	adds	r3, #2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046c4:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_GPIO_Init+0x320>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_GPIO_Init+0x320>)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_GPIO_Init+0x320>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_GPIO_Init+0x320>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_GPIO_Init+0x320>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_GPIO_Init+0x320>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_GPIO_Init+0x320>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <HAL_GPIO_Init+0x320>)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f ae91 	bne.w	80044a4 <HAL_GPIO_Init+0x10>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	40010000 	.word	0x40010000
 8004798:	48000400 	.word	0x48000400
 800479c:	48000800 	.word	0x48000800
 80047a0:	48000c00 	.word	0x48000c00
 80047a4:	48001000 	.word	0x48001000
 80047a8:	48001400 	.word	0x48001400
 80047ac:	48001800 	.word	0x48001800
 80047b0:	48001c00 	.word	0x48001c00
 80047b4:	40010400 	.word	0x40010400

080047b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047c6:	e0c9      	b.n	800495c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047c8:	2201      	movs	r2, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80bc 	beq.w	8004956 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047de:	4a66      	ldr	r2, [pc, #408]	; (8004978 <HAL_GPIO_DeInit+0x1c0>)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004806:	d02b      	beq.n	8004860 <HAL_GPIO_DeInit+0xa8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a5c      	ldr	r2, [pc, #368]	; (800497c <HAL_GPIO_DeInit+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d025      	beq.n	800485c <HAL_GPIO_DeInit+0xa4>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a5b      	ldr	r2, [pc, #364]	; (8004980 <HAL_GPIO_DeInit+0x1c8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01f      	beq.n	8004858 <HAL_GPIO_DeInit+0xa0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a5a      	ldr	r2, [pc, #360]	; (8004984 <HAL_GPIO_DeInit+0x1cc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d019      	beq.n	8004854 <HAL_GPIO_DeInit+0x9c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a59      	ldr	r2, [pc, #356]	; (8004988 <HAL_GPIO_DeInit+0x1d0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_GPIO_DeInit+0x98>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_GPIO_DeInit+0x1d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00d      	beq.n	800484c <HAL_GPIO_DeInit+0x94>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a57      	ldr	r2, [pc, #348]	; (8004990 <HAL_GPIO_DeInit+0x1d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <HAL_GPIO_DeInit+0x90>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a56      	ldr	r2, [pc, #344]	; (8004994 <HAL_GPIO_DeInit+0x1dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_GPIO_DeInit+0x8c>
 8004840:	2307      	movs	r3, #7
 8004842:	e00e      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004844:	2308      	movs	r3, #8
 8004846:	e00c      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004848:	2306      	movs	r3, #6
 800484a:	e00a      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 800484c:	2305      	movs	r3, #5
 800484e:	e008      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004850:	2304      	movs	r3, #4
 8004852:	e006      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004854:	2303      	movs	r3, #3
 8004856:	e004      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004858:	2302      	movs	r3, #2
 800485a:	e002      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_GPIO_DeInit+0xaa>
 8004860:	2300      	movs	r3, #0
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	f002 0203 	and.w	r2, r2, #3
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	4093      	lsls	r3, r2
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	429a      	cmp	r2, r3
 8004870:	d132      	bne.n	80048d8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	43db      	mvns	r3, r3
 800487a:	4947      	ldr	r1, [pc, #284]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 800487c:	4013      	ands	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004880:	4b45      	ldr	r3, [pc, #276]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	43db      	mvns	r3, r3
 8004888:	4943      	ldr	r1, [pc, #268]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 800488a:	4013      	ands	r3, r2
 800488c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800488e:	4b42      	ldr	r3, [pc, #264]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	4940      	ldr	r1, [pc, #256]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 8004898:	4013      	ands	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	493c      	ldr	r1, [pc, #240]	; (8004998 <HAL_GPIO_DeInit+0x1e0>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	220f      	movs	r2, #15
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80048ba:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <HAL_GPIO_DeInit+0x1c0>)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	3302      	adds	r3, #2
 80048c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43da      	mvns	r2, r3
 80048ca:	482b      	ldr	r0, [pc, #172]	; (8004978 <HAL_GPIO_DeInit+0x1c0>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	400a      	ands	r2, r1
 80048d2:	3302      	adds	r3, #2
 80048d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2103      	movs	r1, #3
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	08da      	lsrs	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3208      	adds	r2, #8
 80048f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	08d2      	lsrs	r2, r2, #3
 800490c:	4019      	ands	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3208      	adds	r2, #8
 8004912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2103      	movs	r1, #3
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2101      	movs	r1, #1
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	2103      	movs	r1, #3
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	401a      	ands	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	3301      	adds	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	f47f af2f 	bne.w	80047c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40010000 	.word	0x40010000
 800497c:	48000400 	.word	0x48000400
 8004980:	48000800 	.word	0x48000800
 8004984:	48000c00 	.word	0x48000c00
 8004988:	48001000 	.word	0x48001000
 800498c:	48001400 	.word	0x48001400
 8004990:	48001800 	.word	0x48001800
 8004994:	48001c00 	.word	0x48001c00
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049b8:	e002      	b.n	80049c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4013      	ands	r3, r2
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	43d9      	mvns	r1, r3
 80049ea:	887b      	ldrh	r3, [r7, #2]
 80049ec:	400b      	ands	r3, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a16:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fd fbcc 	bl	80021bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40010400 	.word	0x40010400

08004a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e081      	b.n	8004b46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8a8 	bl	8004bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	e006      	b.n	8004ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d104      	bne.n	8004aca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69d9      	ldr	r1, [r3, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e021      	b.n	8004ba4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 80f9 	bne.w	8004dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x34>
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0ed      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Mem_Write+0x4e>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0e6      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fe ff29 	bl	8003a80 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2319      	movs	r3, #25
 8004c36:	2201      	movs	r2, #1
 8004c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fbd9 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0d1      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2221      	movs	r2, #33	; 0x21
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c74:	88f8      	ldrh	r0, [r7, #6]
 8004c76:	893a      	ldrh	r2, [r7, #8]
 8004c78:	8979      	ldrh	r1, [r7, #10]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4603      	mov	r3, r0
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fae9 	bl	800525c <I2C_RequestMemoryWrite>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a9      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2bff      	cmp	r3, #255	; 0xff
 8004ca4:	d90e      	bls.n	8004cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	8979      	ldrh	r1, [r7, #10]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fd41 	bl	8005744 <I2C_TransferConfig>
 8004cc2:	e00f      	b.n	8004ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	8979      	ldrh	r1, [r7, #10]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fd30 	bl	8005744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fbc3 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e07b      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d034      	beq.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d130      	bne.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fb55 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04d      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d90e      	bls.n	8004d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fce5 	bl	8005744 <I2C_TransferConfig>
 8004d7a:	e00f      	b.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fcd4 	bl	8005744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d19e      	bne.n	8004ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fba2 	bl	80054f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e01a      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_I2C_Mem_Write+0x224>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	fe00e800 	.word	0xfe00e800

08004dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	f040 80fd 	bne.w	800501e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_I2C_Mem_Read+0x34>
 8004e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0f1      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x4e>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0ea      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e52:	f7fe fe15 	bl	8003a80 <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2319      	movs	r3, #25
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fac5 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d5      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2222      	movs	r2, #34	; 0x22
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e9c:	88f8      	ldrh	r0, [r7, #6]
 8004e9e:	893a      	ldrh	r2, [r7, #8]
 8004ea0:	8979      	ldrh	r1, [r7, #10]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fa29 	bl	8005304 <I2C_RequestMemoryRead>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0ad      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2bff      	cmp	r3, #255	; 0xff
 8004ecc:	d90e      	bls.n	8004eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	8979      	ldrh	r1, [r7, #10]
 8004edc:	4b52      	ldr	r3, [pc, #328]	; (8005028 <HAL_I2C_Mem_Read+0x22c>)
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fc2d 	bl	8005744 <I2C_TransferConfig>
 8004eea:	e00f      	b.n	8004f0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_I2C_Mem_Read+0x22c>)
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fc1c 	bl	8005744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2200      	movs	r2, #0
 8004f14:	2104      	movs	r1, #4
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa6c 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07c      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d034      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d130      	bne.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	2200      	movs	r2, #0
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fa3d 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e04d      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2bff      	cmp	r3, #255	; 0xff
 8004f8c:	d90e      	bls.n	8004fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbcd 	bl	8005744 <I2C_TransferConfig>
 8004faa:	e00f      	b.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fbbc 	bl	8005744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d19a      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fa8a 	bl	80054f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01a      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_I2C_Mem_Read+0x230>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	80002400 	.word	0x80002400
 800502c:	fe00e800 	.word	0xfe00e800

08005030 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	460b      	mov	r3, r1
 800503e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	f040 80f1 	bne.w	8005234 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	d101      	bne.n	8005066 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
 8005064:	e0e7      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_I2C_IsDeviceReady+0x44>
 8005070:	2302      	movs	r3, #2
 8005072:	e0e0      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_I2C_IsDeviceReady+0x72>
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800509c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050a0:	e004      	b.n	80050ac <HAL_I2C_IsDeviceReady+0x7c>
 80050a2:	897b      	ldrh	r3, [r7, #10]
 80050a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050b2:	f7fe fce5 	bl	8003a80 <HAL_GetTick>
 80050b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80050e4:	e034      	b.n	8005150 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d01a      	beq.n	8005124 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050ee:	f7fe fcc7 	bl	8003a80 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <HAL_I2C_IsDeviceReady+0xd4>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e088      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <HAL_I2C_IsDeviceReady+0x12c>
 8005156:	7fbb      	ldrb	r3, [r7, #30]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0c4      	beq.n	80050e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d01a      	beq.n	80051a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	2120      	movs	r1, #32
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f93d 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e058      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2220      	movs	r2, #32
 800518a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e04a      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	2120      	movs	r1, #32
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f922 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e03d      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2210      	movs	r2, #16
 80051c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2220      	movs	r2, #32
 80051c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d118      	bne.n	8005204 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2120      	movs	r1, #32
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f901 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e01c      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2220      	movs	r2, #32
 8005202:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3301      	adds	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	f63f af3b 	bhi.w	800508a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524c:	b2db      	uxtb	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <I2C_RequestMemoryWrite+0xa4>)
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fa5d 	bl	8005744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f8f0 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e02c      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
 80052ae:	e015      	b.n	80052dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	69b9      	ldr	r1, [r7, #24]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f8d6 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e012      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f884 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	80002000 	.word	0x80002000

08005304 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	4603      	mov	r3, r0
 8005314:	817b      	strh	r3, [r7, #10]
 8005316:	460b      	mov	r3, r1
 8005318:	813b      	strh	r3, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	b2da      	uxtb	r2, r3
 8005322:	8979      	ldrh	r1, [r7, #10]
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <I2C_RequestMemoryRead+0xa4>)
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fa0a 	bl	8005744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f89d 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e02c      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
 8005354:	e015      	b.n	8005382 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	b29b      	uxth	r3, r3
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f883 	bl	8005474 <I2C_WaitOnTXISFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e012      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	2140      	movs	r1, #64	; 0x40
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f831 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	80002000 	.word	0x80002000

080053ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d103      	bne.n	80053ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d007      	beq.n	80053e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	619a      	str	r2, [r3, #24]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005404:	e022      	b.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d01e      	beq.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe fb37 	bl	8003a80 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d113      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e00f      	b.n	800546c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	429a      	cmp	r2, r3
 8005468:	d0cd      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005480:	e02c      	b.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f870 	bl	800556c <I2C_IsErrorOccurred>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02a      	b.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d01e      	beq.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe faef 	bl	8003a80 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d113      	bne.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e007      	b.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d1cb      	bne.n	8005482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005500:	e028      	b.n	8005554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f830 	bl	800556c <I2C_IsErrorOccurred>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e026      	b.n	8005564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fe fab3 	bl	8003a80 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e007      	b.n	8005564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d1cf      	bne.n	8005502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d075      	beq.n	8005684 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2210      	movs	r2, #16
 800559e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055a0:	e056      	b.n	8005650 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d052      	beq.n	8005650 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fe fa69 	bl	8003a80 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_IsErrorOccurred+0x54>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d147      	bne.n	8005650 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d12e      	bne.n	8005642 <I2C_IsErrorOccurred+0xd6>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ea:	d02a      	beq.n	8005642 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d027      	beq.n	8005642 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005600:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005602:	f7fe fa3d 	bl	8003a80 <HAL_GetTick>
 8005606:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005608:	e01b      	b.n	8005642 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800560a:	f7fe fa39 	bl	8003a80 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b19      	cmp	r3, #25
 8005616:	d914      	bls.n	8005642 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d1dc      	bne.n	800560a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d003      	beq.n	8005666 <I2C_IsErrorOccurred+0xfa>
 800565e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005662:	2b00      	cmp	r3, #0
 8005664:	d09d      	beq.n	80055a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2220      	movs	r2, #32
 8005674:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f043 0308 	orr.w	r3, r3, #8
 80056be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80056f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01c      	beq.n	8005734 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fe56 	bl	80053ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <I2C_IsErrorOccurred+0x1d4>)
 800570c:	400b      	ands	r3, r1
 800570e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	; 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	fe00e800 	.word	0xfe00e800

08005744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	817b      	strh	r3, [r7, #10]
 8005752:	4613      	mov	r3, r2
 8005754:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800575c:	7a7b      	ldrb	r3, [r7, #9]
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005764:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	4313      	orrs	r3, r2
 800576e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005772:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	0d5b      	lsrs	r3, r3, #21
 800577e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005782:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <I2C_TransferConfig+0x60>)
 8005784:	430b      	orrs	r3, r1
 8005786:	43db      	mvns	r3, r3
 8005788:	ea02 0103 	and.w	r1, r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	03ff63ff 	.word	0x03ff63ff

080057a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40007000 	.word	0x40007000

080057c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d2:	d130      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d038      	beq.n	8005854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2232      	movs	r2, #50	; 0x32
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	0c9b      	lsrs	r3, r3, #18
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005808:	e002      	b.n	8005810 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b01      	subs	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005810:	4b14      	ldr	r3, [pc, #80]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581c:	d102      	bne.n	8005824 <HAL_PWREx_ControlVoltageScaling+0x60>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f2      	bne.n	800580a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005830:	d110      	bne.n	8005854 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e00f      	b.n	8005856 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d007      	beq.n	8005854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800584c:	4a05      	ldr	r2, [pc, #20]	; (8005864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800584e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005852:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40007000 	.word	0x40007000
 8005868:	200000a0 	.word	0x200000a0
 800586c:	431bde83 	.word	0x431bde83

08005870 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_PWREx_EnableVddIO2+0x1c>)
 800587a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587e:	6053      	str	r3, [r2, #4]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40007000 	.word	0x40007000

08005890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f000 bc08 	b.w	80060b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a4:	4b96      	ldr	r3, [pc, #600]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 030c 	and.w	r3, r3, #12
 80058ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ae:	4b94      	ldr	r3, [pc, #592]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80e4 	beq.w	8005a8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_OscConfig+0x4c>
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	f040 808b 	bne.w	80059ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	f040 8087 	bne.w	80059ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058dc:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_OscConfig+0x64>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e3df      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	4b81      	ldr	r3, [pc, #516]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_RCC_OscConfig+0x7e>
 8005904:	4b7e      	ldr	r3, [pc, #504]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800590c:	e005      	b.n	800591a <HAL_RCC_OscConfig+0x8a>
 800590e:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	4293      	cmp	r3, r2
 800591c:	d223      	bcs.n	8005966 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fdc6 	bl	80064b4 <RCC_SetFlashLatencyFromMSIRange>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e3c0      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005932:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a72      	ldr	r2, [pc, #456]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005938:	f043 0308 	orr.w	r3, r3, #8
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b70      	ldr	r3, [pc, #448]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	496d      	ldr	r1, [pc, #436]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005950:	4b6b      	ldr	r3, [pc, #428]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4968      	ldr	r1, [pc, #416]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]
 8005964:	e025      	b.n	80059b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005966:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a65      	ldr	r2, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 800596c:	f043 0308 	orr.w	r3, r3, #8
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	4960      	ldr	r1, [pc, #384]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005984:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	495b      	ldr	r1, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fd86 	bl	80064b4 <RCC_SetFlashLatencyFromMSIRange>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e380      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059b2:	f000 fcbb 	bl	800632c <HAL_RCC_GetSysClockFreq>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	4950      	ldr	r1, [pc, #320]	; (8005b04 <HAL_RCC_OscConfig+0x274>)
 80059c4:	5ccb      	ldrb	r3, [r1, r3]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <HAL_RCC_OscConfig+0x278>)
 80059d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059d2:	4b4e      	ldr	r3, [pc, #312]	; (8005b0c <HAL_RCC_OscConfig+0x27c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe f802 	bl	80039e0 <HAL_InitTick>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d052      	beq.n	8005a8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	e364      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d032      	beq.n	8005a58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059fe:	f7fe f83f 	bl	8003a80 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a06:	f7fe f83b 	bl	8003a80 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e34d      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a18:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	f043 0308 	orr.w	r3, r3, #8
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4930      	ldr	r1, [pc, #192]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a42:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	492b      	ldr	r1, [pc, #172]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	604b      	str	r3, [r1, #4]
 8005a56:	e01a      	b.n	8005a8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a58:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a64:	f7fe f80c 	bl	8003a80 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a6c:	f7fe f808 	bl	8003a80 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e31a      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x1dc>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d073      	beq.n	8005b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_OscConfig+0x21c>
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d063      	beq.n	8005b80 <HAL_RCC_OscConfig+0x2f0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d15f      	bne.n	8005b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e2f7      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x24c>
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e025      	b.n	8005b28 <HAL_RCC_OscConfig+0x298>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ae4:	d114      	bne.n	8005b10 <HAL_RCC_OscConfig+0x280>
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a05      	ldr	r2, [pc, #20]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a02      	ldr	r2, [pc, #8]	; (8005b00 <HAL_RCC_OscConfig+0x270>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e013      	b.n	8005b28 <HAL_RCC_OscConfig+0x298>
 8005b00:	40021000 	.word	0x40021000
 8005b04:	080099d8 	.word	0x080099d8
 8005b08:	200000a0 	.word	0x200000a0
 8005b0c:	200000a4 	.word	0x200000a4
 8005b10:	4ba0      	ldr	r3, [pc, #640]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a9f      	ldr	r2, [pc, #636]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	4b9d      	ldr	r3, [pc, #628]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a9c      	ldr	r2, [pc, #624]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd ffa6 	bl	8003a80 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b38:	f7fd ffa2 	bl	8003a80 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b64      	cmp	r3, #100	; 0x64
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e2b4      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b4a:	4b92      	ldr	r3, [pc, #584]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x2a8>
 8005b56:	e014      	b.n	8005b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd ff92 	bl	8003a80 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b60:	f7fd ff8e 	bl	8003a80 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	; 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e2a0      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b72:	4b88      	ldr	r3, [pc, #544]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x2d0>
 8005b7e:	e000      	b.n	8005b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d060      	beq.n	8005c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x310>
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	d119      	bne.n	8005bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d116      	bne.n	8005bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba0:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x328>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e27d      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b76      	ldr	r3, [pc, #472]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	061b      	lsls	r3, r3, #24
 8005bc6:	4973      	ldr	r1, [pc, #460]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bcc:	e040      	b.n	8005c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d023      	beq.n	8005c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd6:	4b6f      	ldr	r3, [pc, #444]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be2:	f7fd ff4d 	bl	8003a80 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bea:	f7fd ff49 	bl	8003a80 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e25b      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bfc:	4b65      	ldr	r3, [pc, #404]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c08:	4b62      	ldr	r3, [pc, #392]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	061b      	lsls	r3, r3, #24
 8005c16:	495f      	ldr	r1, [pc, #380]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
 8005c1c:	e018      	b.n	8005c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c1e:	4b5d      	ldr	r3, [pc, #372]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a5c      	ldr	r2, [pc, #368]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fd ff29 	bl	8003a80 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fd ff25 	bl	8003a80 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e237      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c44:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01c      	beq.n	8005c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c64:	4b4b      	ldr	r3, [pc, #300]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6a:	4a4a      	ldr	r2, [pc, #296]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fd ff04 	bl	8003a80 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7c:	f7fd ff00 	bl	8003a80 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e212      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c8e:	4b41      	ldr	r3, [pc, #260]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0ef      	beq.n	8005c7c <HAL_RCC_OscConfig+0x3ec>
 8005c9c:	e01b      	b.n	8005cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c9e:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca4:	4a3b      	ldr	r2, [pc, #236]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cae:	f7fd fee7 	bl	8003a80 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb6:	f7fd fee3 	bl	8003a80 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e1f5      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cc8:	4b32      	ldr	r3, [pc, #200]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ef      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80a6 	beq.w	8005e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf4:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d10:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <HAL_RCC_OscConfig+0x508>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d118      	bne.n	8005d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <HAL_RCC_OscConfig+0x508>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_RCC_OscConfig+0x508>)
 8005d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d28:	f7fd feaa 	bl	8003a80 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d30:	f7fd fea6 	bl	8003a80 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e1b8      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_RCC_OscConfig+0x508>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d108      	bne.n	8005d68 <HAL_RCC_OscConfig+0x4d8>
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d66:	e029      	b.n	8005dbc <HAL_RCC_OscConfig+0x52c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	d115      	bne.n	8005d9c <HAL_RCC_OscConfig+0x50c>
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d78:	f043 0304 	orr.w	r3, r3, #4
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	4a03      	ldr	r2, [pc, #12]	; (8005d94 <HAL_RCC_OscConfig+0x504>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d90:	e014      	b.n	8005dbc <HAL_RCC_OscConfig+0x52c>
 8005d92:	bf00      	nop
 8005d94:	40021000 	.word	0x40021000
 8005d98:	40007000 	.word	0x40007000
 8005d9c:	4b9d      	ldr	r3, [pc, #628]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	4a9c      	ldr	r2, [pc, #624]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dac:	4b99      	ldr	r3, [pc, #612]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	4a98      	ldr	r2, [pc, #608]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005db4:	f023 0304 	bic.w	r3, r3, #4
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d016      	beq.n	8005df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fd fe5c 	bl	8003a80 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dca:	e00a      	b.n	8005de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dcc:	f7fd fe58 	bl	8003a80 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e168      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de2:	4b8c      	ldr	r3, [pc, #560]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ed      	beq.n	8005dcc <HAL_RCC_OscConfig+0x53c>
 8005df0:	e015      	b.n	8005e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df2:	f7fd fe45 	bl	8003a80 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fd fe41 	bl	8003a80 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e151      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e10:	4b80      	ldr	r3, [pc, #512]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ed      	bne.n	8005dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e1e:	7ffb      	ldrb	r3, [r7, #31]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d105      	bne.n	8005e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e24:	4b7b      	ldr	r3, [pc, #492]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	4a7a      	ldr	r2, [pc, #488]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d03c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01c      	beq.n	8005e7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e44:	4b73      	ldr	r3, [pc, #460]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e4a:	4a72      	ldr	r2, [pc, #456]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fd fe14 	bl	8003a80 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e5c:	f7fd fe10 	bl	8003a80 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e122      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e6e:	4b69      	ldr	r3, [pc, #420]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0ef      	beq.n	8005e5c <HAL_RCC_OscConfig+0x5cc>
 8005e7c:	e01b      	b.n	8005eb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e7e:	4b65      	ldr	r3, [pc, #404]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e84:	4a63      	ldr	r2, [pc, #396]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8e:	f7fd fdf7 	bl	8003a80 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e96:	f7fd fdf3 	bl	8003a80 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e105      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ea8:	4b5a      	ldr	r3, [pc, #360]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1ef      	bne.n	8005e96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80f9 	beq.w	80060b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	f040 80cf 	bne.w	8006068 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005eca:	4b52      	ldr	r3, [pc, #328]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0203 	and.w	r2, r3, #3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d12c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d123      	bne.n	8005f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d11b      	bne.n	8005f38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d113      	bne.n	8005f38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d109      	bne.n	8005f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	3b01      	subs	r3, #1
 8005f32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d071      	beq.n	800601c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d068      	beq.n	8006010 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f3e:	4b35      	ldr	r3, [pc, #212]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f4a:	4b32      	ldr	r3, [pc, #200]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e0ac      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f66:	f7fd fd8b 	bl	8003a80 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fd fd87 	bl	8003a80 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e099      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f8c:	4b21      	ldr	r3, [pc, #132]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b21      	ldr	r3, [pc, #132]	; (8006018 <HAL_RCC_OscConfig+0x788>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	0112      	lsls	r2, r2, #4
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fa6:	0212      	lsls	r2, r2, #8
 8005fa8:	4311      	orrs	r1, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fae:	0852      	lsrs	r2, r2, #1
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	0552      	lsls	r2, r2, #21
 8005fb4:	4311      	orrs	r1, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fba:	0852      	lsrs	r2, r2, #1
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	0652      	lsls	r2, r2, #25
 8005fc0:	4311      	orrs	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc6:	06d2      	lsls	r2, r2, #27
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	4912      	ldr	r1, [pc, #72]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8005fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fe8:	f7fd fd4a 	bl	8003a80 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fd46 	bl	8003a80 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e058      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_RCC_OscConfig+0x784>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800600e:	e050      	b.n	80060b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e04f      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
 8006014:	40021000 	.word	0x40021000
 8006018:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d144      	bne.n	80060b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006028:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 800602e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006034:	4b21      	ldr	r3, [pc, #132]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 800603a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800603e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006040:	f7fd fd1e 	bl	8003a80 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006048:	f7fd fd1a 	bl	8003a80 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e02c      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x7b8>
 8006066:	e024      	b.n	80060b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d01f      	beq.n	80060ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a12      	ldr	r2, [pc, #72]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 8006074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fd fd01 	bl	8003a80 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006082:	f7fd fcfd 	bl	8003a80 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e00f      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f0      	bne.n	8006082 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	4905      	ldr	r1, [pc, #20]	; (80060bc <HAL_RCC_OscConfig+0x82c>)
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <HAL_RCC_OscConfig+0x830>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	60cb      	str	r3, [r1, #12]
 80060ac:	e001      	b.n	80060b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40021000 	.word	0x40021000
 80060c0:	feeefffc 	.word	0xfeeefffc

080060c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0e7      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d8:	4b75      	ldr	r3, [pc, #468]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d910      	bls.n	8006108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e6:	4b72      	ldr	r3, [pc, #456]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f023 0207 	bic.w	r2, r3, #7
 80060ee:	4970      	ldr	r1, [pc, #448]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f6:	4b6e      	ldr	r3, [pc, #440]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0cf      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d010      	beq.n	8006136 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	4b66      	ldr	r3, [pc, #408]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006120:	429a      	cmp	r2, r3
 8006122:	d908      	bls.n	8006136 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b63      	ldr	r3, [pc, #396]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4960      	ldr	r1, [pc, #384]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04c      	beq.n	80061dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800614a:	4b5a      	ldr	r3, [pc, #360]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d121      	bne.n	800619a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0a6      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d107      	bne.n	8006172 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006162:	4b54      	ldr	r3, [pc, #336]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d115      	bne.n	800619a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e09a      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800617a:	4b4e      	ldr	r3, [pc, #312]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e08e      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800618a:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e086      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800619a:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4943      	ldr	r1, [pc, #268]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fd fc68 	bl	8003a80 <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b4:	f7fd fc64 	bl	8003a80 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e06e      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ca:	4b3a      	ldr	r3, [pc, #232]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 020c 	and.w	r2, r3, #12
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1eb      	bne.n	80061b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d208      	bcs.n	800620a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f8:	4b2e      	ldr	r3, [pc, #184]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	492b      	ldr	r1, [pc, #172]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800620a:	4b29      	ldr	r3, [pc, #164]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d210      	bcs.n	800623a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006218:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f023 0207 	bic.w	r2, r3, #7
 8006220:	4923      	ldr	r1, [pc, #140]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	4313      	orrs	r3, r2
 8006226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006228:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <HAL_RCC_ClockConfig+0x1ec>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d001      	beq.n	800623a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e036      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4918      	ldr	r1, [pc, #96]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4910      	ldr	r1, [pc, #64]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006278:	f000 f858 	bl	800632c <HAL_RCC_GetSysClockFreq>
 800627c:	4602      	mov	r2, r0
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	490b      	ldr	r1, [pc, #44]	; (80062b8 <HAL_RCC_ClockConfig+0x1f4>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	fa22 f303 	lsr.w	r3, r2, r3
 8006294:	4a09      	ldr	r2, [pc, #36]	; (80062bc <HAL_RCC_ClockConfig+0x1f8>)
 8006296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <HAL_RCC_ClockConfig+0x1fc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd fb9f 	bl	80039e0 <HAL_InitTick>
 80062a2:	4603      	mov	r3, r0
 80062a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80062a6:	7afb      	ldrb	r3, [r7, #11]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40022000 	.word	0x40022000
 80062b4:	40021000 	.word	0x40021000
 80062b8:	080099d8 	.word	0x080099d8
 80062bc:	200000a0 	.word	0x200000a0
 80062c0:	200000a4 	.word	0x200000a4

080062c4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80062d0:	4b15      	ldr	r3, [pc, #84]	; (8006328 <HAL_RCC_MCOConfig+0x64>)
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	4a14      	ldr	r2, [pc, #80]	; (8006328 <HAL_RCC_MCOConfig+0x64>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062dc:	4b12      	ldr	r3, [pc, #72]	; (8006328 <HAL_RCC_MCOConfig+0x64>)
 80062de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80062e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ee:	2302      	movs	r3, #2
 80062f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062f2:	2302      	movs	r3, #2
 80062f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006308:	f7fe f8c4 	bl	8004494 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_RCC_MCOConfig+0x64>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	430b      	orrs	r3, r1
 800631a:	4903      	ldr	r1, [pc, #12]	; (8006328 <HAL_RCC_MCOConfig+0x64>)
 800631c:	4313      	orrs	r3, r2
 800631e:	608b      	str	r3, [r1, #8]
}
 8006320:	bf00      	nop
 8006322:	3728      	adds	r7, #40	; 0x28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40021000 	.word	0x40021000

0800632c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800632c:	b480      	push	{r7}
 800632e:	b089      	sub	sp, #36	; 0x24
 8006330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800633a:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006344:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x34>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d121      	bne.n	800639e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11e      	bne.n	800639e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006360:	4b34      	ldr	r3, [pc, #208]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800636c:	4b31      	ldr	r3, [pc, #196]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e005      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800637c:	4b2d      	ldr	r3, [pc, #180]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006388:	4a2b      	ldr	r2, [pc, #172]	; (8006438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10d      	bne.n	80063b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800639c:	e00a      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d102      	bne.n	80063aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063a4:	4b25      	ldr	r3, [pc, #148]	; (800643c <HAL_RCC_GetSysClockFreq+0x110>)
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e004      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d101      	bne.n	80063b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063b0:	4b23      	ldr	r3, [pc, #140]	; (8006440 <HAL_RCC_GetSysClockFreq+0x114>)
 80063b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d134      	bne.n	8006424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d003      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0xac>
 80063d0:	e005      	b.n	80063de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063d2:	4b1a      	ldr	r3, [pc, #104]	; (800643c <HAL_RCC_GetSysClockFreq+0x110>)
 80063d4:	617b      	str	r3, [r7, #20]
      break;
 80063d6:	e005      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063d8:	4b19      	ldr	r3, [pc, #100]	; (8006440 <HAL_RCC_GetSysClockFreq+0x114>)
 80063da:	617b      	str	r3, [r7, #20]
      break;
 80063dc:	e002      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	617b      	str	r3, [r7, #20]
      break;
 80063e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e4:	4b13      	ldr	r3, [pc, #76]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	3301      	adds	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063f2:	4b10      	ldr	r3, [pc, #64]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	fb03 f202 	mul.w	r2, r3, r2
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <HAL_RCC_GetSysClockFreq+0x108>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	0e5b      	lsrs	r3, r3, #25
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	3301      	adds	r3, #1
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006424:	69bb      	ldr	r3, [r7, #24]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3724      	adds	r7, #36	; 0x24
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	080099f0 	.word	0x080099f0
 800643c:	00f42400 	.word	0x00f42400
 8006440:	007a1200 	.word	0x007a1200

08006444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006448:	4b03      	ldr	r3, [pc, #12]	; (8006458 <HAL_RCC_GetHCLKFreq+0x14>)
 800644a:	681b      	ldr	r3, [r3, #0]
}
 800644c:	4618      	mov	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200000a0 	.word	0x200000a0

0800645c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006460:	f7ff fff0 	bl	8006444 <HAL_RCC_GetHCLKFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	4904      	ldr	r1, [pc, #16]	; (8006484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000
 8006484:	080099e8 	.word	0x080099e8

08006488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800648c:	f7ff ffda 	bl	8006444 <HAL_RCC_GetHCLKFreq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	0adb      	lsrs	r3, r3, #11
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800649e:	5ccb      	ldrb	r3, [r1, r3]
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000
 80064b0:	080099e8 	.word	0x080099e8

080064b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064c0:	4b2a      	ldr	r3, [pc, #168]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064cc:	f7ff f96c 	bl	80057a8 <HAL_PWREx_GetVoltageRange>
 80064d0:	6178      	str	r0, [r7, #20]
 80064d2:	e014      	b.n	80064fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	4a24      	ldr	r2, [pc, #144]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064de:	6593      	str	r3, [r2, #88]	; 0x58
 80064e0:	4b22      	ldr	r3, [pc, #136]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064ec:	f7ff f95c 	bl	80057a8 <HAL_PWREx_GetVoltageRange>
 80064f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	4a1d      	ldr	r2, [pc, #116]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d10b      	bne.n	800651e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d919      	bls.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2ba0      	cmp	r3, #160	; 0xa0
 8006510:	d902      	bls.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006512:	2302      	movs	r3, #2
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	e013      	b.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006518:	2301      	movs	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	e010      	b.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b80      	cmp	r3, #128	; 0x80
 8006522:	d902      	bls.n	800652a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006524:	2303      	movs	r3, #3
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e00a      	b.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d102      	bne.n	8006536 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006530:	2302      	movs	r3, #2
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e004      	b.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b70      	cmp	r3, #112	; 0x70
 800653a:	d101      	bne.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800653c:	2301      	movs	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 0207 	bic.w	r2, r3, #7
 8006548:	4909      	ldr	r1, [pc, #36]	; (8006570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d001      	beq.n	8006562 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40021000 	.word	0x40021000
 8006570:	40022000 	.word	0x40022000

08006574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800657c:	2300      	movs	r3, #0
 800657e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006580:	2300      	movs	r3, #0
 8006582:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	2b00      	cmp	r3, #0
 800658e:	d041      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006598:	d02a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800659a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800659e:	d824      	bhi.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a4:	d008      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065aa:	d81e      	bhi.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d010      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065b6:	e018      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065b8:	4b86      	ldr	r3, [pc, #536]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4a85      	ldr	r2, [pc, #532]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065c4:	e015      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 facd 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065d6:	e00c      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3320      	adds	r3, #32
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fbb6 	bl	8006d50 <RCCEx_PLLSAI2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	74fb      	strb	r3, [r7, #19]
      break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f2:	7cfb      	ldrb	r3, [r7, #19]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065f8:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	4973      	ldr	r1, [pc, #460]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800660e:	e001      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d041      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006628:	d02a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800662a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800662e:	d824      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006634:	d008      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800663a:	d81e      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006644:	d010      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006646:	e018      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006648:	4b62      	ldr	r3, [pc, #392]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800664e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006652:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006654:	e015      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3304      	adds	r3, #4
 800665a:	2100      	movs	r1, #0
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fa85 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006666:	e00c      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3320      	adds	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fb6e 	bl	8006d50 <RCCEx_PLLSAI2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	74fb      	strb	r3, [r7, #19]
      break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006682:	7cfb      	ldrb	r3, [r7, #19]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006688:	4b52      	ldr	r3, [pc, #328]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006696:	494f      	ldr	r1, [pc, #316]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800669e:	e001      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80a0 	beq.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066b2:	2300      	movs	r3, #0
 80066b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066b6:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066cc:	4b41      	ldr	r3, [pc, #260]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	4a40      	ldr	r2, [pc, #256]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6593      	str	r3, [r2, #88]	; 0x58
 80066d8:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e4:	2301      	movs	r3, #1
 80066e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e8:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066f4:	f7fd f9c4 	bl	8003a80 <HAL_GetTick>
 80066f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066fa:	e009      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fc:	f7fd f9c0 	bl	8003a80 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d902      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	74fb      	strb	r3, [r7, #19]
        break;
 800670e:	e005      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006710:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ef      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800671c:	7cfb      	ldrb	r3, [r7, #19]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d15c      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006722:	4b2c      	ldr	r3, [pc, #176]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d019      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800674c:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800675c:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800676c:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fd f97f 	bl	8003a80 <HAL_GetTick>
 8006782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006784:	e00b      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fd f97b 	bl	8003a80 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d902      	bls.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	74fb      	strb	r3, [r7, #19]
            break;
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0ec      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10c      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	4904      	ldr	r1, [pc, #16]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067ca:	e009      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067cc:	7cfb      	ldrb	r3, [r7, #19]
 80067ce:	74bb      	strb	r3, [r7, #18]
 80067d0:	e006      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80067d2:	bf00      	nop
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e0:	7c7b      	ldrb	r3, [r7, #17]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d105      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e6:	4ba6      	ldr	r3, [pc, #664]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	4aa5      	ldr	r2, [pc, #660]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067fe:	4ba0      	ldr	r3, [pc, #640]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f023 0203 	bic.w	r2, r3, #3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	499c      	ldr	r1, [pc, #624]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006820:	4b97      	ldr	r3, [pc, #604]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f023 020c 	bic.w	r2, r3, #12
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	4994      	ldr	r1, [pc, #592]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006842:	4b8f      	ldr	r3, [pc, #572]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	498b      	ldr	r1, [pc, #556]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006864:	4b86      	ldr	r3, [pc, #536]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	4983      	ldr	r1, [pc, #524]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006886:	4b7e      	ldr	r3, [pc, #504]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006894:	497a      	ldr	r1, [pc, #488]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068a8:	4b75      	ldr	r3, [pc, #468]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	4972      	ldr	r1, [pc, #456]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ca:	4b6d      	ldr	r3, [pc, #436]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d8:	4969      	ldr	r1, [pc, #420]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068ec:	4b64      	ldr	r3, [pc, #400]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fa:	4961      	ldr	r1, [pc, #388]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800690e:	4b5c      	ldr	r3, [pc, #368]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	4958      	ldr	r1, [pc, #352]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006930:	4b53      	ldr	r3, [pc, #332]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	4950      	ldr	r1, [pc, #320]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006952:	4b4b      	ldr	r3, [pc, #300]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	4947      	ldr	r1, [pc, #284]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006974:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800697a:	f023 0203 	bic.w	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006982:	493f      	ldr	r1, [pc, #252]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d028      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006996:	4b3a      	ldr	r3, [pc, #232]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	4936      	ldr	r1, [pc, #216]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b6:	4b32      	ldr	r3, [pc, #200]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4a31      	ldr	r2, [pc, #196]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c0:	60d3      	str	r3, [r2, #12]
 80069c2:	e011      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	2101      	movs	r1, #1
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f8c9 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069de:	7cfb      	ldrb	r3, [r7, #19]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d028      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069f4:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	491f      	ldr	r1, [pc, #124]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a12:	d106      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a1e:	60d3      	str	r3, [r2, #12]
 8006a20:	e011      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2a:	d10c      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f89a 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3c:	7cfb      	ldrb	r3, [r7, #19]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d02a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a60:	4907      	ldr	r1, [pc, #28]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a70:	d108      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4a02      	ldr	r2, [pc, #8]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7c:	60d3      	str	r3, [r2, #12]
 8006a7e:	e013      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006a80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f869 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a9e:	7cfb      	ldrb	r3, [r7, #19]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006aa4:	7cfb      	ldrb	r3, [r7, #19]
 8006aa6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02f      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab4:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ac2:	4929      	ldr	r1, [pc, #164]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad2:	d10d      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f846 	bl	8006b6c <RCCEx_PLLSAI1_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d014      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006aea:	7cfb      	ldrb	r3, [r7, #19]
 8006aec:	74bb      	strb	r3, [r7, #18]
 8006aee:	e011      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3320      	adds	r3, #32
 8006afe:	2102      	movs	r1, #2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f925 	bl	8006d50 <RCCEx_PLLSAI2_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b0a:	7cfb      	ldrb	r3, [r7, #19]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b20:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b30:	490d      	ldr	r1, [pc, #52]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b44:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b54:	4904      	ldr	r1, [pc, #16]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000

08006b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b7a:	4b74      	ldr	r3, [pc, #464]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b86:	4b71      	ldr	r3, [pc, #452]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0203 	and.w	r2, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d10d      	bne.n	8006bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
       ||
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b9e:	4b6b      	ldr	r3, [pc, #428]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
       ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d047      	beq.n	8006c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
 8006bb6:	e044      	b.n	8006c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d018      	beq.n	8006bf2 <RCCEx_PLLSAI1_Config+0x86>
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d825      	bhi.n	8006c10 <RCCEx_PLLSAI1_Config+0xa4>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d002      	beq.n	8006bce <RCCEx_PLLSAI1_Config+0x62>
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d009      	beq.n	8006be0 <RCCEx_PLLSAI1_Config+0x74>
 8006bcc:	e020      	b.n	8006c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bce:	4b5f      	ldr	r3, [pc, #380]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11d      	bne.n	8006c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bde:	e01a      	b.n	8006c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006be0:	4b5a      	ldr	r3, [pc, #360]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d116      	bne.n	8006c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bf0:	e013      	b.n	8006c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bf2:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bfe:	4b53      	ldr	r3, [pc, #332]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c0e:	e006      	b.n	8006c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	73fb      	strb	r3, [r7, #15]
      break;
 8006c14:	e004      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c16:	bf00      	nop
 8006c18:	e002      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c1a:	bf00      	nop
 8006c1c:	e000      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c26:	4b49      	ldr	r3, [pc, #292]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	4943      	ldr	r1, [pc, #268]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d17c      	bne.n	8006d42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c48:	4b40      	ldr	r3, [pc, #256]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3f      	ldr	r2, [pc, #252]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c54:	f7fc ff14 	bl	8003a80 <HAL_GetTick>
 8006c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c5a:	e009      	b.n	8006c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c5c:	f7fc ff10 	bl	8003a80 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d902      	bls.n	8006c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c6e:	e005      	b.n	8006c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ef      	bne.n	8006c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d15f      	bne.n	8006d42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d110      	bne.n	8006caa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c88:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006c90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6892      	ldr	r2, [r2, #8]
 8006c98:	0211      	lsls	r1, r2, #8
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68d2      	ldr	r2, [r2, #12]
 8006c9e:	06d2      	lsls	r2, r2, #27
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	492a      	ldr	r1, [pc, #168]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	610b      	str	r3, [r1, #16]
 8006ca8:	e027      	b.n	8006cfa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d112      	bne.n	8006cd6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cb0:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6892      	ldr	r2, [r2, #8]
 8006cc0:	0211      	lsls	r1, r2, #8
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6912      	ldr	r2, [r2, #16]
 8006cc6:	0852      	lsrs	r2, r2, #1
 8006cc8:	3a01      	subs	r2, #1
 8006cca:	0552      	lsls	r2, r2, #21
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	491f      	ldr	r1, [pc, #124]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	610b      	str	r3, [r1, #16]
 8006cd4:	e011      	b.n	8006cfa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	0211      	lsls	r1, r2, #8
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6952      	ldr	r2, [r2, #20]
 8006cec:	0852      	lsrs	r2, r2, #1
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	0652      	lsls	r2, r2, #25
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	4915      	ldr	r1, [pc, #84]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fc febb 	bl	8003a80 <HAL_GetTick>
 8006d0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d0c:	e009      	b.n	8006d22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d0e:	f7fc feb7 	bl	8003a80 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d902      	bls.n	8006d22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	73fb      	strb	r3, [r7, #15]
          break;
 8006d20:	e005      	b.n	8006d2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ef      	beq.n	8006d0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	4903      	ldr	r1, [pc, #12]	; (8006d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40021000 	.word	0x40021000

08006d50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d5e:	4b69      	ldr	r3, [pc, #420]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d6a:	4b66      	ldr	r3, [pc, #408]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f003 0203 	and.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d10d      	bne.n	8006d96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d82:	4b60      	ldr	r3, [pc, #384]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	091b      	lsrs	r3, r3, #4
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
       ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d047      	beq.n	8006e26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	73fb      	strb	r3, [r7, #15]
 8006d9a:	e044      	b.n	8006e26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d018      	beq.n	8006dd6 <RCCEx_PLLSAI2_Config+0x86>
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d825      	bhi.n	8006df4 <RCCEx_PLLSAI2_Config+0xa4>
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d002      	beq.n	8006db2 <RCCEx_PLLSAI2_Config+0x62>
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d009      	beq.n	8006dc4 <RCCEx_PLLSAI2_Config+0x74>
 8006db0:	e020      	b.n	8006df4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006db2:	4b54      	ldr	r3, [pc, #336]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11d      	bne.n	8006dfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dc2:	e01a      	b.n	8006dfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dc4:	4b4f      	ldr	r3, [pc, #316]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d116      	bne.n	8006dfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd4:	e013      	b.n	8006dfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dd6:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10f      	bne.n	8006e02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006de2:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006df2:	e006      	b.n	8006e02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
      break;
 8006df8:	e004      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e0a:	4b3e      	ldr	r3, [pc, #248]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6819      	ldr	r1, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	4938      	ldr	r1, [pc, #224]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d166      	bne.n	8006efa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e2c:	4b35      	ldr	r3, [pc, #212]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a34      	ldr	r2, [pc, #208]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e38:	f7fc fe22 	bl	8003a80 <HAL_GetTick>
 8006e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e3e:	e009      	b.n	8006e54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e40:	f7fc fe1e 	bl	8003a80 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d902      	bls.n	8006e54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	73fb      	strb	r3, [r7, #15]
        break;
 8006e52:	e005      	b.n	8006e60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e54:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1ef      	bne.n	8006e40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d149      	bne.n	8006efa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6892      	ldr	r2, [r2, #8]
 8006e7c:	0211      	lsls	r1, r2, #8
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	06d2      	lsls	r2, r2, #27
 8006e84:	430a      	orrs	r2, r1
 8006e86:	491f      	ldr	r1, [pc, #124]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	614b      	str	r3, [r1, #20]
 8006e8c:	e011      	b.n	8006eb2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e8e:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6892      	ldr	r2, [r2, #8]
 8006e9e:	0211      	lsls	r1, r2, #8
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6912      	ldr	r2, [r2, #16]
 8006ea4:	0852      	lsrs	r2, r2, #1
 8006ea6:	3a01      	subs	r2, #1
 8006ea8:	0652      	lsls	r2, r2, #25
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	4915      	ldr	r1, [pc, #84]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006eb2:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fc fddf 	bl	8003a80 <HAL_GetTick>
 8006ec2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ec4:	e009      	b.n	8006eda <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ec6:	f7fc fddb 	bl	8003a80 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d902      	bls.n	8006eda <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8006ed8:	e005      	b.n	8006ee6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0ef      	beq.n	8006ec6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	4903      	ldr	r1, [pc, #12]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40021000 	.word	0x40021000

08006f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e040      	b.n	8006f9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fc fb6e 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2224      	movs	r2, #36	; 0x24
 8006f34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fbc2 	bl	80076d0 <UART_SetConfig>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e022      	b.n	8006f9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fe6e 	bl	8007c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fef5 	bl	8007d84 <UART_CheckIdleState>
 8006f9a:	4603      	mov	r3, r0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	f040 8082 	bne.w	80070c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Transmit+0x26>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e07a      	b.n	80070c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit+0x38>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e073      	b.n	80070c4 <HAL_UART_Transmit+0x120>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2221      	movs	r2, #33	; 0x21
 8006ff0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff2:	f7fc fd45 	bl	8003a80 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007010:	d108      	bne.n	8007024 <HAL_UART_Transmit+0x80>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e003      	b.n	800702c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007034:	e02d      	b.n	8007092 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fee8 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e039      	b.n	80070c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007062:	b292      	uxth	r2, r2
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	3302      	adds	r3, #2
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	e008      	b.n	8007080 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	781a      	ldrb	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	b292      	uxth	r2, r2
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3301      	adds	r3, #1
 800707e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1cb      	bne.n	8007036 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	2140      	movs	r1, #64	; 0x40
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 feb4 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e005      	b.n	80070c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80070c2:	2302      	movs	r3, #2
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b0ba      	sub	sp, #232	; 0xe8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80070fa:	4013      	ands	r3, r2
 80070fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d115      	bne.n	8007134 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00f      	beq.n	8007134 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 82a6 	beq.w	8007676 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      }
      return;
 8007132:	e2a0      	b.n	8007676 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8117 	beq.w	800736c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800713e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800714a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800714e:	4b85      	ldr	r3, [pc, #532]	; (8007364 <HAL_UART_IRQHandler+0x298>)
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 810a 	beq.w	800736c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d011      	beq.n	8007188 <HAL_UART_IRQHandler+0xbc>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d011      	beq.n	80071b8 <HAL_UART_IRQHandler+0xec>
 8007194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2202      	movs	r2, #2
 80071a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ae:	f043 0204 	orr.w	r2, r3, #4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d011      	beq.n	80071e8 <HAL_UART_IRQHandler+0x11c>
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2204      	movs	r2, #4
 80071d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071de:	f043 0202 	orr.w	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d017      	beq.n	8007224 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2208      	movs	r2, #8
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721a:	f043 0208 	orr.w	r2, r3, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800722c:	2b00      	cmp	r3, #0
 800722e:	d012      	beq.n	8007256 <HAL_UART_IRQHandler+0x18a>
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 820c 	beq.w	800767a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800726e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d005      	beq.n	80072ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d04f      	beq.n	800734e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fe75 	bl	8007f9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d141      	bne.n	8007346 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1d9      	bne.n	80072c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	2b00      	cmp	r3, #0
 8007314:	d013      	beq.n	800733e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	4a13      	ldr	r2, [pc, #76]	; (8007368 <HAL_UART_IRQHandler+0x29c>)
 800731c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc ffc6 	bl	80042b4 <HAL_DMA_Abort_IT>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e00f      	b.n	800735e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9b0 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	e00b      	b.n	800735e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f9ac 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734c:	e007      	b.n	800735e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f9a8 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800735c:	e18d      	b.n	800767a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735e:	bf00      	nop
    return;
 8007360:	e18b      	b.n	800767a <HAL_UART_IRQHandler+0x5ae>
 8007362:	bf00      	nop
 8007364:	04000120 	.word	0x04000120
 8007368:	08008065 	.word	0x08008065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	2b01      	cmp	r3, #1
 8007372:	f040 8146 	bne.w	8007602 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 813f 	beq.w	8007602 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8138 	beq.w	8007602 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2210      	movs	r2, #16
 8007398:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	f040 80b4 	bne.w	8007512 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 815f 	beq.w	800767e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ca:	429a      	cmp	r2, r3
 80073cc:	f080 8157 	bcs.w	800767e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 8085 	bne.w	80074f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800741a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800742e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1da      	bne.n	80073ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800745a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800745e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800746c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e1      	bne.n	8007436 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800749c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e3      	bne.n	8007472 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c6:	f023 0310 	bic.w	r3, r3, #16
 80074ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80074da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e4      	bne.n	80074b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fc fea1 	bl	8004238 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007502:	b29b      	uxth	r3, r3
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8d4 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007510:	e0b5      	b.n	800767e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800751e:	b29b      	uxth	r3, r3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80a7 	beq.w	8007682 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80a2 	beq.w	8007682 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800754c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007560:	647b      	str	r3, [r7, #68]	; 0x44
 8007562:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e4      	bne.n	800753e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	623b      	str	r3, [r7, #32]
   return(result);
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	f023 0301 	bic.w	r3, r3, #1
 800758a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007598:	633a      	str	r2, [r7, #48]	; 0x30
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800759e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e3      	bne.n	8007574 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0310 	bic.w	r3, r3, #16
 80075d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075e0:	61fb      	str	r3, [r7, #28]
 80075e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	617b      	str	r3, [r7, #20]
   return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e4      	bne.n	80075be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f85c 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007600:	e03f      	b.n	8007682 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00e      	beq.n	800762c <HAL_UART_IRQHandler+0x560>
 800760e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fd5d 	bl	80080e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800762a:	e02d      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00e      	beq.n	8007656 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01c      	beq.n	8007686 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
    }
    return;
 8007654:	e017      	b.n	8007686 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d012      	beq.n	8007688 <HAL_UART_IRQHandler+0x5bc>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fd0e 	bl	8008090 <UART_EndTransmit_IT>
    return;
 8007674:	e008      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007676:	bf00      	nop
 8007678:	e006      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
    return;
 800767a:	bf00      	nop
 800767c:	e004      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
      return;
 800767e:	bf00      	nop
 8007680:	e002      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007686:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007688:	37e8      	adds	r7, #232	; 0xe8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop

08007690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b08a      	sub	sp, #40	; 0x28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4ba4      	ldr	r3, [pc, #656]	; (8007990 <UART_SetConfig+0x2c0>)
 8007700:	4013      	ands	r3, r2
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007708:	430b      	orrs	r3, r1
 800770a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a99      	ldr	r2, [pc, #612]	; (8007994 <UART_SetConfig+0x2c4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007738:	4313      	orrs	r3, r2
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a90      	ldr	r2, [pc, #576]	; (8007998 <UART_SetConfig+0x2c8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d126      	bne.n	80077a8 <UART_SetConfig+0xd8>
 800775a:	4b90      	ldr	r3, [pc, #576]	; (800799c <UART_SetConfig+0x2cc>)
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b03      	cmp	r3, #3
 8007766:	d81b      	bhi.n	80077a0 <UART_SetConfig+0xd0>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <UART_SetConfig+0xa0>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007781 	.word	0x08007781
 8007774:	08007791 	.word	0x08007791
 8007778:	08007789 	.word	0x08007789
 800777c:	08007799 	.word	0x08007799
 8007780:	2301      	movs	r3, #1
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007786:	e116      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007788:	2302      	movs	r3, #2
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778e:	e112      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007790:	2304      	movs	r3, #4
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007796:	e10e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007798:	2308      	movs	r3, #8
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779e:	e10a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80077a0:	2310      	movs	r3, #16
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a6:	e106      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a7c      	ldr	r2, [pc, #496]	; (80079a0 <UART_SetConfig+0x2d0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d138      	bne.n	8007824 <UART_SetConfig+0x154>
 80077b2:	4b7a      	ldr	r3, [pc, #488]	; (800799c <UART_SetConfig+0x2cc>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b8:	f003 030c 	and.w	r3, r3, #12
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d82d      	bhi.n	800781c <UART_SetConfig+0x14c>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0xf8>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	0800781d 	.word	0x0800781d
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	0800781d 	.word	0x0800781d
 80077d8:	0800780d 	.word	0x0800780d
 80077dc:	0800781d 	.word	0x0800781d
 80077e0:	0800781d 	.word	0x0800781d
 80077e4:	0800781d 	.word	0x0800781d
 80077e8:	08007805 	.word	0x08007805
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007802:	e0d8      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007804:	2302      	movs	r3, #2
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780a:	e0d4      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007812:	e0d0      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781a:	e0cc      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007822:	e0c8      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a5e      	ldr	r2, [pc, #376]	; (80079a4 <UART_SetConfig+0x2d4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d125      	bne.n	800787a <UART_SetConfig+0x1aa>
 800782e:	4b5b      	ldr	r3, [pc, #364]	; (800799c <UART_SetConfig+0x2cc>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007838:	2b30      	cmp	r3, #48	; 0x30
 800783a:	d016      	beq.n	800786a <UART_SetConfig+0x19a>
 800783c:	2b30      	cmp	r3, #48	; 0x30
 800783e:	d818      	bhi.n	8007872 <UART_SetConfig+0x1a2>
 8007840:	2b20      	cmp	r3, #32
 8007842:	d00a      	beq.n	800785a <UART_SetConfig+0x18a>
 8007844:	2b20      	cmp	r3, #32
 8007846:	d814      	bhi.n	8007872 <UART_SetConfig+0x1a2>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <UART_SetConfig+0x182>
 800784c:	2b10      	cmp	r3, #16
 800784e:	d008      	beq.n	8007862 <UART_SetConfig+0x192>
 8007850:	e00f      	b.n	8007872 <UART_SetConfig+0x1a2>
 8007852:	2300      	movs	r3, #0
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007858:	e0ad      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800785a:	2302      	movs	r3, #2
 800785c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007860:	e0a9      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007862:	2304      	movs	r3, #4
 8007864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007868:	e0a5      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800786a:	2308      	movs	r3, #8
 800786c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007870:	e0a1      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007872:	2310      	movs	r3, #16
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007878:	e09d      	b.n	80079b6 <UART_SetConfig+0x2e6>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a4a      	ldr	r2, [pc, #296]	; (80079a8 <UART_SetConfig+0x2d8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d125      	bne.n	80078d0 <UART_SetConfig+0x200>
 8007884:	4b45      	ldr	r3, [pc, #276]	; (800799c <UART_SetConfig+0x2cc>)
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800788e:	2bc0      	cmp	r3, #192	; 0xc0
 8007890:	d016      	beq.n	80078c0 <UART_SetConfig+0x1f0>
 8007892:	2bc0      	cmp	r3, #192	; 0xc0
 8007894:	d818      	bhi.n	80078c8 <UART_SetConfig+0x1f8>
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d00a      	beq.n	80078b0 <UART_SetConfig+0x1e0>
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d814      	bhi.n	80078c8 <UART_SetConfig+0x1f8>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <UART_SetConfig+0x1d8>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d008      	beq.n	80078b8 <UART_SetConfig+0x1e8>
 80078a6:	e00f      	b.n	80078c8 <UART_SetConfig+0x1f8>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ae:	e082      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078b0:	2302      	movs	r3, #2
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b6:	e07e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078b8:	2304      	movs	r3, #4
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078be:	e07a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078c0:	2308      	movs	r3, #8
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c6:	e076      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ce:	e072      	b.n	80079b6 <UART_SetConfig+0x2e6>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a35      	ldr	r2, [pc, #212]	; (80079ac <UART_SetConfig+0x2dc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d12a      	bne.n	8007930 <UART_SetConfig+0x260>
 80078da:	4b30      	ldr	r3, [pc, #192]	; (800799c <UART_SetConfig+0x2cc>)
 80078dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e8:	d01a      	beq.n	8007920 <UART_SetConfig+0x250>
 80078ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ee:	d81b      	bhi.n	8007928 <UART_SetConfig+0x258>
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f4:	d00c      	beq.n	8007910 <UART_SetConfig+0x240>
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fa:	d815      	bhi.n	8007928 <UART_SetConfig+0x258>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <UART_SetConfig+0x238>
 8007900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007904:	d008      	beq.n	8007918 <UART_SetConfig+0x248>
 8007906:	e00f      	b.n	8007928 <UART_SetConfig+0x258>
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800790e:	e052      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007910:	2302      	movs	r3, #2
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007916:	e04e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800791e:	e04a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007926:	e046      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800792e:	e042      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a17      	ldr	r2, [pc, #92]	; (8007994 <UART_SetConfig+0x2c4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d13a      	bne.n	80079b0 <UART_SetConfig+0x2e0>
 800793a:	4b18      	ldr	r3, [pc, #96]	; (800799c <UART_SetConfig+0x2cc>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007948:	d01a      	beq.n	8007980 <UART_SetConfig+0x2b0>
 800794a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800794e:	d81b      	bhi.n	8007988 <UART_SetConfig+0x2b8>
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007954:	d00c      	beq.n	8007970 <UART_SetConfig+0x2a0>
 8007956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795a:	d815      	bhi.n	8007988 <UART_SetConfig+0x2b8>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <UART_SetConfig+0x298>
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007964:	d008      	beq.n	8007978 <UART_SetConfig+0x2a8>
 8007966:	e00f      	b.n	8007988 <UART_SetConfig+0x2b8>
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800796e:	e022      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007970:	2302      	movs	r3, #2
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007976:	e01e      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007978:	2304      	movs	r3, #4
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797e:	e01a      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007980:	2308      	movs	r3, #8
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007986:	e016      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007988:	2310      	movs	r3, #16
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798e:	e012      	b.n	80079b6 <UART_SetConfig+0x2e6>
 8007990:	efff69f3 	.word	0xefff69f3
 8007994:	40008000 	.word	0x40008000
 8007998:	40013800 	.word	0x40013800
 800799c:	40021000 	.word	0x40021000
 80079a0:	40004400 	.word	0x40004400
 80079a4:	40004800 	.word	0x40004800
 80079a8:	40004c00 	.word	0x40004c00
 80079ac:	40005000 	.word	0x40005000
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a9f      	ldr	r2, [pc, #636]	; (8007c38 <UART_SetConfig+0x568>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d17a      	bne.n	8007ab6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d824      	bhi.n	8007a12 <UART_SetConfig+0x342>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x300>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	08007a13 	.word	0x08007a13
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a13 	.word	0x08007a13
 80079e0:	08007a03 	.word	0x08007a03
 80079e4:	08007a13 	.word	0x08007a13
 80079e8:	08007a13 	.word	0x08007a13
 80079ec:	08007a13 	.word	0x08007a13
 80079f0:	08007a0b 	.word	0x08007a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fe fd32 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 80079f8:	61f8      	str	r0, [r7, #28]
        break;
 80079fa:	e010      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b8f      	ldr	r3, [pc, #572]	; (8007c3c <UART_SetConfig+0x56c>)
 80079fe:	61fb      	str	r3, [r7, #28]
        break;
 8007a00:	e00d      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fe fc93 	bl	800632c <HAL_RCC_GetSysClockFreq>
 8007a06:	61f8      	str	r0, [r7, #28]
        break;
 8007a08:	e009      	b.n	8007a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a0e:	61fb      	str	r3, [r7, #28]
        break;
 8007a10:	e005      	b.n	8007a1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80fb 	beq.w	8007c1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d305      	bcc.n	8007a42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d903      	bls.n	8007a4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a48:	e0e8      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	461c      	mov	r4, r3
 8007a50:	4615      	mov	r5, r2
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	022b      	lsls	r3, r5, #8
 8007a5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a60:	0222      	lsls	r2, r4, #8
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6849      	ldr	r1, [r1, #4]
 8007a66:	0849      	lsrs	r1, r1, #1
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	4681      	mov	r9, r0
 8007a6e:	eb12 0a08 	adds.w	sl, r2, r8
 8007a72:	eb43 0b09 	adc.w	fp, r3, r9
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a84:	4650      	mov	r0, sl
 8007a86:	4659      	mov	r1, fp
 8007a88:	f7f8 fc02 	bl	8000290 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4613      	mov	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9a:	d308      	bcc.n	8007aae <UART_SetConfig+0x3de>
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aa2:	d204      	bcs.n	8007aae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	60da      	str	r2, [r3, #12]
 8007aac:	e0b6      	b.n	8007c1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ab4:	e0b2      	b.n	8007c1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007abe:	d15e      	bne.n	8007b7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d828      	bhi.n	8007b1a <UART_SetConfig+0x44a>
 8007ac8:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <UART_SetConfig+0x400>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	08007b1b 	.word	0x08007b1b
 8007ae0:	08007b0b 	.word	0x08007b0b
 8007ae4:	08007b1b 	.word	0x08007b1b
 8007ae8:	08007b1b 	.word	0x08007b1b
 8007aec:	08007b1b 	.word	0x08007b1b
 8007af0:	08007b13 	.word	0x08007b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe fcb2 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007af8:	61f8      	str	r0, [r7, #28]
        break;
 8007afa:	e014      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007afc:	f7fe fcc4 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 8007b00:	61f8      	str	r0, [r7, #28]
        break;
 8007b02:	e010      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b04:	4b4d      	ldr	r3, [pc, #308]	; (8007c3c <UART_SetConfig+0x56c>)
 8007b06:	61fb      	str	r3, [r7, #28]
        break;
 8007b08:	e00d      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b0a:	f7fe fc0f 	bl	800632c <HAL_RCC_GetSysClockFreq>
 8007b0e:	61f8      	str	r0, [r7, #28]
        break;
 8007b10:	e009      	b.n	8007b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b16:	61fb      	str	r3, [r7, #28]
        break;
 8007b18:	e005      	b.n	8007b26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d077      	beq.n	8007c1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	005a      	lsls	r2, r3, #1
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	441a      	add	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	d916      	bls.n	8007b76 <UART_SetConfig+0x4a6>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4e:	d212      	bcs.n	8007b76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f023 030f 	bic.w	r3, r3, #15
 8007b58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	8afb      	ldrh	r3, [r7, #22]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	8afa      	ldrh	r2, [r7, #22]
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e052      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b7c:	e04e      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d827      	bhi.n	8007bd6 <UART_SetConfig+0x506>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x4bc>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bd7 	.word	0x08007bd7
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bd7 	.word	0x08007bd7
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007bd7 	.word	0x08007bd7
 8007bac:	08007bcf 	.word	0x08007bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fe fc54 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007bb4:	61f8      	str	r0, [r7, #28]
        break;
 8007bb6:	e014      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb8:	f7fe fc66 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 8007bbc:	61f8      	str	r0, [r7, #28]
        break;
 8007bbe:	e010      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <UART_SetConfig+0x56c>)
 8007bc2:	61fb      	str	r3, [r7, #28]
        break;
 8007bc4:	e00d      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc6:	f7fe fbb1 	bl	800632c <HAL_RCC_GetSysClockFreq>
 8007bca:	61f8      	str	r0, [r7, #28]
        break;
 8007bcc:	e009      	b.n	8007be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd2:	61fb      	str	r3, [r7, #28]
        break;
 8007bd4:	e005      	b.n	8007be2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007be0:	bf00      	nop
    }

    if (pclk != 0U)
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	085a      	lsrs	r2, r3, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d909      	bls.n	8007c16 <UART_SetConfig+0x546>
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d205      	bcs.n	8007c16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60da      	str	r2, [r3, #12]
 8007c14:	e002      	b.n	8007c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	40008000 	.word	0x40008000
 8007c3c:	00f42400 	.word	0x00f42400

08007c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d3e:	d10a      	bne.n	8007d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d94:	f7fb fe74 	bl	8003a80 <HAL_GetTick>
 8007d98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d10e      	bne.n	8007dc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f82d 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e023      	b.n	8007e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d10e      	bne.n	8007df2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f817 	bl	8007e16 <UART_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e00d      	b.n	8007e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b09c      	sub	sp, #112	; 0x70
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	e0a5      	b.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	f000 80a1 	beq.w	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e32:	f7fb fe25 	bl	8003a80 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d13e      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	f023 0301 	bic.w	r3, r3, #1
 8007e90:	663b      	str	r3, [r7, #96]	; 0x60
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e067      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04f      	beq.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee2:	d147      	bne.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e010      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69da      	ldr	r2, [r3, #28]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	f43f af4a 	beq.w	8007e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3770      	adds	r7, #112	; 0x70
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b095      	sub	sp, #84	; 0x54
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e5      	bne.n	8007fd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	2b01      	cmp	r3, #1
 8008012:	d118      	bne.n	8008046 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	60bb      	str	r3, [r7, #8]
   return(result);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	647b      	str	r3, [r7, #68]	; 0x44
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6979      	ldr	r1, [r7, #20]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008058:	bf00      	nop
 800805a:	3754      	adds	r7, #84	; 0x54
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fb0e 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6979      	ldr	r1, [r7, #20]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	613b      	str	r3, [r7, #16]
   return(result);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fada 	bl	8007690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080dc:	bf00      	nop
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <__assert_func>:
 80080f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080fa:	4614      	mov	r4, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <__assert_func+0x2c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4605      	mov	r5, r0
 8008104:	68d8      	ldr	r0, [r3, #12]
 8008106:	b14c      	cbz	r4, 800811c <__assert_func+0x24>
 8008108:	4b07      	ldr	r3, [pc, #28]	; (8008128 <__assert_func+0x30>)
 800810a:	9100      	str	r1, [sp, #0]
 800810c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008110:	4906      	ldr	r1, [pc, #24]	; (800812c <__assert_func+0x34>)
 8008112:	462b      	mov	r3, r5
 8008114:	f000 f814 	bl	8008140 <fiprintf>
 8008118:	f000 fd84 	bl	8008c24 <abort>
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <__assert_func+0x38>)
 800811e:	461c      	mov	r4, r3
 8008120:	e7f3      	b.n	800810a <__assert_func+0x12>
 8008122:	bf00      	nop
 8008124:	200000ac 	.word	0x200000ac
 8008128:	08009a20 	.word	0x08009a20
 800812c:	08009a2d 	.word	0x08009a2d
 8008130:	08009a5b 	.word	0x08009a5b

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	; (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	200000ac 	.word	0x200000ac

08008140 <fiprintf>:
 8008140:	b40e      	push	{r1, r2, r3}
 8008142:	b503      	push	{r0, r1, lr}
 8008144:	4601      	mov	r1, r0
 8008146:	ab03      	add	r3, sp, #12
 8008148:	4805      	ldr	r0, [pc, #20]	; (8008160 <fiprintf+0x20>)
 800814a:	f853 2b04 	ldr.w	r2, [r3], #4
 800814e:	6800      	ldr	r0, [r0, #0]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f000 f945 	bl	80083e0 <_vfiprintf_r>
 8008156:	b002      	add	sp, #8
 8008158:	f85d eb04 	ldr.w	lr, [sp], #4
 800815c:	b003      	add	sp, #12
 800815e:	4770      	bx	lr
 8008160:	200000ac 	.word	0x200000ac

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4d0d      	ldr	r5, [pc, #52]	; (800819c <__libc_init_array+0x38>)
 8008168:	4c0d      	ldr	r4, [pc, #52]	; (80081a0 <__libc_init_array+0x3c>)
 800816a:	1b64      	subs	r4, r4, r5
 800816c:	10a4      	asrs	r4, r4, #2
 800816e:	2600      	movs	r6, #0
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	4d0b      	ldr	r5, [pc, #44]	; (80081a4 <__libc_init_array+0x40>)
 8008176:	4c0c      	ldr	r4, [pc, #48]	; (80081a8 <__libc_init_array+0x44>)
 8008178:	f001 f878 	bl	800926c <_init>
 800817c:	1b64      	subs	r4, r4, r5
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	2600      	movs	r6, #0
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	08009afc 	.word	0x08009afc
 80081a0:	08009afc 	.word	0x08009afc
 80081a4:	08009afc 	.word	0x08009afc
 80081a8:	08009b00 	.word	0x08009b00

080081ac <malloc>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <malloc+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 b877 	b.w	80082a4 <_malloc_r>
 80081b6:	bf00      	nop
 80081b8:	200000ac 	.word	0x200000ac

080081bc <memset>:
 80081bc:	4402      	add	r2, r0
 80081be:	4603      	mov	r3, r0
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <_free_r>:
 80081cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d044      	beq.n	800825c <_free_r+0x90>
 80081d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f1a1 0404 	sub.w	r4, r1, #4
 80081de:	bfb8      	it	lt
 80081e0:	18e4      	addlt	r4, r4, r3
 80081e2:	f000 ff47 	bl	8009074 <__malloc_lock>
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <_free_r+0x94>)
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	b933      	cbnz	r3, 80081fc <_free_r+0x30>
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	6014      	str	r4, [r2, #0]
 80081f2:	b003      	add	sp, #12
 80081f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f8:	f000 bf42 	b.w	8009080 <__malloc_unlock>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d908      	bls.n	8008212 <_free_r+0x46>
 8008200:	6825      	ldr	r5, [r4, #0]
 8008202:	1961      	adds	r1, r4, r5
 8008204:	428b      	cmp	r3, r1
 8008206:	bf01      	itttt	eq
 8008208:	6819      	ldreq	r1, [r3, #0]
 800820a:	685b      	ldreq	r3, [r3, #4]
 800820c:	1949      	addeq	r1, r1, r5
 800820e:	6021      	streq	r1, [r4, #0]
 8008210:	e7ed      	b.n	80081ee <_free_r+0x22>
 8008212:	461a      	mov	r2, r3
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	b10b      	cbz	r3, 800821c <_free_r+0x50>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d9fa      	bls.n	8008212 <_free_r+0x46>
 800821c:	6811      	ldr	r1, [r2, #0]
 800821e:	1855      	adds	r5, r2, r1
 8008220:	42a5      	cmp	r5, r4
 8008222:	d10b      	bne.n	800823c <_free_r+0x70>
 8008224:	6824      	ldr	r4, [r4, #0]
 8008226:	4421      	add	r1, r4
 8008228:	1854      	adds	r4, r2, r1
 800822a:	42a3      	cmp	r3, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	d1e0      	bne.n	80081f2 <_free_r+0x26>
 8008230:	681c      	ldr	r4, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	6053      	str	r3, [r2, #4]
 8008236:	4421      	add	r1, r4
 8008238:	6011      	str	r1, [r2, #0]
 800823a:	e7da      	b.n	80081f2 <_free_r+0x26>
 800823c:	d902      	bls.n	8008244 <_free_r+0x78>
 800823e:	230c      	movs	r3, #12
 8008240:	6003      	str	r3, [r0, #0]
 8008242:	e7d6      	b.n	80081f2 <_free_r+0x26>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1961      	adds	r1, r4, r5
 8008248:	428b      	cmp	r3, r1
 800824a:	bf04      	itt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	bf04      	itt	eq
 8008254:	1949      	addeq	r1, r1, r5
 8008256:	6021      	streq	r1, [r4, #0]
 8008258:	6054      	str	r4, [r2, #4]
 800825a:	e7ca      	b.n	80081f2 <_free_r+0x26>
 800825c:	b003      	add	sp, #12
 800825e:	bd30      	pop	{r4, r5, pc}
 8008260:	2000032c 	.word	0x2000032c

08008264 <sbrk_aligned>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4e0e      	ldr	r6, [pc, #56]	; (80082a0 <sbrk_aligned+0x3c>)
 8008268:	460c      	mov	r4, r1
 800826a:	6831      	ldr	r1, [r6, #0]
 800826c:	4605      	mov	r5, r0
 800826e:	b911      	cbnz	r1, 8008276 <sbrk_aligned+0x12>
 8008270:	f000 fc08 	bl	8008a84 <_sbrk_r>
 8008274:	6030      	str	r0, [r6, #0]
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f000 fc03 	bl	8008a84 <_sbrk_r>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	d00a      	beq.n	8008298 <sbrk_aligned+0x34>
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d007      	beq.n	800829c <sbrk_aligned+0x38>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fbf8 	bl	8008a84 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d101      	bne.n	800829c <sbrk_aligned+0x38>
 8008298:	f04f 34ff 	mov.w	r4, #4294967295
 800829c:	4620      	mov	r0, r4
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	20000330 	.word	0x20000330

080082a4 <_malloc_r>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	1ccd      	adds	r5, r1, #3
 80082aa:	f025 0503 	bic.w	r5, r5, #3
 80082ae:	3508      	adds	r5, #8
 80082b0:	2d0c      	cmp	r5, #12
 80082b2:	bf38      	it	cc
 80082b4:	250c      	movcc	r5, #12
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	4607      	mov	r7, r0
 80082ba:	db01      	blt.n	80082c0 <_malloc_r+0x1c>
 80082bc:	42a9      	cmp	r1, r5
 80082be:	d905      	bls.n	80082cc <_malloc_r+0x28>
 80082c0:	230c      	movs	r3, #12
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	2600      	movs	r6, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	4e2e      	ldr	r6, [pc, #184]	; (8008388 <_malloc_r+0xe4>)
 80082ce:	f000 fed1 	bl	8009074 <__malloc_lock>
 80082d2:	6833      	ldr	r3, [r6, #0]
 80082d4:	461c      	mov	r4, r3
 80082d6:	bb34      	cbnz	r4, 8008326 <_malloc_r+0x82>
 80082d8:	4629      	mov	r1, r5
 80082da:	4638      	mov	r0, r7
 80082dc:	f7ff ffc2 	bl	8008264 <sbrk_aligned>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	4604      	mov	r4, r0
 80082e4:	d14d      	bne.n	8008382 <_malloc_r+0xde>
 80082e6:	6834      	ldr	r4, [r6, #0]
 80082e8:	4626      	mov	r6, r4
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d140      	bne.n	8008370 <_malloc_r+0xcc>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4631      	mov	r1, r6
 80082f2:	4638      	mov	r0, r7
 80082f4:	eb04 0803 	add.w	r8, r4, r3
 80082f8:	f000 fbc4 	bl	8008a84 <_sbrk_r>
 80082fc:	4580      	cmp	r8, r0
 80082fe:	d13a      	bne.n	8008376 <_malloc_r+0xd2>
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	3503      	adds	r5, #3
 8008304:	1a6d      	subs	r5, r5, r1
 8008306:	f025 0503 	bic.w	r5, r5, #3
 800830a:	3508      	adds	r5, #8
 800830c:	2d0c      	cmp	r5, #12
 800830e:	bf38      	it	cc
 8008310:	250c      	movcc	r5, #12
 8008312:	4629      	mov	r1, r5
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff ffa5 	bl	8008264 <sbrk_aligned>
 800831a:	3001      	adds	r0, #1
 800831c:	d02b      	beq.n	8008376 <_malloc_r+0xd2>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	442b      	add	r3, r5
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	e00e      	b.n	8008344 <_malloc_r+0xa0>
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	1b52      	subs	r2, r2, r5
 800832a:	d41e      	bmi.n	800836a <_malloc_r+0xc6>
 800832c:	2a0b      	cmp	r2, #11
 800832e:	d916      	bls.n	800835e <_malloc_r+0xba>
 8008330:	1961      	adds	r1, r4, r5
 8008332:	42a3      	cmp	r3, r4
 8008334:	6025      	str	r5, [r4, #0]
 8008336:	bf18      	it	ne
 8008338:	6059      	strne	r1, [r3, #4]
 800833a:	6863      	ldr	r3, [r4, #4]
 800833c:	bf08      	it	eq
 800833e:	6031      	streq	r1, [r6, #0]
 8008340:	5162      	str	r2, [r4, r5]
 8008342:	604b      	str	r3, [r1, #4]
 8008344:	4638      	mov	r0, r7
 8008346:	f104 060b 	add.w	r6, r4, #11
 800834a:	f000 fe99 	bl	8009080 <__malloc_unlock>
 800834e:	f026 0607 	bic.w	r6, r6, #7
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	1af2      	subs	r2, r6, r3
 8008356:	d0b6      	beq.n	80082c6 <_malloc_r+0x22>
 8008358:	1b9b      	subs	r3, r3, r6
 800835a:	50a3      	str	r3, [r4, r2]
 800835c:	e7b3      	b.n	80082c6 <_malloc_r+0x22>
 800835e:	6862      	ldr	r2, [r4, #4]
 8008360:	42a3      	cmp	r3, r4
 8008362:	bf0c      	ite	eq
 8008364:	6032      	streq	r2, [r6, #0]
 8008366:	605a      	strne	r2, [r3, #4]
 8008368:	e7ec      	b.n	8008344 <_malloc_r+0xa0>
 800836a:	4623      	mov	r3, r4
 800836c:	6864      	ldr	r4, [r4, #4]
 800836e:	e7b2      	b.n	80082d6 <_malloc_r+0x32>
 8008370:	4634      	mov	r4, r6
 8008372:	6876      	ldr	r6, [r6, #4]
 8008374:	e7b9      	b.n	80082ea <_malloc_r+0x46>
 8008376:	230c      	movs	r3, #12
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	4638      	mov	r0, r7
 800837c:	f000 fe80 	bl	8009080 <__malloc_unlock>
 8008380:	e7a1      	b.n	80082c6 <_malloc_r+0x22>
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	e7de      	b.n	8008344 <_malloc_r+0xa0>
 8008386:	bf00      	nop
 8008388:	2000032c 	.word	0x2000032c

0800838c <__sfputc_r>:
 800838c:	6893      	ldr	r3, [r2, #8]
 800838e:	3b01      	subs	r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	b410      	push	{r4}
 8008394:	6093      	str	r3, [r2, #8]
 8008396:	da08      	bge.n	80083aa <__sfputc_r+0x1e>
 8008398:	6994      	ldr	r4, [r2, #24]
 800839a:	42a3      	cmp	r3, r4
 800839c:	db01      	blt.n	80083a2 <__sfputc_r+0x16>
 800839e:	290a      	cmp	r1, #10
 80083a0:	d103      	bne.n	80083aa <__sfputc_r+0x1e>
 80083a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a6:	f000 bb7d 	b.w	8008aa4 <__swbuf_r>
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	1c58      	adds	r0, r3, #1
 80083ae:	6010      	str	r0, [r2, #0]
 80083b0:	7019      	strb	r1, [r3, #0]
 80083b2:	4608      	mov	r0, r1
 80083b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <__sfputs_r>:
 80083ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083bc:	4606      	mov	r6, r0
 80083be:	460f      	mov	r7, r1
 80083c0:	4614      	mov	r4, r2
 80083c2:	18d5      	adds	r5, r2, r3
 80083c4:	42ac      	cmp	r4, r5
 80083c6:	d101      	bne.n	80083cc <__sfputs_r+0x12>
 80083c8:	2000      	movs	r0, #0
 80083ca:	e007      	b.n	80083dc <__sfputs_r+0x22>
 80083cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d0:	463a      	mov	r2, r7
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ffda 	bl	800838c <__sfputc_r>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d1f3      	bne.n	80083c4 <__sfputs_r+0xa>
 80083dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083e0 <_vfiprintf_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	460d      	mov	r5, r1
 80083e6:	b09d      	sub	sp, #116	; 0x74
 80083e8:	4614      	mov	r4, r2
 80083ea:	4698      	mov	r8, r3
 80083ec:	4606      	mov	r6, r0
 80083ee:	b118      	cbz	r0, 80083f8 <_vfiprintf_r+0x18>
 80083f0:	6983      	ldr	r3, [r0, #24]
 80083f2:	b90b      	cbnz	r3, 80083f8 <_vfiprintf_r+0x18>
 80083f4:	f000 fd38 	bl	8008e68 <__sinit>
 80083f8:	4b89      	ldr	r3, [pc, #548]	; (8008620 <_vfiprintf_r+0x240>)
 80083fa:	429d      	cmp	r5, r3
 80083fc:	d11b      	bne.n	8008436 <_vfiprintf_r+0x56>
 80083fe:	6875      	ldr	r5, [r6, #4]
 8008400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	d405      	bmi.n	8008412 <_vfiprintf_r+0x32>
 8008406:	89ab      	ldrh	r3, [r5, #12]
 8008408:	059a      	lsls	r2, r3, #22
 800840a:	d402      	bmi.n	8008412 <_vfiprintf_r+0x32>
 800840c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800840e:	f000 fdc9 	bl	8008fa4 <__retarget_lock_acquire_recursive>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	071b      	lsls	r3, r3, #28
 8008416:	d501      	bpl.n	800841c <_vfiprintf_r+0x3c>
 8008418:	692b      	ldr	r3, [r5, #16]
 800841a:	b9eb      	cbnz	r3, 8008458 <_vfiprintf_r+0x78>
 800841c:	4629      	mov	r1, r5
 800841e:	4630      	mov	r0, r6
 8008420:	f000 fb92 	bl	8008b48 <__swsetup_r>
 8008424:	b1c0      	cbz	r0, 8008458 <_vfiprintf_r+0x78>
 8008426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008428:	07dc      	lsls	r4, r3, #31
 800842a:	d50e      	bpl.n	800844a <_vfiprintf_r+0x6a>
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	b01d      	add	sp, #116	; 0x74
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	4b7b      	ldr	r3, [pc, #492]	; (8008624 <_vfiprintf_r+0x244>)
 8008438:	429d      	cmp	r5, r3
 800843a:	d101      	bne.n	8008440 <_vfiprintf_r+0x60>
 800843c:	68b5      	ldr	r5, [r6, #8]
 800843e:	e7df      	b.n	8008400 <_vfiprintf_r+0x20>
 8008440:	4b79      	ldr	r3, [pc, #484]	; (8008628 <_vfiprintf_r+0x248>)
 8008442:	429d      	cmp	r5, r3
 8008444:	bf08      	it	eq
 8008446:	68f5      	ldreq	r5, [r6, #12]
 8008448:	e7da      	b.n	8008400 <_vfiprintf_r+0x20>
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	0598      	lsls	r0, r3, #22
 800844e:	d4ed      	bmi.n	800842c <_vfiprintf_r+0x4c>
 8008450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008452:	f000 fda8 	bl	8008fa6 <__retarget_lock_release_recursive>
 8008456:	e7e9      	b.n	800842c <_vfiprintf_r+0x4c>
 8008458:	2300      	movs	r3, #0
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	2320      	movs	r3, #32
 800845e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008462:	f8cd 800c 	str.w	r8, [sp, #12]
 8008466:	2330      	movs	r3, #48	; 0x30
 8008468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800862c <_vfiprintf_r+0x24c>
 800846c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008470:	f04f 0901 	mov.w	r9, #1
 8008474:	4623      	mov	r3, r4
 8008476:	469a      	mov	sl, r3
 8008478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847c:	b10a      	cbz	r2, 8008482 <_vfiprintf_r+0xa2>
 800847e:	2a25      	cmp	r2, #37	; 0x25
 8008480:	d1f9      	bne.n	8008476 <_vfiprintf_r+0x96>
 8008482:	ebba 0b04 	subs.w	fp, sl, r4
 8008486:	d00b      	beq.n	80084a0 <_vfiprintf_r+0xc0>
 8008488:	465b      	mov	r3, fp
 800848a:	4622      	mov	r2, r4
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ff93 	bl	80083ba <__sfputs_r>
 8008494:	3001      	adds	r0, #1
 8008496:	f000 80aa 	beq.w	80085ee <_vfiprintf_r+0x20e>
 800849a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849c:	445a      	add	r2, fp
 800849e:	9209      	str	r2, [sp, #36]	; 0x24
 80084a0:	f89a 3000 	ldrb.w	r3, [sl]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a2 	beq.w	80085ee <_vfiprintf_r+0x20e>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b4:	f10a 0a01 	add.w	sl, sl, #1
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c0:	931a      	str	r3, [sp, #104]	; 0x68
 80084c2:	4654      	mov	r4, sl
 80084c4:	2205      	movs	r2, #5
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	4858      	ldr	r0, [pc, #352]	; (800862c <_vfiprintf_r+0x24c>)
 80084cc:	f7f7 fe90 	bl	80001f0 <memchr>
 80084d0:	9a04      	ldr	r2, [sp, #16]
 80084d2:	b9d8      	cbnz	r0, 800850c <_vfiprintf_r+0x12c>
 80084d4:	06d1      	lsls	r1, r2, #27
 80084d6:	bf44      	itt	mi
 80084d8:	2320      	movmi	r3, #32
 80084da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084de:	0713      	lsls	r3, r2, #28
 80084e0:	bf44      	itt	mi
 80084e2:	232b      	movmi	r3, #43	; 0x2b
 80084e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e8:	f89a 3000 	ldrb.w	r3, [sl]
 80084ec:	2b2a      	cmp	r3, #42	; 0x2a
 80084ee:	d015      	beq.n	800851c <_vfiprintf_r+0x13c>
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	4654      	mov	r4, sl
 80084f4:	2000      	movs	r0, #0
 80084f6:	f04f 0c0a 	mov.w	ip, #10
 80084fa:	4621      	mov	r1, r4
 80084fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008500:	3b30      	subs	r3, #48	; 0x30
 8008502:	2b09      	cmp	r3, #9
 8008504:	d94e      	bls.n	80085a4 <_vfiprintf_r+0x1c4>
 8008506:	b1b0      	cbz	r0, 8008536 <_vfiprintf_r+0x156>
 8008508:	9207      	str	r2, [sp, #28]
 800850a:	e014      	b.n	8008536 <_vfiprintf_r+0x156>
 800850c:	eba0 0308 	sub.w	r3, r0, r8
 8008510:	fa09 f303 	lsl.w	r3, r9, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	46a2      	mov	sl, r4
 800851a:	e7d2      	b.n	80084c2 <_vfiprintf_r+0xe2>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d19      	adds	r1, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9103      	str	r1, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfbb      	ittet	lt
 8008528:	425b      	neglt	r3, r3
 800852a:	f042 0202 	orrlt.w	r2, r2, #2
 800852e:	9307      	strge	r3, [sp, #28]
 8008530:	9307      	strlt	r3, [sp, #28]
 8008532:	bfb8      	it	lt
 8008534:	9204      	strlt	r2, [sp, #16]
 8008536:	7823      	ldrb	r3, [r4, #0]
 8008538:	2b2e      	cmp	r3, #46	; 0x2e
 800853a:	d10c      	bne.n	8008556 <_vfiprintf_r+0x176>
 800853c:	7863      	ldrb	r3, [r4, #1]
 800853e:	2b2a      	cmp	r3, #42	; 0x2a
 8008540:	d135      	bne.n	80085ae <_vfiprintf_r+0x1ce>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	1d1a      	adds	r2, r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	9203      	str	r2, [sp, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfb8      	it	lt
 800854e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008552:	3402      	adds	r4, #2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800863c <_vfiprintf_r+0x25c>
 800855a:	7821      	ldrb	r1, [r4, #0]
 800855c:	2203      	movs	r2, #3
 800855e:	4650      	mov	r0, sl
 8008560:	f7f7 fe46 	bl	80001f0 <memchr>
 8008564:	b140      	cbz	r0, 8008578 <_vfiprintf_r+0x198>
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	eba0 000a 	sub.w	r0, r0, sl
 800856c:	fa03 f000 	lsl.w	r0, r3, r0
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	4303      	orrs	r3, r0
 8008574:	3401      	adds	r4, #1
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	482c      	ldr	r0, [pc, #176]	; (8008630 <_vfiprintf_r+0x250>)
 800857e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008582:	2206      	movs	r2, #6
 8008584:	f7f7 fe34 	bl	80001f0 <memchr>
 8008588:	2800      	cmp	r0, #0
 800858a:	d03f      	beq.n	800860c <_vfiprintf_r+0x22c>
 800858c:	4b29      	ldr	r3, [pc, #164]	; (8008634 <_vfiprintf_r+0x254>)
 800858e:	bb1b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x1f8>
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	3307      	adds	r3, #7
 8008594:	f023 0307 	bic.w	r3, r3, #7
 8008598:	3308      	adds	r3, #8
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859e:	443b      	add	r3, r7
 80085a0:	9309      	str	r3, [sp, #36]	; 0x24
 80085a2:	e767      	b.n	8008474 <_vfiprintf_r+0x94>
 80085a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a8:	460c      	mov	r4, r1
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7a5      	b.n	80084fa <_vfiprintf_r+0x11a>
 80085ae:	2300      	movs	r3, #0
 80085b0:	3401      	adds	r4, #1
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f04f 0c0a 	mov.w	ip, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c0:	3a30      	subs	r2, #48	; 0x30
 80085c2:	2a09      	cmp	r2, #9
 80085c4:	d903      	bls.n	80085ce <_vfiprintf_r+0x1ee>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0c5      	beq.n	8008556 <_vfiprintf_r+0x176>
 80085ca:	9105      	str	r1, [sp, #20]
 80085cc:	e7c3      	b.n	8008556 <_vfiprintf_r+0x176>
 80085ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d2:	4604      	mov	r4, r0
 80085d4:	2301      	movs	r3, #1
 80085d6:	e7f0      	b.n	80085ba <_vfiprintf_r+0x1da>
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	462a      	mov	r2, r5
 80085de:	4b16      	ldr	r3, [pc, #88]	; (8008638 <_vfiprintf_r+0x258>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4630      	mov	r0, r6
 80085e4:	f3af 8000 	nop.w
 80085e8:	4607      	mov	r7, r0
 80085ea:	1c78      	adds	r0, r7, #1
 80085ec:	d1d6      	bne.n	800859c <_vfiprintf_r+0x1bc>
 80085ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f0:	07d9      	lsls	r1, r3, #31
 80085f2:	d405      	bmi.n	8008600 <_vfiprintf_r+0x220>
 80085f4:	89ab      	ldrh	r3, [r5, #12]
 80085f6:	059a      	lsls	r2, r3, #22
 80085f8:	d402      	bmi.n	8008600 <_vfiprintf_r+0x220>
 80085fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fc:	f000 fcd3 	bl	8008fa6 <__retarget_lock_release_recursive>
 8008600:	89ab      	ldrh	r3, [r5, #12]
 8008602:	065b      	lsls	r3, r3, #25
 8008604:	f53f af12 	bmi.w	800842c <_vfiprintf_r+0x4c>
 8008608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860a:	e711      	b.n	8008430 <_vfiprintf_r+0x50>
 800860c:	ab03      	add	r3, sp, #12
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	462a      	mov	r2, r5
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <_vfiprintf_r+0x258>)
 8008614:	a904      	add	r1, sp, #16
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f880 	bl	800871c <_printf_i>
 800861c:	e7e4      	b.n	80085e8 <_vfiprintf_r+0x208>
 800861e:	bf00      	nop
 8008620:	08009ab4 	.word	0x08009ab4
 8008624:	08009ad4 	.word	0x08009ad4
 8008628:	08009a94 	.word	0x08009a94
 800862c:	08009a60 	.word	0x08009a60
 8008630:	08009a6a 	.word	0x08009a6a
 8008634:	00000000 	.word	0x00000000
 8008638:	080083bb 	.word	0x080083bb
 800863c:	08009a66 	.word	0x08009a66

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4699      	mov	r9, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008650:	4293      	cmp	r3, r2
 8008652:	bfb8      	it	lt
 8008654:	4613      	movlt	r3, r2
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800865c:	4607      	mov	r7, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc26      	bgt.n	80086d6 <_printf_common+0x96>
 8008688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800868c:	1e13      	subs	r3, r2, #0
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42b      	bmi.n	80086f0 <_printf_common+0xb0>
 8008698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869c:	4649      	mov	r1, r9
 800869e:	4638      	mov	r0, r7
 80086a0:	47c0      	blx	r8
 80086a2:	3001      	adds	r0, #1
 80086a4:	d01e      	beq.n	80086e4 <_printf_common+0xa4>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	68e5      	ldr	r5, [r4, #12]
 80086aa:	6832      	ldr	r2, [r6, #0]
 80086ac:	f003 0306 	and.w	r3, r3, #6
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	bf08      	it	eq
 80086b4:	1aad      	subeq	r5, r5, r2
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	6922      	ldr	r2, [r4, #16]
 80086ba:	bf0c      	ite	eq
 80086bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c0:	2500      	movne	r5, #0
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bfc4      	itt	gt
 80086c6:	1a9b      	subgt	r3, r3, r2
 80086c8:	18ed      	addgt	r5, r5, r3
 80086ca:	2600      	movs	r6, #0
 80086cc:	341a      	adds	r4, #26
 80086ce:	42b5      	cmp	r5, r6
 80086d0:	d11a      	bne.n	8008708 <_printf_common+0xc8>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e008      	b.n	80086e8 <_printf_common+0xa8>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4649      	mov	r1, r9
 80086dc:	4638      	mov	r0, r7
 80086de:	47c0      	blx	r8
 80086e0:	3001      	adds	r0, #1
 80086e2:	d103      	bne.n	80086ec <_printf_common+0xac>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	3501      	adds	r5, #1
 80086ee:	e7c6      	b.n	800867e <_printf_common+0x3e>
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	2030      	movs	r0, #48	; 0x30
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fa:	4422      	add	r2, r4
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008704:	3302      	adds	r3, #2
 8008706:	e7c7      	b.n	8008698 <_printf_common+0x58>
 8008708:	2301      	movs	r3, #1
 800870a:	4622      	mov	r2, r4
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d0e6      	beq.n	80086e4 <_printf_common+0xa4>
 8008716:	3601      	adds	r6, #1
 8008718:	e7d9      	b.n	80086ce <_printf_common+0x8e>
	...

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008724:	2f78      	cmp	r7, #120	; 0x78
 8008726:	4691      	mov	r9, r2
 8008728:	4680      	mov	r8, r0
 800872a:	460c      	mov	r4, r1
 800872c:	469a      	mov	sl, r3
 800872e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	; 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d8 	beq.w	80088ee <_printf_i+0x1d2>
 800873e:	2f58      	cmp	r7, #88	; 0x58
 8008740:	f000 80a3 	beq.w	800888a <_printf_i+0x16e>
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	; (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088d5 	.word	0x080088d5
 800878c:	080087f9 	.word	0x080087f9
 8008790:	080088b7 	.word	0x080088b7
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088f7 	.word	0x080088f7
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	080088bf 	.word	0x080088bf
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0a3      	b.n	8008910 <_printf_i+0x1f4>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	6829      	ldr	r1, [r5, #0]
 80087cc:	0606      	lsls	r6, r0, #24
 80087ce:	f101 0304 	add.w	r3, r1, #4
 80087d2:	d50a      	bpl.n	80087ea <_printf_i+0xce>
 80087d4:	680e      	ldr	r6, [r1, #0]
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	2e00      	cmp	r6, #0
 80087da:	da03      	bge.n	80087e4 <_printf_i+0xc8>
 80087dc:	232d      	movs	r3, #45	; 0x2d
 80087de:	4276      	negs	r6, r6
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e4:	485e      	ldr	r0, [pc, #376]	; (8008960 <_printf_i+0x244>)
 80087e6:	230a      	movs	r3, #10
 80087e8:	e019      	b.n	800881e <_printf_i+0x102>
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087f2:	bf18      	it	ne
 80087f4:	b236      	sxthne	r6, r6
 80087f6:	e7ef      	b.n	80087d8 <_printf_i+0xbc>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	0601      	lsls	r1, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xec>
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0xf2>
 8008808:	0646      	lsls	r6, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xe8>
 800880c:	881e      	ldrh	r6, [r3, #0]
 800880e:	4854      	ldr	r0, [pc, #336]	; (8008960 <_printf_i+0x244>)
 8008810:	2f6f      	cmp	r7, #111	; 0x6f
 8008812:	bf0c      	ite	eq
 8008814:	2308      	moveq	r3, #8
 8008816:	230a      	movne	r3, #10
 8008818:	2100      	movs	r1, #0
 800881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881e:	6865      	ldr	r5, [r4, #4]
 8008820:	60a5      	str	r5, [r4, #8]
 8008822:	2d00      	cmp	r5, #0
 8008824:	bfa2      	ittt	ge
 8008826:	6821      	ldrge	r1, [r4, #0]
 8008828:	f021 0104 	bicge.w	r1, r1, #4
 800882c:	6021      	strge	r1, [r4, #0]
 800882e:	b90e      	cbnz	r6, 8008834 <_printf_i+0x118>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d04d      	beq.n	80088d0 <_printf_i+0x1b4>
 8008834:	4615      	mov	r5, r2
 8008836:	fbb6 f1f3 	udiv	r1, r6, r3
 800883a:	fb03 6711 	mls	r7, r3, r1, r6
 800883e:	5dc7      	ldrb	r7, [r0, r7]
 8008840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008844:	4637      	mov	r7, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	460e      	mov	r6, r1
 800884a:	d9f4      	bls.n	8008836 <_printf_i+0x11a>
 800884c:	2b08      	cmp	r3, #8
 800884e:	d10b      	bne.n	8008868 <_printf_i+0x14c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07de      	lsls	r6, r3, #31
 8008854:	d508      	bpl.n	8008868 <_printf_i+0x14c>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4299      	cmp	r1, r3
 800885c:	bfde      	ittt	le
 800885e:	2330      	movle	r3, #48	; 0x30
 8008860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	f8cd a000 	str.w	sl, [sp]
 8008870:	464b      	mov	r3, r9
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fee2 	bl	8008640 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14c      	bne.n	800891a <_printf_i+0x1fe>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b004      	add	sp, #16
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	4835      	ldr	r0, [pc, #212]	; (8008960 <_printf_i+0x244>)
 800888c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f851 6b04 	ldr.w	r6, [r1], #4
 8008898:	6029      	str	r1, [r5, #0]
 800889a:	061d      	lsls	r5, r3, #24
 800889c:	d514      	bpl.n	80088c8 <_printf_i+0x1ac>
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	bf44      	itt	mi
 80088a2:	f043 0320 	orrmi.w	r3, r3, #32
 80088a6:	6023      	strmi	r3, [r4, #0]
 80088a8:	b91e      	cbnz	r6, 80088b2 <_printf_i+0x196>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f023 0320 	bic.w	r3, r3, #32
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	2310      	movs	r3, #16
 80088b4:	e7b0      	b.n	8008818 <_printf_i+0xfc>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f043 0320 	orr.w	r3, r3, #32
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	2378      	movs	r3, #120	; 0x78
 80088c0:	4828      	ldr	r0, [pc, #160]	; (8008964 <_printf_i+0x248>)
 80088c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088c6:	e7e3      	b.n	8008890 <_printf_i+0x174>
 80088c8:	0659      	lsls	r1, r3, #25
 80088ca:	bf48      	it	mi
 80088cc:	b2b6      	uxthmi	r6, r6
 80088ce:	e7e6      	b.n	800889e <_printf_i+0x182>
 80088d0:	4615      	mov	r5, r2
 80088d2:	e7bb      	b.n	800884c <_printf_i+0x130>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6826      	ldr	r6, [r4, #0]
 80088d8:	6961      	ldr	r1, [r4, #20]
 80088da:	1d18      	adds	r0, r3, #4
 80088dc:	6028      	str	r0, [r5, #0]
 80088de:	0635      	lsls	r5, r6, #24
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0x1cc>
 80088e4:	6019      	str	r1, [r3, #0]
 80088e6:	e002      	b.n	80088ee <_printf_i+0x1d2>
 80088e8:	0670      	lsls	r0, r6, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0x1c8>
 80088ec:	8019      	strh	r1, [r3, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6123      	str	r3, [r4, #16]
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7ba      	b.n	800886c <_printf_i+0x150>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	6862      	ldr	r2, [r4, #4]
 8008900:	2100      	movs	r1, #0
 8008902:	4628      	mov	r0, r5
 8008904:	f7f7 fc74 	bl	80001f0 <memchr>
 8008908:	b108      	cbz	r0, 800890e <_printf_i+0x1f2>
 800890a:	1b40      	subs	r0, r0, r5
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	2300      	movs	r3, #0
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	e7a8      	b.n	800886c <_printf_i+0x150>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	462a      	mov	r2, r5
 800891e:	4649      	mov	r1, r9
 8008920:	4640      	mov	r0, r8
 8008922:	47d0      	blx	sl
 8008924:	3001      	adds	r0, #1
 8008926:	d0ab      	beq.n	8008880 <_printf_i+0x164>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	079b      	lsls	r3, r3, #30
 800892c:	d413      	bmi.n	8008956 <_printf_i+0x23a>
 800892e:	68e0      	ldr	r0, [r4, #12]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	4298      	cmp	r0, r3
 8008934:	bfb8      	it	lt
 8008936:	4618      	movlt	r0, r3
 8008938:	e7a4      	b.n	8008884 <_printf_i+0x168>
 800893a:	2301      	movs	r3, #1
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d09b      	beq.n	8008880 <_printf_i+0x164>
 8008948:	3501      	adds	r5, #1
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	9903      	ldr	r1, [sp, #12]
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	42ab      	cmp	r3, r5
 8008952:	dcf2      	bgt.n	800893a <_printf_i+0x21e>
 8008954:	e7eb      	b.n	800892e <_printf_i+0x212>
 8008956:	2500      	movs	r5, #0
 8008958:	f104 0619 	add.w	r6, r4, #25
 800895c:	e7f5      	b.n	800894a <_printf_i+0x22e>
 800895e:	bf00      	nop
 8008960:	08009a71 	.word	0x08009a71
 8008964:	08009a82 	.word	0x08009a82

08008968 <iprintf>:
 8008968:	b40f      	push	{r0, r1, r2, r3}
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <iprintf+0x2c>)
 800896c:	b513      	push	{r0, r1, r4, lr}
 800896e:	681c      	ldr	r4, [r3, #0]
 8008970:	b124      	cbz	r4, 800897c <iprintf+0x14>
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	b913      	cbnz	r3, 800897c <iprintf+0x14>
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fa76 	bl	8008e68 <__sinit>
 800897c:	ab05      	add	r3, sp, #20
 800897e:	9a04      	ldr	r2, [sp, #16]
 8008980:	68a1      	ldr	r1, [r4, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff fd2b 	bl	80083e0 <_vfiprintf_r>
 800898a:	b002      	add	sp, #8
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	b004      	add	sp, #16
 8008992:	4770      	bx	lr
 8008994:	200000ac 	.word	0x200000ac

08008998 <_puts_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	460e      	mov	r6, r1
 800899c:	4605      	mov	r5, r0
 800899e:	b118      	cbz	r0, 80089a8 <_puts_r+0x10>
 80089a0:	6983      	ldr	r3, [r0, #24]
 80089a2:	b90b      	cbnz	r3, 80089a8 <_puts_r+0x10>
 80089a4:	f000 fa60 	bl	8008e68 <__sinit>
 80089a8:	69ab      	ldr	r3, [r5, #24]
 80089aa:	68ac      	ldr	r4, [r5, #8]
 80089ac:	b913      	cbnz	r3, 80089b4 <_puts_r+0x1c>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 fa5a 	bl	8008e68 <__sinit>
 80089b4:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <_puts_r+0xd0>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d120      	bne.n	80089fc <_puts_r+0x64>
 80089ba:	686c      	ldr	r4, [r5, #4]
 80089bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089be:	07db      	lsls	r3, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_puts_r+0x36>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	0598      	lsls	r0, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_puts_r+0x36>
 80089c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ca:	f000 faeb 	bl	8008fa4 <__retarget_lock_acquire_recursive>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d51d      	bpl.n	8008a10 <_puts_r+0x78>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b1db      	cbz	r3, 8008a10 <_puts_r+0x78>
 80089d8:	3e01      	subs	r6, #1
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	bb39      	cbnz	r1, 8008a36 <_puts_r+0x9e>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da38      	bge.n	8008a5c <_puts_r+0xc4>
 80089ea:	4622      	mov	r2, r4
 80089ec:	210a      	movs	r1, #10
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f858 	bl	8008aa4 <__swbuf_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d011      	beq.n	8008a1c <_puts_r+0x84>
 80089f8:	250a      	movs	r5, #10
 80089fa:	e011      	b.n	8008a20 <_puts_r+0x88>
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <_puts_r+0xd4>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d101      	bne.n	8008a06 <_puts_r+0x6e>
 8008a02:	68ac      	ldr	r4, [r5, #8]
 8008a04:	e7da      	b.n	80089bc <_puts_r+0x24>
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <_puts_r+0xd8>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	bf08      	it	eq
 8008a0c:	68ec      	ldreq	r4, [r5, #12]
 8008a0e:	e7d5      	b.n	80089bc <_puts_r+0x24>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 f898 	bl	8008b48 <__swsetup_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0dd      	beq.n	80089d8 <_puts_r+0x40>
 8008a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a22:	07da      	lsls	r2, r3, #31
 8008a24:	d405      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_puts_r+0x9a>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f000 faba 	bl	8008fa6 <__retarget_lock_release_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da04      	bge.n	8008a44 <_puts_r+0xac>
 8008a3a:	69a2      	ldr	r2, [r4, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	dc06      	bgt.n	8008a4e <_puts_r+0xb6>
 8008a40:	290a      	cmp	r1, #10
 8008a42:	d004      	beq.n	8008a4e <_puts_r+0xb6>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	7019      	strb	r1, [r3, #0]
 8008a4c:	e7c5      	b.n	80089da <_puts_r+0x42>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 f827 	bl	8008aa4 <__swbuf_r>
 8008a56:	3001      	adds	r0, #1
 8008a58:	d1bf      	bne.n	80089da <_puts_r+0x42>
 8008a5a:	e7df      	b.n	8008a1c <_puts_r+0x84>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	250a      	movs	r5, #10
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	701d      	strb	r5, [r3, #0]
 8008a66:	e7db      	b.n	8008a20 <_puts_r+0x88>
 8008a68:	08009ab4 	.word	0x08009ab4
 8008a6c:	08009ad4 	.word	0x08009ad4
 8008a70:	08009a94 	.word	0x08009a94

08008a74 <puts>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <puts+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f7ff bf8d 	b.w	8008998 <_puts_r>
 8008a7e:	bf00      	nop
 8008a80:	200000ac 	.word	0x200000ac

08008a84 <_sbrk_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d06      	ldr	r5, [pc, #24]	; (8008aa0 <_sbrk_r+0x1c>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7fa ff1c 	bl	80038cc <_sbrk>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_sbrk_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_sbrk_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20000338 	.word	0x20000338

08008aa4 <__swbuf_r>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	460e      	mov	r6, r1
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	4605      	mov	r5, r0
 8008aac:	b118      	cbz	r0, 8008ab6 <__swbuf_r+0x12>
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	b90b      	cbnz	r3, 8008ab6 <__swbuf_r+0x12>
 8008ab2:	f000 f9d9 	bl	8008e68 <__sinit>
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <__swbuf_r+0x98>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d12b      	bne.n	8008b14 <__swbuf_r+0x70>
 8008abc:	686c      	ldr	r4, [r5, #4]
 8008abe:	69a3      	ldr	r3, [r4, #24]
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	071a      	lsls	r2, r3, #28
 8008ac6:	d52f      	bpl.n	8008b28 <__swbuf_r+0x84>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b36b      	cbz	r3, 8008b28 <__swbuf_r+0x84>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	b2f6      	uxtb	r6, r6
 8008ad6:	4283      	cmp	r3, r0
 8008ad8:	4637      	mov	r7, r6
 8008ada:	dc04      	bgt.n	8008ae6 <__swbuf_r+0x42>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f000 f92e 	bl	8008d40 <_fflush_r>
 8008ae4:	bb30      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	701e      	strb	r6, [r3, #0]
 8008af4:	6963      	ldr	r3, [r4, #20]
 8008af6:	3001      	adds	r0, #1
 8008af8:	4283      	cmp	r3, r0
 8008afa:	d004      	beq.n	8008b06 <__swbuf_r+0x62>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	07db      	lsls	r3, r3, #31
 8008b00:	d506      	bpl.n	8008b10 <__swbuf_r+0x6c>
 8008b02:	2e0a      	cmp	r6, #10
 8008b04:	d104      	bne.n	8008b10 <__swbuf_r+0x6c>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 f919 	bl	8008d40 <_fflush_r>
 8008b0e:	b988      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008b10:	4638      	mov	r0, r7
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <__swbuf_r+0x9c>)
 8008b16:	429c      	cmp	r4, r3
 8008b18:	d101      	bne.n	8008b1e <__swbuf_r+0x7a>
 8008b1a:	68ac      	ldr	r4, [r5, #8]
 8008b1c:	e7cf      	b.n	8008abe <__swbuf_r+0x1a>
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <__swbuf_r+0xa0>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	bf08      	it	eq
 8008b24:	68ec      	ldreq	r4, [r5, #12]
 8008b26:	e7ca      	b.n	8008abe <__swbuf_r+0x1a>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f80c 	bl	8008b48 <__swsetup_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d0cb      	beq.n	8008acc <__swbuf_r+0x28>
 8008b34:	f04f 37ff 	mov.w	r7, #4294967295
 8008b38:	e7ea      	b.n	8008b10 <__swbuf_r+0x6c>
 8008b3a:	bf00      	nop
 8008b3c:	08009ab4 	.word	0x08009ab4
 8008b40:	08009ad4 	.word	0x08009ad4
 8008b44:	08009a94 	.word	0x08009a94

08008b48 <__swsetup_r>:
 8008b48:	4b32      	ldr	r3, [pc, #200]	; (8008c14 <__swsetup_r+0xcc>)
 8008b4a:	b570      	push	{r4, r5, r6, lr}
 8008b4c:	681d      	ldr	r5, [r3, #0]
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	b125      	cbz	r5, 8008b5e <__swsetup_r+0x16>
 8008b54:	69ab      	ldr	r3, [r5, #24]
 8008b56:	b913      	cbnz	r3, 8008b5e <__swsetup_r+0x16>
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 f985 	bl	8008e68 <__sinit>
 8008b5e:	4b2e      	ldr	r3, [pc, #184]	; (8008c18 <__swsetup_r+0xd0>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	d10f      	bne.n	8008b84 <__swsetup_r+0x3c>
 8008b64:	686c      	ldr	r4, [r5, #4]
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b6c:	0719      	lsls	r1, r3, #28
 8008b6e:	d42c      	bmi.n	8008bca <__swsetup_r+0x82>
 8008b70:	06dd      	lsls	r5, r3, #27
 8008b72:	d411      	bmi.n	8008b98 <__swsetup_r+0x50>
 8008b74:	2309      	movs	r3, #9
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	e03e      	b.n	8008c02 <__swsetup_r+0xba>
 8008b84:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <__swsetup_r+0xd4>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	d101      	bne.n	8008b8e <__swsetup_r+0x46>
 8008b8a:	68ac      	ldr	r4, [r5, #8]
 8008b8c:	e7eb      	b.n	8008b66 <__swsetup_r+0x1e>
 8008b8e:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <__swsetup_r+0xd8>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	bf08      	it	eq
 8008b94:	68ec      	ldreq	r4, [r5, #12]
 8008b96:	e7e6      	b.n	8008b66 <__swsetup_r+0x1e>
 8008b98:	0758      	lsls	r0, r3, #29
 8008b9a:	d512      	bpl.n	8008bc2 <__swsetup_r+0x7a>
 8008b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9e:	b141      	cbz	r1, 8008bb2 <__swsetup_r+0x6a>
 8008ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	d002      	beq.n	8008bae <__swsetup_r+0x66>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff fb0f 	bl	80081cc <_free_r>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6063      	str	r3, [r4, #4]
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0308 	orr.w	r3, r3, #8
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	b94b      	cbnz	r3, 8008be2 <__swsetup_r+0x9a>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd8:	d003      	beq.n	8008be2 <__swsetup_r+0x9a>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 fa09 	bl	8008ff4 <__smakebuf_r>
 8008be2:	89a0      	ldrh	r0, [r4, #12]
 8008be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be8:	f010 0301 	ands.w	r3, r0, #1
 8008bec:	d00a      	beq.n	8008c04 <__swsetup_r+0xbc>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60a3      	str	r3, [r4, #8]
 8008bf2:	6963      	ldr	r3, [r4, #20]
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	61a3      	str	r3, [r4, #24]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	b943      	cbnz	r3, 8008c0e <__swsetup_r+0xc6>
 8008bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c00:	d1ba      	bne.n	8008b78 <__swsetup_r+0x30>
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	0781      	lsls	r1, r0, #30
 8008c06:	bf58      	it	pl
 8008c08:	6963      	ldrpl	r3, [r4, #20]
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	e7f4      	b.n	8008bf8 <__swsetup_r+0xb0>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e7f7      	b.n	8008c02 <__swsetup_r+0xba>
 8008c12:	bf00      	nop
 8008c14:	200000ac 	.word	0x200000ac
 8008c18:	08009ab4 	.word	0x08009ab4
 8008c1c:	08009ad4 	.word	0x08009ad4
 8008c20:	08009a94 	.word	0x08009a94

08008c24 <abort>:
 8008c24:	b508      	push	{r3, lr}
 8008c26:	2006      	movs	r0, #6
 8008c28:	f000 fa58 	bl	80090dc <raise>
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	f7fa fdf1 	bl	8003814 <_exit>
	...

08008c34 <__sflush_r>:
 8008c34:	898a      	ldrh	r2, [r1, #12]
 8008c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	0710      	lsls	r0, r2, #28
 8008c3e:	460c      	mov	r4, r1
 8008c40:	d458      	bmi.n	8008cf4 <__sflush_r+0xc0>
 8008c42:	684b      	ldr	r3, [r1, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc05      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dc02      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d0f9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c60:	682f      	ldr	r7, [r5, #0]
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	d032      	beq.n	8008ccc <__sflush_r+0x98>
 8008c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	075a      	lsls	r2, r3, #29
 8008c6c:	d505      	bpl.n	8008c7a <__sflush_r+0x46>
 8008c6e:	6863      	ldr	r3, [r4, #4]
 8008c70:	1ac0      	subs	r0, r0, r3
 8008c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c74:	b10b      	cbz	r3, 8008c7a <__sflush_r+0x46>
 8008c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c78:	1ac0      	subs	r0, r0, r3
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c80:	6a21      	ldr	r1, [r4, #32]
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b0      	blx	r6
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	d106      	bne.n	8008c9a <__sflush_r+0x66>
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	291d      	cmp	r1, #29
 8008c90:	d82c      	bhi.n	8008cec <__sflush_r+0xb8>
 8008c92:	4a2a      	ldr	r2, [pc, #168]	; (8008d3c <__sflush_r+0x108>)
 8008c94:	40ca      	lsrs	r2, r1
 8008c96:	07d6      	lsls	r6, r2, #31
 8008c98:	d528      	bpl.n	8008cec <__sflush_r+0xb8>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	6062      	str	r2, [r4, #4]
 8008c9e:	04d9      	lsls	r1, r3, #19
 8008ca0:	6922      	ldr	r2, [r4, #16]
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	d504      	bpl.n	8008cb0 <__sflush_r+0x7c>
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	d101      	bne.n	8008cae <__sflush_r+0x7a>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b903      	cbnz	r3, 8008cb0 <__sflush_r+0x7c>
 8008cae:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb2:	602f      	str	r7, [r5, #0]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d0ca      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <__sflush_r+0x92>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7ff fa83 	bl	80081cc <_free_r>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008cca:	e7c1      	b.n	8008c50 <__sflush_r+0x1c>
 8008ccc:	6a21      	ldr	r1, [r4, #32]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b0      	blx	r6
 8008cd4:	1c41      	adds	r1, r0, #1
 8008cd6:	d1c7      	bne.n	8008c68 <__sflush_r+0x34>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c4      	beq.n	8008c68 <__sflush_r+0x34>
 8008cde:	2b1d      	cmp	r3, #29
 8008ce0:	d001      	beq.n	8008ce6 <__sflush_r+0xb2>
 8008ce2:	2b16      	cmp	r3, #22
 8008ce4:	d101      	bne.n	8008cea <__sflush_r+0xb6>
 8008ce6:	602f      	str	r7, [r5, #0]
 8008ce8:	e7b1      	b.n	8008c4e <__sflush_r+0x1a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	e7ad      	b.n	8008c50 <__sflush_r+0x1c>
 8008cf4:	690f      	ldr	r7, [r1, #16]
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d0a9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cfa:	0793      	lsls	r3, r2, #30
 8008cfc:	680e      	ldr	r6, [r1, #0]
 8008cfe:	bf08      	it	eq
 8008d00:	694b      	ldreq	r3, [r1, #20]
 8008d02:	600f      	str	r7, [r1, #0]
 8008d04:	bf18      	it	ne
 8008d06:	2300      	movne	r3, #0
 8008d08:	eba6 0807 	sub.w	r8, r6, r7
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	dd9c      	ble.n	8008c4e <__sflush_r+0x1a>
 8008d14:	6a21      	ldr	r1, [r4, #32]
 8008d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d18:	4643      	mov	r3, r8
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b0      	blx	r6
 8008d20:	2800      	cmp	r0, #0
 8008d22:	dc06      	bgt.n	8008d32 <__sflush_r+0xfe>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e78e      	b.n	8008c50 <__sflush_r+0x1c>
 8008d32:	4407      	add	r7, r0
 8008d34:	eba8 0800 	sub.w	r8, r8, r0
 8008d38:	e7e9      	b.n	8008d0e <__sflush_r+0xda>
 8008d3a:	bf00      	nop
 8008d3c:	20400001 	.word	0x20400001

08008d40 <_fflush_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	b913      	cbnz	r3, 8008d50 <_fflush_r+0x10>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	b118      	cbz	r0, 8008d5a <_fflush_r+0x1a>
 8008d52:	6983      	ldr	r3, [r0, #24]
 8008d54:	b90b      	cbnz	r3, 8008d5a <_fflush_r+0x1a>
 8008d56:	f000 f887 	bl	8008e68 <__sinit>
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <_fflush_r+0x6c>)
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	d11b      	bne.n	8008d98 <_fflush_r+0x58>
 8008d60:	686c      	ldr	r4, [r5, #4]
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ef      	beq.n	8008d4a <_fflush_r+0xa>
 8008d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d6c:	07d0      	lsls	r0, r2, #31
 8008d6e:	d404      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d70:	0599      	lsls	r1, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f000 f915 	bl	8008fa4 <__retarget_lock_acquire_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff ff59 	bl	8008c34 <__sflush_r>
 8008d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d84:	07da      	lsls	r2, r3, #31
 8008d86:	4605      	mov	r5, r0
 8008d88:	d4e0      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	059b      	lsls	r3, r3, #22
 8008d8e:	d4dd      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d92:	f000 f908 	bl	8008fa6 <__retarget_lock_release_recursive>
 8008d96:	e7d9      	b.n	8008d4c <_fflush_r+0xc>
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <_fflush_r+0x70>)
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	d101      	bne.n	8008da2 <_fflush_r+0x62>
 8008d9e:	68ac      	ldr	r4, [r5, #8]
 8008da0:	e7df      	b.n	8008d62 <_fflush_r+0x22>
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <_fflush_r+0x74>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	bf08      	it	eq
 8008da8:	68ec      	ldreq	r4, [r5, #12]
 8008daa:	e7da      	b.n	8008d62 <_fflush_r+0x22>
 8008dac:	08009ab4 	.word	0x08009ab4
 8008db0:	08009ad4 	.word	0x08009ad4
 8008db4:	08009a94 	.word	0x08009a94

08008db8 <std>:
 8008db8:	2300      	movs	r3, #0
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc6:	6083      	str	r3, [r0, #8]
 8008dc8:	8181      	strh	r1, [r0, #12]
 8008dca:	6643      	str	r3, [r0, #100]	; 0x64
 8008dcc:	81c2      	strh	r2, [r0, #14]
 8008dce:	6183      	str	r3, [r0, #24]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	305c      	adds	r0, #92	; 0x5c
 8008dd6:	f7ff f9f1 	bl	80081bc <memset>
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x38>)
 8008ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x3c>)
 8008de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x40>)
 8008de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x44>)
 8008de8:	6224      	str	r4, [r4, #32]
 8008dea:	6323      	str	r3, [r4, #48]	; 0x30
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	08009115 	.word	0x08009115
 8008df4:	08009137 	.word	0x08009137
 8008df8:	0800916f 	.word	0x0800916f
 8008dfc:	08009193 	.word	0x08009193

08008e00 <_cleanup_r>:
 8008e00:	4901      	ldr	r1, [pc, #4]	; (8008e08 <_cleanup_r+0x8>)
 8008e02:	f000 b8af 	b.w	8008f64 <_fwalk_reent>
 8008e06:	bf00      	nop
 8008e08:	08008d41 	.word	0x08008d41

08008e0c <__sfmoreglue>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	2268      	movs	r2, #104	; 0x68
 8008e10:	1e4d      	subs	r5, r1, #1
 8008e12:	4355      	muls	r5, r2
 8008e14:	460e      	mov	r6, r1
 8008e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e1a:	f7ff fa43 	bl	80082a4 <_malloc_r>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b140      	cbz	r0, 8008e34 <__sfmoreglue+0x28>
 8008e22:	2100      	movs	r1, #0
 8008e24:	e9c0 1600 	strd	r1, r6, [r0]
 8008e28:	300c      	adds	r0, #12
 8008e2a:	60a0      	str	r0, [r4, #8]
 8008e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e30:	f7ff f9c4 	bl	80081bc <memset>
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__sfp_lock_acquire>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__sfp_lock_acquire+0x8>)
 8008e3a:	f000 b8b3 	b.w	8008fa4 <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	20000335 	.word	0x20000335

08008e44 <__sfp_lock_release>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__sfp_lock_release+0x8>)
 8008e46:	f000 b8ae 	b.w	8008fa6 <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	20000335 	.word	0x20000335

08008e50 <__sinit_lock_acquire>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sinit_lock_acquire+0x8>)
 8008e52:	f000 b8a7 	b.w	8008fa4 <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	20000336 	.word	0x20000336

08008e5c <__sinit_lock_release>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sinit_lock_release+0x8>)
 8008e5e:	f000 b8a2 	b.w	8008fa6 <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	20000336 	.word	0x20000336

08008e68 <__sinit>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f7ff fff0 	bl	8008e50 <__sinit_lock_acquire>
 8008e70:	69a3      	ldr	r3, [r4, #24]
 8008e72:	b11b      	cbz	r3, 8008e7c <__sinit+0x14>
 8008e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e78:	f7ff bff0 	b.w	8008e5c <__sinit_lock_release>
 8008e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e80:	6523      	str	r3, [r4, #80]	; 0x50
 8008e82:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <__sinit+0x68>)
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <__sinit+0x6c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	bf04      	itt	eq
 8008e8e:	2301      	moveq	r3, #1
 8008e90:	61a3      	streq	r3, [r4, #24]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 f820 	bl	8008ed8 <__sfp>
 8008e98:	6060      	str	r0, [r4, #4]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f81c 	bl	8008ed8 <__sfp>
 8008ea0:	60a0      	str	r0, [r4, #8]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f818 	bl	8008ed8 <__sfp>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	60e0      	str	r0, [r4, #12]
 8008eac:	2104      	movs	r1, #4
 8008eae:	6860      	ldr	r0, [r4, #4]
 8008eb0:	f7ff ff82 	bl	8008db8 <std>
 8008eb4:	68a0      	ldr	r0, [r4, #8]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	2109      	movs	r1, #9
 8008eba:	f7ff ff7d 	bl	8008db8 <std>
 8008ebe:	68e0      	ldr	r0, [r4, #12]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	2112      	movs	r1, #18
 8008ec4:	f7ff ff78 	bl	8008db8 <std>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	61a3      	str	r3, [r4, #24]
 8008ecc:	e7d2      	b.n	8008e74 <__sinit+0xc>
 8008ece:	bf00      	nop
 8008ed0:	08009a5c 	.word	0x08009a5c
 8008ed4:	08008e01 	.word	0x08008e01

08008ed8 <__sfp>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	4607      	mov	r7, r0
 8008edc:	f7ff ffac 	bl	8008e38 <__sfp_lock_acquire>
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <__sfp+0x84>)
 8008ee2:	681e      	ldr	r6, [r3, #0]
 8008ee4:	69b3      	ldr	r3, [r6, #24]
 8008ee6:	b913      	cbnz	r3, 8008eee <__sfp+0x16>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff ffbd 	bl	8008e68 <__sinit>
 8008eee:	3648      	adds	r6, #72	; 0x48
 8008ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	d503      	bpl.n	8008f00 <__sfp+0x28>
 8008ef8:	6833      	ldr	r3, [r6, #0]
 8008efa:	b30b      	cbz	r3, 8008f40 <__sfp+0x68>
 8008efc:	6836      	ldr	r6, [r6, #0]
 8008efe:	e7f7      	b.n	8008ef0 <__sfp+0x18>
 8008f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f04:	b9d5      	cbnz	r5, 8008f3c <__sfp+0x64>
 8008f06:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <__sfp+0x88>)
 8008f08:	60e3      	str	r3, [r4, #12]
 8008f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f10:	f000 f847 	bl	8008fa2 <__retarget_lock_init_recursive>
 8008f14:	f7ff ff96 	bl	8008e44 <__sfp_lock_release>
 8008f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	61a5      	str	r5, [r4, #24]
 8008f24:	2208      	movs	r2, #8
 8008f26:	4629      	mov	r1, r5
 8008f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f2c:	f7ff f946 	bl	80081bc <memset>
 8008f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3c:	3468      	adds	r4, #104	; 0x68
 8008f3e:	e7d9      	b.n	8008ef4 <__sfp+0x1c>
 8008f40:	2104      	movs	r1, #4
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff ff62 	bl	8008e0c <__sfmoreglue>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	6030      	str	r0, [r6, #0]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1d5      	bne.n	8008efc <__sfp+0x24>
 8008f50:	f7ff ff78 	bl	8008e44 <__sfp_lock_release>
 8008f54:	230c      	movs	r3, #12
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	e7ee      	b.n	8008f38 <__sfp+0x60>
 8008f5a:	bf00      	nop
 8008f5c:	08009a5c 	.word	0x08009a5c
 8008f60:	ffff0001 	.word	0xffff0001

08008f64 <_fwalk_reent>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	4606      	mov	r6, r0
 8008f6a:	4688      	mov	r8, r1
 8008f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f70:	2700      	movs	r7, #0
 8008f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f76:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7a:	d505      	bpl.n	8008f88 <_fwalk_reent+0x24>
 8008f7c:	6824      	ldr	r4, [r4, #0]
 8008f7e:	2c00      	cmp	r4, #0
 8008f80:	d1f7      	bne.n	8008f72 <_fwalk_reent+0xe>
 8008f82:	4638      	mov	r0, r7
 8008f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f88:	89ab      	ldrh	r3, [r5, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d907      	bls.n	8008f9e <_fwalk_reent+0x3a>
 8008f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f92:	3301      	adds	r3, #1
 8008f94:	d003      	beq.n	8008f9e <_fwalk_reent+0x3a>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	47c0      	blx	r8
 8008f9c:	4307      	orrs	r7, r0
 8008f9e:	3568      	adds	r5, #104	; 0x68
 8008fa0:	e7e9      	b.n	8008f76 <_fwalk_reent+0x12>

08008fa2 <__retarget_lock_init_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <__retarget_lock_acquire_recursive>:
 8008fa4:	4770      	bx	lr

08008fa6 <__retarget_lock_release_recursive>:
 8008fa6:	4770      	bx	lr

08008fa8 <__swhatbuf_r>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	460e      	mov	r6, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	b096      	sub	sp, #88	; 0x58
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	461d      	mov	r5, r3
 8008fb8:	da08      	bge.n	8008fcc <__swhatbuf_r+0x24>
 8008fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	602a      	str	r2, [r5, #0]
 8008fc2:	061a      	lsls	r2, r3, #24
 8008fc4:	d410      	bmi.n	8008fe8 <__swhatbuf_r+0x40>
 8008fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fca:	e00e      	b.n	8008fea <__swhatbuf_r+0x42>
 8008fcc:	466a      	mov	r2, sp
 8008fce:	f000 f907 	bl	80091e0 <_fstat_r>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dbf1      	blt.n	8008fba <__swhatbuf_r+0x12>
 8008fd6:	9a01      	ldr	r2, [sp, #4]
 8008fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fe0:	425a      	negs	r2, r3
 8008fe2:	415a      	adcs	r2, r3
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	e7ee      	b.n	8008fc6 <__swhatbuf_r+0x1e>
 8008fe8:	2340      	movs	r3, #64	; 0x40
 8008fea:	2000      	movs	r0, #0
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	b016      	add	sp, #88	; 0x58
 8008ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ff4 <__smakebuf_r>:
 8008ff4:	898b      	ldrh	r3, [r1, #12]
 8008ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff8:	079d      	lsls	r5, r3, #30
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	d507      	bpl.n	8009010 <__smakebuf_r+0x1c>
 8009000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	2301      	movs	r3, #1
 800900a:	6163      	str	r3, [r4, #20]
 800900c:	b002      	add	sp, #8
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	ab01      	add	r3, sp, #4
 8009012:	466a      	mov	r2, sp
 8009014:	f7ff ffc8 	bl	8008fa8 <__swhatbuf_r>
 8009018:	9900      	ldr	r1, [sp, #0]
 800901a:	4605      	mov	r5, r0
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff f941 	bl	80082a4 <_malloc_r>
 8009022:	b948      	cbnz	r0, 8009038 <__smakebuf_r+0x44>
 8009024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009028:	059a      	lsls	r2, r3, #22
 800902a:	d4ef      	bmi.n	800900c <__smakebuf_r+0x18>
 800902c:	f023 0303 	bic.w	r3, r3, #3
 8009030:	f043 0302 	orr.w	r3, r3, #2
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	e7e3      	b.n	8009000 <__smakebuf_r+0xc>
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <__smakebuf_r+0x7c>)
 800903a:	62b3      	str	r3, [r6, #40]	; 0x28
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	6020      	str	r0, [r4, #0]
 8009040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	6163      	str	r3, [r4, #20]
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	6120      	str	r0, [r4, #16]
 800904e:	b15b      	cbz	r3, 8009068 <__smakebuf_r+0x74>
 8009050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f8d5 	bl	8009204 <_isatty_r>
 800905a:	b128      	cbz	r0, 8009068 <__smakebuf_r+0x74>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	89a0      	ldrh	r0, [r4, #12]
 800906a:	4305      	orrs	r5, r0
 800906c:	81a5      	strh	r5, [r4, #12]
 800906e:	e7cd      	b.n	800900c <__smakebuf_r+0x18>
 8009070:	08008e01 	.word	0x08008e01

08009074 <__malloc_lock>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__malloc_lock+0x8>)
 8009076:	f7ff bf95 	b.w	8008fa4 <__retarget_lock_acquire_recursive>
 800907a:	bf00      	nop
 800907c:	20000334 	.word	0x20000334

08009080 <__malloc_unlock>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__malloc_unlock+0x8>)
 8009082:	f7ff bf90 	b.w	8008fa6 <__retarget_lock_release_recursive>
 8009086:	bf00      	nop
 8009088:	20000334 	.word	0x20000334

0800908c <_raise_r>:
 800908c:	291f      	cmp	r1, #31
 800908e:	b538      	push	{r3, r4, r5, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	460d      	mov	r5, r1
 8009094:	d904      	bls.n	80090a0 <_raise_r+0x14>
 8009096:	2316      	movs	r3, #22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	f04f 30ff 	mov.w	r0, #4294967295
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090a2:	b112      	cbz	r2, 80090aa <_raise_r+0x1e>
 80090a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a8:	b94b      	cbnz	r3, 80090be <_raise_r+0x32>
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f830 	bl	8009110 <_getpid_r>
 80090b0:	462a      	mov	r2, r5
 80090b2:	4601      	mov	r1, r0
 80090b4:	4620      	mov	r0, r4
 80090b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ba:	f000 b817 	b.w	80090ec <_kill_r>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00a      	beq.n	80090d8 <_raise_r+0x4c>
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	d103      	bne.n	80090ce <_raise_r+0x42>
 80090c6:	2316      	movs	r3, #22
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7e7      	b.n	800909e <_raise_r+0x12>
 80090ce:	2400      	movs	r4, #0
 80090d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090d4:	4628      	mov	r0, r5
 80090d6:	4798      	blx	r3
 80090d8:	2000      	movs	r0, #0
 80090da:	e7e0      	b.n	800909e <_raise_r+0x12>

080090dc <raise>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <raise+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfd3 	b.w	800908c <_raise_r>
 80090e6:	bf00      	nop
 80090e8:	200000ac 	.word	0x200000ac

080090ec <_kill_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_kill_r+0x20>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f7fa fb7b 	bl	80037f4 <_kill>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d102      	bne.n	8009108 <_kill_r+0x1c>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b103      	cbz	r3, 8009108 <_kill_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	20000338 	.word	0x20000338

08009110 <_getpid_r>:
 8009110:	f7fa bb68 	b.w	80037e4 <_getpid>

08009114 <__sread>:
 8009114:	b510      	push	{r4, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	f000 f894 	bl	8009248 <_read_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	bfab      	itete	ge
 8009124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009126:	89a3      	ldrhlt	r3, [r4, #12]
 8009128:	181b      	addge	r3, r3, r0
 800912a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800912e:	bfac      	ite	ge
 8009130:	6563      	strge	r3, [r4, #84]	; 0x54
 8009132:	81a3      	strhlt	r3, [r4, #12]
 8009134:	bd10      	pop	{r4, pc}

08009136 <__swrite>:
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	461f      	mov	r7, r3
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	05db      	lsls	r3, r3, #23
 8009140:	4605      	mov	r5, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4616      	mov	r6, r2
 8009146:	d505      	bpl.n	8009154 <__swrite+0x1e>
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	2302      	movs	r3, #2
 800914e:	2200      	movs	r2, #0
 8009150:	f000 f868 	bl	8009224 <_lseek_r>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	4632      	mov	r2, r6
 8009162:	463b      	mov	r3, r7
 8009164:	4628      	mov	r0, r5
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	f000 b817 	b.w	800919c <_write_r>

0800916e <__sseek>:
 800916e:	b510      	push	{r4, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009176:	f000 f855 	bl	8009224 <_lseek_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	bf15      	itete	ne
 8009180:	6560      	strne	r0, [r4, #84]	; 0x54
 8009182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800918a:	81a3      	strheq	r3, [r4, #12]
 800918c:	bf18      	it	ne
 800918e:	81a3      	strhne	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__sclose>:
 8009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009196:	f000 b813 	b.w	80091c0 <_close_r>
	...

0800919c <_write_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d07      	ldr	r5, [pc, #28]	; (80091bc <_write_r+0x20>)
 80091a0:	4604      	mov	r4, r0
 80091a2:	4608      	mov	r0, r1
 80091a4:	4611      	mov	r1, r2
 80091a6:	2200      	movs	r2, #0
 80091a8:	602a      	str	r2, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f8 ffce 	bl	800214c <_write>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_write_r+0x1e>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_write_r+0x1e>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20000338 	.word	0x20000338

080091c0 <_close_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d06      	ldr	r5, [pc, #24]	; (80091dc <_close_r+0x1c>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7fa fb49 	bl	8003862 <_close>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_close_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_close_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000338 	.word	0x20000338

080091e0 <_fstat_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	; (8009200 <_fstat_r+0x20>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	f7fa fb44 	bl	800387a <_fstat>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d102      	bne.n	80091fc <_fstat_r+0x1c>
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	b103      	cbz	r3, 80091fc <_fstat_r+0x1c>
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
 80091fe:	bf00      	nop
 8009200:	20000338 	.word	0x20000338

08009204 <_isatty_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d06      	ldr	r5, [pc, #24]	; (8009220 <_isatty_r+0x1c>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7fa fb43 	bl	800389a <_isatty>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_isatty_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_isatty_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20000338 	.word	0x20000338

08009224 <_lseek_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d07      	ldr	r5, [pc, #28]	; (8009244 <_lseek_r+0x20>)
 8009228:	4604      	mov	r4, r0
 800922a:	4608      	mov	r0, r1
 800922c:	4611      	mov	r1, r2
 800922e:	2200      	movs	r2, #0
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	f7fa fb3c 	bl	80038b0 <_lseek>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_lseek_r+0x1e>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_lseek_r+0x1e>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20000338 	.word	0x20000338

08009248 <_read_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_read_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7fa fae6 	bl	8003828 <_read>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_read_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_read_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20000338 	.word	0x20000338

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
