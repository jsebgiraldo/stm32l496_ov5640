
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086cc  080086cc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d4  080086d4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080086dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c59c  20000094  08008770  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c630  08008770  0002c630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dac  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003247  00000000  00000000  00037e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b58  00000000  00000000  0003d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ab1  00000000  00000000  00042510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109133  00000000  00000000  0005afc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001640f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000624c  00000000  00000000  00164144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e2c 	.word	0x08007e2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08007e2c 	.word	0x08007e2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <tail_ptr_retreat+0x1a>
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <tail_ptr_retreat+0x40>)
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <tail_ptr_retreat+0x44>)
 80005a6:	2139      	movs	r1, #57	; 0x39
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <tail_ptr_retreat+0x48>)
 80005aa:	f006 fb85 	bl	8006cb8 <__assert_func>

    rb->full = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	3301      	adds	r3, #1
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	68d2      	ldr	r2, [r2, #12]
 80005be:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c2:	fb01 f202 	mul.w	r2, r1, r2
 80005c6:	1a9a      	subs	r2, r3, r2
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	609a      	str	r2, [r3, #8]
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08007e44 	.word	0x08007e44
 80005d8:	080080cc 	.word	0x080080cc
 80005dc:	08007e48 	.word	0x08007e48

080005e0 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    assert(rb);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d105      	bne.n	80005fa <is_ring_buffer_empty+0x1a>
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <is_ring_buffer_empty+0x40>)
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <is_ring_buffer_empty+0x44>)
 80005f2:	214e      	movs	r1, #78	; 0x4e
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <is_ring_buffer_empty+0x48>)
 80005f6:	f006 fb5f 	bl	8006cb8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7c1b      	ldrb	r3, [r3, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d107      	bne.n	8000612 <is_ring_buffer_empty+0x32>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	d101      	bne.n	8000612 <is_ring_buffer_empty+0x32>
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <is_ring_buffer_empty+0x34>
 8000612:	2300      	movs	r3, #0
 8000614:	b2db      	uxtb	r3, r3
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	08007e44 	.word	0x08007e44
 8000624:	080080e0 	.word	0x080080e0
 8000628:	08007e48 	.word	0x08007e48

0800062c <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <ring_buffer_init+0x16>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d105      	bne.n	800064e <ring_buffer_init+0x22>
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <ring_buffer_init+0x74>)
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <ring_buffer_init+0x78>)
 8000646:	2169      	movs	r1, #105	; 0x69
 8000648:	4817      	ldr	r0, [pc, #92]	; (80006a8 <ring_buffer_init+0x7c>)
 800064a:	f006 fb35 	bl	8006cb8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 800064e:	2014      	movs	r0, #20
 8000650:	f006 fb8c 	bl	8006d6c <malloc>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]
    assert(rb);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <ring_buffer_init+0x3e>
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <ring_buffer_init+0x80>)
 8000660:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <ring_buffer_init+0x78>)
 8000662:	216c      	movs	r1, #108	; 0x6c
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <ring_buffer_init+0x7c>)
 8000666:	f006 fb27 	bl	8006cb8 <__assert_func>

    rb->buffer = buffer;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
    rb->length = size;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f81c 	bl	80006b4 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ffaf 	bl	80005e0 <is_ring_buffer_empty>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d105      	bne.n	8000694 <ring_buffer_init+0x68>
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <ring_buffer_init+0x84>)
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <ring_buffer_init+0x78>)
 800068c:	2172      	movs	r1, #114	; 0x72
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <ring_buffer_init+0x7c>)
 8000690:	f006 fb12 	bl	8006cb8 <__assert_func>

    return rb;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08007e6c 	.word	0x08007e6c
 80006a4:	080080f8 	.word	0x080080f8
 80006a8:	08007e48 	.word	0x08007e48
 80006ac:	08007e44 	.word	0x08007e44
 80006b0:	08007e7c 	.word	0x08007e7c

080006b4 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    assert(rb);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_reset+0x1a>
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <ring_buffer_reset+0x34>)
 80006c4:	4a09      	ldr	r2, [pc, #36]	; (80006ec <ring_buffer_reset+0x38>)
 80006c6:	2189      	movs	r1, #137	; 0x89
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <ring_buffer_reset+0x3c>)
 80006ca:	f006 faf5 	bl	8006cb8 <__assert_func>
    rb->head = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	741a      	strb	r2, [r3, #16]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08007e44 	.word	0x08007e44
 80006ec:	0800810c 	.word	0x0800810c
 80006f0:	08007e48 	.word	0x08007e48

080006f4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <ring_buffer_get+0x1e>
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <ring_buffer_get+0x1e>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <ring_buffer_get+0x2a>
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <ring_buffer_get+0x64>)
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <ring_buffer_get+0x68>)
 8000716:	21da      	movs	r1, #218	; 0xda
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <ring_buffer_get+0x6c>)
 800071a:	f006 facd 	bl	8006cb8 <__assert_func>

    int r = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff ff5c 	bl	80005e0 <is_ring_buffer_empty>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10d      	bne.n	800074a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	881a      	ldrh	r2, [r3, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff27 	bl	8000594 <tail_ptr_retreat>

        r = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	b2db      	uxtb	r3, r3
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08007eac 	.word	0x08007eac
 800075c:	08008120 	.word	0x08008120
 8000760:	08007e48 	.word	0x08007e48

08000764 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <BSP_LCD_GetXSize+0x14>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076e:	4798      	blx	r3
 8000770:	4603      	mov	r3, r0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000bc 	.word	0x200000bc

0800077c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <BSP_LCD_GetYSize+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	4798      	blx	r3
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000bc 	.word	0x200000bc

08000794 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <BSP_LCD_SetTextColor+0x1c>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	200000b0 	.word	0x200000b0

080007b4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <BSP_LCD_Clear+0x68>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <BSP_LCD_Clear+0x68>)
 80007d0:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80007d2:	f7ff ffd3 	bl	800077c <BSP_LCD_GetYSize>
 80007d6:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	e00d      	b.n	80007fa <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	b29c      	uxth	r4, r3
 80007e2:	f7ff ffbf 	bl	8000764 <BSP_LCD_GetXSize>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4621      	mov	r1, r4
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f832 	bl	8000858 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3ed      	bcc.n	80007de <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <BSP_LCD_Clear+0x68>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <BSP_LCD_Clear+0x68>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffc0 	bl	8000794 <BSP_LCD_SetTextColor>
}
 8000814:	bf00      	nop
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	200000b0 	.word	0x200000b0

08000820 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
 800082a:	460b      	mov	r3, r1
 800082c:	80bb      	strh	r3, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <BSP_LCD_DrawPixel+0x34>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d006      	beq.n	800084a <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <BSP_LCD_DrawPixel+0x34>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	887a      	ldrh	r2, [r7, #2]
 8000844:	88b9      	ldrh	r1, [r7, #4]
 8000846:	88f8      	ldrh	r0, [r7, #6]
 8000848:	4798      	blx	r3
  }
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000bc 	.word	0x200000bc

08000858 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
 8000862:	460b      	mov	r3, r1
 8000864:	80bb      	strh	r3, [r7, #4]
 8000866:	4613      	mov	r3, r2
 8000868:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <BSP_LCD_DrawHLine+0x6c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00a      	beq.n	800088e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <BSP_LCD_DrawHLine+0x6c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6a1c      	ldr	r4, [r3, #32]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <BSP_LCD_DrawHLine+0x70>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	b298      	uxth	r0, r3
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	88ba      	ldrh	r2, [r7, #4]
 8000888:	88f9      	ldrh	r1, [r7, #6]
 800088a:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800088c:	e015      	b.n	80008ba <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e00e      	b.n	80008b2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	b29a      	uxth	r2, r3
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	4413      	add	r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <BSP_LCD_DrawHLine+0x70>)
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	b292      	uxth	r2, r2
 80008a4:	88b9      	ldrh	r1, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffba 	bl	8000820 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3ec      	bcc.n	8000894 <BSP_LCD_DrawHLine+0x3c>
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000bc 	.word	0x200000bc
 80008c8:	200000b0 	.word	0x200000b0

080008cc <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <_write+0x24>)
 80008e2:	f005 fced 	bl	80062c0 <HAL_UART_Transmit>
 80008e6:	4603      	mov	r3, r0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000338 	.word	0x20000338

080008f4 <print_startup_msg>:

static void print_startup_msg(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <print_startup_msg+0x2c>)
 80008fa:	f006 fe9b 	bl	8007634 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 80008fe:	4909      	ldr	r1, [pc, #36]	; (8000924 <print_startup_msg+0x30>)
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <print_startup_msg+0x34>)
 8000902:	f006 fe11 	bl	8007528 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 8000906:	4909      	ldr	r1, [pc, #36]	; (800092c <print_startup_msg+0x38>)
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <print_startup_msg+0x3c>)
 800090a:	f006 fe0d 	bl	8007528 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 800090e:	4909      	ldr	r1, [pc, #36]	; (8000934 <print_startup_msg+0x40>)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <print_startup_msg+0x44>)
 8000912:	f006 fe09 	bl	8007528 <iprintf>
  printf("******************************************\r\n");
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <print_startup_msg+0x2c>)
 8000918:	f006 fe8c 	bl	8007634 <puts>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08007f30 	.word	0x08007f30
 8000924:	08007f5c 	.word	0x08007f5c
 8000928:	08007f68 	.word	0x08007f68
 800092c:	08007f84 	.word	0x08007f84
 8000930:	08007f88 	.word	0x08007f88
 8000934:	08007fa8 	.word	0x08007fa8
 8000938:	08007fb4 	.word	0x08007fb4

0800093c <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  None
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	printf("HAL_DCMI_FrameEventCallback\r\n");
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <HAL_DCMI_FrameEventCallback+0x28>)
 8000946:	f006 fe75 	bl	8007634 <puts>
	//jpeg_dcmi_frame_callback(&hdma_dcmi);
    __HAL_DCMI_ENABLE_IT(hdcmi,DCMI_IT_FRAME);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	60da      	str	r2, [r3, #12]
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08007fcc 	.word	0x08007fcc

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f001 fdaf 	bl	80024ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f934 	bl	8000bdc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000974:	f000 f98b 	bl	8000c8e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f000 fb88 	bl	800108c <MX_GPIO_Init>
  MX_DCMI_Init();
 800097c:	f000 f9b2 	bl	8000ce4 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8000980:	f000 f9e4 	bl	8000d4c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000984:	f000 fa4e 	bl	8000e24 <MX_I2C1_Init>
  MX_DMA_Init();
 8000988:	f000 fb62 	bl	8001050 <MX_DMA_Init>
  MX_SAI1_Init();
 800098c:	f000 fa88 	bl	8000ea0 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 8000990:	f000 fb2e 	bl	8000ff0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8000994:	2114      	movs	r1, #20
 8000996:	4881      	ldr	r0, [pc, #516]	; (8000b9c <main+0x234>)
 8000998:	f7ff fe48 	bl	800062c <ring_buffer_init>
 800099c:	4603      	mov	r3, r0
 800099e:	4a80      	ldr	r2, [pc, #512]	; (8000ba0 <main+0x238>)
 80009a0:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 80009a2:	f7ff ffa7 	bl	80008f4 <print_startup_msg>

  /*##-3- Camera Initialization ############################*/
	while(OV5640_Init())
 80009a6:	e017      	b.n	80009d8 <main+0x70>
	{
		printf_dbg("OV5640 error, please check !\r\n");
 80009a8:	4b7e      	ldr	r3, [pc, #504]	; (8000ba4 <main+0x23c>)
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f006 fdbb 	bl	8007528 <iprintf>
 80009b2:	4b7d      	ldr	r3, [pc, #500]	; (8000ba8 <main+0x240>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f006 fdb6 	bl	8007528 <iprintf>
 80009bc:	4b79      	ldr	r3, [pc, #484]	; (8000ba4 <main+0x23c>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fdb1 	bl	8007528 <iprintf>
 80009c6:	4879      	ldr	r0, [pc, #484]	; (8000bac <main+0x244>)
 80009c8:	f006 fe34 	bl	8007634 <puts>
		   // BSP_LCD_Clear(LCD_COLOR_WHITE);
		   // HAL_Delay(200);
		   HAL_Delay(300);
 80009cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009d0:	f001 fdf2 	bl	80025b8 <HAL_Delay>
		   Error_Handler();
 80009d4:	f000 fe48 	bl	8001668 <Error_Handler>
	while(OV5640_Init())
 80009d8:	f000 feca 	bl	8001770 <OV5640_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1e2      	bne.n	80009a8 <main+0x40>
	}
	printf_dbg("Camera was initialized!!\r\n");
 80009e2:	4b70      	ldr	r3, [pc, #448]	; (8000ba4 <main+0x23c>)
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f006 fd9e 	bl	8007528 <iprintf>
 80009ec:	4b6e      	ldr	r3, [pc, #440]	; (8000ba8 <main+0x240>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f006 fd99 	bl	8007528 <iprintf>
 80009f6:	4b6b      	ldr	r3, [pc, #428]	; (8000ba4 <main+0x23c>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 fd94 	bl	8007528 <iprintf>
 8000a00:	486b      	ldr	r0, [pc, #428]	; (8000bb0 <main+0x248>)
 8000a02:	f006 fe17 	bl	8007634 <puts>

	OV5640_RGB565_Mode();
 8000a06:	f000 ff07 	bl	8001818 <OV5640_RGB565_Mode>
	OV5640_Light_Mode(0);	   //set auto
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 ff28 	bl	8001860 <OV5640_Light_Mode>
	OV5640_Color_Saturation(3); //default
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 ff59 	bl	80018c8 <OV5640_Color_Saturation>
	OV5640_Brightness(4);	//default
 8000a16:	2004      	movs	r0, #4
 8000a18:	f000 ffa6 	bl	8001968 <OV5640_Brightness>
	OV5640_Contrast(3);     //default
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 ffdd 	bl	80019dc <OV5640_Contrast>
	OV5640_Sharpness(33);	//set auto
 8000a22:	2021      	movs	r0, #33	; 0x21
 8000a24:	f001 f836 	bl	8001a94 <OV5640_Sharpness>

	__HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8000a28:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <main+0x24c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <main+0x24c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0218 	bic.w	r2, r2, #24
 8000a36:	60da      	str	r2, [r3, #12]
	 The LCD frame size is therefore 240 * 240 half-words of (240*240)/2 32-bit long words .
	 Since the DMA associated to DCMI IP is configured in  BSP_CAMERA_MspInit() of stm32l496g_discovery_camera.c file
	 with words alignment, the last parameter of HAL_DCMI_Start_DMA is set to:
	  (ST7789H2_LCD_PIXEL_WIDTH*ST7789H2_LCD_PIXEL_HEIGHT)/2, that is 240 * 240 / 2
   */
   HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,  (uint32_t)pBuffer , (240*240)/2 );
 8000a38:	4a5f      	ldr	r2, [pc, #380]	; (8000bb8 <main+0x250>)
 8000a3a:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000a3e:	2100      	movs	r1, #0
 8000a40:	485c      	ldr	r0, [pc, #368]	; (8000bb4 <main+0x24c>)
 8000a42:	f001 ff75 	bl	8002930 <HAL_DCMI_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <main+0x238>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	495c      	ldr	r1, [pc, #368]	; (8000bbc <main+0x254>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe51 	bl	80006f4 <ring_buffer_get>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f000 809c 	beq.w	8000b92 <main+0x22a>
	  {

		  switch (IRQ_event) {
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <main+0x254>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a62:	d07a      	beq.n	8000b5a <main+0x1f2>
 8000a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a68:	f300 8095 	bgt.w	8000b96 <main+0x22e>
 8000a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a70:	d05b      	beq.n	8000b2a <main+0x1c2>
 8000a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a76:	f300 808e 	bgt.w	8000b96 <main+0x22e>
 8000a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a7e:	d03b      	beq.n	8000af8 <main+0x190>
 8000a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a84:	f300 8087 	bgt.w	8000b96 <main+0x22e>
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d003      	beq.n	8000a96 <main+0x12e>
 8000a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a92:	d019      	beq.n	8000ac8 <main+0x160>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle
				BSP_LCD_Clear(LCD_COLOR_WHITE);

				break;
			default:
				break;
 8000a94:	e07f      	b.n	8000b96 <main+0x22e>
				printf_dbg("JOY_UP was pressed!\r\n");
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <main+0x23c>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 fd44 	bl	8007528 <iprintf>
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <main+0x240>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f006 fd3f 	bl	8007528 <iprintf>
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <main+0x23c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 fd3a 	bl	8007528 <iprintf>
 8000ab4:	4842      	ldr	r0, [pc, #264]	; (8000bc0 <main+0x258>)
 8000ab6:	f006 fdbd 	bl	8007634 <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4840      	ldr	r0, [pc, #256]	; (8000bc4 <main+0x25c>)
 8000ac2:	f002 fe41 	bl	8003748 <HAL_GPIO_WritePin>
				break;
 8000ac6:	e067      	b.n	8000b98 <main+0x230>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <main+0x23c>)
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f006 fd2b 	bl	8007528 <iprintf>
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <main+0x240>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fd26 	bl	8007528 <iprintf>
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <main+0x23c>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fd21 	bl	8007528 <iprintf>
 8000ae6:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <main+0x260>)
 8000ae8:	f006 fda4 	bl	8007634 <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_RESET);   // ON
 8000aec:	2200      	movs	r2, #0
 8000aee:	2104      	movs	r1, #4
 8000af0:	4836      	ldr	r0, [pc, #216]	; (8000bcc <main+0x264>)
 8000af2:	f002 fe29 	bl	8003748 <HAL_GPIO_WritePin>
				break;
 8000af6:	e04f      	b.n	8000b98 <main+0x230>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x23c>)
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fd13 	bl	8007528 <iprintf>
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <main+0x240>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f006 fd0e 	bl	8007528 <iprintf>
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <main+0x23c>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fd09 	bl	8007528 <iprintf>
 8000b16:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <main+0x268>)
 8000b18:	f006 fd8c 	bl	8007634 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4828      	ldr	r0, [pc, #160]	; (8000bc4 <main+0x25c>)
 8000b24:	f002 fe10 	bl	8003748 <HAL_GPIO_WritePin>
				break;
 8000b28:	e036      	b.n	8000b98 <main+0x230>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <main+0x23c>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f006 fcfa 	bl	8007528 <iprintf>
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <main+0x240>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fcf5 	bl	8007528 <iprintf>
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <main+0x23c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 fcf0 	bl	8007528 <iprintf>
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <main+0x26c>)
 8000b4a:	f006 fd73 	bl	8007634 <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_SET);    // 0FF
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2104      	movs	r1, #4
 8000b52:	481e      	ldr	r0, [pc, #120]	; (8000bcc <main+0x264>)
 8000b54:	f002 fdf8 	bl	8003748 <HAL_GPIO_WritePin>
				break;
 8000b58:	e01e      	b.n	8000b98 <main+0x230>
				printf_dbg("JOY_SEL was pressed!\r\n");
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <main+0x23c>)
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 fce2 	bl	8007528 <iprintf>
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <main+0x240>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 fcdd 	bl	8007528 <iprintf>
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <main+0x23c>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f006 fcd8 	bl	8007528 <iprintf>
 8000b78:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <main+0x270>)
 8000b7a:	f006 fd5b 	bl	8007634 <puts>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <main+0x25c>)
 8000b84:	f002 fdf8 	bl	8003778 <HAL_GPIO_TogglePin>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b8c:	f7ff fe12 	bl	80007b4 <BSP_LCD_Clear>
				break;
 8000b90:	e002      	b.n	8000b98 <main+0x230>
		}

	  }
 8000b92:	bf00      	nop
 8000b94:	e757      	b.n	8000a46 <main+0xde>
				break;
 8000b96:	bf00      	nop
  {
 8000b98:	e755      	b.n	8000a46 <main+0xde>
 8000b9a:	bf00      	nop
 8000b9c:	200003c0 	.word	0x200003c0
 8000ba0:	200003bc 	.word	0x200003bc
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000020 	.word	0x20000020
 8000bac:	08007fec 	.word	0x08007fec
 8000bb0:	0800800c 	.word	0x0800800c
 8000bb4:	200000c0 	.word	0x200000c0
 8000bb8:	200003e8 	.word	0x200003e8
 8000bbc:	2001c5e8 	.word	0x2001c5e8
 8000bc0:	08008028 	.word	0x08008028
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	08008040 	.word	0x08008040
 8000bcc:	48001c00 	.word	0x48001c00
 8000bd0:	08008058 	.word	0x08008058
 8000bd4:	08008070 	.word	0x08008070
 8000bd8:	08008088 	.word	0x08008088

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b096      	sub	sp, #88	; 0x58
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2244      	movs	r2, #68	; 0x44
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f006 f8c6 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c02:	f002 ff07 	bl	8003a14 <HAL_PWREx_ControlVoltageScaling>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c0c:	f000 fd2c 	bl	8001668 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000c10:	2322      	movs	r3, #34	; 0x22
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c26:	2302      	movs	r3, #2
 8000c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c2e:	230a      	movs	r3, #10
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 ff4c 	bl	8003ae0 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000c4e:	f000 fd0b 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fb52 	bl	8004314 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c76:	f000 fcf7 	bl	8001668 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000c80:	2000      	movs	r0, #0
 8000c82:	f003 fc47 	bl	8004514 <HAL_RCC_MCOConfig>
}
 8000c86:	bf00      	nop
 8000c88:	3758      	adds	r7, #88	; 0x58
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b0a4      	sub	sp, #144	; 0x90
 8000c92:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	228c      	movs	r2, #140	; 0x8c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 f86e 	bl	8006d7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fd7a 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000cd6:	f000 fcc7 	bl	8001668 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3790      	adds	r7, #144	; 0x90
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <MX_DCMI_Init+0x64>)
 8000cec:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_DCMI_Init+0x60>)
 8000d32:	f001 fd77 	bl	8002824 <HAL_DCMI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d3c:	f000 fc94 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000c0 	.word	0x200000c0
 8000d48:	50050000 	.word	0x50050000

08000d4c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d52:	4a31      	ldr	r2, [pc, #196]	; (8000e18 <MX_DFSDM1_Init+0xcc>)
 8000d54:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000d9e:	481d      	ldr	r0, [pc, #116]	; (8000e14 <MX_DFSDM1_Init+0xc8>)
 8000da0:	f002 f824 	bl	8002dec <HAL_DFSDM_ChannelInit>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000daa:	f000 fc5d 	bl	8001668 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MX_DFSDM1_Init+0xd4>)
 8000db2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_DFSDM1_Init+0xd0>)
 8000e00:	f001 fff4 	bl	8002dec <HAL_DFSDM_ChannelInit>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000e0a:	f000 fc2d 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000016c 	.word	0x2000016c
 8000e18:	40016020 	.word	0x40016020
 8000e1c:	200001a4 	.word	0x200001a4
 8000e20:	40016040 	.word	0x40016040

08000e24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_I2C1_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e30:	f640 6214 	movw	r2, #3604	; 0xe14
 8000e34:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e62:	f002 fca3 	bl	80037ac <HAL_I2C_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e6c:	f000 fbfc 	bl	8001668 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e74:	f002 fd29 	bl	80038ca <HAL_I2CEx_ConfigAnalogFilter>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e7e:	f000 fbf3 	bl	8001668 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e86:	f002 fd6b 	bl	8003960 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 fbea 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001dc 	.word	0x200001dc
 8000e9c:	40005400 	.word	0x40005400

08000ea0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ea6:	4a4e      	ldr	r2, [pc, #312]	; (8000fe0 <MX_SAI1_Init+0x140>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000eb8:	2240      	movs	r2, #64	; 0x40
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ec2:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ec8:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ed4:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eda:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ee2:	4a40      	ldr	r2, [pc, #256]	; (8000fe4 <MX_SAI1_Init+0x144>)
 8000ee4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f34:	4829      	ldr	r0, [pc, #164]	; (8000fdc <MX_SAI1_Init+0x13c>)
 8000f36:	f004 ffc9 	bl	8005ecc <HAL_SAI_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000f40:	f000 fb92 	bl	8001668 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f46:	4a29      	ldr	r2, [pc, #164]	; (8000fec <MX_SAI1_Init+0x14c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f52:	2203      	movs	r2, #3
 8000f54:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f94:	2208      	movs	r2, #8
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <MX_SAI1_Init+0x148>)
 8000fca:	f004 ff7f 	bl	8005ecc <HAL_SAI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000fd4:	f000 fb48 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000230 	.word	0x20000230
 8000fe0:	40015404 	.word	0x40015404
 8000fe4:	0002ee00 	.word	0x0002ee00
 8000fe8:	200002b4 	.word	0x200002b4
 8000fec:	40015424 	.word	0x40015424

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <MX_USART2_UART_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART2_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART2_UART_Init+0x58>)
 8001034:	f005 f8f6 	bl	8006224 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800103e:	f000 fb13 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000338 	.word	0x20000338
 800104c:	40004400 	.word	0x40004400

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_DMA_Init+0x38>)
 8001058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_DMA_Init+0x38>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6493      	str	r3, [r2, #72]	; 0x48
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_DMA_Init+0x38>)
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2044      	movs	r0, #68	; 0x44
 8001074:	f001 fb9f 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001078:	2044      	movs	r0, #68	; 0x44
 800107a:	f001 fbb8 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a2:	4bb1      	ldr	r3, [pc, #708]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4ab0      	ldr	r2, [pc, #704]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4bae      	ldr	r3, [pc, #696]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4bab      	ldr	r3, [pc, #684]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4aaa      	ldr	r2, [pc, #680]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4ba8      	ldr	r3, [pc, #672]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	4ba5      	ldr	r3, [pc, #660]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4aa4      	ldr	r2, [pc, #656]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4ba2      	ldr	r3, [pc, #648]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b9f      	ldr	r3, [pc, #636]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a9e      	ldr	r2, [pc, #632]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b9c      	ldr	r3, [pc, #624]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b99      	ldr	r3, [pc, #612]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a98      	ldr	r2, [pc, #608]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b96      	ldr	r3, [pc, #600]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111a:	4b93      	ldr	r3, [pc, #588]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a92      	ldr	r2, [pc, #584]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b90      	ldr	r3, [pc, #576]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001132:	f002 fcc5 	bl	8003ac0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a8b      	ldr	r2, [pc, #556]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b89      	ldr	r3, [pc, #548]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b86      	ldr	r3, [pc, #536]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a85      	ldr	r2, [pc, #532]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b83      	ldr	r3, [pc, #524]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b80      	ldr	r3, [pc, #512]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a7f      	ldr	r2, [pc, #508]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2114      	movs	r1, #20
 8001182:	487a      	ldr	r0, [pc, #488]	; (800136c <MX_GPIO_Init+0x2e0>)
 8001184:	f002 fae0 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	4878      	ldr	r0, [pc, #480]	; (8001370 <MX_GPIO_Init+0x2e4>)
 800118e:	f002 fadb 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2143      	movs	r1, #67	; 0x43
 8001196:	4875      	ldr	r0, [pc, #468]	; (800136c <MX_GPIO_Init+0x2e0>)
 8001198:	f002 fad6 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4874      	ldr	r0, [pc, #464]	; (8001374 <MX_GPIO_Init+0x2e8>)
 80011a2:	f002 fad1 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011ac:	4872      	ldr	r0, [pc, #456]	; (8001378 <MX_GPIO_Init+0x2ec>)
 80011ae:	f002 facb 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80011b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011be:	2302      	movs	r3, #2
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4869      	ldr	r0, [pc, #420]	; (8001370 <MX_GPIO_Init+0x2e4>)
 80011ca:	f002 f913 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 80011ce:	2304      	movs	r3, #4
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2302      	movs	r3, #2
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4861      	ldr	r0, [pc, #388]	; (800136c <MX_GPIO_Init+0x2e0>)
 80011e6:	f002 f905 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D11_Pin D4_Pin
                           D10_Pin D9_Pin D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80011ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011fc:	230c      	movs	r3, #12
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	485d      	ldr	r0, [pc, #372]	; (800137c <MX_GPIO_Init+0x2f0>)
 8001208:	f002 f8f4 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800120c:	2330      	movs	r3, #48	; 0x30
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121c:	2305      	movs	r3, #5
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4854      	ldr	r0, [pc, #336]	; (8001378 <MX_GPIO_Init+0x2ec>)
 8001228:	f002 f8e4 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800122c:	f248 0320 	movw	r3, #32800	; 0x8020
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123e:	2305      	movs	r3, #5
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f002 f8d2 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4842      	ldr	r0, [pc, #264]	; (8001370 <MX_GPIO_Init+0x2e4>)
 8001268:	f002 f8c4 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NE_Pin PSRAM_A11_Pin PSRAM_A10_Pin PSRAM_A15_Pin
                           PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A12_Pin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 800126c:	f240 233f 	movw	r3, #575	; 0x23f
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127e:	230c      	movs	r3, #12
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	483d      	ldr	r0, [pc, #244]	; (8001380 <MX_GPIO_Init+0x2f4>)
 800128a:	f002 f8b3 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin OE_Pin D3_Pin WE_Pin
                           LCD_NE_Pin D1_Pin D15_Pin D0_Pin
                           PSRAM_A17_Pin PSRAM_A16_Pin PSRAM_A18_LCD_RS_Pin D14_Pin
                           D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800128e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a0:	230c      	movs	r3, #12
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4836      	ldr	r0, [pc, #216]	; (8001384 <MX_GPIO_Init+0x2f8>)
 80012ac:	f002 f8a2 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012c0:	2303      	movs	r3, #3
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4829      	ldr	r0, [pc, #164]	; (8001370 <MX_GPIO_Init+0x2e4>)
 80012cc:	f002 f892 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80012d0:	2306      	movs	r3, #6
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4821      	ldr	r0, [pc, #132]	; (8001370 <MX_GPIO_Init+0x2e4>)
 80012ec:	f002 f882 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80012f0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001302:	2303      	movs	r3, #3
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <MX_GPIO_Init+0x2e0>)
 800130e:	f002 f871 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001322:	2307      	movs	r3, #7
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <MX_GPIO_Init+0x2ec>)
 800132e:	f002 f861 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	480a      	ldr	r0, [pc, #40]	; (8001378 <MX_GPIO_Init+0x2ec>)
 8001350:	f002 f850 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001354:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
 8001366:	e00f      	b.n	8001388 <MX_GPIO_Init+0x2fc>
 8001368:	40021000 	.word	0x40021000
 800136c:	48001c00 	.word	0x48001c00
 8001370:	48002000 	.word	0x48002000
 8001374:	48000800 	.word	0x48000800
 8001378:	48000400 	.word	0x48000400
 800137c:	48001000 	.word	0x48001000
 8001380:	48001800 	.word	0x48001800
 8001384:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001388:	2307      	movs	r3, #7
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	48af      	ldr	r0, [pc, #700]	; (8001650 <MX_GPIO_Init+0x5c4>)
 8001394:	f002 f82e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001398:	2304      	movs	r3, #4
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013a8:	230c      	movs	r3, #12
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	48a8      	ldr	r0, [pc, #672]	; (8001654 <MX_GPIO_Init+0x5c8>)
 80013b4:	f002 f81e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80013b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013ca:	230c      	movs	r3, #12
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	48a0      	ldr	r0, [pc, #640]	; (8001658 <MX_GPIO_Init+0x5cc>)
 80013d6:	f002 f80d 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	489b      	ldr	r0, [pc, #620]	; (800165c <MX_GPIO_Init+0x5d0>)
 80013ee:	f002 f801 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80013f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001404:	230a      	movs	r3, #10
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f001 ffef 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001422:	2302      	movs	r3, #2
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	488a      	ldr	r0, [pc, #552]	; (8001658 <MX_GPIO_Init+0x5cc>)
 800142e:	f001 ffe1 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001432:	2343      	movs	r3, #67	; 0x43
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4884      	ldr	r0, [pc, #528]	; (800165c <MX_GPIO_Init+0x5d0>)
 800144a:	f001 ffd3 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800144e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001460:	230c      	movs	r3, #12
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	487d      	ldr	r0, [pc, #500]	; (8001660 <MX_GPIO_Init+0x5d4>)
 800146c:	f001 ffc2 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4874      	ldr	r0, [pc, #464]	; (8001658 <MX_GPIO_Init+0x5cc>)
 8001488:	f001 ffb4 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800148c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001492:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	486b      	ldr	r0, [pc, #428]	; (8001650 <MX_GPIO_Init+0x5c4>)
 80014a4:	f001 ffa6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f001 ff94 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 80014cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014d2:	230b      	movs	r3, #11
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	485f      	ldr	r0, [pc, #380]	; (8001660 <MX_GPIO_Init+0x5d4>)
 80014e2:	f001 ff87 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 80014e6:	231b      	movs	r3, #27
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014ea:	230b      	movs	r3, #11
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4857      	ldr	r0, [pc, #348]	; (8001658 <MX_GPIO_Init+0x5cc>)
 80014fa:	f001 ff7b 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80014fe:	f640 0303 	movw	r3, #2051	; 0x803
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001510:	230a      	movs	r3, #10
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4852      	ldr	r0, [pc, #328]	; (8001664 <MX_GPIO_Init+0x5d8>)
 800151c:	f001 ff6a 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001520:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001532:	2308      	movs	r3, #8
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4844      	ldr	r0, [pc, #272]	; (8001650 <MX_GPIO_Init+0x5c4>)
 800153e:	f001 ff59 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001542:	2320      	movs	r3, #32
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4840      	ldr	r0, [pc, #256]	; (8001658 <MX_GPIO_Init+0x5cc>)
 8001558:	f001 ff4c 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 800155c:	2310      	movs	r3, #16
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001560:	2311      	movs	r3, #17
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	483a      	ldr	r0, [pc, #232]	; (800165c <MX_GPIO_Init+0x5d0>)
 8001574:	f001 ff3e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001578:	2312      	movs	r3, #18
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157c:	230b      	movs	r3, #11
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f001 ff31 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001592:	23c8      	movs	r3, #200	; 0xc8
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015a2:	230a      	movs	r3, #10
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f001 ff20 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80015b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4825      	ldr	r0, [pc, #148]	; (8001660 <MX_GPIO_Init+0x5d4>)
 80015cc:	f001 ff12 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e2:	2305      	movs	r3, #5
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <MX_GPIO_Init+0x5d8>)
 80015ee:	f001 ff01 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 80015f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015f8:	2311      	movs	r3, #17
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_GPIO_Init+0x5d8>)
 800160c:	f001 fef2 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_GPIO_Init+0x5d8>)
 8001624:	f001 fee6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800162e:	2311      	movs	r3, #17
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_GPIO_Init+0x5d8>)
 8001642:	f001 fed7 	bl	80033f4 <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3738      	adds	r7, #56	; 0x38
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	48001800 	.word	0x48001800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48000800 	.word	0x48000800
 800165c:	48001c00 	.word	0x48001c00
 8001660:	48001400 	.word	0x48001400
 8001664:	48000400 	.word	0x48000400

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <Error_Handler+0x30>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4618      	mov	r0, r3
 8001672:	f005 ff59 	bl	8007528 <iprintf>
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <Error_Handler+0x34>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f005 ff54 	bl	8007528 <iprintf>
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <Error_Handler+0x30>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4618      	mov	r0, r3
 8001686:	f005 ff4f 	bl	8007528 <iprintf>
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <Error_Handler+0x38>)
 800168c:	f005 ff4c 	bl	8007528 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x2c>
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000
 800169c:	20000020 	.word	0x20000020
 80016a0:	080080a0 	.word	0x080080a0

080016a4 <OV5640_WR_Reg>:
	{352, 288},	//CIF
	{640, 480},	//VGA
};

uint8_t OV5640_WR_Reg(uint16_t reg,uint8_t data)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	80fb      	strh	r3, [r7, #6]
 80016b0:	4613      	mov	r3, r2
 80016b2:	717b      	strb	r3, [r7, #5]
	uint8_t res=0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 80016b8:	f000 fa4a 	bl	8001b50 <SCCB_Start>
	if(SCCB_WR_Byte(OV5640_ADDR))res=1;
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f000 faaf 	bl	8001c20 <SCCB_WR_Byte>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <OV5640_WR_Reg+0x28>
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg>>8))res=1;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 faa3 	bl	8001c20 <SCCB_WR_Byte>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <OV5640_WR_Reg+0x40>
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg))res=1;
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fa99 	bl	8001c20 <SCCB_WR_Byte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <OV5640_WR_Reg+0x54>
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(data))res=1;
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fa90 	bl	8001c20 <SCCB_WR_Byte>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <OV5640_WR_Reg+0x66>
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 800170a:	f000 fa43 	bl	8001b94 <SCCB_Stop>
  	return	res;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <OV5640_RD_Reg>:


uint8_t OV5640_RD_Reg(uint16_t reg)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
	uint8_t val=0;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8001726:	f000 fa13 	bl	8001b50 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR);
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fa78 	bl	8001c20 <SCCB_WR_Byte>
   	SCCB_WR_Byte(reg>>8);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fa71 	bl	8001c20 <SCCB_WR_Byte>
  	SCCB_WR_Byte(reg);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fa6c 	bl	8001c20 <SCCB_WR_Byte>
	SCCB_Stop();
 8001748:	f000 fa24 	bl	8001b94 <SCCB_Stop>

	SCCB_Start();
 800174c:	f000 fa00 	bl	8001b50 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR|0X01);
 8001750:	2079      	movs	r0, #121	; 0x79
 8001752:	f000 fa65 	bl	8001c20 <SCCB_WR_Byte>
   	val=SCCB_RD_Byte();
 8001756:	f000 fab7 	bl	8001cc8 <SCCB_RD_Byte>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 800175e:	f000 fa39 	bl	8001bd4 <SCCB_No_Ack>
  	SCCB_Stop();
 8001762:	f000 fa17 	bl	8001b94 <SCCB_Stop>
  	return val;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <OV5640_Init>:


uint8_t OV5640_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001776:	2300      	movs	r3, #0
 8001778:	80fb      	strh	r3, [r7, #6]
	uint16_t reg;


	//OV5640_PWDN_Pin_RESET;		//POWER ON
	HAL_Delay(30);
 800177a:	201e      	movs	r0, #30
 800177c:	f000 ff1c 	bl	80025b8 <HAL_Delay>

	reg=OV5640_RD_Reg(OV5640_CHIPIDH);
 8001780:	f243 000a 	movw	r0, #12298	; 0x300a
 8001784:	f7ff ffc8 	bl	8001718 <OV5640_RD_Reg>
 8001788:	4603      	mov	r3, r0
 800178a:	80bb      	strh	r3, [r7, #4]
	reg<<=8;
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	80bb      	strh	r3, [r7, #4]
	reg|=OV5640_RD_Reg(OV5640_CHIPIDL);
 8001792:	f243 000b 	movw	r0, #12299	; 0x300b
 8001796:	f7ff ffbf 	bl	8001718 <OV5640_RD_Reg>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	80bb      	strh	r3, [r7, #4]
	if(reg!=OV5640_ID)
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	f245 6240 	movw	r2, #22080	; 0x5640
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d006      	beq.n	80017bc <OV5640_Init+0x4c>
	{
		printf("ID: %d \r\n",reg);
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4817      	ldr	r0, [pc, #92]	; (8001810 <OV5640_Init+0xa0>)
 80017b4:	f005 feb8 	bl	8007528 <iprintf>
		return 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e024      	b.n	8001806 <OV5640_Init+0x96>
	}
	OV5640_WR_Reg(0x3103,0X11);	//system clock from pad, bit[1]
 80017bc:	2111      	movs	r1, #17
 80017be:	f243 1003 	movw	r0, #12547	; 0x3103
 80017c2:	f7ff ff6f 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0X3008,0X82);
 80017c6:	2182      	movs	r1, #130	; 0x82
 80017c8:	f243 0008 	movw	r0, #12296	; 0x3008
 80017cc:	f7ff ff6a 	bl	80016a4 <OV5640_WR_Reg>
	HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f000 fef1 	bl	80025b8 <HAL_Delay>

	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	e010      	b.n	80017fe <OV5640_Init+0x8e>
	{
		OV5640_WR_Reg(ov5640_init_reg_tbl[i][0],ov5640_init_reg_tbl[i][1]);
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <OV5640_Init+0xa4>)
 80017e0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	490b      	ldr	r1, [pc, #44]	; (8001814 <OV5640_Init+0xa4>)
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	885b      	ldrh	r3, [r3, #2]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f7ff ff56 	bl	80016a4 <OV5640_WR_Reg>
	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	3301      	adds	r3, #1
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2bce      	cmp	r3, #206	; 0xce
 8001802:	d9eb      	bls.n	80017dc <OV5640_Init+0x6c>
	}

	return 0x00; 	//ok
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	080080c0 	.word	0x080080c0
 8001814:	080081e4 	.word	0x080081e4

08001818 <OV5640_RGB565_Mode>:
		OV5640_WR_Reg(OV5640_jpeg_reg_tbl[i][0],OV5640_jpeg_reg_tbl[i][1]);
	}
}

void OV5640_RGB565_Mode(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800181e:	2300      	movs	r3, #0
 8001820:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001822:	2300      	movs	r3, #0
 8001824:	80fb      	strh	r3, [r7, #6]
 8001826:	e010      	b.n	800184a <OV5640_RGB565_Mode+0x32>
	{
		OV5640_WR_Reg(ov5640_rgb565_reg_tbl[i][0],ov5640_rgb565_reg_tbl[i][1]);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <OV5640_RGB565_Mode+0x44>)
 800182c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	490a      	ldr	r1, [pc, #40]	; (800185c <OV5640_RGB565_Mode+0x44>)
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f7ff ff30 	bl	80016a4 <OV5640_WR_Reg>
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3301      	adds	r3, #1
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b2c      	cmp	r3, #44	; 0x2c
 800184e:	d9eb      	bls.n	8001828 <OV5640_RGB565_Mode+0x10>
	}
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08008130 	.word	0x08008130

08001860 <OV5640_Light_Mode>:
//      1: sunny
//      2: office
//      3: cloudy
//      4: home
void OV5640_Light_Mode(uint8_t mode)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 800186a:	2103      	movs	r1, #3
 800186c:	f243 2012 	movw	r0, #12818	; 0x3212
 8001870:	f7ff ff18 	bl	80016a4 <OV5640_WR_Reg>
	for(i=0;i<7;i++)OV5640_WR_Reg(0x3400+i,OV5640_LIGHTMODE_TBL[mode][i]);
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e013      	b.n	80018a2 <OV5640_Light_Mode+0x42>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b29b      	uxth	r3, r3
 800187e:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8001882:	b298      	uxth	r0, r3
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	7bf9      	ldrb	r1, [r7, #15]
 8001888:	4c0e      	ldr	r4, [pc, #56]	; (80018c4 <OV5640_Light_Mode+0x64>)
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	4423      	add	r3, r4
 8001892:	440b      	add	r3, r1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff ff04 	bl	80016a4 <OV5640_WR_Reg>
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d9e8      	bls.n	800187a <OV5640_Light_Mode+0x1a>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 80018a8:	2113      	movs	r1, #19
 80018aa:	f243 2012 	movw	r0, #12818	; 0x3212
 80018ae:	f7ff fef9 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 80018b2:	21a3      	movs	r1, #163	; 0xa3
 80018b4:	f243 2012 	movw	r0, #12818	; 0x3212
 80018b8:	f7ff fef4 	bl	80016a4 <OV5640_WR_Reg>
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	08008520 	.word	0x08008520

080018c8 <OV5640_Color_Saturation>:


// Color Saturation:
//   sat:  0 - 6
void OV5640_Color_Saturation(uint8_t sat)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 80018d2:	2103      	movs	r1, #3
 80018d4:	f243 2012 	movw	r0, #12818	; 0x3212
 80018d8:	f7ff fee4 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5381,0x1c);
 80018dc:	211c      	movs	r1, #28
 80018de:	f245 3081 	movw	r0, #21377	; 0x5381
 80018e2:	f7ff fedf 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5382,0x5a);
 80018e6:	215a      	movs	r1, #90	; 0x5a
 80018e8:	f245 3082 	movw	r0, #21378	; 0x5382
 80018ec:	f7ff feda 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5383,0x06);
 80018f0:	2106      	movs	r1, #6
 80018f2:	f245 3083 	movw	r0, #21379	; 0x5383
 80018f6:	f7ff fed5 	bl	80016a4 <OV5640_WR_Reg>
	for(i=0;i<6;i++)  OV5640_WR_Reg(0x5384+i,OV5640_SATURATION_TBL[sat][i]);
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e015      	b.n	800192c <OV5640_Color_Saturation+0x64>
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 8001908:	3304      	adds	r3, #4
 800190a:	b298      	uxth	r0, r3
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	7bf9      	ldrb	r1, [r7, #15]
 8001910:	4c14      	ldr	r4, [pc, #80]	; (8001964 <OV5640_Color_Saturation+0x9c>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4423      	add	r3, r4
 800191c:	440b      	add	r3, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff febf 	bl	80016a4 <OV5640_WR_Reg>
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	3301      	adds	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d9e6      	bls.n	8001900 <OV5640_Color_Saturation+0x38>
	OV5640_WR_Reg(0x538b, 0x98);
 8001932:	2198      	movs	r1, #152	; 0x98
 8001934:	f245 308b 	movw	r0, #21387	; 0x538b
 8001938:	f7ff feb4 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x538a, 0x01);
 800193c:	2101      	movs	r1, #1
 800193e:	f245 308a 	movw	r0, #21386	; 0x538a
 8001942:	f7ff feaf 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0x13); //end group 3
 8001946:	2113      	movs	r1, #19
 8001948:	f243 2012 	movw	r0, #12818	; 0x3212
 800194c:	f7ff feaa 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0xa3); //launch group 3
 8001950:	21a3      	movs	r1, #163	; 0xa3
 8001952:	f243 2012 	movw	r0, #12818	; 0x3212
 8001956:	f7ff fea5 	bl	80016a4 <OV5640_WR_Reg>
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	08008544 	.word	0x08008544

08001968 <OV5640_Brightness>:

//Brightness
//     bright:  0 - 8
void OV5640_Brightness(uint8_t bright)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	uint8_t brtval;
	if(bright<4)brtval=4-bright;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d804      	bhi.n	8001982 <OV5640_Brightness+0x1a>
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f1c3 0304 	rsb	r3, r3, #4
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e002      	b.n	8001988 <OV5640_Brightness+0x20>
	else brtval=bright-4;
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	3b04      	subs	r3, #4
 8001986:	73fb      	strb	r3, [r7, #15]
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8001988:	2103      	movs	r1, #3
 800198a:	f243 2012 	movw	r0, #12818	; 0x3212
 800198e:	f7ff fe89 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5587,brtval<<4);
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	f245 5087 	movw	r0, #21895	; 0x5587
 800199e:	f7ff fe81 	bl	80016a4 <OV5640_WR_Reg>
	if(bright<4)OV5640_WR_Reg(0x5588,0x09);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d805      	bhi.n	80019b4 <OV5640_Brightness+0x4c>
 80019a8:	2109      	movs	r1, #9
 80019aa:	f245 5088 	movw	r0, #21896	; 0x5588
 80019ae:	f7ff fe79 	bl	80016a4 <OV5640_WR_Reg>
 80019b2:	e004      	b.n	80019be <OV5640_Brightness+0x56>
	else OV5640_WR_Reg(0x5588,0x01);
 80019b4:	2101      	movs	r1, #1
 80019b6:	f245 5088 	movw	r0, #21896	; 0x5588
 80019ba:	f7ff fe73 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 80019be:	2113      	movs	r1, #19
 80019c0:	f243 2012 	movw	r0, #12818	; 0x3212
 80019c4:	f7ff fe6e 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 80019c8:	21a3      	movs	r1, #163	; 0xa3
 80019ca:	f243 2012 	movw	r0, #12818	; 0x3212
 80019ce:	f7ff fe69 	bl	80016a4 <OV5640_WR_Reg>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <OV5640_Contrast>:

//Contrast:
//     contrast:  0 - 6
void OV5640_Contrast(uint8_t contrast)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg0val=0X00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
	uint8_t reg1val=0X20;
 80019ea:	2320      	movs	r3, #32
 80019ec:	73bb      	strb	r3, [r7, #14]
	switch(contrast)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d82f      	bhi.n	8001a54 <OV5640_Contrast+0x78>
 80019f4:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <OV5640_Contrast+0x20>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a19 	.word	0x08001a19
 8001a00:	08001a23 	.word	0x08001a23
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	08001a55 	.word	0x08001a55
 8001a0c:	08001a37 	.word	0x08001a37
 8001a10:	08001a41 	.word	0x08001a41
 8001a14:	08001a4b 	.word	0x08001a4b
	{
		case 0://-3
			reg1val=reg0val=0X14;
 8001a18:	2314      	movs	r3, #20
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	73bb      	strb	r3, [r7, #14]
			break;
 8001a20:	e018      	b.n	8001a54 <OV5640_Contrast+0x78>
		case 1://-2
			reg1val=reg0val=0X18;
 8001a22:	2318      	movs	r3, #24
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	73bb      	strb	r3, [r7, #14]
			break;
 8001a2a:	e013      	b.n	8001a54 <OV5640_Contrast+0x78>
		case 2://-1
			reg1val=reg0val=0X1C;
 8001a2c:	231c      	movs	r3, #28
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	73bb      	strb	r3, [r7, #14]
			break;
 8001a34:	e00e      	b.n	8001a54 <OV5640_Contrast+0x78>
		case 4://1
			reg0val=0X10;
 8001a36:	2310      	movs	r3, #16
 8001a38:	73fb      	strb	r3, [r7, #15]
			reg1val=0X24;
 8001a3a:	2324      	movs	r3, #36	; 0x24
 8001a3c:	73bb      	strb	r3, [r7, #14]
			break;
 8001a3e:	e009      	b.n	8001a54 <OV5640_Contrast+0x78>
		case 5://2
			reg0val=0X18;
 8001a40:	2318      	movs	r3, #24
 8001a42:	73fb      	strb	r3, [r7, #15]
			reg1val=0X28;
 8001a44:	2328      	movs	r3, #40	; 0x28
 8001a46:	73bb      	strb	r3, [r7, #14]
			break;
 8001a48:	e004      	b.n	8001a54 <OV5640_Contrast+0x78>
		case 6://3
			reg0val=0X1C;
 8001a4a:	231c      	movs	r3, #28
 8001a4c:	73fb      	strb	r3, [r7, #15]
			reg1val=0X2C;
 8001a4e:	232c      	movs	r3, #44	; 0x2c
 8001a50:	73bb      	strb	r3, [r7, #14]
			break;
 8001a52:	bf00      	nop
	}
	OV5640_WR_Reg(0x3212,0x03); //start group 3
 8001a54:	2103      	movs	r1, #3
 8001a56:	f243 2012 	movw	r0, #12818	; 0x3212
 8001a5a:	f7ff fe23 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5585,reg0val);
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f245 5085 	movw	r0, #21893	; 0x5585
 8001a66:	f7ff fe1d 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5586,reg1val);
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f245 5086 	movw	r0, #21894	; 0x5586
 8001a72:	f7ff fe17 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8001a76:	2113      	movs	r1, #19
 8001a78:	f243 2012 	movw	r0, #12818	; 0x3212
 8001a7c:	f7ff fe12 	bl	80016a4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 8001a80:	21a3      	movs	r1, #163	; 0xa3
 8001a82:	f243 2012 	movw	r0, #12818	; 0x3212
 8001a86:	f7ff fe0d 	bl	80016a4 <OV5640_WR_Reg>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop

08001a94 <OV5640_Sharpness>:
// Sharpness:
//    sharp: 0 - 33   (0: close , 33: auto , other: Sharpness)

void OV5640_Sharpness(uint8_t sharp)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if(sharp<33)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d80b      	bhi.n	8001abc <OV5640_Sharpness+0x28>
	{
		OV5640_WR_Reg(0x5308,0x65);
 8001aa4:	2165      	movs	r1, #101	; 0x65
 8001aa6:	f245 3008 	movw	r0, #21256	; 0x5308
 8001aaa:	f7ff fdfb 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,sharp);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f245 3002 	movw	r0, #21250	; 0x5302
 8001ab6:	f7ff fdf5 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
		OV5640_WR_Reg(0x530b,0x04);
		OV5640_WR_Reg(0x530c,0x06);
	}

}
 8001aba:	e02c      	b.n	8001b16 <OV5640_Sharpness+0x82>
		OV5640_WR_Reg(0x5308,0x25);
 8001abc:	2125      	movs	r1, #37	; 0x25
 8001abe:	f245 3008 	movw	r0, #21256	; 0x5308
 8001ac2:	f7ff fdef 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5300,0x08);
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 8001acc:	f7ff fdea 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5301,0x30);
 8001ad0:	2130      	movs	r1, #48	; 0x30
 8001ad2:	f245 3001 	movw	r0, #21249	; 0x5301
 8001ad6:	f7ff fde5 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,0x10);
 8001ada:	2110      	movs	r1, #16
 8001adc:	f245 3002 	movw	r0, #21250	; 0x5302
 8001ae0:	f7ff fde0 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5303,0x00);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f245 3003 	movw	r0, #21251	; 0x5303
 8001aea:	f7ff fddb 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5309,0x08);
 8001aee:	2108      	movs	r1, #8
 8001af0:	f245 3009 	movw	r0, #21257	; 0x5309
 8001af4:	f7ff fdd6 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
 8001af8:	2130      	movs	r1, #48	; 0x30
 8001afa:	f245 300a 	movw	r0, #21258	; 0x530a
 8001afe:	f7ff fdd1 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530b,0x04);
 8001b02:	2104      	movs	r1, #4
 8001b04:	f245 300b 	movw	r0, #21259	; 0x530b
 8001b08:	f7ff fdcc 	bl	80016a4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530c,0x06);
 8001b0c:	2106      	movs	r1, #6
 8001b0e:	f245 300c 	movw	r0, #21260	; 0x530c
 8001b12:	f7ff fdc7 	bl	80016a4 <OV5640_WR_Reg>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <delay_6us>:



// Use for STM32F746IGT , HCLK = 200MHz
void delay_6us(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
        uint16_t  i;

        for(i=0;i < 250;i++);
 8001b24:	2300      	movs	r3, #0
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	e002      	b.n	8001b30 <delay_6us+0x12>
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	80fb      	strh	r3, [r7, #6]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2bf9      	cmp	r3, #249	; 0xf9
 8001b34:	d9f9      	bls.n	8001b2a <delay_6us+0xc>
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SCCB_Delay>:


void SCCB_Delay(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	delay_6us();
 8001b48:	f7ff ffe9 	bl	8001b1e <delay_6us>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <SCCB_Start>:

void SCCB_Start(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    OV5640_SIOD_H();
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	480c      	ldr	r0, [pc, #48]	; (8001b8c <SCCB_Start+0x3c>)
 8001b5c:	f001 fdf4 	bl	8003748 <HAL_GPIO_WritePin>
    OV5640_SIOC_H();
 8001b60:	2201      	movs	r2, #1
 8001b62:	2110      	movs	r1, #16
 8001b64:	480a      	ldr	r0, [pc, #40]	; (8001b90 <SCCB_Start+0x40>)
 8001b66:	f001 fdef 	bl	8003748 <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001b6a:	f7ff ffeb 	bl	8001b44 <SCCB_Delay>
    OV5640_SIOD_L();
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <SCCB_Start+0x3c>)
 8001b76:	f001 fde7 	bl	8003748 <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001b7a:	f7ff ffe3 	bl	8001b44 <SCCB_Delay>
    OV5640_SIOC_L();
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2110      	movs	r1, #16
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <SCCB_Start+0x40>)
 8001b84:	f001 fde0 	bl	8003748 <HAL_GPIO_WritePin>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48001c00 	.word	0x48001c00

08001b94 <SCCB_Stop>:

void SCCB_Stop(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    OV5640_SIOD_L();
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <SCCB_Stop+0x38>)
 8001ba0:	f001 fdd2 	bl	8003748 <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001ba4:	f7ff ffce 	bl	8001b44 <SCCB_Delay>
    OV5640_SIOC_H();
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <SCCB_Stop+0x3c>)
 8001bae:	f001 fdcb 	bl	8003748 <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001bb2:	f7ff ffc7 	bl	8001b44 <SCCB_Delay>
    OV5640_SIOD_H();
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <SCCB_Stop+0x38>)
 8001bbe:	f001 fdc3 	bl	8003748 <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001bc2:	f7ff ffbf 	bl	8001b44 <SCCB_Delay>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	48001c00 	.word	0x48001c00

08001bd4 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	SCCB_Delay();
 8001bd8:	f7ff ffb4 	bl	8001b44 <SCCB_Delay>
	OV5640_SIOD_H();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <SCCB_No_Ack+0x44>)
 8001be4:	f001 fdb0 	bl	8003748 <HAL_GPIO_WritePin>
	OV5640_SIOC_H();
 8001be8:	2201      	movs	r2, #1
 8001bea:	2110      	movs	r1, #16
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <SCCB_No_Ack+0x48>)
 8001bee:	f001 fdab 	bl	8003748 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001bf2:	f7ff ffa7 	bl	8001b44 <SCCB_Delay>
	OV5640_SIOC_L();
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4808      	ldr	r0, [pc, #32]	; (8001c1c <SCCB_No_Ack+0x48>)
 8001bfc:	f001 fda4 	bl	8003748 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001c00:	f7ff ffa0 	bl	8001b44 <SCCB_Delay>
	OV5640_SIOD_L();
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0a:	4803      	ldr	r0, [pc, #12]	; (8001c18 <SCCB_No_Ack+0x44>)
 8001c0c:	f001 fd9c 	bl	8003748 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001c10:	f7ff ff98 	bl	8001b44 <SCCB_Delay>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48001c00 	.word	0x48001c00

08001c20 <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e024      	b.n	8001c7a <SCCB_WR_Byte+0x5a>
	{
		if(dat&0x80)OV5640_SIOD_H();
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da06      	bge.n	8001c46 <SCCB_WR_Byte+0x26>
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3e:	4820      	ldr	r0, [pc, #128]	; (8001cc0 <SCCB_WR_Byte+0xa0>)
 8001c40:	f001 fd82 	bl	8003748 <HAL_GPIO_WritePin>
 8001c44:	e005      	b.n	8001c52 <SCCB_WR_Byte+0x32>
		else OV5640_SIOD_L();
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <SCCB_WR_Byte+0xa0>)
 8001c4e:	f001 fd7b 	bl	8003748 <HAL_GPIO_WritePin>
		dat<<=1;
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 8001c58:	f7ff ff74 	bl	8001b44 <SCCB_Delay>
		OV5640_SIOC_H();
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <SCCB_WR_Byte+0xa4>)
 8001c62:	f001 fd71 	bl	8003748 <HAL_GPIO_WritePin>
		SCCB_Delay();
 8001c66:	f7ff ff6d 	bl	8001b44 <SCCB_Delay>
		OV5640_SIOC_L();
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <SCCB_WR_Byte+0xa4>)
 8001c70:	f001 fd6a 	bl	8003748 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d9d7      	bls.n	8001c30 <SCCB_WR_Byte+0x10>
	}
	SCCB_Delay();
 8001c80:	f7ff ff60 	bl	8001b44 <SCCB_Delay>
	OV5640_SIOC_H();
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <SCCB_WR_Byte+0xa4>)
 8001c8a:	f001 fd5d 	bl	8003748 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001c8e:	f7ff ff59 	bl	8001b44 <SCCB_Delay>
	if(OV5640_SIOD_READ())res=1;
 8001c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c96:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <SCCB_WR_Byte+0xa0>)
 8001c98:	f001 fd3e 	bl	8003718 <HAL_GPIO_ReadPin>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <SCCB_WR_Byte+0x88>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73bb      	strb	r3, [r7, #14]
 8001ca6:	e001      	b.n	8001cac <SCCB_WR_Byte+0x8c>
	else res=0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
	OV5640_SIOC_L();
 8001cac:	2200      	movs	r2, #0
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <SCCB_WR_Byte+0xa4>)
 8001cb2:	f001 fd49 	bl	8003748 <HAL_GPIO_WritePin>
	return res;
 8001cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	48001c00 	.word	0x48001c00

08001cc8 <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	for(j=8;j>0;j--)
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	71bb      	strb	r3, [r7, #6]
 8001cd6:	e01e      	b.n	8001d16 <SCCB_RD_Byte+0x4e>
	{
		SCCB_Delay();
 8001cd8:	f7ff ff34 	bl	8001b44 <SCCB_Delay>
		OV5640_SIOC_H();
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4811      	ldr	r0, [pc, #68]	; (8001d28 <SCCB_RD_Byte+0x60>)
 8001ce2:	f001 fd31 	bl	8003748 <HAL_GPIO_WritePin>
		temp=temp<<1;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	71fb      	strb	r3, [r7, #7]
		if(OV5640_SIOD_READ())temp++;
 8001cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf0:	480e      	ldr	r0, [pc, #56]	; (8001d2c <SCCB_RD_Byte+0x64>)
 8001cf2:	f001 fd11 	bl	8003718 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <SCCB_RD_Byte+0x3a>
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 8001d02:	f7ff ff1f 	bl	8001b44 <SCCB_Delay>
		OV5640_SIOC_L();
 8001d06:	2200      	movs	r2, #0
 8001d08:	2110      	movs	r1, #16
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <SCCB_RD_Byte+0x60>)
 8001d0c:	f001 fd1c 	bl	8003748 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	71bb      	strb	r3, [r7, #6]
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1dd      	bne.n	8001cd8 <SCCB_RD_Byte+0x10>
	}
	return temp;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	48001c00 	.word	0x48001c00
 8001d2c:	48000400 	.word	0x48000400

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x44>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_MspInit+0x44>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_MspInit+0x44>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_MspInit+0x44>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_MspInit+0x44>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_MspInit+0x44>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_DCMI_MspInit+0x148>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 808d 	bne.w	8001eb6 <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001d9c:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a48      	ldr	r2, [pc, #288]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	4a3c      	ldr	r2, [pc, #240]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_DCMI_MspInit+0x14c>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001dfc:	f645 7320 	movw	r3, #24352	; 0x5f20
 8001e00:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	482b      	ldr	r0, [pc, #172]	; (8001ec8 <HAL_DCMI_MspInit+0x150>)
 8001e1a:	f001 faeb 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001e1e:	23b0      	movs	r3, #176	; 0xb0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001e2e:	230a      	movs	r3, #10
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4824      	ldr	r0, [pc, #144]	; (8001ecc <HAL_DCMI_MspInit+0x154>)
 8001e3a:	f001 fadb 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	481d      	ldr	r0, [pc, #116]	; (8001ed0 <HAL_DCMI_MspInit+0x158>)
 8001e5a:	f001 facb 	bl	80033f4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_DCMI_MspInit+0x160>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001e9c:	f001 f8b2 	bl	8003004 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 8001ea6:	f7ff fbdf 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_DCMI_MspInit+0x15c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	; 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	50050000 	.word	0x50050000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48001c00 	.word	0x48001c00
 8001ecc:	48002000 	.word	0x48002000
 8001ed0:	48001000 	.word	0x48001000
 8001ed4:	20000124 	.word	0x20000124
 8001ed8:	4002046c 	.word	0x4002046c

08001edc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ae      	sub	sp, #184	; 0xb8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	228c      	movs	r2, #140	; 0x8c
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 ff3d 	bl	8006d7c <memset>
  if(DFSDM1_Init == 0)
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_DFSDM_ChannelMspInit+0x100>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d163      	bne.n	8001fd2 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fc52 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001f26:	f7ff fb9f 	bl	8001668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f34:	6613      	str	r3, [r2, #96]	; 0x60
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001f72:	2384      	movs	r3, #132	; 0x84
 8001f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001f98:	f001 fa2c 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001fc4:	f001 fa16 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_DFSDM_ChannelMspInit+0x100>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_DFSDM_ChannelMspInit+0x100>)
 8001fd0:	6013      	str	r3, [r2, #0]
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	37b8      	adds	r7, #184	; 0xb8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2001c5ec 	.word	0x2001c5ec
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	48000400 	.word	0x48000400

08001fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0ac      	sub	sp, #176	; 0xb0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	228c      	movs	r2, #140	; 0x8c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f004 feb5 	bl	8006d7c <memset>
  if(hi2c->Instance==I2C1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_I2C_MspInit+0xb0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d13b      	bne.n	8002094 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002020:	2300      	movs	r3, #0
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4618      	mov	r0, r3
 800202a:	f002 fbcb 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002034:	f7ff fb18 	bl	8001668 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002050:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002058:	2312      	movs	r3, #18
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205e:	2301      	movs	r3, #1
 8002060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206a:	2304      	movs	r3, #4
 800206c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002074:	4619      	mov	r1, r3
 8002076:	480b      	ldr	r0, [pc, #44]	; (80020a4 <HAL_I2C_MspInit+0xb8>)
 8002078:	f001 f9bc 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 8002082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_I2C_MspInit+0xb4>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	37b0      	adds	r7, #176	; 0xb0
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40005400 	.word	0x40005400
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000400 	.word	0x48000400

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ae      	sub	sp, #184	; 0xb8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	228c      	movs	r2, #140	; 0x8c
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fe57 	bl	8006d7c <memset>
  if(huart->Instance==USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d15c      	bne.n	8002192 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fb6d 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f0:	f7ff faba 	bl	8001668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 80020fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800213c:	2340      	movs	r3, #64	; 0x40
 800213e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002154:	2307      	movs	r3, #7
 8002156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800215e:	4619      	mov	r1, r3
 8002160:	4810      	ldr	r0, [pc, #64]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002162:	f001 f947 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002166:	2304      	movs	r3, #4
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217e:	2307      	movs	r3, #7
 8002180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f001 f931 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	37b8      	adds	r7, #184	; 0xb8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40004400 	.word	0x40004400
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000c00 	.word	0x48000c00

080021a8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a33      	ldr	r2, [pc, #204]	; (8002284 <HAL_SAI_MspInit+0xdc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d135      	bne.n	8002226 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_SAI_MspInit+0xe4>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_SAI_MspInit+0xe4>)
 80021c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_SAI_MspInit+0xe4>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 80021e2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80021e4:	2354      	movs	r3, #84	; 0x54
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80021f4:	230d      	movs	r3, #13
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4824      	ldr	r0, [pc, #144]	; (8002290 <HAL_SAI_MspInit+0xe8>)
 8002200:	f001 f8f8 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002216:	230d      	movs	r3, #13
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	481c      	ldr	r0, [pc, #112]	; (8002294 <HAL_SAI_MspInit+0xec>)
 8002222:	f001 f8e7 	bl	80033f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <HAL_SAI_MspInit+0xf0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d124      	bne.n	800227a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_SAI_MspInit+0xe4>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_SAI_MspInit+0xe4>)
 800223e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002242:	6613      	str	r3, [r2, #96]	; 0x60
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_SAI_MspInit+0xe4>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_SAI_MspInit+0xe0>)
 8002258:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800225a:	2308      	movs	r3, #8
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800226a:	230d      	movs	r3, #13
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4806      	ldr	r0, [pc, #24]	; (8002290 <HAL_SAI_MspInit+0xe8>)
 8002276:	f001 f8bd 	bl	80033f4 <HAL_GPIO_Init>

    }
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40015404 	.word	0x40015404
 8002288:	2001c5f0 	.word	0x2001c5f0
 800228c:	40021000 	.word	0x40021000
 8002290:	48001000 	.word	0x48001000
 8002294:	48000400 	.word	0x48000400
 8002298:	40015424 	.word	0x40015424

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <NMI_Handler+0x4>

080022a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <MemManage_Handler+0x4>

080022ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <UsageFault_Handler+0x4>

080022ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e8:	f000 f946 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA2_Channel6_IRQHandler+0x10>)
 80022f6:	f000 ff9d 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000124 	.word	0x20000124

08002304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_kill>:

int _kill(int pid, int sig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800231e:	f004 fce9 	bl	8006cf4 <__errno>
 8002322:	4603      	mov	r3, r0
 8002324:	2216      	movs	r2, #22
 8002326:	601a      	str	r2, [r3, #0]
	return -1;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_exit>:

void _exit (int status)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ffe7 	bl	8002314 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002346:	e7fe      	b.n	8002346 <_exit+0x12>

08002348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e00a      	b.n	8002370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800235a:	f3af 8000 	nop.w
 800235e:	4601      	mov	r1, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	b2ca      	uxtb	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	dbf0      	blt.n	800235a <_read+0x12>
	}

return len;
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
	return -1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023aa:	605a      	str	r2, [r3, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_isatty>:

int _isatty(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
	return 1;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f004 fc6a 	bl	8006cf4 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20050000 	.word	0x20050000
 800244c:	00000400 	.word	0x00000400
 8002450:	2001c5f4 	.word	0x2001c5f4
 8002454:	2001c630 	.word	0x2001c630

08002458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002480:	f7ff ffea 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <LoopForever+0xe>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <LoopForever+0x16>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024aa:	f004 fc3b 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ae:	f7fe fa5b 	bl	8000968 <main>

080024b2 <LoopForever>:

LoopForever:
    b LoopForever
 80024b2:	e7fe      	b.n	80024b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80024c0:	080086dc 	.word	0x080086dc
  ldr r2, =_sbss
 80024c4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80024c8:	2001c630 	.word	0x2001c630

080024cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>

080024ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 f961 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f80e 	bl	8002500 <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	e001      	b.n	80024f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f0:	f7ff fc1e 	bl	8001d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_InitTick+0x6c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_InitTick+0x70>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_InitTick+0x6c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f96d 	bl	800280a <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d809      	bhi.n	8002550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f000 f937 	bl	80027b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_InitTick+0x74>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e007      	b.n	8002560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e004      	b.n	8002560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e001      	b.n	8002560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000002c 	.word	0x2000002c
 8002570:	20000024 	.word	0x20000024
 8002574:	20000028 	.word	0x20000028

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000002c 	.word	0x2000002c
 800259c:	2001c5f8 	.word	0x2001c5f8

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2001c5f8 	.word	0x2001c5f8

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000002c 	.word	0x2000002c

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e075      	b.n	8002922 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fa94 	bl	8001d78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002866:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_DCMI_Init+0x108>)
 8002882:	400b      	ands	r3, r1
 8002884:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800289a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80028a6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80028b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80028be:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80028ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d112      	bne.n	8002902 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7f1b      	ldrb	r3, [r3, #28]
 80028e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7f5b      	ldrb	r3, [r3, #29]
 80028e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80028e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7f9b      	ldrb	r3, [r3, #30]
 80028ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80028f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7fdb      	ldrb	r3, [r3, #31]
 80028f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80028fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8002900:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 021f 	orr.w	r2, r2, #31
 8002910:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	ffe0f007 	.word	0xffe0f007

08002930 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_DCMI_Start_DMA+0x1c>
 8002948:	2302      	movs	r3, #2
 800294a:	e0b8      	b.n	8002abe <HAL_DCMI_Start_DMA+0x18e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002966:	f023 0302 	bic.w	r3, r3, #2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_DCMI_Start_DMA+0x198>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_DCMI_Start_DMA+0x19c>)
 8002986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	2200      	movs	r2, #0
 800298e:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002996:	d21f      	bcs.n	80029d8 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3328      	adds	r3, #40	; 0x28
 80029a8:	4619      	mov	r1, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	f000 fbe1 	bl	8003174 <HAL_DMA_Start_IT>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d075      	beq.n	8002aa4 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e072      	b.n	8002abe <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	2220      	movs	r2, #32
 80029de:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <HAL_DCMI_Start_DMA+0x1a0>)
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 80029f4:	6838      	ldr	r0, [r7, #0]
 80029f6:	f000 f973 	bl	8002ce0 <DCMI_TransferSize>
 80029fa:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e053      	b.n	8002abe <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	005a      	lsls	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	085a      	lsrs	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	6979      	ldr	r1, [r7, #20]
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3328      	adds	r3, #40	; 0x28
 8002a72:	4619      	mov	r1, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f000 fb7b 	bl	8003174 <HAL_DMA_Start_IT>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00f      	beq.n	8002aa4 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00c      	b.n	8002abe <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	08002ae9 	.word	0x08002ae9
 8002acc:	08002cb1 	.word	0x08002cb1
 8002ad0:	08002c19 	.word	0x08002c19

08002ad4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d05c      	beq.n	8002bb8 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b22:	e075      	b.n	8002c10 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f000 faf3 	bl	8003174 <HAL_DMA_Start_IT>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03d      	beq.n	8002c10 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8002bb0:	69f8      	ldr	r0, [r7, #28]
 8002bb2:	f7ff ff8f 	bl	8002ad4 <HAL_DCMI_ErrorCallback>
}
 8002bb6:	e02b      	b.n	8002c10 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d124      	bne.n	8002c10 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01d      	beq.n	8002c10 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d10f      	bne.n	8002c0a <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 021e 	bic.w	r2, r2, #30
 8002bf8:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8002c0a:	69f8      	ldr	r0, [r7, #28]
 8002c0c:	f7fd fe96 	bl	800093c <HAL_DCMI_FrameEventCallback>
}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d03c      	beq.n	8002ca8 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d036      	beq.n	8002ca8 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f000 fa7a 	bl	8003174 <HAL_DMA_Start_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f7ff ff16 	bl	8002ad4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fefe 	bl	8002ad4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b096      	sub	sp, #88	; 0x58
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f83f 	bl	8006d7c <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8002cfe:	2302      	movs	r3, #2
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 8002d02:	e02b      	b.n	8002d5c <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <DCMI_TransferSize+0x108>)
 8002d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d328      	bcc.n	8002d64 <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 8002d12:	e014      	b.n	8002d3e <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 8002d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	3358      	adds	r3, #88	; 0x58
 8002d1a:	443b      	add	r3, r7
 8002d1c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3358      	adds	r3, #88	; 0x58
 8002d28:	443b      	add	r3, r7
 8002d2a:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <DCMI_TransferSize+0x108>)
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <DCMI_TransferSize+0x108>)
 8002d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4c:	fb01 f202 	mul.w	r2, r1, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0de      	beq.n	8002d14 <DCMI_TransferSize+0x34>
    }
    j++;
 8002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d58:	3301      	adds	r3, #1
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	d9d0      	bls.n	8002d04 <DCMI_TransferSize+0x24>
 8002d62:	e000      	b.n	8002d66 <DCMI_TransferSize+0x86>
      break;
 8002d64:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8002d70:	e02c      	b.n	8002dcc <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <DCMI_TransferSize+0x108>)
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d81d      	bhi.n	8002dc4 <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <DCMI_TransferSize+0x108>)
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3358      	adds	r3, #88	; 0x58
 8002d9e:	443b      	add	r3, r7
 8002da0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	3358      	adds	r3, #88	; 0x58
 8002dac:	443b      	add	r3, r7
 8002dae:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3358      	adds	r3, #88	; 0x58
 8002db8:	443b      	add	r3, r7
 8002dba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1d7      	bne.n	8002d72 <DCMI_TransferSize+0x92>
 8002dc2:	e000      	b.n	8002dc6 <DCMI_TransferSize+0xe6>
        break;
 8002dc4:	bf00      	nop
      }
    }
    j--;
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <DCMI_TransferSize+0xfc>
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d9ea      	bls.n	8002db2 <DCMI_TransferSize+0xd2>
  }



  return output;
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3758      	adds	r7, #88	; 0x58
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	080085b8 	.word	0x080085b8

08002dec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0ac      	b.n	8002f58 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f8b2 	bl	8002f6c <DFSDM_GetChannelFromInstance>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a55      	ldr	r2, [pc, #340]	; (8002f60 <HAL_DFSDM_ChannelInit+0x174>)
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e09f      	b.n	8002f58 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff f85f 	bl	8001edc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_DFSDM_ChannelInit+0x178>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_DFSDM_ChannelInit+0x178>)
 8002e26:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002e28:	4b4e      	ldr	r3, [pc, #312]	; (8002f64 <HAL_DFSDM_ChannelInit+0x178>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d125      	bne.n	8002e7c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e3a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4948      	ldr	r1, [pc, #288]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e50:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e54:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	493f      	ldr	r1, [pc, #252]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e7a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e8a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e9a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ea0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 020f 	bic.w	r2, r2, #15
 8002eb8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ee0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f002 0207 	and.w	r2, r2, #7
 8002f0c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f38:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f810 	bl	8002f6c <DFSDM_GetChannelFromInstance>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4904      	ldr	r1, [pc, #16]	; (8002f60 <HAL_DFSDM_ChannelInit+0x174>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2001c600 	.word	0x2001c600
 8002f64:	2001c5fc 	.word	0x2001c5fc
 8002f68:	40016000 	.word	0x40016000

08002f6c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e02b      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <DFSDM_GetChannelFromInstance+0x80>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d102      	bne.n	8002f90 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e024      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <DFSDM_GetChannelFromInstance+0x84>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e01d      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <DFSDM_GetChannelFromInstance+0x88>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d102      	bne.n	8002fac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e016      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d102      	bne.n	8002fba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e00f      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <DFSDM_GetChannelFromInstance+0x90>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d102      	bne.n	8002fc8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e008      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <DFSDM_GetChannelFromInstance+0x94>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e001      	b.n	8002fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40016000 	.word	0x40016000
 8002fec:	40016020 	.word	0x40016020
 8002ff0:	40016040 	.word	0x40016040
 8002ff4:	40016080 	.word	0x40016080
 8002ff8:	400160a0 	.word	0x400160a0
 8002ffc:	400160c0 	.word	0x400160c0
 8003000:	400160e0 	.word	0x400160e0

08003004 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e098      	b.n	8003148 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_DMA_Init+0x150>)
 800301e:	429a      	cmp	r2, r3
 8003020:	d80f      	bhi.n	8003042 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_DMA_Init+0x154>)
 800302a:	4413      	add	r3, r2
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_DMA_Init+0x158>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_DMA_Init+0x15c>)
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
 8003040:	e00e      	b.n	8003060 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_DMA_Init+0x160>)
 800304a:	4413      	add	r3, r2
 800304c:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_DMA_Init+0x158>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_DMA_Init+0x164>)
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ba:	d039      	beq.n	8003130 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_DMA_Init+0x15c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11a      	bne.n	80030fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_DMA_Init+0x168>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f003 031c 	and.w	r3, r3, #28
 80030d2:	210f      	movs	r1, #15
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4924      	ldr	r1, [pc, #144]	; (800316c <HAL_DMA_Init+0x168>)
 80030dc:	4013      	ands	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_DMA_Init+0x168>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f003 031c 	and.w	r3, r3, #28
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	491d      	ldr	r1, [pc, #116]	; (800316c <HAL_DMA_Init+0x168>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
 80030fa:	e019      	b.n	8003130 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030fc:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_DMA_Init+0x16c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f003 031c 	and.w	r3, r3, #28
 8003108:	210f      	movs	r1, #15
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_DMA_Init+0x16c>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_DMA_Init+0x16c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 031c 	and.w	r3, r3, #28
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	4911      	ldr	r1, [pc, #68]	; (8003170 <HAL_DMA_Init+0x16c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40020407 	.word	0x40020407
 8003158:	bffdfff8 	.word	0xbffdfff8
 800315c:	cccccccd 	.word	0xcccccccd
 8003160:	40020000 	.word	0x40020000
 8003164:	bffdfbf8 	.word	0xbffdfbf8
 8003168:	40020400 	.word	0x40020400
 800316c:	400200a8 	.word	0x400200a8
 8003170:	400204a8 	.word	0x400204a8

08003174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Start_IT+0x20>
 8003190:	2302      	movs	r3, #2
 8003192:	e04b      	b.n	800322c <HAL_DMA_Start_IT+0xb8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d13a      	bne.n	800321e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8e0 	bl	8003392 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 020e 	orr.w	r2, r2, #14
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e00f      	b.n	800320c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 020a 	orr.w	r2, r2, #10
 800320a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f003 031c 	and.w	r3, r3, #28
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d026      	beq.n	80032ae <HAL_DMA_IRQHandler+0x7a>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d021      	beq.n	80032ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f003 021c 	and.w	r2, r3, #28
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2104      	movs	r1, #4
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d071      	beq.n	8003388 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	e06c      	b.n	8003388 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f003 031c 	and.w	r3, r3, #28
 80032b6:	2202      	movs	r2, #2
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02e      	beq.n	8003320 <HAL_DMA_IRQHandler+0xec>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020a 	bic.w	r2, r2, #10
 80032e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f003 021c 	and.w	r2, r3, #28
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2102      	movs	r1, #2
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d038      	beq.n	8003388 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800331e:	e033      	b.n	8003388 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f003 031c 	and.w	r3, r3, #28
 8003328:	2208      	movs	r2, #8
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02a      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 020e 	bic.w	r2, r2, #14
 800334c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 021c 	and.w	r2, r3, #28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003388:	bf00      	nop
 800338a:	bf00      	nop
}
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f003 021c 	and.w	r2, r3, #28
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d108      	bne.n	80033d6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033d4:	e007      	b.n	80033e6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	e166      	b.n	80036d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8158 	beq.w	80036cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_GPIO_Init+0x40>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d017      	beq.n	80034d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80b2 	beq.w	80036cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <HAL_GPIO_Init+0x2fc>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	4a60      	ldr	r2, [pc, #384]	; (80036f0 <HAL_GPIO_Init+0x2fc>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6613      	str	r3, [r2, #96]	; 0x60
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_GPIO_Init+0x2fc>)
 8003576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003580:	4a5c      	ldr	r2, [pc, #368]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035aa:	d02b      	beq.n	8003604 <HAL_GPIO_Init+0x210>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_GPIO_Init+0x304>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d025      	beq.n	8003600 <HAL_GPIO_Init+0x20c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a51      	ldr	r2, [pc, #324]	; (80036fc <HAL_GPIO_Init+0x308>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01f      	beq.n	80035fc <HAL_GPIO_Init+0x208>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a50      	ldr	r2, [pc, #320]	; (8003700 <HAL_GPIO_Init+0x30c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d019      	beq.n	80035f8 <HAL_GPIO_Init+0x204>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	; (8003704 <HAL_GPIO_Init+0x310>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_GPIO_Init+0x200>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a4e      	ldr	r2, [pc, #312]	; (8003708 <HAL_GPIO_Init+0x314>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00d      	beq.n	80035f0 <HAL_GPIO_Init+0x1fc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a4d      	ldr	r2, [pc, #308]	; (800370c <HAL_GPIO_Init+0x318>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <HAL_GPIO_Init+0x1f8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <HAL_GPIO_Init+0x31c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_GPIO_Init+0x1f4>
 80035e4:	2307      	movs	r3, #7
 80035e6:	e00e      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035e8:	2308      	movs	r3, #8
 80035ea:	e00c      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035ec:	2306      	movs	r3, #6
 80035ee:	e00a      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035f0:	2305      	movs	r3, #5
 80035f2:	e008      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035f4:	2304      	movs	r3, #4
 80035f6:	e006      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035f8:	2303      	movs	r3, #3
 80035fa:	e004      	b.n	8003606 <HAL_GPIO_Init+0x212>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0x212>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_GPIO_Init+0x212>
 8003604:	2300      	movs	r3, #0
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	f002 0203 	and.w	r2, r2, #3
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	4093      	lsls	r3, r2
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003616:	4937      	ldr	r1, [pc, #220]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_GPIO_Init+0x320>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_GPIO_Init+0x320>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_GPIO_Init+0x320>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003672:	4a28      	ldr	r2, [pc, #160]	; (8003714 <HAL_GPIO_Init+0x320>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_GPIO_Init+0x320>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43db      	mvns	r3, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_GPIO_Init+0x320>)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_GPIO_Init+0x320>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_GPIO_Init+0x320>)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f ae91 	bne.w	8003404 <HAL_GPIO_Init+0x10>
  }
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40010000 	.word	0x40010000
 80036f8:	48000400 	.word	0x48000400
 80036fc:	48000800 	.word	0x48000800
 8003700:	48000c00 	.word	0x48000c00
 8003704:	48001000 	.word	0x48001000
 8003708:	48001400 	.word	0x48001400
 800370c:	48001800 	.word	0x48001800
 8003710:	48001c00 	.word	0x48001c00
 8003714:	40010400 	.word	0x40010400

08003718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e001      	b.n	800373a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003764:	e002      	b.n	800376c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43d9      	mvns	r1, r3
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	400b      	ands	r3, r1
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe fc0a 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	e006      	b.n	8003834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d104      	bne.n	8003846 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d138      	bne.n	8003952 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e032      	b.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d139      	bne.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003980:	2302      	movs	r3, #2
 8003982:	e033      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40007000 	.word	0x40007000

08003a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a22:	d130      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d038      	beq.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2232      	movs	r2, #50	; 0x32
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0c9b      	lsrs	r3, r3, #18
 8003a54:	3301      	adds	r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a58:	e002      	b.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d102      	bne.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f2      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d110      	bne.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d007      	beq.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a9c:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	20000024 	.word	0x20000024
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_PWREx_EnableVddIO2+0x1c>)
 8003aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ace:	6053      	str	r3, [r2, #4]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40007000 	.word	0x40007000

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f000 bc08 	b.w	8004304 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afe:	4b94      	ldr	r3, [pc, #592]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80e4 	beq.w	8003cde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4c>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	f040 808b 	bne.w	8003c3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	f040 8087 	bne.w	8003c3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2c:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x64>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e3df      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_RCC_OscConfig+0x7e>
 8003b54:	4b7e      	ldr	r3, [pc, #504]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5c:	e005      	b.n	8003b6a <HAL_RCC_OscConfig+0x8a>
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d223      	bcs.n	8003bb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fdc6 	bl	8004704 <RCC_SetFlashLatencyFromMSIRange>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e3c0      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a72      	ldr	r2, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b88:	f043 0308 	orr.w	r3, r3, #8
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	496d      	ldr	r1, [pc, #436]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	4968      	ldr	r1, [pc, #416]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	e025      	b.n	8003c02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4960      	ldr	r1, [pc, #384]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	495b      	ldr	r1, [pc, #364]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fd86 	bl	8004704 <RCC_SetFlashLatencyFromMSIRange>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e380      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c02:	f000 fcbb 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	4950      	ldr	r1, [pc, #320]	; (8003d54 <HAL_RCC_OscConfig+0x274>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <HAL_RCC_OscConfig+0x278>)
 8003c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c22:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <HAL_RCC_OscConfig+0x27c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fc6a 	bl	8002500 <HAL_InitTick>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d052      	beq.n	8003cdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	e364      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d032      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c42:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a42      	ldr	r2, [pc, #264]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fca7 	bl	80025a0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c56:	f7fe fca3 	bl	80025a0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e34d      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4930      	ldr	r1, [pc, #192]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	492b      	ldr	r1, [pc, #172]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
 8003ca6:	e01a      	b.n	8003cde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fc74 	bl	80025a0 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fc70 	bl	80025a0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e31a      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1dc>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d073      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x21c>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d10e      	bne.n	8003d14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d063      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d15f      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e2f7      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x24c>
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e025      	b.n	8003d78 <HAL_RCC_OscConfig+0x298>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d34:	d114      	bne.n	8003d60 <HAL_RCC_OscConfig+0x280>
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a02      	ldr	r2, [pc, #8]	; (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e013      	b.n	8003d78 <HAL_RCC_OscConfig+0x298>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08008570 	.word	0x08008570
 8003d58:	20000024 	.word	0x20000024
 8003d5c:	20000028 	.word	0x20000028
 8003d60:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a9f      	ldr	r2, [pc, #636]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b9d      	ldr	r3, [pc, #628]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a9c      	ldr	r2, [pc, #624]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fc0e 	bl	80025a0 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fe fc0a 	bl	80025a0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e2b4      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x2a8>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe fbfa 	bl	80025a0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe fbf6 	bl	80025a0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e2a0      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2d0>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d060      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x310>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d119      	bne.n	8003e1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d116      	bne.n	8003e1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df0:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_OscConfig+0x328>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e27d      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	4973      	ldr	r1, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e1c:	e040      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d023      	beq.n	8003e6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e26:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fe fbb5 	bl	80025a0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fe fbb1 	bl	80025a0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e25b      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	495f      	ldr	r1, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a5c      	ldr	r2, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fb91 	bl	80025a0 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe fb8d 	bl	80025a0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e237      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e94:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03c      	beq.n	8003f26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	4a4a      	ldr	r2, [pc, #296]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe fb6c 	bl	80025a0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fb68 	bl	80025a0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e212      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ef      	beq.n	8003ecc <HAL_RCC_OscConfig+0x3ec>
 8003eec:	e01b      	b.n	8003f26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef4:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fe fb4f 	bl	80025a0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fe fb4b 	bl	80025a0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1f5      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ef      	bne.n	8003f06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a6 	beq.w	8004080 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f50:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <HAL_RCC_OscConfig+0x508>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d118      	bne.n	8003f9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <HAL_RCC_OscConfig+0x508>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <HAL_RCC_OscConfig+0x508>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f78:	f7fe fb12 	bl	80025a0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fe fb0e 	bl	80025a0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1b8      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <HAL_RCC_OscConfig+0x508>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4d8>
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb6:	e029      	b.n	800400c <HAL_RCC_OscConfig+0x52c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d115      	bne.n	8003fec <HAL_RCC_OscConfig+0x50c>
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	4a03      	ldr	r2, [pc, #12]	; (8003fe4 <HAL_RCC_OscConfig+0x504>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x52c>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	4b9d      	ldr	r3, [pc, #628]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	4a9c      	ldr	r2, [pc, #624]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ffc:	4b99      	ldr	r3, [pc, #612]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a98      	ldr	r2, [pc, #608]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d016      	beq.n	8004042 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe fac4 	bl	80025a0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe fac0 	bl	80025a0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e168      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ed      	beq.n	800401c <HAL_RCC_OscConfig+0x53c>
 8004040:	e015      	b.n	800406e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fe faad 	bl	80025a0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe faa9 	bl	80025a0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e151      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ed      	bne.n	800404a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406e:	7ffb      	ldrb	r3, [r7, #31]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03c      	beq.n	8004106 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01c      	beq.n	80040ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004094:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409a:	4a72      	ldr	r2, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fe fa7c 	bl	80025a0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ac:	f7fe fa78 	bl	80025a0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e122      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80040c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ef      	beq.n	80040ac <HAL_RCC_OscConfig+0x5cc>
 80040cc:	e01b      	b.n	8004106 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040ce:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80040d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d4:	4a63      	ldr	r2, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fe fa5f 	bl	80025a0 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e6:	f7fe fa5b 	bl	80025a0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e105      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f8:	4b5a      	ldr	r3, [pc, #360]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80040fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ef      	bne.n	80040e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80f9 	beq.w	8004302 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	2b02      	cmp	r3, #2
 8004116:	f040 80cf 	bne.w	80042b8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800411a:	4b52      	ldr	r3, [pc, #328]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0203 	and.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	429a      	cmp	r2, r3
 800412c:	d12c      	bne.n	8004188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	3b01      	subs	r3, #1
 800413a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d123      	bne.n	8004188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d11b      	bne.n	8004188 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d113      	bne.n	8004188 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d109      	bne.n	8004188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d071      	beq.n	800426c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d068      	beq.n	8004260 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800418e:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0ac      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80041b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b6:	f7fe f9f3 	bl	80025a0 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fe f9ef 	bl	80025a0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e099      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x788>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f6:	0212      	lsls	r2, r2, #8
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fe:	0852      	lsrs	r2, r2, #1
 8004200:	3a01      	subs	r2, #1
 8004202:	0552      	lsls	r2, r2, #21
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0652      	lsls	r2, r2, #25
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004216:	06d2      	lsls	r2, r2, #27
 8004218:	430a      	orrs	r2, r1
 800421a:	4912      	ldr	r1, [pc, #72]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004238:	f7fe f9b2 	bl	80025a0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe f9ae 	bl	80025a0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e058      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_OscConfig+0x784>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800425e:	e050      	b.n	8004302 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e04f      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
 8004264:	40021000 	.word	0x40021000
 8004268:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d144      	bne.n	8004302 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004278:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a20      	ldr	r2, [pc, #128]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 800428a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004290:	f7fe f986 	bl	80025a0 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe f982 	bl	80025a0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e02c      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x7b8>
 80042b6:	e024      	b.n	8004302 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d01f      	beq.n	80042fe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ca:	f7fe f969 	bl	80025a0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fe f965 	bl	80025a0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e00f      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	4905      	ldr	r1, [pc, #20]	; (800430c <HAL_RCC_OscConfig+0x82c>)
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_OscConfig+0x830>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	60cb      	str	r3, [r1, #12]
 80042fc:	e001      	b.n	8004302 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	feeefffc 	.word	0xfeeefffc

08004314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0e7      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b75      	ldr	r3, [pc, #468]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d910      	bls.n	8004358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b72      	ldr	r3, [pc, #456]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 0207 	bic.w	r2, r3, #7
 800433e:	4970      	ldr	r1, [pc, #448]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b6e      	ldr	r3, [pc, #440]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cf      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004370:	429a      	cmp	r2, r3
 8004372:	d908      	bls.n	8004386 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4960      	ldr	r1, [pc, #384]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04c      	beq.n	800442c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439a:	4b5a      	ldr	r3, [pc, #360]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d121      	bne.n	80043ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0a6      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b2:	4b54      	ldr	r3, [pc, #336]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d115      	bne.n	80043ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e09a      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ca:	4b4e      	ldr	r3, [pc, #312]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e08e      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043da:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e086      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4943      	ldr	r1, [pc, #268]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fe f8d0 	bl	80025a0 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fe f8cc 	bl	80025a0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e06e      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	492b      	ldr	r1, [pc, #172]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d210      	bcs.n	800448a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 0207 	bic.w	r2, r3, #7
 8004470:	4923      	ldr	r1, [pc, #140]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004478:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_RCC_ClockConfig+0x1ec>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d001      	beq.n	800448a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e036      	b.n	80044f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4918      	ldr	r1, [pc, #96]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4910      	ldr	r1, [pc, #64]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c8:	f000 f858 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_RCC_ClockConfig+0x1f0>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	490b      	ldr	r1, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x1f4>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1f8>)
 80044e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1fc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe f807 	bl	8002500 <HAL_InitTick>
 80044f2:	4603      	mov	r3, r0
 80044f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80044f6:	7afb      	ldrb	r3, [r7, #11]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	08008570 	.word	0x08008570
 800450c:	20000024 	.word	0x20000024
 8004510:	20000028 	.word	0x20000028

08004514 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_MCOConfig+0x64>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_RCC_MCOConfig+0x64>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_RCC_MCOConfig+0x64>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004542:	2302      	movs	r3, #2
 8004544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004558:	f7fe ff4c 	bl	80033f4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_MCOConfig+0x64>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	430b      	orrs	r3, r1
 800456a:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_MCOConfig+0x64>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458a:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x34>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d121      	bne.n	80045ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d11e      	bne.n	80045ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045cc:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045d8:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d102      	bne.n	80045fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_RCC_GetSysClockFreq+0x110>)
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	e004      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCC_GetSysClockFreq+0x114>)
 8004602:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d134      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800460a:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0xa6>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d003      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0xac>
 8004620:	e005      	b.n	800462e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004622:	4b1a      	ldr	r3, [pc, #104]	; (800468c <HAL_RCC_GetSysClockFreq+0x110>)
 8004624:	617b      	str	r3, [r7, #20]
      break;
 8004626:	e005      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_GetSysClockFreq+0x114>)
 800462a:	617b      	str	r3, [r7, #20]
      break;
 800462c:	e002      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	617b      	str	r3, [r7, #20]
      break;
 8004632:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	3301      	adds	r3, #1
 8004640:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	fb03 f202 	mul.w	r2, r3, r2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	0e5b      	lsrs	r3, r3, #25
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	3301      	adds	r3, #1
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004674:	69bb      	ldr	r3, [r7, #24]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3724      	adds	r7, #36	; 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	08008588 	.word	0x08008588
 800468c:	00f42400 	.word	0x00f42400
 8004690:	007a1200 	.word	0x007a1200

08004694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000024 	.word	0x20000024

080046ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046b0:	f7ff fff0 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	08008580 	.word	0x08008580

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046dc:	f7ff ffda 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0adb      	lsrs	r3, r3, #11
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4904      	ldr	r1, [pc, #16]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000
 8004700:	08008580 	.word	0x08008580

08004704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800471c:	f7ff f96c 	bl	80039f8 <HAL_PWREx_GetVoltageRange>
 8004720:	6178      	str	r0, [r7, #20]
 8004722:	e014      	b.n	800474e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
 8004730:	4b22      	ldr	r3, [pc, #136]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7ff f95c 	bl	80039f8 <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d10b      	bne.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b80      	cmp	r3, #128	; 0x80
 800475a:	d919      	bls.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2ba0      	cmp	r3, #160	; 0xa0
 8004760:	d902      	bls.n	8004768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004762:	2302      	movs	r3, #2
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e013      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004768:	2301      	movs	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e010      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d902      	bls.n	800477a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004774:	2303      	movs	r3, #3
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e00a      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b80      	cmp	r3, #128	; 0x80
 800477e:	d102      	bne.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004780:	2302      	movs	r3, #2
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e004      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d101      	bne.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800478c:	2301      	movs	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f023 0207 	bic.w	r2, r3, #7
 8004798:	4909      	ldr	r1, [pc, #36]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40022000 	.word	0x40022000

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047cc:	2300      	movs	r3, #0
 80047ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d0:	2300      	movs	r3, #0
 80047d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d041      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047e8:	d02a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047ee:	d824      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047f4:	d008      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047fa:	d81e      	bhi.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004804:	d010      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004806:	e018      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004808:	4b86      	ldr	r3, [pc, #536]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a85      	ldr	r2, [pc, #532]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004812:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004814:	e015      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3304      	adds	r3, #4
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f885 	bl	800592c <RCCEx_PLLSAI1_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004826:	e00c      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3320      	adds	r3, #32
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f96e 	bl	8005b10 <RCCEx_PLLSAI2_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	74fb      	strb	r3, [r7, #19]
      break;
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004848:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004856:	4973      	ldr	r1, [pc, #460]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800485e:	e001      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d041      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004878:	d02a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800487a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800487e:	d824      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800488a:	d81e      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004894:	d010      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004896:	e018      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004898:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a61      	ldr	r2, [pc, #388]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048a4:	e015      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f83d 	bl	800592c <RCCEx_PLLSAI1_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048b6:	e00c      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3320      	adds	r3, #32
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f926 	bl	8005b10 <RCCEx_PLLSAI2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c8:	e003      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	74fb      	strb	r3, [r7, #19]
      break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048d8:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	494f      	ldr	r1, [pc, #316]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a0 	beq.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491c:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	6593      	str	r3, [r2, #88]	; 0x58
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004934:	2301      	movs	r3, #1
 8004936:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3a      	ldr	r2, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800493e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004944:	f7fd fe2c 	bl	80025a0 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800494a:	e009      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494c:	f7fd fe28 	bl	80025a0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d902      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	74fb      	strb	r3, [r7, #19]
        break;
 800495e:	e005      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004960:	4b31      	ldr	r3, [pc, #196]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d15c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01f      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	429a      	cmp	r2, r3
 800498e:	d019      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	4a20      	ldr	r2, [pc, #128]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fd fde7 	bl	80025a0 <HAL_GetTick>
 80049d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d4:	e00b      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fd fde3 	bl	80025a0 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d902      	bls.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	74fb      	strb	r3, [r7, #19]
            break;
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ec      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	4904      	ldr	r1, [pc, #16]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a30:	7c7b      	ldrb	r3, [r7, #17]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	4ba6      	ldr	r3, [pc, #664]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	4aa5      	ldr	r2, [pc, #660]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4e:	4ba0      	ldr	r3, [pc, #640]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f023 0203 	bic.w	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	499c      	ldr	r1, [pc, #624]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a70:	4b97      	ldr	r3, [pc, #604]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 020c 	bic.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	4994      	ldr	r1, [pc, #592]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a92:	4b8f      	ldr	r3, [pc, #572]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	498b      	ldr	r1, [pc, #556]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab4:	4b86      	ldr	r3, [pc, #536]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	4983      	ldr	r1, [pc, #524]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad6:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	497a      	ldr	r1, [pc, #488]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004af8:	4b75      	ldr	r3, [pc, #468]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	4972      	ldr	r1, [pc, #456]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b1a:	4b6d      	ldr	r3, [pc, #436]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	4969      	ldr	r1, [pc, #420]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b3c:	4b64      	ldr	r3, [pc, #400]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	4961      	ldr	r1, [pc, #388]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5e:	4b5c      	ldr	r3, [pc, #368]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	4958      	ldr	r1, [pc, #352]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	4950      	ldr	r1, [pc, #320]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	4947      	ldr	r1, [pc, #284]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bc4:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	493f      	ldr	r1, [pc, #252]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be6:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4936      	ldr	r1, [pc, #216]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c06:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4a31      	ldr	r2, [pc, #196]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c10:	60d3      	str	r3, [r2, #12]
 8004c12:	e011      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fe81 	bl	800592c <RCCEx_PLLSAI1_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d028      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	491f      	ldr	r1, [pc, #124]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c62:	d106      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
 8004c70:	e011      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c7a:	d10c      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fe52 	bl	800592c <RCCEx_PLLSAI1_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb0:	4907      	ldr	r1, [pc, #28]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc0:	d108      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc2:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4a02      	ldr	r2, [pc, #8]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ccc:	60d3      	str	r3, [r2, #12]
 8004cce:	e013      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fe21 	bl	800592c <RCCEx_PLLSAI1_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d04:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d12:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fdfe 	bl	800592c <RCCEx_PLLSAI1_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d014      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	74bb      	strb	r3, [r7, #18]
 8004d3e:	e011      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	2102      	movs	r1, #2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fedd 	bl	8005b10 <RCCEx_PLLSAI2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d80:	490d      	ldr	r1, [pc, #52]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da4:	4904      	ldr	r1, [pc, #16]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dce:	d13e      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004dd0:	4bb4      	ldr	r3, [pc, #720]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d028      	beq.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dea:	f200 858c 	bhi.w	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df4:	d005      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfc:	d00e      	beq.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004dfe:	f000 bd82 	b.w	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e02:	4ba8      	ldr	r3, [pc, #672]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	f040 857c 	bne.w	800590a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e16:	61fb      	str	r3, [r7, #28]
      break;
 8004e18:	f000 bd77 	b.w	800590a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e1c:	4ba1      	ldr	r3, [pc, #644]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	f040 8571 	bne.w	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8004e2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e30:	61fb      	str	r3, [r7, #28]
      break;
 8004e32:	f000 bd6c 	b.w	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e36:	4b9b      	ldr	r3, [pc, #620]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e42:	f040 8566 	bne.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8004e46:	4b98      	ldr	r3, [pc, #608]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004e48:	61fb      	str	r3, [r7, #28]
      break;
 8004e4a:	f000 bd62 	b.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e4e:	4b95      	ldr	r3, [pc, #596]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d036      	beq.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d840      	bhi.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d020      	beq.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004e70:	e039      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004e72:	4b8c      	ldr	r3, [pc, #560]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d116      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004e8a:	4b86      	ldr	r3, [pc, #536]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	e005      	b.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	4a82      	ldr	r2, [pc, #520]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004eaa:	e01f      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
      break;
 8004eb0:	e01c      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebe:	d102      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004ec0:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ec2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ec4:	e012      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
      break;
 8004eca:	e00f      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ecc:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004eda:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ede:	e005      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
      break;
 8004ee4:	e002      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
      break;
 8004eea:	bf00      	nop
    }

    switch(PeriphClk)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	f000 842a 	beq.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efc:	f200 850b 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f06:	f000 80df 	beq.w	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f10:	f200 8501 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f1a:	f000 80d5 	beq.w	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f24:	f200 84f7 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	f000 8377 	beq.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f38:	f200 84ed 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	f000 84c3 	beq.w	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4c:	f200 84e3 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f56:	f000 82e6 	beq.w	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	f200 84d9 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	f000 80ad 	beq.w	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f74:	f200 84cf 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	f000 809b 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	f200 84c5 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d07f      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9a:	f200 84bc 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	f000 8448 	beq.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	f200 84b2 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb8:	f000 83f0 	beq.w	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc2:	f200 84a8 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	f000 8391 	beq.w	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	f200 849e 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b80      	cmp	r3, #128	; 0x80
 8004fde:	f000 835c 	beq.w	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	f200 8496 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d84b      	bhi.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 848f 	beq.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2b1f      	cmp	r3, #31
 8004ffe:	f200 848a 	bhi.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800521f 	.word	0x0800521f
 800500c:	0800528f 	.word	0x0800528f
 8005010:	08005917 	.word	0x08005917
 8005014:	08005323 	.word	0x08005323
 8005018:	08005917 	.word	0x08005917
 800501c:	08005917 	.word	0x08005917
 8005020:	08005917 	.word	0x08005917
 8005024:	080053ab 	.word	0x080053ab
 8005028:	08005917 	.word	0x08005917
 800502c:	08005917 	.word	0x08005917
 8005030:	08005917 	.word	0x08005917
 8005034:	08005917 	.word	0x08005917
 8005038:	08005917 	.word	0x08005917
 800503c:	08005917 	.word	0x08005917
 8005040:	08005917 	.word	0x08005917
 8005044:	08005423 	.word	0x08005423
 8005048:	08005917 	.word	0x08005917
 800504c:	08005917 	.word	0x08005917
 8005050:	08005917 	.word	0x08005917
 8005054:	08005917 	.word	0x08005917
 8005058:	08005917 	.word	0x08005917
 800505c:	08005917 	.word	0x08005917
 8005060:	08005917 	.word	0x08005917
 8005064:	08005917 	.word	0x08005917
 8005068:	08005917 	.word	0x08005917
 800506c:	08005917 	.word	0x08005917
 8005070:	08005917 	.word	0x08005917
 8005074:	08005917 	.word	0x08005917
 8005078:	08005917 	.word	0x08005917
 800507c:	08005917 	.word	0x08005917
 8005080:	08005917 	.word	0x08005917
 8005084:	080054a5 	.word	0x080054a5
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	f000 82d9 	beq.w	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005090:	f000 bc41 	b.w	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800509a:	f000 fe15 	bl	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq>
 800509e:	61f8      	str	r0, [r7, #28]
      break;
 80050a0:	f000 bc3a 	b.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0003d090 	.word	0x0003d090
 80050ac:	08008588 	.word	0x08008588
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050be:	f000 fe03 	bl	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq>
 80050c2:	61f8      	str	r0, [r7, #28]
      break;
 80050c4:	f000 bc28 	b.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80050c8:	4ba6      	ldr	r3, [pc, #664]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050da:	d015      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050e2:	f200 8092 	bhi.w	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ec:	d029      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f4:	f200 8089 	bhi.w	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d07b      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005104:	d04a      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8005106:	e080      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005108:	4b96      	ldr	r3, [pc, #600]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d17c      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005114:	4b93      	ldr	r3, [pc, #588]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005120:	4b90      	ldr	r3, [pc, #576]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	e005      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800512c:	4b8d      	ldr	r3, [pc, #564]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800512e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	4a8b      	ldr	r2, [pc, #556]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	61fb      	str	r3, [r7, #28]
          break;
 8005140:	e065      	b.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005142:	4b88      	ldr	r3, [pc, #544]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800514e:	d160      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005150:	4b84      	ldr	r3, [pc, #528]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515c:	d159      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800515e:	4b81      	ldr	r3, [pc, #516]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005168:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	fb03 f202 	mul.w	r2, r3, r2
 8005172:	4b7c      	ldr	r3, [pc, #496]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	3301      	adds	r3, #1
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005184:	4b77      	ldr	r3, [pc, #476]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	0d5b      	lsrs	r3, r3, #21
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	3301      	adds	r3, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	61fb      	str	r3, [r7, #28]
          break;
 800519a:	e03a      	b.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800519c:	4b71      	ldr	r3, [pc, #452]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a8:	d135      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80051aa:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b6:	d12e      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051b8:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	fb03 f202 	mul.w	r2, r3, r2
 80051cc:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	3301      	adds	r3, #1
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80051de:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	0d5b      	lsrs	r3, r3, #21
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	3301      	adds	r3, #1
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	61fb      	str	r3, [r7, #28]
          break;
 80051f4:	e00f      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80051f6:	4b5b      	ldr	r3, [pc, #364]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80051f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d10a      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005206:	61fb      	str	r3, [r7, #28]
          break;
 8005208:	e007      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800520a:	bf00      	nop
 800520c:	e384      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800520e:	bf00      	nop
 8005210:	e382      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005212:	bf00      	nop
 8005214:	e380      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005216:	bf00      	nop
 8005218:	e37e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800521a:	bf00      	nop
        break;
 800521c:	e37c      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800521e:	4b51      	ldr	r3, [pc, #324]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d828      	bhi.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005249 	.word	0x08005249
 800523c:	08005251 	.word	0x08005251
 8005240:	08005259 	.word	0x08005259
 8005244:	0800526d 	.word	0x0800526d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005248:	f7ff fa46 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800524c:	61f8      	str	r0, [r7, #28]
          break;
 800524e:	e01d      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005250:	f7ff f994 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8005254:	61f8      	str	r0, [r7, #28]
          break;
 8005256:	e019      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d10f      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8005266:	4b42      	ldr	r3, [pc, #264]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005268:	61fb      	str	r3, [r7, #28]
          break;
 800526a:	e00c      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800526c:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527e:	61fb      	str	r3, [r7, #28]
          break;
 8005280:	e003      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8005282:	bf00      	nop
 8005284:	e348      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005286:	bf00      	nop
 8005288:	e346      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800528a:	bf00      	nop
        break;
 800528c:	e344      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800528e:	4b35      	ldr	r3, [pc, #212]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d83a      	bhi.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052dd 	.word	0x080052dd
 80052ac:	08005317 	.word	0x08005317
 80052b0:	08005317 	.word	0x08005317
 80052b4:	08005317 	.word	0x08005317
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	08005317 	.word	0x08005317
 80052c0:	08005317 	.word	0x08005317
 80052c4:	08005317 	.word	0x08005317
 80052c8:	080052ed 	.word	0x080052ed
 80052cc:	08005317 	.word	0x08005317
 80052d0:	08005317 	.word	0x08005317
 80052d4:	08005317 	.word	0x08005317
 80052d8:	08005301 	.word	0x08005301
          frequency = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7ff f9e6 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80052e0:	61f8      	str	r0, [r7, #28]
          break;
 80052e2:	e01d      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 80052e4:	f7ff f94a 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80052e8:	61f8      	str	r0, [r7, #28]
          break;
 80052ea:	e019      	b.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052ec:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f8:	d10f      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80052fc:	61fb      	str	r3, [r7, #28]
          break;
 80052fe:	e00c      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005300:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	61fb      	str	r3, [r7, #28]
          break;
 8005314:	e003      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8005316:	bf00      	nop
 8005318:	e2fe      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800531a:	bf00      	nop
 800531c:	e2fc      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800531e:	bf00      	nop
        break;
 8005320:	e2fa      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b30      	cmp	r3, #48	; 0x30
 8005332:	d029      	beq.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b30      	cmp	r3, #48	; 0x30
 8005338:	d831      	bhi.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d019      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b20      	cmp	r3, #32
 8005344:	d82b      	bhi.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b10      	cmp	r3, #16
 8005350:	d004      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8005352:	e024      	b.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005354:	f7ff f9aa 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005358:	61f8      	str	r0, [r7, #28]
          break;
 800535a:	e025      	b.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800535c:	f7ff f90e 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8005360:	61f8      	str	r0, [r7, #28]
          break;
 8005362:	e021      	b.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8005364:	40021000 	.word	0x40021000
 8005368:	08008588 	.word	0x08008588
 800536c:	02dc6c00 	.word	0x02dc6c00
 8005370:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005374:	4b8f      	ldr	r3, [pc, #572]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d10f      	bne.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8005382:	4b8d      	ldr	r3, [pc, #564]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005384:	61fb      	str	r3, [r7, #28]
          break;
 8005386:	e00c      	b.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005388:	4b8a      	ldr	r3, [pc, #552]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d107      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8005396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539a:	61fb      	str	r3, [r7, #28]
          break;
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800539e:	bf00      	nop
 80053a0:	e2ba      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80053a2:	bf00      	nop
 80053a4:	e2b8      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80053a6:	bf00      	nop
        break;
 80053a8:	e2b6      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80053aa:	4b82      	ldr	r3, [pc, #520]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2bc0      	cmp	r3, #192	; 0xc0
 80053ba:	d021      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2bc0      	cmp	r3, #192	; 0xc0
 80053c0:	d829      	bhi.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d011      	beq.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d823      	bhi.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d004      	beq.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 80053da:	e01c      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7ff f966 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80053e0:	61f8      	str	r0, [r7, #28]
          break;
 80053e2:	e01d      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 80053e4:	f7ff f8ca 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80053e8:	61f8      	str	r0, [r7, #28]
          break;
 80053ea:	e019      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053ec:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d10f      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 80053fa:	4b6f      	ldr	r3, [pc, #444]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80053fc:	61fb      	str	r3, [r7, #28]
          break;
 80053fe:	e00c      	b.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005400:	4b6c      	ldr	r3, [pc, #432]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	61fb      	str	r3, [r7, #28]
          break;
 8005414:	e003      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8005416:	bf00      	nop
 8005418:	e27e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800541a:	bf00      	nop
 800541c:	e27c      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800541e:	bf00      	nop
        break;
 8005420:	e27a      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005422:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005434:	d025      	beq.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d82c      	bhi.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d013      	beq.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544c:	d824      	bhi.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545a:	d004      	beq.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800545c:	e01c      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800545e:	f7ff f925 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005462:	61f8      	str	r0, [r7, #28]
          break;
 8005464:	e01d      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005466:	f7ff f889 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800546a:	61f8      	str	r0, [r7, #28]
          break;
 800546c:	e019      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800546e:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547a:	d10f      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800547c:	4b4e      	ldr	r3, [pc, #312]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800547e:	61fb      	str	r3, [r7, #28]
          break;
 8005480:	e00c      	b.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005482:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8005490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005494:	61fb      	str	r3, [r7, #28]
          break;
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8005498:	bf00      	nop
 800549a:	e23d      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800549c:	bf00      	nop
 800549e:	e23b      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80054a0:	bf00      	nop
        break;
 80054a2:	e239      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b6:	d025      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054be:	d82c      	bhi.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	d013      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d824      	bhi.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 80054de:	e01c      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054e0:	f7ff f8e4 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80054e4:	61f8      	str	r0, [r7, #28]
          break;
 80054e6:	e01d      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 80054e8:	f7ff f848 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80054ec:	61f8      	str	r0, [r7, #28]
          break;
 80054ee:	e019      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f0:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fc:	d10f      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 80054fe:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8005500:	61fb      	str	r3, [r7, #28]
          break;
 8005502:	e00c      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005504:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005516:	61fb      	str	r3, [r7, #28]
          break;
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800551a:	bf00      	nop
 800551c:	e1fc      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800551e:	bf00      	nop
 8005520:	e1fa      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005522:	bf00      	nop
        break;
 8005524:	e1f8      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005538:	d00c      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005540:	d868      	bhi.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005548:	d008      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005550:	d034      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8005552:	e05f      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8005554:	f7ff f812 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8005558:	61f8      	str	r0, [r7, #28]
          break;
 800555a:	e060      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005568:	d156      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d050      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	3301      	adds	r3, #1
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	0e5b      	lsrs	r3, r3, #25
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	3301      	adds	r3, #1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	61fb      	str	r3, [r7, #28]
          break;
 80055b2:	e031      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80055b4:	40021000 	.word	0x40021000
 80055b8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80055bc:	4b9c      	ldr	r3, [pc, #624]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c8:	d128      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80055ca:	4b99      	ldr	r3, [pc, #612]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d022      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80055d6:	4b96      	ldr	r3, [pc, #600]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	fb03 f202 	mul.w	r2, r3, r2
 80055ea:	4b91      	ldr	r3, [pc, #580]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	3301      	adds	r3, #1
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80055fc:	4b8c      	ldr	r3, [pc, #560]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	0e5b      	lsrs	r3, r3, #25
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	3301      	adds	r3, #1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	61fb      	str	r3, [r7, #28]
          break;
 8005612:	e003      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8005614:	bf00      	nop
 8005616:	e17f      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005618:	bf00      	nop
 800561a:	e17d      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800561c:	bf00      	nop
        break;
 800561e:	e17b      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005620:	4b83      	ldr	r3, [pc, #524]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005632:	f7ff f851 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8005636:	61f8      	str	r0, [r7, #28]
        break;
 8005638:	e16e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800563a:	f7fe ff9f 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800563e:	61f8      	str	r0, [r7, #28]
        break;
 8005640:	e16a      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005642:	4b7b      	ldr	r3, [pc, #492]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d013      	beq.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d819      	bhi.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d004      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800566c:	e011      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800566e:	f7ff f81d 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005672:	61f8      	str	r0, [r7, #28]
          break;
 8005674:	e010      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005676:	f7fe ff81 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800567a:	61f8      	str	r0, [r7, #28]
          break;
 800567c:	e00c      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800567e:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568a:	d104      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800568c:	4b69      	ldr	r3, [pc, #420]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800568e:	61fb      	str	r3, [r7, #28]
          break;
 8005690:	e001      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8005692:	bf00      	nop
 8005694:	e140      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005696:	bf00      	nop
        break;
 8005698:	e13e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800569a:	4b65      	ldr	r3, [pc, #404]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ac:	d013      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	d819      	bhi.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 80056c4:	e011      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056c6:	f7fe fff1 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80056ca:	61f8      	str	r0, [r7, #28]
          break;
 80056cc:	e010      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fe ff55 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
          break;
 80056d4:	e00c      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d6:	4b56      	ldr	r3, [pc, #344]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d104      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 80056e4:	4b53      	ldr	r3, [pc, #332]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80056e6:	61fb      	str	r3, [r7, #28]
          break;
 80056e8:	e001      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 80056ea:	bf00      	nop
 80056ec:	e114      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80056ee:	bf00      	nop
        break;
 80056f0:	e112      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80056f2:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005704:	d013      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570c:	d819      	bhi.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d004      	beq.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800571c:	e011      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800571e:	f7fe ffc5 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005722:	61f8      	str	r0, [r7, #28]
          break;
 8005724:	e010      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005726:	f7fe ff29 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800572a:	61f8      	str	r0, [r7, #28]
          break;
 800572c:	e00c      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800572e:	4b40      	ldr	r3, [pc, #256]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d104      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800573c:	4b3d      	ldr	r3, [pc, #244]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800573e:	61fb      	str	r3, [r7, #28]
          break;
 8005740:	e001      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8005742:	bf00      	nop
 8005744:	e0e8      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005746:	bf00      	nop
        break;
 8005748:	e0e6      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800574a:	4b39      	ldr	r3, [pc, #228]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800574c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d011      	beq.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d818      	bhi.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d004      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800576e:	e011      	b.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe ff9c 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005774:	61f8      	str	r0, [r7, #28]
          break;
 8005776:	e010      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8005778:	f7fe ff00 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800577c:	61f8      	str	r0, [r7, #28]
          break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d104      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800578e:	4b29      	ldr	r3, [pc, #164]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005790:	61fb      	str	r3, [r7, #28]
          break;
 8005792:	e001      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8005794:	bf00      	nop
 8005796:	e0bf      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005798:	bf00      	nop
        break;
 800579a:	e0bd      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800579c:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057ae:	d02c      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057b6:	d833      	bhi.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057be:	d01a      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057c6:	d82b      	bhi.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057d4:	d004      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80057d6:	e023      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fe ff68 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80057dc:	61f8      	str	r0, [r7, #28]
          break;
 80057de:	e026      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80057e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11a      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80057ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80057f2:	61fb      	str	r3, [r7, #28]
          break;
 80057f4:	e016      	b.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d111      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8005806:	61fb      	str	r3, [r7, #28]
          break;
 8005808:	e00e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d109      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8005818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581c:	61fb      	str	r3, [r7, #28]
          break;
 800581e:	e005      	b.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8005820:	bf00      	nop
 8005822:	e079      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005824:	bf00      	nop
 8005826:	e077      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8005828:	bf00      	nop
 800582a:	e075      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800582c:	bf00      	nop
        break;
 800582e:	e073      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8005830:	40021000 	.word	0x40021000
 8005834:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005838:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800584a:	d02c      	beq.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005852:	d833      	bhi.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585a:	d01a      	beq.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005862:	d82b      	bhi.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005870:	d004      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005872:	e023      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005874:	f7fe ff1a 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8005878:	61f8      	str	r0, [r7, #28]
          break;
 800587a:	e026      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800587c:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800587e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d11a      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800588a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800588e:	61fb      	str	r3, [r7, #28]
          break;
 8005890:	e016      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d111      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80058a2:	61fb      	str	r3, [r7, #28]
          break;
 80058a4:	e00e      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058a6:	4b1f      	ldr	r3, [pc, #124]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d109      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80058b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b8:	61fb      	str	r3, [r7, #28]
          break;
 80058ba:	e005      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80058bc:	bf00      	nop
 80058be:	e02b      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80058c0:	bf00      	nop
 80058c2:	e029      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80058c4:	bf00      	nop
 80058c6:	e027      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80058c8:	bf00      	nop
        break;
 80058ca:	e025      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80058cc:	4b15      	ldr	r3, [pc, #84]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d004      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80058e6:	e00d      	b.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fe fee0 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80058ec:	61f8      	str	r0, [r7, #28]
          break;
 80058ee:	e009      	b.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fc:	d101      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8005900:	61fb      	str	r3, [r7, #28]
          break;
 8005902:	bf00      	nop
        break;
 8005904:	e008      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005906:	bf00      	nop
 8005908:	e006      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800590a:	bf00      	nop
 800590c:	e004      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8005916:	bf00      	nop
    }
  }

  return(frequency);
 8005918:	69fb      	ldr	r3, [r7, #28]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	00f42400 	.word	0x00f42400

0800592c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593a:	4b74      	ldr	r3, [pc, #464]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005946:	4b71      	ldr	r3, [pc, #452]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0203 	and.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d10d      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
       ||
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800595e:	4b6b      	ldr	r3, [pc, #428]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
       ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d047      	beq.n	8005a02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e044      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d018      	beq.n	80059b2 <RCCEx_PLLSAI1_Config+0x86>
 8005980:	2b03      	cmp	r3, #3
 8005982:	d825      	bhi.n	80059d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d002      	beq.n	800598e <RCCEx_PLLSAI1_Config+0x62>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d009      	beq.n	80059a0 <RCCEx_PLLSAI1_Config+0x74>
 800598c:	e020      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800598e:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11d      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599e:	e01a      	b.n	80059d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a0:	4b5a      	ldr	r3, [pc, #360]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e013      	b.n	80059da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b2:	4b56      	ldr	r3, [pc, #344]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059be:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ce:	e006      	b.n	80059de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e004      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059de:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059e6:	4b49      	ldr	r3, [pc, #292]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	430b      	orrs	r3, r1
 80059fc:	4943      	ldr	r1, [pc, #268]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d17c      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a08:	4b40      	ldr	r3, [pc, #256]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a3f      	ldr	r2, [pc, #252]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fc fdc4 	bl	80025a0 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a1c:	f7fc fdc0 	bl	80025a0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a30:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d15f      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d110      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a48:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6892      	ldr	r2, [r2, #8]
 8005a58:	0211      	lsls	r1, r2, #8
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	06d2      	lsls	r2, r2, #27
 8005a60:	430a      	orrs	r2, r1
 8005a62:	492a      	ldr	r1, [pc, #168]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
 8005a68:	e027      	b.n	8005aba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d112      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a70:	4b26      	ldr	r3, [pc, #152]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
 8005a80:	0211      	lsls	r1, r2, #8
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6912      	ldr	r2, [r2, #16]
 8005a86:	0852      	lsrs	r2, r2, #1
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0552      	lsls	r2, r2, #21
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	491f      	ldr	r1, [pc, #124]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	610b      	str	r3, [r1, #16]
 8005a94:	e011      	b.n	8005aba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a96:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6892      	ldr	r2, [r2, #8]
 8005aa6:	0211      	lsls	r1, r2, #8
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6952      	ldr	r2, [r2, #20]
 8005aac:	0852      	lsrs	r2, r2, #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0652      	lsls	r2, r2, #25
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	4915      	ldr	r1, [pc, #84]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ac4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fc fd6b 	bl	80025a0 <HAL_GetTick>
 8005aca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005acc:	e009      	b.n	8005ae2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ace:	f7fc fd67 	bl	80025a0 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d902      	bls.n	8005ae2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae0:	e005      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0ef      	beq.n	8005ace <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4903      	ldr	r1, [pc, #12]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000

08005b10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b1e:	4b69      	ldr	r3, [pc, #420]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b2a:	4b66      	ldr	r3, [pc, #408]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 0203 	and.w	r2, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d10d      	bne.n	8005b56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b42:	4b60      	ldr	r3, [pc, #384]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
       ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d047      	beq.n	8005be6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	e044      	b.n	8005be6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d018      	beq.n	8005b96 <RCCEx_PLLSAI2_Config+0x86>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d825      	bhi.n	8005bb4 <RCCEx_PLLSAI2_Config+0xa4>
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d002      	beq.n	8005b72 <RCCEx_PLLSAI2_Config+0x62>
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d009      	beq.n	8005b84 <RCCEx_PLLSAI2_Config+0x74>
 8005b70:	e020      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b72:	4b54      	ldr	r3, [pc, #336]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b82:	e01a      	b.n	8005bba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b84:	4b4f      	ldr	r3, [pc, #316]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d116      	bne.n	8005bbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b94:	e013      	b.n	8005bbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b96:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ba2:	4b48      	ldr	r3, [pc, #288]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bb2:	e006      	b.n	8005bc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e004      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bca:	4b3e      	ldr	r3, [pc, #248]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	430b      	orrs	r3, r1
 8005be0:	4938      	ldr	r1, [pc, #224]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d166      	bne.n	8005cba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf8:	f7fc fcd2 	bl	80025a0 <HAL_GetTick>
 8005bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bfe:	e009      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c00:	f7fc fcce 	bl	80025a0 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d902      	bls.n	8005c14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	73fb      	strb	r3, [r7, #15]
        break;
 8005c12:	e005      	b.n	8005c20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c14:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ef      	bne.n	8005c00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d149      	bne.n	8005cba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6892      	ldr	r2, [r2, #8]
 8005c3c:	0211      	lsls	r1, r2, #8
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	06d2      	lsls	r2, r2, #27
 8005c44:	430a      	orrs	r2, r1
 8005c46:	491f      	ldr	r1, [pc, #124]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	614b      	str	r3, [r1, #20]
 8005c4c:	e011      	b.n	8005c72 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6892      	ldr	r2, [r2, #8]
 8005c5e:	0211      	lsls	r1, r2, #8
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6912      	ldr	r2, [r2, #16]
 8005c64:	0852      	lsrs	r2, r2, #1
 8005c66:	3a01      	subs	r2, #1
 8005c68:	0652      	lsls	r2, r2, #25
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	4915      	ldr	r1, [pc, #84]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fc fc8f 	bl	80025a0 <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c84:	e009      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c86:	f7fc fc8b 	bl	80025a0 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d902      	bls.n	8005c9a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	73fb      	strb	r3, [r7, #15]
          break;
 8005c98:	e005      	b.n	8005ca6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0ef      	beq.n	8005c86 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce4:	d10c      	bne.n	8005d00 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005ce6:	4b77      	ldr	r3, [pc, #476]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005cf0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cf8:	d112      	bne.n	8005d20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005cfa:	4b73      	ldr	r3, [pc, #460]	; (8005ec8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e00f      	b.n	8005d20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d10b      	bne.n	8005d20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d08:	4b6e      	ldr	r3, [pc, #440]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005d12:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d1a:	d101      	bne.n	8005d20 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8005d1e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 80c6 	bne.w	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d32:	d003      	beq.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d3a:	d13b      	bne.n	8005db4 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d48:	f040 80b3 	bne.w	8005eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8005d4c:	4b5d      	ldr	r3, [pc, #372]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80ac 	beq.w	8005eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d5a:	4b5a      	ldr	r3, [pc, #360]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	091b      	lsrs	r3, r3, #4
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	3301      	adds	r3, #1
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d6e:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005d7a:	4b52      	ldr	r3, [pc, #328]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	0edb      	lsrs	r3, r3, #27
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005d8c:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8005d98:	2311      	movs	r3, #17
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e001      	b.n	8005da2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8005d9e:	2307      	movs	r3, #7
 8005da0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	fb03 f202 	mul.w	r2, r3, r2
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005db2:	e07e      	b.n	8005eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d139      	bne.n	8005e2e <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005dba:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc6:	d175      	bne.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d06f      	beq.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	3301      	adds	r3, #1
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005df4:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	0edb      	lsrs	r3, r3, #27
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8005e12:	2311      	movs	r3, #17
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e001      	b.n	8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8005e18:	2307      	movs	r3, #7
 8005e1a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	fb03 f202 	mul.w	r2, r3, r2
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e042      	b.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e34:	d003      	beq.n	8005e3e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e3c:	d13a      	bne.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005e3e:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e4a:	d133      	bne.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02d      	beq.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	3301      	adds	r3, #1
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005e6c:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e76:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005e78:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	0edb      	lsrs	r3, r3, #27
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8005e96:	2311      	movs	r3, #17
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e001      	b.n	8005ea0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8005e9c:	2307      	movs	r3, #7
 8005e9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	fb03 f202 	mul.w	r2, r3, r2
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	e000      	b.n	8005eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005eb2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3724      	adds	r7, #36	; 0x24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	001fff68 	.word	0x001fff68

08005ecc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e155      	b.n	800618a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc f958 	bl	80021a8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f959 	bl	80061b0 <SAI_Disable>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e140      	b.n	800618a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d00c      	beq.n	8005f32 <HAL_SAI_Init+0x66>
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d80d      	bhi.n	8005f38 <HAL_SAI_Init+0x6c>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_SAI_Init+0x5a>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d003      	beq.n	8005f2c <HAL_SAI_Init+0x60>
 8005f24:	e008      	b.n	8005f38 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
      break;
 8005f2a:	e008      	b.n	8005f3e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	61fb      	str	r3, [r7, #28]
      break;
 8005f30:	e005      	b.n	8005f3e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005f32:	2320      	movs	r3, #32
 8005f34:	61fb      	str	r3, [r7, #28]
      break;
 8005f36:	e002      	b.n	8005f3e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      break;
 8005f3c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d81d      	bhi.n	8005f82 <HAL_SAI_Init+0xb6>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_SAI_Init+0x80>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005f63 	.word	0x08005f63
 8005f54:	08005f6b 	.word	0x08005f6b
 8005f58:	08005f73 	.word	0x08005f73
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
      break;
 8005f60:	e012      	b.n	8005f88 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f66:	617b      	str	r3, [r7, #20]
      break;
 8005f68:	e00e      	b.n	8005f88 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f6e:	617b      	str	r3, [r7, #20]
      break;
 8005f70:	e00a      	b.n	8005f88 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f76:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	61fb      	str	r3, [r7, #28]
      break;
 8005f80:	e002      	b.n	8005f88 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
      break;
 8005f86:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a81      	ldr	r2, [pc, #516]	; (8006194 <HAL_SAI_Init+0x2c8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_SAI_Init+0xd0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a80      	ldr	r2, [pc, #512]	; (8006198 <HAL_SAI_Init+0x2cc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f9c:	4a7f      	ldr	r2, [pc, #508]	; (800619c <HAL_SAI_Init+0x2d0>)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e002      	b.n	8005faa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005fa4:	4a7e      	ldr	r2, [pc, #504]	; (80061a0 <HAL_SAI_Init+0x2d4>)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d041      	beq.n	8006036 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a77      	ldr	r2, [pc, #476]	; (8006194 <HAL_SAI_Init+0x2c8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_SAI_Init+0xfa>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a75      	ldr	r2, [pc, #468]	; (8006198 <HAL_SAI_Init+0x2cc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d105      	bne.n	8005fd2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005fc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fca:	f7fe fef7 	bl	8004dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8005fce:	6138      	str	r0, [r7, #16]
 8005fd0:	e004      	b.n	8005fdc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005fd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fd6:	f7fe fef1 	bl	8004dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8005fda:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	025b      	lsls	r3, r3, #9
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a6b      	ldr	r2, [pc, #428]	; (80061a4 <HAL_SAI_Init+0x2d8>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	08da      	lsrs	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <HAL_SAI_Init+0x2d8>)
 8006006:	fba3 2301 	umull	r2, r3, r3, r1
 800600a:	08da      	lsrs	r2, r3, #3
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	1aca      	subs	r2, r1, r3
 8006016:	2a08      	cmp	r2, #8
 8006018:	d904      	bls.n	8006024 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b04      	cmp	r3, #4
 800602a:	d104      	bne.n	8006036 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	085a      	lsrs	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_SAI_Init+0x17a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d109      	bne.n	800605a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_SAI_Init+0x186>
 800604e:	2300      	movs	r3, #0
 8006050:	e001      	b.n	8006056 <HAL_SAI_Init+0x18a>
 8006052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	e008      	b.n	800606c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d102      	bne.n	8006068 <HAL_SAI_Init+0x19c>
 8006062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006066:	e000      	b.n	800606a <HAL_SAI_Init+0x19e>
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b4c      	ldr	r3, [pc, #304]	; (80061a8 <HAL_SAI_Init+0x2dc>)
 8006078:	400b      	ands	r3, r1
 800607a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006090:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	431a      	orrs	r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80060a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	051b      	lsls	r3, r3, #20
 80060b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80060d0:	f023 030f 	bic.w	r3, r3, #15
 80060d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6899      	ldr	r1, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_SAI_Init+0x2e0>)
 8006100:	400b      	ands	r3, r1
 8006102:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6899      	ldr	r1, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006114:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800611a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006120:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	3b01      	subs	r3, #1
 8006128:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800612a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006142:	400b      	ands	r3, r1
 8006144:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68d9      	ldr	r1, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800615c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006162:	3b01      	subs	r3, #1
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40015404 	.word	0x40015404
 8006198:	40015424 	.word	0x40015424
 800619c:	40015400 	.word	0x40015400
 80061a0:	40015800 	.word	0x40015800
 80061a4:	cccccccd 	.word	0xcccccccd
 80061a8:	ff05c010 	.word	0xff05c010
 80061ac:	fff88000 	.word	0xfff88000

080061b0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <SAI_Disable+0x6c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a18      	ldr	r2, [pc, #96]	; (8006220 <SAI_Disable+0x70>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	0b1b      	lsrs	r3, r3, #12
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	72fb      	strb	r3, [r7, #11]
      break;
 80061f6:	e009      	b.n	800620c <SAI_Disable+0x5c>
    }
    count--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e7      	bne.n	80061dc <SAI_Disable+0x2c>

  return status;
 800620c:	7afb      	ldrb	r3, [r7, #11]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000024 	.word	0x20000024
 8006220:	95cbec1b 	.word	0x95cbec1b

08006224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e040      	b.n	80062b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb ff2e 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8c0 	bl	80063e8 <UART_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e022      	b.n	80062b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fb6c 	bl	8006958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800628e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fbf3 	bl	8006a9c <UART_CheckIdleState>
 80062b6:	4603      	mov	r3, r0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	f040 8082 	bne.w	80063de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_UART_Transmit+0x26>
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e07a      	b.n	80063e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Transmit+0x38>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e073      	b.n	80063e0 <HAL_UART_Transmit+0x120>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2221      	movs	r2, #33	; 0x21
 800630c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630e:	f7fc f947 	bl	80025a0 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632c:	d108      	bne.n	8006340 <HAL_UART_Transmit+0x80>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e003      	b.n	8006348 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006350:	e02d      	b.n	80063ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	2180      	movs	r1, #128	; 0x80
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fbe6 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e039      	b.n	80063e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637e:	b292      	uxth	r2, r2
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	3302      	adds	r3, #2
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e008      	b.n	800639c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	781a      	ldrb	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b292      	uxth	r2, r2
 8006394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3301      	adds	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1cb      	bne.n	8006352 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	2140      	movs	r1, #64	; 0x40
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fbb2 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e005      	b.n	80063e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063ec:	b08a      	sub	sp, #40	; 0x28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4ba4      	ldr	r3, [pc, #656]	; (80066a8 <UART_SetConfig+0x2c0>)
 8006418:	4013      	ands	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a99      	ldr	r2, [pc, #612]	; (80066ac <UART_SetConfig+0x2c4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	4313      	orrs	r3, r2
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a90      	ldr	r2, [pc, #576]	; (80066b0 <UART_SetConfig+0x2c8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d126      	bne.n	80064c0 <UART_SetConfig+0xd8>
 8006472:	4b90      	ldr	r3, [pc, #576]	; (80066b4 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b03      	cmp	r3, #3
 800647e:	d81b      	bhi.n	80064b8 <UART_SetConfig+0xd0>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0xa0>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	08006499 	.word	0x08006499
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064b1 	.word	0x080064b1
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649e:	e116      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064a0:	2302      	movs	r3, #2
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a6:	e112      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ae:	e10e      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b6:	e10a      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064be:	e106      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a7c      	ldr	r2, [pc, #496]	; (80066b8 <UART_SetConfig+0x2d0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d138      	bne.n	800653c <UART_SetConfig+0x154>
 80064ca:	4b7a      	ldr	r3, [pc, #488]	; (80066b4 <UART_SetConfig+0x2cc>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	2b0c      	cmp	r3, #12
 80064d6:	d82d      	bhi.n	8006534 <UART_SetConfig+0x14c>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0xf8>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006535 	.word	0x08006535
 80064e8:	08006535 	.word	0x08006535
 80064ec:	08006535 	.word	0x08006535
 80064f0:	08006525 	.word	0x08006525
 80064f4:	08006535 	.word	0x08006535
 80064f8:	08006535 	.word	0x08006535
 80064fc:	08006535 	.word	0x08006535
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006535 	.word	0x08006535
 8006508:	08006535 	.word	0x08006535
 800650c:	08006535 	.word	0x08006535
 8006510:	0800652d 	.word	0x0800652d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e0d8      	b.n	80066ce <UART_SetConfig+0x2e6>
 800651c:	2302      	movs	r3, #2
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e0d4      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e0d0      	b.n	80066ce <UART_SetConfig+0x2e6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006532:	e0cc      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653a:	e0c8      	b.n	80066ce <UART_SetConfig+0x2e6>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5e      	ldr	r2, [pc, #376]	; (80066bc <UART_SetConfig+0x2d4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d125      	bne.n	8006592 <UART_SetConfig+0x1aa>
 8006546:	4b5b      	ldr	r3, [pc, #364]	; (80066b4 <UART_SetConfig+0x2cc>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d016      	beq.n	8006582 <UART_SetConfig+0x19a>
 8006554:	2b30      	cmp	r3, #48	; 0x30
 8006556:	d818      	bhi.n	800658a <UART_SetConfig+0x1a2>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d00a      	beq.n	8006572 <UART_SetConfig+0x18a>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d814      	bhi.n	800658a <UART_SetConfig+0x1a2>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <UART_SetConfig+0x182>
 8006564:	2b10      	cmp	r3, #16
 8006566:	d008      	beq.n	800657a <UART_SetConfig+0x192>
 8006568:	e00f      	b.n	800658a <UART_SetConfig+0x1a2>
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006570:	e0ad      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006572:	2302      	movs	r3, #2
 8006574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006578:	e0a9      	b.n	80066ce <UART_SetConfig+0x2e6>
 800657a:	2304      	movs	r3, #4
 800657c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006580:	e0a5      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006582:	2308      	movs	r3, #8
 8006584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006588:	e0a1      	b.n	80066ce <UART_SetConfig+0x2e6>
 800658a:	2310      	movs	r3, #16
 800658c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006590:	e09d      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4a      	ldr	r2, [pc, #296]	; (80066c0 <UART_SetConfig+0x2d8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d125      	bne.n	80065e8 <UART_SetConfig+0x200>
 800659c:	4b45      	ldr	r3, [pc, #276]	; (80066b4 <UART_SetConfig+0x2cc>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065a6:	2bc0      	cmp	r3, #192	; 0xc0
 80065a8:	d016      	beq.n	80065d8 <UART_SetConfig+0x1f0>
 80065aa:	2bc0      	cmp	r3, #192	; 0xc0
 80065ac:	d818      	bhi.n	80065e0 <UART_SetConfig+0x1f8>
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d00a      	beq.n	80065c8 <UART_SetConfig+0x1e0>
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d814      	bhi.n	80065e0 <UART_SetConfig+0x1f8>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <UART_SetConfig+0x1d8>
 80065ba:	2b40      	cmp	r3, #64	; 0x40
 80065bc:	d008      	beq.n	80065d0 <UART_SetConfig+0x1e8>
 80065be:	e00f      	b.n	80065e0 <UART_SetConfig+0x1f8>
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c6:	e082      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065c8:	2302      	movs	r3, #2
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ce:	e07e      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d6:	e07a      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065de:	e076      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e6:	e072      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <UART_SetConfig+0x2dc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d12a      	bne.n	8006648 <UART_SetConfig+0x260>
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <UART_SetConfig+0x2cc>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006600:	d01a      	beq.n	8006638 <UART_SetConfig+0x250>
 8006602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006606:	d81b      	bhi.n	8006640 <UART_SetConfig+0x258>
 8006608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800660c:	d00c      	beq.n	8006628 <UART_SetConfig+0x240>
 800660e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006612:	d815      	bhi.n	8006640 <UART_SetConfig+0x258>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <UART_SetConfig+0x238>
 8006618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661c:	d008      	beq.n	8006630 <UART_SetConfig+0x248>
 800661e:	e00f      	b.n	8006640 <UART_SetConfig+0x258>
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e052      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006628:	2302      	movs	r3, #2
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662e:	e04e      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006636:	e04a      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663e:	e046      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e042      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a17      	ldr	r2, [pc, #92]	; (80066ac <UART_SetConfig+0x2c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d13a      	bne.n	80066c8 <UART_SetConfig+0x2e0>
 8006652:	4b18      	ldr	r3, [pc, #96]	; (80066b4 <UART_SetConfig+0x2cc>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800665c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006660:	d01a      	beq.n	8006698 <UART_SetConfig+0x2b0>
 8006662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006666:	d81b      	bhi.n	80066a0 <UART_SetConfig+0x2b8>
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666c:	d00c      	beq.n	8006688 <UART_SetConfig+0x2a0>
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006672:	d815      	bhi.n	80066a0 <UART_SetConfig+0x2b8>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <UART_SetConfig+0x298>
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d008      	beq.n	8006690 <UART_SetConfig+0x2a8>
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x2b8>
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	e022      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668e:	e01e      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006696:	e01a      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669e:	e016      	b.n	80066ce <UART_SetConfig+0x2e6>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a6:	e012      	b.n	80066ce <UART_SetConfig+0x2e6>
 80066a8:	efff69f3 	.word	0xefff69f3
 80066ac:	40008000 	.word	0x40008000
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40004400 	.word	0x40004400
 80066bc:	40004800 	.word	0x40004800
 80066c0:	40004c00 	.word	0x40004c00
 80066c4:	40005000 	.word	0x40005000
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a9f      	ldr	r2, [pc, #636]	; (8006950 <UART_SetConfig+0x568>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d17a      	bne.n	80067ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d824      	bhi.n	800672a <UART_SetConfig+0x342>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0x300>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	0800672b 	.word	0x0800672b
 80066f0:	08006715 	.word	0x08006715
 80066f4:	0800672b 	.word	0x0800672b
 80066f8:	0800671b 	.word	0x0800671b
 80066fc:	0800672b 	.word	0x0800672b
 8006700:	0800672b 	.word	0x0800672b
 8006704:	0800672b 	.word	0x0800672b
 8006708:	08006723 	.word	0x08006723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fd ffce 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8006710:	61f8      	str	r0, [r7, #28]
        break;
 8006712:	e010      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006714:	4b8f      	ldr	r3, [pc, #572]	; (8006954 <UART_SetConfig+0x56c>)
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e00d      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671a:	f7fd ff2f 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800671e:	61f8      	str	r0, [r7, #28]
        break;
 8006720:	e009      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006726:	61fb      	str	r3, [r7, #28]
        break;
 8006728:	e005      	b.n	8006736 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80fb 	beq.w	8006934 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	429a      	cmp	r2, r3
 800674c:	d305      	bcc.n	800675a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006760:	e0e8      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	2200      	movs	r2, #0
 8006766:	461c      	mov	r4, r3
 8006768:	4615      	mov	r5, r2
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	022b      	lsls	r3, r5, #8
 8006774:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006778:	0222      	lsls	r2, r4, #8
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	6849      	ldr	r1, [r1, #4]
 800677e:	0849      	lsrs	r1, r1, #1
 8006780:	2000      	movs	r0, #0
 8006782:	4688      	mov	r8, r1
 8006784:	4681      	mov	r9, r0
 8006786:	eb12 0a08 	adds.w	sl, r2, r8
 800678a:	eb43 0b09 	adc.w	fp, r3, r9
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	4650      	mov	r0, sl
 800679e:	4659      	mov	r1, fp
 80067a0:	f7f9 fd76 	bl	8000290 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b2:	d308      	bcc.n	80067c6 <UART_SetConfig+0x3de>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ba:	d204      	bcs.n	80067c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e0b6      	b.n	8006934 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067cc:	e0b2      	b.n	8006934 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d6:	d15e      	bne.n	8006896 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x44a>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x400>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fd ff4e 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8006810:	61f8      	str	r0, [r7, #28]
        break;
 8006812:	e014      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fd ff60 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8006818:	61f8      	str	r0, [r7, #28]
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b4d      	ldr	r3, [pc, #308]	; (8006954 <UART_SetConfig+0x56c>)
 800681e:	61fb      	str	r3, [r7, #28]
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fd feab 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8006826:	61f8      	str	r0, [r7, #28]
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682e:	61fb      	str	r3, [r7, #28]
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800683c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d077      	beq.n	8006934 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005a      	lsls	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b0f      	cmp	r3, #15
 800685e:	d916      	bls.n	800688e <UART_SetConfig+0x4a6>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006866:	d212      	bcs.n	800688e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f023 030f 	bic.w	r3, r3, #15
 8006870:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	b29a      	uxth	r2, r3
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	4313      	orrs	r3, r2
 8006882:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	8afa      	ldrh	r2, [r7, #22]
 800688a:	60da      	str	r2, [r3, #12]
 800688c:	e052      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006894:	e04e      	b.n	8006934 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800689a:	2b08      	cmp	r3, #8
 800689c:	d827      	bhi.n	80068ee <UART_SetConfig+0x506>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0x4bc>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068ef 	.word	0x080068ef
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068ef 	.word	0x080068ef
 80068bc:	080068ef 	.word	0x080068ef
 80068c0:	080068ef 	.word	0x080068ef
 80068c4:	080068e7 	.word	0x080068e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fd fef0 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 80068cc:	61f8      	str	r0, [r7, #28]
        break;
 80068ce:	e014      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d0:	f7fd ff02 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80068d4:	61f8      	str	r0, [r7, #28]
        break;
 80068d6:	e010      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <UART_SetConfig+0x56c>)
 80068da:	61fb      	str	r3, [r7, #28]
        break;
 80068dc:	e00d      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fd fe4d 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80068e2:	61f8      	str	r0, [r7, #28]
        break;
 80068e4:	e009      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	61fb      	str	r3, [r7, #28]
        break;
 80068ec:	e005      	b.n	80068fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068f8:	bf00      	nop
    }

    if (pclk != 0U)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085a      	lsrs	r2, r3, #1
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	441a      	add	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	d909      	bls.n	800692e <UART_SetConfig+0x546>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d205      	bcs.n	800692e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	e002      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006940:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006944:	4618      	mov	r0, r3
 8006946:	3728      	adds	r7, #40	; 0x28
 8006948:	46bd      	mov	sp, r7
 800694a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694e:	bf00      	nop
 8006950:	40008000 	.word	0x40008000
 8006954:	00f42400 	.word	0x00f42400

08006958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a56:	d10a      	bne.n	8006a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aac:	f7fb fd78 	bl	80025a0 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d10e      	bne.n	8006ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f82d 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e023      	b.n	8006b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d10e      	bne.n	8006b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f817 	bl	8006b2e <UART_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e00d      	b.n	8006b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b09c      	sub	sp, #112	; 0x70
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3e:	e0a5      	b.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	f000 80a1 	beq.w	8006c8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fb fd29 	bl	80025a0 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d13e      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b74:	667b      	str	r3, [r7, #100]	; 0x64
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e6      	bne.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e5      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e067      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d04f      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d147      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	613b      	str	r3, [r7, #16]
   return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c58:	623a      	str	r2, [r7, #32]
 8006c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e010      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2301      	moveq	r3, #1
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f43f af4a 	beq.w	8006b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3770      	adds	r7, #112	; 0x70
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <__assert_func>:
 8006cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cba:	4614      	mov	r4, r2
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <__assert_func+0x2c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	68d8      	ldr	r0, [r3, #12]
 8006cc6:	b14c      	cbz	r4, 8006cdc <__assert_func+0x24>
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <__assert_func+0x30>)
 8006cca:	9100      	str	r1, [sp, #0]
 8006ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cd0:	4906      	ldr	r1, [pc, #24]	; (8006cec <__assert_func+0x34>)
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	f000 f814 	bl	8006d00 <fiprintf>
 8006cd8:	f000 fd84 	bl	80077e4 <abort>
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <__assert_func+0x38>)
 8006cde:	461c      	mov	r4, r3
 8006ce0:	e7f3      	b.n	8006cca <__assert_func+0x12>
 8006ce2:	bf00      	nop
 8006ce4:	20000030 	.word	0x20000030
 8006ce8:	080085f8 	.word	0x080085f8
 8006cec:	08008605 	.word	0x08008605
 8006cf0:	08008633 	.word	0x08008633

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	; (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000030 	.word	0x20000030

08006d00 <fiprintf>:
 8006d00:	b40e      	push	{r1, r2, r3}
 8006d02:	b503      	push	{r0, r1, lr}
 8006d04:	4601      	mov	r1, r0
 8006d06:	ab03      	add	r3, sp, #12
 8006d08:	4805      	ldr	r0, [pc, #20]	; (8006d20 <fiprintf+0x20>)
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	f000 f945 	bl	8006fa0 <_vfiprintf_r>
 8006d16:	b002      	add	sp, #8
 8006d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d1c:	b003      	add	sp, #12
 8006d1e:	4770      	bx	lr
 8006d20:	20000030 	.word	0x20000030

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f001 f878 	bl	8007e2c <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	080086d4 	.word	0x080086d4
 8006d60:	080086d4 	.word	0x080086d4
 8006d64:	080086d4 	.word	0x080086d4
 8006d68:	080086d8 	.word	0x080086d8

08006d6c <malloc>:
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <malloc+0xc>)
 8006d6e:	4601      	mov	r1, r0
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f000 b877 	b.w	8006e64 <_malloc_r>
 8006d76:	bf00      	nop
 8006d78:	20000030 	.word	0x20000030

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <_free_r>:
 8006d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d044      	beq.n	8006e1c <_free_r+0x90>
 8006d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d9e:	bfb8      	it	lt
 8006da0:	18e4      	addlt	r4, r4, r3
 8006da2:	f000 ff47 	bl	8007c34 <__malloc_lock>
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <_free_r+0x94>)
 8006da8:	9801      	ldr	r0, [sp, #4]
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	b933      	cbnz	r3, 8006dbc <_free_r+0x30>
 8006dae:	6063      	str	r3, [r4, #4]
 8006db0:	6014      	str	r4, [r2, #0]
 8006db2:	b003      	add	sp, #12
 8006db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db8:	f000 bf42 	b.w	8007c40 <__malloc_unlock>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d908      	bls.n	8006dd2 <_free_r+0x46>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf01      	itttt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	e7ed      	b.n	8006dae <_free_r+0x22>
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b10b      	cbz	r3, 8006ddc <_free_r+0x50>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d9fa      	bls.n	8006dd2 <_free_r+0x46>
 8006ddc:	6811      	ldr	r1, [r2, #0]
 8006dde:	1855      	adds	r5, r2, r1
 8006de0:	42a5      	cmp	r5, r4
 8006de2:	d10b      	bne.n	8006dfc <_free_r+0x70>
 8006de4:	6824      	ldr	r4, [r4, #0]
 8006de6:	4421      	add	r1, r4
 8006de8:	1854      	adds	r4, r2, r1
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	6011      	str	r1, [r2, #0]
 8006dee:	d1e0      	bne.n	8006db2 <_free_r+0x26>
 8006df0:	681c      	ldr	r4, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	4421      	add	r1, r4
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	e7da      	b.n	8006db2 <_free_r+0x26>
 8006dfc:	d902      	bls.n	8006e04 <_free_r+0x78>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7d6      	b.n	8006db2 <_free_r+0x26>
 8006e04:	6825      	ldr	r5, [r4, #0]
 8006e06:	1961      	adds	r1, r4, r5
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf04      	itt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	bf04      	itt	eq
 8006e14:	1949      	addeq	r1, r1, r5
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	6054      	str	r4, [r2, #4]
 8006e1a:	e7ca      	b.n	8006db2 <_free_r+0x26>
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bd30      	pop	{r4, r5, pc}
 8006e20:	2001c620 	.word	0x2001c620

08006e24 <sbrk_aligned>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0e      	ldr	r6, [pc, #56]	; (8006e60 <sbrk_aligned+0x3c>)
 8006e28:	460c      	mov	r4, r1
 8006e2a:	6831      	ldr	r1, [r6, #0]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	b911      	cbnz	r1, 8006e36 <sbrk_aligned+0x12>
 8006e30:	f000 fc08 	bl	8007644 <_sbrk_r>
 8006e34:	6030      	str	r0, [r6, #0]
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 fc03 	bl	8007644 <_sbrk_r>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d00a      	beq.n	8006e58 <sbrk_aligned+0x34>
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d007      	beq.n	8006e5c <sbrk_aligned+0x38>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 fbf8 	bl	8007644 <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d101      	bne.n	8006e5c <sbrk_aligned+0x38>
 8006e58:	f04f 34ff 	mov.w	r4, #4294967295
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	2001c624 	.word	0x2001c624

08006e64 <_malloc_r>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	1ccd      	adds	r5, r1, #3
 8006e6a:	f025 0503 	bic.w	r5, r5, #3
 8006e6e:	3508      	adds	r5, #8
 8006e70:	2d0c      	cmp	r5, #12
 8006e72:	bf38      	it	cc
 8006e74:	250c      	movcc	r5, #12
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	4607      	mov	r7, r0
 8006e7a:	db01      	blt.n	8006e80 <_malloc_r+0x1c>
 8006e7c:	42a9      	cmp	r1, r5
 8006e7e:	d905      	bls.n	8006e8c <_malloc_r+0x28>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	2600      	movs	r6, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8c:	4e2e      	ldr	r6, [pc, #184]	; (8006f48 <_malloc_r+0xe4>)
 8006e8e:	f000 fed1 	bl	8007c34 <__malloc_lock>
 8006e92:	6833      	ldr	r3, [r6, #0]
 8006e94:	461c      	mov	r4, r3
 8006e96:	bb34      	cbnz	r4, 8006ee6 <_malloc_r+0x82>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff ffc2 	bl	8006e24 <sbrk_aligned>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	d14d      	bne.n	8006f42 <_malloc_r+0xde>
 8006ea6:	6834      	ldr	r4, [r6, #0]
 8006ea8:	4626      	mov	r6, r4
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d140      	bne.n	8006f30 <_malloc_r+0xcc>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	eb04 0803 	add.w	r8, r4, r3
 8006eb8:	f000 fbc4 	bl	8007644 <_sbrk_r>
 8006ebc:	4580      	cmp	r8, r0
 8006ebe:	d13a      	bne.n	8006f36 <_malloc_r+0xd2>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	3503      	adds	r5, #3
 8006ec4:	1a6d      	subs	r5, r5, r1
 8006ec6:	f025 0503 	bic.w	r5, r5, #3
 8006eca:	3508      	adds	r5, #8
 8006ecc:	2d0c      	cmp	r5, #12
 8006ece:	bf38      	it	cc
 8006ed0:	250c      	movcc	r5, #12
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa5 	bl	8006e24 <sbrk_aligned>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d02b      	beq.n	8006f36 <_malloc_r+0xd2>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	442b      	add	r3, r5
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	e00e      	b.n	8006f04 <_malloc_r+0xa0>
 8006ee6:	6822      	ldr	r2, [r4, #0]
 8006ee8:	1b52      	subs	r2, r2, r5
 8006eea:	d41e      	bmi.n	8006f2a <_malloc_r+0xc6>
 8006eec:	2a0b      	cmp	r2, #11
 8006eee:	d916      	bls.n	8006f1e <_malloc_r+0xba>
 8006ef0:	1961      	adds	r1, r4, r5
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	bf18      	it	ne
 8006ef8:	6059      	strne	r1, [r3, #4]
 8006efa:	6863      	ldr	r3, [r4, #4]
 8006efc:	bf08      	it	eq
 8006efe:	6031      	streq	r1, [r6, #0]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4638      	mov	r0, r7
 8006f06:	f104 060b 	add.w	r6, r4, #11
 8006f0a:	f000 fe99 	bl	8007c40 <__malloc_unlock>
 8006f0e:	f026 0607 	bic.w	r6, r6, #7
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	1af2      	subs	r2, r6, r3
 8006f16:	d0b6      	beq.n	8006e86 <_malloc_r+0x22>
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	50a3      	str	r3, [r4, r2]
 8006f1c:	e7b3      	b.n	8006e86 <_malloc_r+0x22>
 8006f1e:	6862      	ldr	r2, [r4, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	bf0c      	ite	eq
 8006f24:	6032      	streq	r2, [r6, #0]
 8006f26:	605a      	strne	r2, [r3, #4]
 8006f28:	e7ec      	b.n	8006f04 <_malloc_r+0xa0>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	6864      	ldr	r4, [r4, #4]
 8006f2e:	e7b2      	b.n	8006e96 <_malloc_r+0x32>
 8006f30:	4634      	mov	r4, r6
 8006f32:	6876      	ldr	r6, [r6, #4]
 8006f34:	e7b9      	b.n	8006eaa <_malloc_r+0x46>
 8006f36:	230c      	movs	r3, #12
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	f000 fe80 	bl	8007c40 <__malloc_unlock>
 8006f40:	e7a1      	b.n	8006e86 <_malloc_r+0x22>
 8006f42:	6025      	str	r5, [r4, #0]
 8006f44:	e7de      	b.n	8006f04 <_malloc_r+0xa0>
 8006f46:	bf00      	nop
 8006f48:	2001c620 	.word	0x2001c620

08006f4c <__sfputc_r>:
 8006f4c:	6893      	ldr	r3, [r2, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	b410      	push	{r4}
 8006f54:	6093      	str	r3, [r2, #8]
 8006f56:	da08      	bge.n	8006f6a <__sfputc_r+0x1e>
 8006f58:	6994      	ldr	r4, [r2, #24]
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	db01      	blt.n	8006f62 <__sfputc_r+0x16>
 8006f5e:	290a      	cmp	r1, #10
 8006f60:	d103      	bne.n	8006f6a <__sfputc_r+0x1e>
 8006f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f66:	f000 bb7d 	b.w	8007664 <__swbuf_r>
 8006f6a:	6813      	ldr	r3, [r2, #0]
 8006f6c:	1c58      	adds	r0, r3, #1
 8006f6e:	6010      	str	r0, [r2, #0]
 8006f70:	7019      	strb	r1, [r3, #0]
 8006f72:	4608      	mov	r0, r1
 8006f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <__sfputs_r>:
 8006f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	460f      	mov	r7, r1
 8006f80:	4614      	mov	r4, r2
 8006f82:	18d5      	adds	r5, r2, r3
 8006f84:	42ac      	cmp	r4, r5
 8006f86:	d101      	bne.n	8006f8c <__sfputs_r+0x12>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e007      	b.n	8006f9c <__sfputs_r+0x22>
 8006f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f90:	463a      	mov	r2, r7
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff ffda 	bl	8006f4c <__sfputc_r>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d1f3      	bne.n	8006f84 <__sfputs_r+0xa>
 8006f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fa0 <_vfiprintf_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	b09d      	sub	sp, #116	; 0x74
 8006fa8:	4614      	mov	r4, r2
 8006faa:	4698      	mov	r8, r3
 8006fac:	4606      	mov	r6, r0
 8006fae:	b118      	cbz	r0, 8006fb8 <_vfiprintf_r+0x18>
 8006fb0:	6983      	ldr	r3, [r0, #24]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <_vfiprintf_r+0x18>
 8006fb4:	f000 fd38 	bl	8007a28 <__sinit>
 8006fb8:	4b89      	ldr	r3, [pc, #548]	; (80071e0 <_vfiprintf_r+0x240>)
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	d11b      	bne.n	8006ff6 <_vfiprintf_r+0x56>
 8006fbe:	6875      	ldr	r5, [r6, #4]
 8006fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc2:	07d9      	lsls	r1, r3, #31
 8006fc4:	d405      	bmi.n	8006fd2 <_vfiprintf_r+0x32>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	059a      	lsls	r2, r3, #22
 8006fca:	d402      	bmi.n	8006fd2 <_vfiprintf_r+0x32>
 8006fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fce:	f000 fdc9 	bl	8007b64 <__retarget_lock_acquire_recursive>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	071b      	lsls	r3, r3, #28
 8006fd6:	d501      	bpl.n	8006fdc <_vfiprintf_r+0x3c>
 8006fd8:	692b      	ldr	r3, [r5, #16]
 8006fda:	b9eb      	cbnz	r3, 8007018 <_vfiprintf_r+0x78>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f000 fb92 	bl	8007708 <__swsetup_r>
 8006fe4:	b1c0      	cbz	r0, 8007018 <_vfiprintf_r+0x78>
 8006fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe8:	07dc      	lsls	r4, r3, #31
 8006fea:	d50e      	bpl.n	800700a <_vfiprintf_r+0x6a>
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	b01d      	add	sp, #116	; 0x74
 8006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <_vfiprintf_r+0x244>)
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	d101      	bne.n	8007000 <_vfiprintf_r+0x60>
 8006ffc:	68b5      	ldr	r5, [r6, #8]
 8006ffe:	e7df      	b.n	8006fc0 <_vfiprintf_r+0x20>
 8007000:	4b79      	ldr	r3, [pc, #484]	; (80071e8 <_vfiprintf_r+0x248>)
 8007002:	429d      	cmp	r5, r3
 8007004:	bf08      	it	eq
 8007006:	68f5      	ldreq	r5, [r6, #12]
 8007008:	e7da      	b.n	8006fc0 <_vfiprintf_r+0x20>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	0598      	lsls	r0, r3, #22
 800700e:	d4ed      	bmi.n	8006fec <_vfiprintf_r+0x4c>
 8007010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007012:	f000 fda8 	bl	8007b66 <__retarget_lock_release_recursive>
 8007016:	e7e9      	b.n	8006fec <_vfiprintf_r+0x4c>
 8007018:	2300      	movs	r3, #0
 800701a:	9309      	str	r3, [sp, #36]	; 0x24
 800701c:	2320      	movs	r3, #32
 800701e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007022:	f8cd 800c 	str.w	r8, [sp, #12]
 8007026:	2330      	movs	r3, #48	; 0x30
 8007028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071ec <_vfiprintf_r+0x24c>
 800702c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007030:	f04f 0901 	mov.w	r9, #1
 8007034:	4623      	mov	r3, r4
 8007036:	469a      	mov	sl, r3
 8007038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703c:	b10a      	cbz	r2, 8007042 <_vfiprintf_r+0xa2>
 800703e:	2a25      	cmp	r2, #37	; 0x25
 8007040:	d1f9      	bne.n	8007036 <_vfiprintf_r+0x96>
 8007042:	ebba 0b04 	subs.w	fp, sl, r4
 8007046:	d00b      	beq.n	8007060 <_vfiprintf_r+0xc0>
 8007048:	465b      	mov	r3, fp
 800704a:	4622      	mov	r2, r4
 800704c:	4629      	mov	r1, r5
 800704e:	4630      	mov	r0, r6
 8007050:	f7ff ff93 	bl	8006f7a <__sfputs_r>
 8007054:	3001      	adds	r0, #1
 8007056:	f000 80aa 	beq.w	80071ae <_vfiprintf_r+0x20e>
 800705a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800705c:	445a      	add	r2, fp
 800705e:	9209      	str	r2, [sp, #36]	; 0x24
 8007060:	f89a 3000 	ldrb.w	r3, [sl]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80a2 	beq.w	80071ae <_vfiprintf_r+0x20e>
 800706a:	2300      	movs	r3, #0
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007074:	f10a 0a01 	add.w	sl, sl, #1
 8007078:	9304      	str	r3, [sp, #16]
 800707a:	9307      	str	r3, [sp, #28]
 800707c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007080:	931a      	str	r3, [sp, #104]	; 0x68
 8007082:	4654      	mov	r4, sl
 8007084:	2205      	movs	r2, #5
 8007086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708a:	4858      	ldr	r0, [pc, #352]	; (80071ec <_vfiprintf_r+0x24c>)
 800708c:	f7f9 f8b0 	bl	80001f0 <memchr>
 8007090:	9a04      	ldr	r2, [sp, #16]
 8007092:	b9d8      	cbnz	r0, 80070cc <_vfiprintf_r+0x12c>
 8007094:	06d1      	lsls	r1, r2, #27
 8007096:	bf44      	itt	mi
 8007098:	2320      	movmi	r3, #32
 800709a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709e:	0713      	lsls	r3, r2, #28
 80070a0:	bf44      	itt	mi
 80070a2:	232b      	movmi	r3, #43	; 0x2b
 80070a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a8:	f89a 3000 	ldrb.w	r3, [sl]
 80070ac:	2b2a      	cmp	r3, #42	; 0x2a
 80070ae:	d015      	beq.n	80070dc <_vfiprintf_r+0x13c>
 80070b0:	9a07      	ldr	r2, [sp, #28]
 80070b2:	4654      	mov	r4, sl
 80070b4:	2000      	movs	r0, #0
 80070b6:	f04f 0c0a 	mov.w	ip, #10
 80070ba:	4621      	mov	r1, r4
 80070bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c0:	3b30      	subs	r3, #48	; 0x30
 80070c2:	2b09      	cmp	r3, #9
 80070c4:	d94e      	bls.n	8007164 <_vfiprintf_r+0x1c4>
 80070c6:	b1b0      	cbz	r0, 80070f6 <_vfiprintf_r+0x156>
 80070c8:	9207      	str	r2, [sp, #28]
 80070ca:	e014      	b.n	80070f6 <_vfiprintf_r+0x156>
 80070cc:	eba0 0308 	sub.w	r3, r0, r8
 80070d0:	fa09 f303 	lsl.w	r3, r9, r3
 80070d4:	4313      	orrs	r3, r2
 80070d6:	9304      	str	r3, [sp, #16]
 80070d8:	46a2      	mov	sl, r4
 80070da:	e7d2      	b.n	8007082 <_vfiprintf_r+0xe2>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	1d19      	adds	r1, r3, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	9103      	str	r1, [sp, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfbb      	ittet	lt
 80070e8:	425b      	neglt	r3, r3
 80070ea:	f042 0202 	orrlt.w	r2, r2, #2
 80070ee:	9307      	strge	r3, [sp, #28]
 80070f0:	9307      	strlt	r3, [sp, #28]
 80070f2:	bfb8      	it	lt
 80070f4:	9204      	strlt	r2, [sp, #16]
 80070f6:	7823      	ldrb	r3, [r4, #0]
 80070f8:	2b2e      	cmp	r3, #46	; 0x2e
 80070fa:	d10c      	bne.n	8007116 <_vfiprintf_r+0x176>
 80070fc:	7863      	ldrb	r3, [r4, #1]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d135      	bne.n	800716e <_vfiprintf_r+0x1ce>
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	1d1a      	adds	r2, r3, #4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	9203      	str	r2, [sp, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	bfb8      	it	lt
 800710e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007112:	3402      	adds	r4, #2
 8007114:	9305      	str	r3, [sp, #20]
 8007116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071fc <_vfiprintf_r+0x25c>
 800711a:	7821      	ldrb	r1, [r4, #0]
 800711c:	2203      	movs	r2, #3
 800711e:	4650      	mov	r0, sl
 8007120:	f7f9 f866 	bl	80001f0 <memchr>
 8007124:	b140      	cbz	r0, 8007138 <_vfiprintf_r+0x198>
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	eba0 000a 	sub.w	r0, r0, sl
 800712c:	fa03 f000 	lsl.w	r0, r3, r0
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	4303      	orrs	r3, r0
 8007134:	3401      	adds	r4, #1
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713c:	482c      	ldr	r0, [pc, #176]	; (80071f0 <_vfiprintf_r+0x250>)
 800713e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007142:	2206      	movs	r2, #6
 8007144:	f7f9 f854 	bl	80001f0 <memchr>
 8007148:	2800      	cmp	r0, #0
 800714a:	d03f      	beq.n	80071cc <_vfiprintf_r+0x22c>
 800714c:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <_vfiprintf_r+0x254>)
 800714e:	bb1b      	cbnz	r3, 8007198 <_vfiprintf_r+0x1f8>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	3307      	adds	r3, #7
 8007154:	f023 0307 	bic.w	r3, r3, #7
 8007158:	3308      	adds	r3, #8
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	443b      	add	r3, r7
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	e767      	b.n	8007034 <_vfiprintf_r+0x94>
 8007164:	fb0c 3202 	mla	r2, ip, r2, r3
 8007168:	460c      	mov	r4, r1
 800716a:	2001      	movs	r0, #1
 800716c:	e7a5      	b.n	80070ba <_vfiprintf_r+0x11a>
 800716e:	2300      	movs	r3, #0
 8007170:	3401      	adds	r4, #1
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	4619      	mov	r1, r3
 8007176:	f04f 0c0a 	mov.w	ip, #10
 800717a:	4620      	mov	r0, r4
 800717c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007180:	3a30      	subs	r2, #48	; 0x30
 8007182:	2a09      	cmp	r2, #9
 8007184:	d903      	bls.n	800718e <_vfiprintf_r+0x1ee>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0c5      	beq.n	8007116 <_vfiprintf_r+0x176>
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	e7c3      	b.n	8007116 <_vfiprintf_r+0x176>
 800718e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007192:	4604      	mov	r4, r0
 8007194:	2301      	movs	r3, #1
 8007196:	e7f0      	b.n	800717a <_vfiprintf_r+0x1da>
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	462a      	mov	r2, r5
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <_vfiprintf_r+0x258>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4630      	mov	r0, r6
 80071a4:	f3af 8000 	nop.w
 80071a8:	4607      	mov	r7, r0
 80071aa:	1c78      	adds	r0, r7, #1
 80071ac:	d1d6      	bne.n	800715c <_vfiprintf_r+0x1bc>
 80071ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b0:	07d9      	lsls	r1, r3, #31
 80071b2:	d405      	bmi.n	80071c0 <_vfiprintf_r+0x220>
 80071b4:	89ab      	ldrh	r3, [r5, #12]
 80071b6:	059a      	lsls	r2, r3, #22
 80071b8:	d402      	bmi.n	80071c0 <_vfiprintf_r+0x220>
 80071ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071bc:	f000 fcd3 	bl	8007b66 <__retarget_lock_release_recursive>
 80071c0:	89ab      	ldrh	r3, [r5, #12]
 80071c2:	065b      	lsls	r3, r3, #25
 80071c4:	f53f af12 	bmi.w	8006fec <_vfiprintf_r+0x4c>
 80071c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ca:	e711      	b.n	8006ff0 <_vfiprintf_r+0x50>
 80071cc:	ab03      	add	r3, sp, #12
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	462a      	mov	r2, r5
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <_vfiprintf_r+0x258>)
 80071d4:	a904      	add	r1, sp, #16
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 f880 	bl	80072dc <_printf_i>
 80071dc:	e7e4      	b.n	80071a8 <_vfiprintf_r+0x208>
 80071de:	bf00      	nop
 80071e0:	0800868c 	.word	0x0800868c
 80071e4:	080086ac 	.word	0x080086ac
 80071e8:	0800866c 	.word	0x0800866c
 80071ec:	08008638 	.word	0x08008638
 80071f0:	08008642 	.word	0x08008642
 80071f4:	00000000 	.word	0x00000000
 80071f8:	08006f7b 	.word	0x08006f7b
 80071fc:	0800863e 	.word	0x0800863e

08007200 <_printf_common>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	4616      	mov	r6, r2
 8007206:	4699      	mov	r9, r3
 8007208:	688a      	ldr	r2, [r1, #8]
 800720a:	690b      	ldr	r3, [r1, #16]
 800720c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007210:	4293      	cmp	r3, r2
 8007212:	bfb8      	it	lt
 8007214:	4613      	movlt	r3, r2
 8007216:	6033      	str	r3, [r6, #0]
 8007218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800721c:	4607      	mov	r7, r0
 800721e:	460c      	mov	r4, r1
 8007220:	b10a      	cbz	r2, 8007226 <_printf_common+0x26>
 8007222:	3301      	adds	r3, #1
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	0699      	lsls	r1, r3, #26
 800722a:	bf42      	ittt	mi
 800722c:	6833      	ldrmi	r3, [r6, #0]
 800722e:	3302      	addmi	r3, #2
 8007230:	6033      	strmi	r3, [r6, #0]
 8007232:	6825      	ldr	r5, [r4, #0]
 8007234:	f015 0506 	ands.w	r5, r5, #6
 8007238:	d106      	bne.n	8007248 <_printf_common+0x48>
 800723a:	f104 0a19 	add.w	sl, r4, #25
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	6832      	ldr	r2, [r6, #0]
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	42ab      	cmp	r3, r5
 8007246:	dc26      	bgt.n	8007296 <_printf_common+0x96>
 8007248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800724c:	1e13      	subs	r3, r2, #0
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	bf18      	it	ne
 8007252:	2301      	movne	r3, #1
 8007254:	0692      	lsls	r2, r2, #26
 8007256:	d42b      	bmi.n	80072b0 <_printf_common+0xb0>
 8007258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800725c:	4649      	mov	r1, r9
 800725e:	4638      	mov	r0, r7
 8007260:	47c0      	blx	r8
 8007262:	3001      	adds	r0, #1
 8007264:	d01e      	beq.n	80072a4 <_printf_common+0xa4>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	68e5      	ldr	r5, [r4, #12]
 800726a:	6832      	ldr	r2, [r6, #0]
 800726c:	f003 0306 	and.w	r3, r3, #6
 8007270:	2b04      	cmp	r3, #4
 8007272:	bf08      	it	eq
 8007274:	1aad      	subeq	r5, r5, r2
 8007276:	68a3      	ldr	r3, [r4, #8]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	bf0c      	ite	eq
 800727c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007280:	2500      	movne	r5, #0
 8007282:	4293      	cmp	r3, r2
 8007284:	bfc4      	itt	gt
 8007286:	1a9b      	subgt	r3, r3, r2
 8007288:	18ed      	addgt	r5, r5, r3
 800728a:	2600      	movs	r6, #0
 800728c:	341a      	adds	r4, #26
 800728e:	42b5      	cmp	r5, r6
 8007290:	d11a      	bne.n	80072c8 <_printf_common+0xc8>
 8007292:	2000      	movs	r0, #0
 8007294:	e008      	b.n	80072a8 <_printf_common+0xa8>
 8007296:	2301      	movs	r3, #1
 8007298:	4652      	mov	r2, sl
 800729a:	4649      	mov	r1, r9
 800729c:	4638      	mov	r0, r7
 800729e:	47c0      	blx	r8
 80072a0:	3001      	adds	r0, #1
 80072a2:	d103      	bne.n	80072ac <_printf_common+0xac>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ac:	3501      	adds	r5, #1
 80072ae:	e7c6      	b.n	800723e <_printf_common+0x3e>
 80072b0:	18e1      	adds	r1, r4, r3
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	2030      	movs	r0, #48	; 0x30
 80072b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ba:	4422      	add	r2, r4
 80072bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c4:	3302      	adds	r3, #2
 80072c6:	e7c7      	b.n	8007258 <_printf_common+0x58>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4622      	mov	r2, r4
 80072cc:	4649      	mov	r1, r9
 80072ce:	4638      	mov	r0, r7
 80072d0:	47c0      	blx	r8
 80072d2:	3001      	adds	r0, #1
 80072d4:	d0e6      	beq.n	80072a4 <_printf_common+0xa4>
 80072d6:	3601      	adds	r6, #1
 80072d8:	e7d9      	b.n	800728e <_printf_common+0x8e>
	...

080072dc <_printf_i>:
 80072dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	7e0f      	ldrb	r7, [r1, #24]
 80072e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072e4:	2f78      	cmp	r7, #120	; 0x78
 80072e6:	4691      	mov	r9, r2
 80072e8:	4680      	mov	r8, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	469a      	mov	sl, r3
 80072ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072f2:	d807      	bhi.n	8007304 <_printf_i+0x28>
 80072f4:	2f62      	cmp	r7, #98	; 0x62
 80072f6:	d80a      	bhi.n	800730e <_printf_i+0x32>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	f000 80d8 	beq.w	80074ae <_printf_i+0x1d2>
 80072fe:	2f58      	cmp	r7, #88	; 0x58
 8007300:	f000 80a3 	beq.w	800744a <_printf_i+0x16e>
 8007304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800730c:	e03a      	b.n	8007384 <_printf_i+0xa8>
 800730e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007312:	2b15      	cmp	r3, #21
 8007314:	d8f6      	bhi.n	8007304 <_printf_i+0x28>
 8007316:	a101      	add	r1, pc, #4	; (adr r1, 800731c <_printf_i+0x40>)
 8007318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800731c:	08007375 	.word	0x08007375
 8007320:	08007389 	.word	0x08007389
 8007324:	08007305 	.word	0x08007305
 8007328:	08007305 	.word	0x08007305
 800732c:	08007305 	.word	0x08007305
 8007330:	08007305 	.word	0x08007305
 8007334:	08007389 	.word	0x08007389
 8007338:	08007305 	.word	0x08007305
 800733c:	08007305 	.word	0x08007305
 8007340:	08007305 	.word	0x08007305
 8007344:	08007305 	.word	0x08007305
 8007348:	08007495 	.word	0x08007495
 800734c:	080073b9 	.word	0x080073b9
 8007350:	08007477 	.word	0x08007477
 8007354:	08007305 	.word	0x08007305
 8007358:	08007305 	.word	0x08007305
 800735c:	080074b7 	.word	0x080074b7
 8007360:	08007305 	.word	0x08007305
 8007364:	080073b9 	.word	0x080073b9
 8007368:	08007305 	.word	0x08007305
 800736c:	08007305 	.word	0x08007305
 8007370:	0800747f 	.word	0x0800747f
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	602a      	str	r2, [r5, #0]
 800737c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007384:	2301      	movs	r3, #1
 8007386:	e0a3      	b.n	80074d0 <_printf_i+0x1f4>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	6829      	ldr	r1, [r5, #0]
 800738c:	0606      	lsls	r6, r0, #24
 800738e:	f101 0304 	add.w	r3, r1, #4
 8007392:	d50a      	bpl.n	80073aa <_printf_i+0xce>
 8007394:	680e      	ldr	r6, [r1, #0]
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	2e00      	cmp	r6, #0
 800739a:	da03      	bge.n	80073a4 <_printf_i+0xc8>
 800739c:	232d      	movs	r3, #45	; 0x2d
 800739e:	4276      	negs	r6, r6
 80073a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a4:	485e      	ldr	r0, [pc, #376]	; (8007520 <_printf_i+0x244>)
 80073a6:	230a      	movs	r3, #10
 80073a8:	e019      	b.n	80073de <_printf_i+0x102>
 80073aa:	680e      	ldr	r6, [r1, #0]
 80073ac:	602b      	str	r3, [r5, #0]
 80073ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073b2:	bf18      	it	ne
 80073b4:	b236      	sxthne	r6, r6
 80073b6:	e7ef      	b.n	8007398 <_printf_i+0xbc>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	1d19      	adds	r1, r3, #4
 80073be:	6029      	str	r1, [r5, #0]
 80073c0:	0601      	lsls	r1, r0, #24
 80073c2:	d501      	bpl.n	80073c8 <_printf_i+0xec>
 80073c4:	681e      	ldr	r6, [r3, #0]
 80073c6:	e002      	b.n	80073ce <_printf_i+0xf2>
 80073c8:	0646      	lsls	r6, r0, #25
 80073ca:	d5fb      	bpl.n	80073c4 <_printf_i+0xe8>
 80073cc:	881e      	ldrh	r6, [r3, #0]
 80073ce:	4854      	ldr	r0, [pc, #336]	; (8007520 <_printf_i+0x244>)
 80073d0:	2f6f      	cmp	r7, #111	; 0x6f
 80073d2:	bf0c      	ite	eq
 80073d4:	2308      	moveq	r3, #8
 80073d6:	230a      	movne	r3, #10
 80073d8:	2100      	movs	r1, #0
 80073da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073de:	6865      	ldr	r5, [r4, #4]
 80073e0:	60a5      	str	r5, [r4, #8]
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	bfa2      	ittt	ge
 80073e6:	6821      	ldrge	r1, [r4, #0]
 80073e8:	f021 0104 	bicge.w	r1, r1, #4
 80073ec:	6021      	strge	r1, [r4, #0]
 80073ee:	b90e      	cbnz	r6, 80073f4 <_printf_i+0x118>
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d04d      	beq.n	8007490 <_printf_i+0x1b4>
 80073f4:	4615      	mov	r5, r2
 80073f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073fa:	fb03 6711 	mls	r7, r3, r1, r6
 80073fe:	5dc7      	ldrb	r7, [r0, r7]
 8007400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007404:	4637      	mov	r7, r6
 8007406:	42bb      	cmp	r3, r7
 8007408:	460e      	mov	r6, r1
 800740a:	d9f4      	bls.n	80073f6 <_printf_i+0x11a>
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10b      	bne.n	8007428 <_printf_i+0x14c>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07de      	lsls	r6, r3, #31
 8007414:	d508      	bpl.n	8007428 <_printf_i+0x14c>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4299      	cmp	r1, r3
 800741c:	bfde      	ittt	le
 800741e:	2330      	movle	r3, #48	; 0x30
 8007420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007428:	1b52      	subs	r2, r2, r5
 800742a:	6122      	str	r2, [r4, #16]
 800742c:	f8cd a000 	str.w	sl, [sp]
 8007430:	464b      	mov	r3, r9
 8007432:	aa03      	add	r2, sp, #12
 8007434:	4621      	mov	r1, r4
 8007436:	4640      	mov	r0, r8
 8007438:	f7ff fee2 	bl	8007200 <_printf_common>
 800743c:	3001      	adds	r0, #1
 800743e:	d14c      	bne.n	80074da <_printf_i+0x1fe>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b004      	add	sp, #16
 8007446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744a:	4835      	ldr	r0, [pc, #212]	; (8007520 <_printf_i+0x244>)
 800744c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007450:	6829      	ldr	r1, [r5, #0]
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f851 6b04 	ldr.w	r6, [r1], #4
 8007458:	6029      	str	r1, [r5, #0]
 800745a:	061d      	lsls	r5, r3, #24
 800745c:	d514      	bpl.n	8007488 <_printf_i+0x1ac>
 800745e:	07df      	lsls	r7, r3, #31
 8007460:	bf44      	itt	mi
 8007462:	f043 0320 	orrmi.w	r3, r3, #32
 8007466:	6023      	strmi	r3, [r4, #0]
 8007468:	b91e      	cbnz	r6, 8007472 <_printf_i+0x196>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f023 0320 	bic.w	r3, r3, #32
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	2310      	movs	r3, #16
 8007474:	e7b0      	b.n	80073d8 <_printf_i+0xfc>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	2378      	movs	r3, #120	; 0x78
 8007480:	4828      	ldr	r0, [pc, #160]	; (8007524 <_printf_i+0x248>)
 8007482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007486:	e7e3      	b.n	8007450 <_printf_i+0x174>
 8007488:	0659      	lsls	r1, r3, #25
 800748a:	bf48      	it	mi
 800748c:	b2b6      	uxthmi	r6, r6
 800748e:	e7e6      	b.n	800745e <_printf_i+0x182>
 8007490:	4615      	mov	r5, r2
 8007492:	e7bb      	b.n	800740c <_printf_i+0x130>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	6826      	ldr	r6, [r4, #0]
 8007498:	6961      	ldr	r1, [r4, #20]
 800749a:	1d18      	adds	r0, r3, #4
 800749c:	6028      	str	r0, [r5, #0]
 800749e:	0635      	lsls	r5, r6, #24
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	d501      	bpl.n	80074a8 <_printf_i+0x1cc>
 80074a4:	6019      	str	r1, [r3, #0]
 80074a6:	e002      	b.n	80074ae <_printf_i+0x1d2>
 80074a8:	0670      	lsls	r0, r6, #25
 80074aa:	d5fb      	bpl.n	80074a4 <_printf_i+0x1c8>
 80074ac:	8019      	strh	r1, [r3, #0]
 80074ae:	2300      	movs	r3, #0
 80074b0:	6123      	str	r3, [r4, #16]
 80074b2:	4615      	mov	r5, r2
 80074b4:	e7ba      	b.n	800742c <_printf_i+0x150>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	1d1a      	adds	r2, r3, #4
 80074ba:	602a      	str	r2, [r5, #0]
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	6862      	ldr	r2, [r4, #4]
 80074c0:	2100      	movs	r1, #0
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7f8 fe94 	bl	80001f0 <memchr>
 80074c8:	b108      	cbz	r0, 80074ce <_printf_i+0x1f2>
 80074ca:	1b40      	subs	r0, r0, r5
 80074cc:	6060      	str	r0, [r4, #4]
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	2300      	movs	r3, #0
 80074d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d8:	e7a8      	b.n	800742c <_printf_i+0x150>
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	462a      	mov	r2, r5
 80074de:	4649      	mov	r1, r9
 80074e0:	4640      	mov	r0, r8
 80074e2:	47d0      	blx	sl
 80074e4:	3001      	adds	r0, #1
 80074e6:	d0ab      	beq.n	8007440 <_printf_i+0x164>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	079b      	lsls	r3, r3, #30
 80074ec:	d413      	bmi.n	8007516 <_printf_i+0x23a>
 80074ee:	68e0      	ldr	r0, [r4, #12]
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	4298      	cmp	r0, r3
 80074f4:	bfb8      	it	lt
 80074f6:	4618      	movlt	r0, r3
 80074f8:	e7a4      	b.n	8007444 <_printf_i+0x168>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4632      	mov	r2, r6
 80074fe:	4649      	mov	r1, r9
 8007500:	4640      	mov	r0, r8
 8007502:	47d0      	blx	sl
 8007504:	3001      	adds	r0, #1
 8007506:	d09b      	beq.n	8007440 <_printf_i+0x164>
 8007508:	3501      	adds	r5, #1
 800750a:	68e3      	ldr	r3, [r4, #12]
 800750c:	9903      	ldr	r1, [sp, #12]
 800750e:	1a5b      	subs	r3, r3, r1
 8007510:	42ab      	cmp	r3, r5
 8007512:	dcf2      	bgt.n	80074fa <_printf_i+0x21e>
 8007514:	e7eb      	b.n	80074ee <_printf_i+0x212>
 8007516:	2500      	movs	r5, #0
 8007518:	f104 0619 	add.w	r6, r4, #25
 800751c:	e7f5      	b.n	800750a <_printf_i+0x22e>
 800751e:	bf00      	nop
 8007520:	08008649 	.word	0x08008649
 8007524:	0800865a 	.word	0x0800865a

08007528 <iprintf>:
 8007528:	b40f      	push	{r0, r1, r2, r3}
 800752a:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <iprintf+0x2c>)
 800752c:	b513      	push	{r0, r1, r4, lr}
 800752e:	681c      	ldr	r4, [r3, #0]
 8007530:	b124      	cbz	r4, 800753c <iprintf+0x14>
 8007532:	69a3      	ldr	r3, [r4, #24]
 8007534:	b913      	cbnz	r3, 800753c <iprintf+0x14>
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fa76 	bl	8007a28 <__sinit>
 800753c:	ab05      	add	r3, sp, #20
 800753e:	9a04      	ldr	r2, [sp, #16]
 8007540:	68a1      	ldr	r1, [r4, #8]
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	4620      	mov	r0, r4
 8007546:	f7ff fd2b 	bl	8006fa0 <_vfiprintf_r>
 800754a:	b002      	add	sp, #8
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	b004      	add	sp, #16
 8007552:	4770      	bx	lr
 8007554:	20000030 	.word	0x20000030

08007558 <_puts_r>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	460e      	mov	r6, r1
 800755c:	4605      	mov	r5, r0
 800755e:	b118      	cbz	r0, 8007568 <_puts_r+0x10>
 8007560:	6983      	ldr	r3, [r0, #24]
 8007562:	b90b      	cbnz	r3, 8007568 <_puts_r+0x10>
 8007564:	f000 fa60 	bl	8007a28 <__sinit>
 8007568:	69ab      	ldr	r3, [r5, #24]
 800756a:	68ac      	ldr	r4, [r5, #8]
 800756c:	b913      	cbnz	r3, 8007574 <_puts_r+0x1c>
 800756e:	4628      	mov	r0, r5
 8007570:	f000 fa5a 	bl	8007a28 <__sinit>
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <_puts_r+0xd0>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d120      	bne.n	80075bc <_puts_r+0x64>
 800757a:	686c      	ldr	r4, [r5, #4]
 800757c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800757e:	07db      	lsls	r3, r3, #31
 8007580:	d405      	bmi.n	800758e <_puts_r+0x36>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	0598      	lsls	r0, r3, #22
 8007586:	d402      	bmi.n	800758e <_puts_r+0x36>
 8007588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800758a:	f000 faeb 	bl	8007b64 <__retarget_lock_acquire_recursive>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	0719      	lsls	r1, r3, #28
 8007592:	d51d      	bpl.n	80075d0 <_puts_r+0x78>
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	b1db      	cbz	r3, 80075d0 <_puts_r+0x78>
 8007598:	3e01      	subs	r6, #1
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075a0:	3b01      	subs	r3, #1
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	bb39      	cbnz	r1, 80075f6 <_puts_r+0x9e>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da38      	bge.n	800761c <_puts_r+0xc4>
 80075aa:	4622      	mov	r2, r4
 80075ac:	210a      	movs	r1, #10
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f858 	bl	8007664 <__swbuf_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d011      	beq.n	80075dc <_puts_r+0x84>
 80075b8:	250a      	movs	r5, #10
 80075ba:	e011      	b.n	80075e0 <_puts_r+0x88>
 80075bc:	4b1b      	ldr	r3, [pc, #108]	; (800762c <_puts_r+0xd4>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d101      	bne.n	80075c6 <_puts_r+0x6e>
 80075c2:	68ac      	ldr	r4, [r5, #8]
 80075c4:	e7da      	b.n	800757c <_puts_r+0x24>
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <_puts_r+0xd8>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	bf08      	it	eq
 80075cc:	68ec      	ldreq	r4, [r5, #12]
 80075ce:	e7d5      	b.n	800757c <_puts_r+0x24>
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f898 	bl	8007708 <__swsetup_r>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d0dd      	beq.n	8007598 <_puts_r+0x40>
 80075dc:	f04f 35ff 	mov.w	r5, #4294967295
 80075e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e2:	07da      	lsls	r2, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_puts_r+0x9a>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_puts_r+0x9a>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f000 faba 	bl	8007b66 <__retarget_lock_release_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da04      	bge.n	8007604 <_puts_r+0xac>
 80075fa:	69a2      	ldr	r2, [r4, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	dc06      	bgt.n	800760e <_puts_r+0xb6>
 8007600:	290a      	cmp	r1, #10
 8007602:	d004      	beq.n	800760e <_puts_r+0xb6>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	7019      	strb	r1, [r3, #0]
 800760c:	e7c5      	b.n	800759a <_puts_r+0x42>
 800760e:	4622      	mov	r2, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f827 	bl	8007664 <__swbuf_r>
 8007616:	3001      	adds	r0, #1
 8007618:	d1bf      	bne.n	800759a <_puts_r+0x42>
 800761a:	e7df      	b.n	80075dc <_puts_r+0x84>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	250a      	movs	r5, #10
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	701d      	strb	r5, [r3, #0]
 8007626:	e7db      	b.n	80075e0 <_puts_r+0x88>
 8007628:	0800868c 	.word	0x0800868c
 800762c:	080086ac 	.word	0x080086ac
 8007630:	0800866c 	.word	0x0800866c

08007634 <puts>:
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <puts+0xc>)
 8007636:	4601      	mov	r1, r0
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	f7ff bf8d 	b.w	8007558 <_puts_r>
 800763e:	bf00      	nop
 8007640:	20000030 	.word	0x20000030

08007644 <_sbrk_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	; (8007660 <_sbrk_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7fa fecc 	bl	80023ec <_sbrk>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_sbrk_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_sbrk_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	2001c62c 	.word	0x2001c62c

08007664 <__swbuf_r>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	460e      	mov	r6, r1
 8007668:	4614      	mov	r4, r2
 800766a:	4605      	mov	r5, r0
 800766c:	b118      	cbz	r0, 8007676 <__swbuf_r+0x12>
 800766e:	6983      	ldr	r3, [r0, #24]
 8007670:	b90b      	cbnz	r3, 8007676 <__swbuf_r+0x12>
 8007672:	f000 f9d9 	bl	8007a28 <__sinit>
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <__swbuf_r+0x98>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d12b      	bne.n	80076d4 <__swbuf_r+0x70>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	69a3      	ldr	r3, [r4, #24]
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	071a      	lsls	r2, r3, #28
 8007686:	d52f      	bpl.n	80076e8 <__swbuf_r+0x84>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	b36b      	cbz	r3, 80076e8 <__swbuf_r+0x84>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	1ac0      	subs	r0, r0, r3
 8007692:	6963      	ldr	r3, [r4, #20]
 8007694:	b2f6      	uxtb	r6, r6
 8007696:	4283      	cmp	r3, r0
 8007698:	4637      	mov	r7, r6
 800769a:	dc04      	bgt.n	80076a6 <__swbuf_r+0x42>
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f92e 	bl	8007900 <_fflush_r>
 80076a4:	bb30      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	6022      	str	r2, [r4, #0]
 80076b2:	701e      	strb	r6, [r3, #0]
 80076b4:	6963      	ldr	r3, [r4, #20]
 80076b6:	3001      	adds	r0, #1
 80076b8:	4283      	cmp	r3, r0
 80076ba:	d004      	beq.n	80076c6 <__swbuf_r+0x62>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	07db      	lsls	r3, r3, #31
 80076c0:	d506      	bpl.n	80076d0 <__swbuf_r+0x6c>
 80076c2:	2e0a      	cmp	r6, #10
 80076c4:	d104      	bne.n	80076d0 <__swbuf_r+0x6c>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f919 	bl	8007900 <_fflush_r>
 80076ce:	b988      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076d0:	4638      	mov	r0, r7
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <__swbuf_r+0x9c>)
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d101      	bne.n	80076de <__swbuf_r+0x7a>
 80076da:	68ac      	ldr	r4, [r5, #8]
 80076dc:	e7cf      	b.n	800767e <__swbuf_r+0x1a>
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <__swbuf_r+0xa0>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	bf08      	it	eq
 80076e4:	68ec      	ldreq	r4, [r5, #12]
 80076e6:	e7ca      	b.n	800767e <__swbuf_r+0x1a>
 80076e8:	4621      	mov	r1, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f80c 	bl	8007708 <__swsetup_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0cb      	beq.n	800768c <__swbuf_r+0x28>
 80076f4:	f04f 37ff 	mov.w	r7, #4294967295
 80076f8:	e7ea      	b.n	80076d0 <__swbuf_r+0x6c>
 80076fa:	bf00      	nop
 80076fc:	0800868c 	.word	0x0800868c
 8007700:	080086ac 	.word	0x080086ac
 8007704:	0800866c 	.word	0x0800866c

08007708 <__swsetup_r>:
 8007708:	4b32      	ldr	r3, [pc, #200]	; (80077d4 <__swsetup_r+0xcc>)
 800770a:	b570      	push	{r4, r5, r6, lr}
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	4606      	mov	r6, r0
 8007710:	460c      	mov	r4, r1
 8007712:	b125      	cbz	r5, 800771e <__swsetup_r+0x16>
 8007714:	69ab      	ldr	r3, [r5, #24]
 8007716:	b913      	cbnz	r3, 800771e <__swsetup_r+0x16>
 8007718:	4628      	mov	r0, r5
 800771a:	f000 f985 	bl	8007a28 <__sinit>
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <__swsetup_r+0xd0>)
 8007720:	429c      	cmp	r4, r3
 8007722:	d10f      	bne.n	8007744 <__swsetup_r+0x3c>
 8007724:	686c      	ldr	r4, [r5, #4]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800772c:	0719      	lsls	r1, r3, #28
 800772e:	d42c      	bmi.n	800778a <__swsetup_r+0x82>
 8007730:	06dd      	lsls	r5, r3, #27
 8007732:	d411      	bmi.n	8007758 <__swsetup_r+0x50>
 8007734:	2309      	movs	r3, #9
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	e03e      	b.n	80077c2 <__swsetup_r+0xba>
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <__swsetup_r+0xd4>)
 8007746:	429c      	cmp	r4, r3
 8007748:	d101      	bne.n	800774e <__swsetup_r+0x46>
 800774a:	68ac      	ldr	r4, [r5, #8]
 800774c:	e7eb      	b.n	8007726 <__swsetup_r+0x1e>
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <__swsetup_r+0xd8>)
 8007750:	429c      	cmp	r4, r3
 8007752:	bf08      	it	eq
 8007754:	68ec      	ldreq	r4, [r5, #12]
 8007756:	e7e6      	b.n	8007726 <__swsetup_r+0x1e>
 8007758:	0758      	lsls	r0, r3, #29
 800775a:	d512      	bpl.n	8007782 <__swsetup_r+0x7a>
 800775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775e:	b141      	cbz	r1, 8007772 <__swsetup_r+0x6a>
 8007760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <__swsetup_r+0x66>
 8007768:	4630      	mov	r0, r6
 800776a:	f7ff fb0f 	bl	8006d8c <_free_r>
 800776e:	2300      	movs	r3, #0
 8007770:	6363      	str	r3, [r4, #52]	; 0x34
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	2300      	movs	r3, #0
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	b94b      	cbnz	r3, 80077a2 <__swsetup_r+0x9a>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007798:	d003      	beq.n	80077a2 <__swsetup_r+0x9a>
 800779a:	4621      	mov	r1, r4
 800779c:	4630      	mov	r0, r6
 800779e:	f000 fa09 	bl	8007bb4 <__smakebuf_r>
 80077a2:	89a0      	ldrh	r0, [r4, #12]
 80077a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077a8:	f010 0301 	ands.w	r3, r0, #1
 80077ac:	d00a      	beq.n	80077c4 <__swsetup_r+0xbc>
 80077ae:	2300      	movs	r3, #0
 80077b0:	60a3      	str	r3, [r4, #8]
 80077b2:	6963      	ldr	r3, [r4, #20]
 80077b4:	425b      	negs	r3, r3
 80077b6:	61a3      	str	r3, [r4, #24]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	b943      	cbnz	r3, 80077ce <__swsetup_r+0xc6>
 80077bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077c0:	d1ba      	bne.n	8007738 <__swsetup_r+0x30>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	0781      	lsls	r1, r0, #30
 80077c6:	bf58      	it	pl
 80077c8:	6963      	ldrpl	r3, [r4, #20]
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	e7f4      	b.n	80077b8 <__swsetup_r+0xb0>
 80077ce:	2000      	movs	r0, #0
 80077d0:	e7f7      	b.n	80077c2 <__swsetup_r+0xba>
 80077d2:	bf00      	nop
 80077d4:	20000030 	.word	0x20000030
 80077d8:	0800868c 	.word	0x0800868c
 80077dc:	080086ac 	.word	0x080086ac
 80077e0:	0800866c 	.word	0x0800866c

080077e4 <abort>:
 80077e4:	b508      	push	{r3, lr}
 80077e6:	2006      	movs	r0, #6
 80077e8:	f000 fa58 	bl	8007c9c <raise>
 80077ec:	2001      	movs	r0, #1
 80077ee:	f7fa fda1 	bl	8002334 <_exit>
	...

080077f4 <__sflush_r>:
 80077f4:	898a      	ldrh	r2, [r1, #12]
 80077f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	4605      	mov	r5, r0
 80077fc:	0710      	lsls	r0, r2, #28
 80077fe:	460c      	mov	r4, r1
 8007800:	d458      	bmi.n	80078b4 <__sflush_r+0xc0>
 8007802:	684b      	ldr	r3, [r1, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dc05      	bgt.n	8007814 <__sflush_r+0x20>
 8007808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	dc02      	bgt.n	8007814 <__sflush_r+0x20>
 800780e:	2000      	movs	r0, #0
 8007810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007816:	2e00      	cmp	r6, #0
 8007818:	d0f9      	beq.n	800780e <__sflush_r+0x1a>
 800781a:	2300      	movs	r3, #0
 800781c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007820:	682f      	ldr	r7, [r5, #0]
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	d032      	beq.n	800788c <__sflush_r+0x98>
 8007826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	075a      	lsls	r2, r3, #29
 800782c:	d505      	bpl.n	800783a <__sflush_r+0x46>
 800782e:	6863      	ldr	r3, [r4, #4]
 8007830:	1ac0      	subs	r0, r0, r3
 8007832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007834:	b10b      	cbz	r3, 800783a <__sflush_r+0x46>
 8007836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007838:	1ac0      	subs	r0, r0, r3
 800783a:	2300      	movs	r3, #0
 800783c:	4602      	mov	r2, r0
 800783e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007840:	6a21      	ldr	r1, [r4, #32]
 8007842:	4628      	mov	r0, r5
 8007844:	47b0      	blx	r6
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	d106      	bne.n	800785a <__sflush_r+0x66>
 800784c:	6829      	ldr	r1, [r5, #0]
 800784e:	291d      	cmp	r1, #29
 8007850:	d82c      	bhi.n	80078ac <__sflush_r+0xb8>
 8007852:	4a2a      	ldr	r2, [pc, #168]	; (80078fc <__sflush_r+0x108>)
 8007854:	40ca      	lsrs	r2, r1
 8007856:	07d6      	lsls	r6, r2, #31
 8007858:	d528      	bpl.n	80078ac <__sflush_r+0xb8>
 800785a:	2200      	movs	r2, #0
 800785c:	6062      	str	r2, [r4, #4]
 800785e:	04d9      	lsls	r1, r3, #19
 8007860:	6922      	ldr	r2, [r4, #16]
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	d504      	bpl.n	8007870 <__sflush_r+0x7c>
 8007866:	1c42      	adds	r2, r0, #1
 8007868:	d101      	bne.n	800786e <__sflush_r+0x7a>
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	b903      	cbnz	r3, 8007870 <__sflush_r+0x7c>
 800786e:	6560      	str	r0, [r4, #84]	; 0x54
 8007870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007872:	602f      	str	r7, [r5, #0]
 8007874:	2900      	cmp	r1, #0
 8007876:	d0ca      	beq.n	800780e <__sflush_r+0x1a>
 8007878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800787c:	4299      	cmp	r1, r3
 800787e:	d002      	beq.n	8007886 <__sflush_r+0x92>
 8007880:	4628      	mov	r0, r5
 8007882:	f7ff fa83 	bl	8006d8c <_free_r>
 8007886:	2000      	movs	r0, #0
 8007888:	6360      	str	r0, [r4, #52]	; 0x34
 800788a:	e7c1      	b.n	8007810 <__sflush_r+0x1c>
 800788c:	6a21      	ldr	r1, [r4, #32]
 800788e:	2301      	movs	r3, #1
 8007890:	4628      	mov	r0, r5
 8007892:	47b0      	blx	r6
 8007894:	1c41      	adds	r1, r0, #1
 8007896:	d1c7      	bne.n	8007828 <__sflush_r+0x34>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0c4      	beq.n	8007828 <__sflush_r+0x34>
 800789e:	2b1d      	cmp	r3, #29
 80078a0:	d001      	beq.n	80078a6 <__sflush_r+0xb2>
 80078a2:	2b16      	cmp	r3, #22
 80078a4:	d101      	bne.n	80078aa <__sflush_r+0xb6>
 80078a6:	602f      	str	r7, [r5, #0]
 80078a8:	e7b1      	b.n	800780e <__sflush_r+0x1a>
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	e7ad      	b.n	8007810 <__sflush_r+0x1c>
 80078b4:	690f      	ldr	r7, [r1, #16]
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d0a9      	beq.n	800780e <__sflush_r+0x1a>
 80078ba:	0793      	lsls	r3, r2, #30
 80078bc:	680e      	ldr	r6, [r1, #0]
 80078be:	bf08      	it	eq
 80078c0:	694b      	ldreq	r3, [r1, #20]
 80078c2:	600f      	str	r7, [r1, #0]
 80078c4:	bf18      	it	ne
 80078c6:	2300      	movne	r3, #0
 80078c8:	eba6 0807 	sub.w	r8, r6, r7
 80078cc:	608b      	str	r3, [r1, #8]
 80078ce:	f1b8 0f00 	cmp.w	r8, #0
 80078d2:	dd9c      	ble.n	800780e <__sflush_r+0x1a>
 80078d4:	6a21      	ldr	r1, [r4, #32]
 80078d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078d8:	4643      	mov	r3, r8
 80078da:	463a      	mov	r2, r7
 80078dc:	4628      	mov	r0, r5
 80078de:	47b0      	blx	r6
 80078e0:	2800      	cmp	r0, #0
 80078e2:	dc06      	bgt.n	80078f2 <__sflush_r+0xfe>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	e78e      	b.n	8007810 <__sflush_r+0x1c>
 80078f2:	4407      	add	r7, r0
 80078f4:	eba8 0800 	sub.w	r8, r8, r0
 80078f8:	e7e9      	b.n	80078ce <__sflush_r+0xda>
 80078fa:	bf00      	nop
 80078fc:	20400001 	.word	0x20400001

08007900 <_fflush_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	690b      	ldr	r3, [r1, #16]
 8007904:	4605      	mov	r5, r0
 8007906:	460c      	mov	r4, r1
 8007908:	b913      	cbnz	r3, 8007910 <_fflush_r+0x10>
 800790a:	2500      	movs	r5, #0
 800790c:	4628      	mov	r0, r5
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	b118      	cbz	r0, 800791a <_fflush_r+0x1a>
 8007912:	6983      	ldr	r3, [r0, #24]
 8007914:	b90b      	cbnz	r3, 800791a <_fflush_r+0x1a>
 8007916:	f000 f887 	bl	8007a28 <__sinit>
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <_fflush_r+0x6c>)
 800791c:	429c      	cmp	r4, r3
 800791e:	d11b      	bne.n	8007958 <_fflush_r+0x58>
 8007920:	686c      	ldr	r4, [r5, #4]
 8007922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0ef      	beq.n	800790a <_fflush_r+0xa>
 800792a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800792c:	07d0      	lsls	r0, r2, #31
 800792e:	d404      	bmi.n	800793a <_fflush_r+0x3a>
 8007930:	0599      	lsls	r1, r3, #22
 8007932:	d402      	bmi.n	800793a <_fflush_r+0x3a>
 8007934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007936:	f000 f915 	bl	8007b64 <__retarget_lock_acquire_recursive>
 800793a:	4628      	mov	r0, r5
 800793c:	4621      	mov	r1, r4
 800793e:	f7ff ff59 	bl	80077f4 <__sflush_r>
 8007942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007944:	07da      	lsls	r2, r3, #31
 8007946:	4605      	mov	r5, r0
 8007948:	d4e0      	bmi.n	800790c <_fflush_r+0xc>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	059b      	lsls	r3, r3, #22
 800794e:	d4dd      	bmi.n	800790c <_fflush_r+0xc>
 8007950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007952:	f000 f908 	bl	8007b66 <__retarget_lock_release_recursive>
 8007956:	e7d9      	b.n	800790c <_fflush_r+0xc>
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <_fflush_r+0x70>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d101      	bne.n	8007962 <_fflush_r+0x62>
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	e7df      	b.n	8007922 <_fflush_r+0x22>
 8007962:	4b04      	ldr	r3, [pc, #16]	; (8007974 <_fflush_r+0x74>)
 8007964:	429c      	cmp	r4, r3
 8007966:	bf08      	it	eq
 8007968:	68ec      	ldreq	r4, [r5, #12]
 800796a:	e7da      	b.n	8007922 <_fflush_r+0x22>
 800796c:	0800868c 	.word	0x0800868c
 8007970:	080086ac 	.word	0x080086ac
 8007974:	0800866c 	.word	0x0800866c

08007978 <std>:
 8007978:	2300      	movs	r3, #0
 800797a:	b510      	push	{r4, lr}
 800797c:	4604      	mov	r4, r0
 800797e:	e9c0 3300 	strd	r3, r3, [r0]
 8007982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007986:	6083      	str	r3, [r0, #8]
 8007988:	8181      	strh	r1, [r0, #12]
 800798a:	6643      	str	r3, [r0, #100]	; 0x64
 800798c:	81c2      	strh	r2, [r0, #14]
 800798e:	6183      	str	r3, [r0, #24]
 8007990:	4619      	mov	r1, r3
 8007992:	2208      	movs	r2, #8
 8007994:	305c      	adds	r0, #92	; 0x5c
 8007996:	f7ff f9f1 	bl	8006d7c <memset>
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <std+0x38>)
 800799c:	6263      	str	r3, [r4, #36]	; 0x24
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x3c>)
 80079a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079a2:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <std+0x40>)
 80079a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <std+0x44>)
 80079a8:	6224      	str	r4, [r4, #32]
 80079aa:	6323      	str	r3, [r4, #48]	; 0x30
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	bf00      	nop
 80079b0:	08007cd5 	.word	0x08007cd5
 80079b4:	08007cf7 	.word	0x08007cf7
 80079b8:	08007d2f 	.word	0x08007d2f
 80079bc:	08007d53 	.word	0x08007d53

080079c0 <_cleanup_r>:
 80079c0:	4901      	ldr	r1, [pc, #4]	; (80079c8 <_cleanup_r+0x8>)
 80079c2:	f000 b8af 	b.w	8007b24 <_fwalk_reent>
 80079c6:	bf00      	nop
 80079c8:	08007901 	.word	0x08007901

080079cc <__sfmoreglue>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	2268      	movs	r2, #104	; 0x68
 80079d0:	1e4d      	subs	r5, r1, #1
 80079d2:	4355      	muls	r5, r2
 80079d4:	460e      	mov	r6, r1
 80079d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079da:	f7ff fa43 	bl	8006e64 <_malloc_r>
 80079de:	4604      	mov	r4, r0
 80079e0:	b140      	cbz	r0, 80079f4 <__sfmoreglue+0x28>
 80079e2:	2100      	movs	r1, #0
 80079e4:	e9c0 1600 	strd	r1, r6, [r0]
 80079e8:	300c      	adds	r0, #12
 80079ea:	60a0      	str	r0, [r4, #8]
 80079ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079f0:	f7ff f9c4 	bl	8006d7c <memset>
 80079f4:	4620      	mov	r0, r4
 80079f6:	bd70      	pop	{r4, r5, r6, pc}

080079f8 <__sfp_lock_acquire>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__sfp_lock_acquire+0x8>)
 80079fa:	f000 b8b3 	b.w	8007b64 <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	2001c629 	.word	0x2001c629

08007a04 <__sfp_lock_release>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__sfp_lock_release+0x8>)
 8007a06:	f000 b8ae 	b.w	8007b66 <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	2001c629 	.word	0x2001c629

08007a10 <__sinit_lock_acquire>:
 8007a10:	4801      	ldr	r0, [pc, #4]	; (8007a18 <__sinit_lock_acquire+0x8>)
 8007a12:	f000 b8a7 	b.w	8007b64 <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	2001c62a 	.word	0x2001c62a

08007a1c <__sinit_lock_release>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	; (8007a24 <__sinit_lock_release+0x8>)
 8007a1e:	f000 b8a2 	b.w	8007b66 <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	2001c62a 	.word	0x2001c62a

08007a28 <__sinit>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7ff fff0 	bl	8007a10 <__sinit_lock_acquire>
 8007a30:	69a3      	ldr	r3, [r4, #24]
 8007a32:	b11b      	cbz	r3, 8007a3c <__sinit+0x14>
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f7ff bff0 	b.w	8007a1c <__sinit_lock_release>
 8007a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a40:	6523      	str	r3, [r4, #80]	; 0x50
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <__sinit+0x68>)
 8007a44:	4a13      	ldr	r2, [pc, #76]	; (8007a94 <__sinit+0x6c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	bf04      	itt	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	61a3      	streq	r3, [r4, #24]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f820 	bl	8007a98 <__sfp>
 8007a58:	6060      	str	r0, [r4, #4]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f81c 	bl	8007a98 <__sfp>
 8007a60:	60a0      	str	r0, [r4, #8]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f818 	bl	8007a98 <__sfp>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	60e0      	str	r0, [r4, #12]
 8007a6c:	2104      	movs	r1, #4
 8007a6e:	6860      	ldr	r0, [r4, #4]
 8007a70:	f7ff ff82 	bl	8007978 <std>
 8007a74:	68a0      	ldr	r0, [r4, #8]
 8007a76:	2201      	movs	r2, #1
 8007a78:	2109      	movs	r1, #9
 8007a7a:	f7ff ff7d 	bl	8007978 <std>
 8007a7e:	68e0      	ldr	r0, [r4, #12]
 8007a80:	2202      	movs	r2, #2
 8007a82:	2112      	movs	r1, #18
 8007a84:	f7ff ff78 	bl	8007978 <std>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61a3      	str	r3, [r4, #24]
 8007a8c:	e7d2      	b.n	8007a34 <__sinit+0xc>
 8007a8e:	bf00      	nop
 8007a90:	08008634 	.word	0x08008634
 8007a94:	080079c1 	.word	0x080079c1

08007a98 <__sfp>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	f7ff ffac 	bl	80079f8 <__sfp_lock_acquire>
 8007aa0:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <__sfp+0x84>)
 8007aa2:	681e      	ldr	r6, [r3, #0]
 8007aa4:	69b3      	ldr	r3, [r6, #24]
 8007aa6:	b913      	cbnz	r3, 8007aae <__sfp+0x16>
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ffbd 	bl	8007a28 <__sinit>
 8007aae:	3648      	adds	r6, #72	; 0x48
 8007ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	d503      	bpl.n	8007ac0 <__sfp+0x28>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	b30b      	cbz	r3, 8007b00 <__sfp+0x68>
 8007abc:	6836      	ldr	r6, [r6, #0]
 8007abe:	e7f7      	b.n	8007ab0 <__sfp+0x18>
 8007ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ac4:	b9d5      	cbnz	r5, 8007afc <__sfp+0x64>
 8007ac6:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <__sfp+0x88>)
 8007ac8:	60e3      	str	r3, [r4, #12]
 8007aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ace:	6665      	str	r5, [r4, #100]	; 0x64
 8007ad0:	f000 f847 	bl	8007b62 <__retarget_lock_init_recursive>
 8007ad4:	f7ff ff96 	bl	8007a04 <__sfp_lock_release>
 8007ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	61a5      	str	r5, [r4, #24]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007aec:	f7ff f946 	bl	8006d7c <memset>
 8007af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007af8:	4620      	mov	r0, r4
 8007afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afc:	3468      	adds	r4, #104	; 0x68
 8007afe:	e7d9      	b.n	8007ab4 <__sfp+0x1c>
 8007b00:	2104      	movs	r1, #4
 8007b02:	4638      	mov	r0, r7
 8007b04:	f7ff ff62 	bl	80079cc <__sfmoreglue>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	6030      	str	r0, [r6, #0]
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d1d5      	bne.n	8007abc <__sfp+0x24>
 8007b10:	f7ff ff78 	bl	8007a04 <__sfp_lock_release>
 8007b14:	230c      	movs	r3, #12
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	e7ee      	b.n	8007af8 <__sfp+0x60>
 8007b1a:	bf00      	nop
 8007b1c:	08008634 	.word	0x08008634
 8007b20:	ffff0001 	.word	0xffff0001

08007b24 <_fwalk_reent>:
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b28:	4606      	mov	r6, r0
 8007b2a:	4688      	mov	r8, r1
 8007b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b30:	2700      	movs	r7, #0
 8007b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b36:	f1b9 0901 	subs.w	r9, r9, #1
 8007b3a:	d505      	bpl.n	8007b48 <_fwalk_reent+0x24>
 8007b3c:	6824      	ldr	r4, [r4, #0]
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	d1f7      	bne.n	8007b32 <_fwalk_reent+0xe>
 8007b42:	4638      	mov	r0, r7
 8007b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b48:	89ab      	ldrh	r3, [r5, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d907      	bls.n	8007b5e <_fwalk_reent+0x3a>
 8007b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b52:	3301      	adds	r3, #1
 8007b54:	d003      	beq.n	8007b5e <_fwalk_reent+0x3a>
 8007b56:	4629      	mov	r1, r5
 8007b58:	4630      	mov	r0, r6
 8007b5a:	47c0      	blx	r8
 8007b5c:	4307      	orrs	r7, r0
 8007b5e:	3568      	adds	r5, #104	; 0x68
 8007b60:	e7e9      	b.n	8007b36 <_fwalk_reent+0x12>

08007b62 <__retarget_lock_init_recursive>:
 8007b62:	4770      	bx	lr

08007b64 <__retarget_lock_acquire_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <__retarget_lock_release_recursive>:
 8007b66:	4770      	bx	lr

08007b68 <__swhatbuf_r>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	460e      	mov	r6, r1
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	2900      	cmp	r1, #0
 8007b72:	b096      	sub	sp, #88	; 0x58
 8007b74:	4614      	mov	r4, r2
 8007b76:	461d      	mov	r5, r3
 8007b78:	da08      	bge.n	8007b8c <__swhatbuf_r+0x24>
 8007b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	061a      	lsls	r2, r3, #24
 8007b84:	d410      	bmi.n	8007ba8 <__swhatbuf_r+0x40>
 8007b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8a:	e00e      	b.n	8007baa <__swhatbuf_r+0x42>
 8007b8c:	466a      	mov	r2, sp
 8007b8e:	f000 f907 	bl	8007da0 <_fstat_r>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	dbf1      	blt.n	8007b7a <__swhatbuf_r+0x12>
 8007b96:	9a01      	ldr	r2, [sp, #4]
 8007b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ba0:	425a      	negs	r2, r3
 8007ba2:	415a      	adcs	r2, r3
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	e7ee      	b.n	8007b86 <__swhatbuf_r+0x1e>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	2000      	movs	r0, #0
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	b016      	add	sp, #88	; 0x58
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bb4 <__smakebuf_r>:
 8007bb4:	898b      	ldrh	r3, [r1, #12]
 8007bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bb8:	079d      	lsls	r5, r3, #30
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	d507      	bpl.n	8007bd0 <__smakebuf_r+0x1c>
 8007bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	6163      	str	r3, [r4, #20]
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	ab01      	add	r3, sp, #4
 8007bd2:	466a      	mov	r2, sp
 8007bd4:	f7ff ffc8 	bl	8007b68 <__swhatbuf_r>
 8007bd8:	9900      	ldr	r1, [sp, #0]
 8007bda:	4605      	mov	r5, r0
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7ff f941 	bl	8006e64 <_malloc_r>
 8007be2:	b948      	cbnz	r0, 8007bf8 <__smakebuf_r+0x44>
 8007be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be8:	059a      	lsls	r2, r3, #22
 8007bea:	d4ef      	bmi.n	8007bcc <__smakebuf_r+0x18>
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	e7e3      	b.n	8007bc0 <__smakebuf_r+0xc>
 8007bf8:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <__smakebuf_r+0x7c>)
 8007bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	6120      	str	r0, [r4, #16]
 8007c0e:	b15b      	cbz	r3, 8007c28 <__smakebuf_r+0x74>
 8007c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c14:	4630      	mov	r0, r6
 8007c16:	f000 f8d5 	bl	8007dc4 <_isatty_r>
 8007c1a:	b128      	cbz	r0, 8007c28 <__smakebuf_r+0x74>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	89a0      	ldrh	r0, [r4, #12]
 8007c2a:	4305      	orrs	r5, r0
 8007c2c:	81a5      	strh	r5, [r4, #12]
 8007c2e:	e7cd      	b.n	8007bcc <__smakebuf_r+0x18>
 8007c30:	080079c1 	.word	0x080079c1

08007c34 <__malloc_lock>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__malloc_lock+0x8>)
 8007c36:	f7ff bf95 	b.w	8007b64 <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	2001c628 	.word	0x2001c628

08007c40 <__malloc_unlock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__malloc_unlock+0x8>)
 8007c42:	f7ff bf90 	b.w	8007b66 <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	2001c628 	.word	0x2001c628

08007c4c <_raise_r>:
 8007c4c:	291f      	cmp	r1, #31
 8007c4e:	b538      	push	{r3, r4, r5, lr}
 8007c50:	4604      	mov	r4, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	d904      	bls.n	8007c60 <_raise_r+0x14>
 8007c56:	2316      	movs	r3, #22
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c62:	b112      	cbz	r2, 8007c6a <_raise_r+0x1e>
 8007c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c68:	b94b      	cbnz	r3, 8007c7e <_raise_r+0x32>
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 f830 	bl	8007cd0 <_getpid_r>
 8007c70:	462a      	mov	r2, r5
 8007c72:	4601      	mov	r1, r0
 8007c74:	4620      	mov	r0, r4
 8007c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7a:	f000 b817 	b.w	8007cac <_kill_r>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d00a      	beq.n	8007c98 <_raise_r+0x4c>
 8007c82:	1c59      	adds	r1, r3, #1
 8007c84:	d103      	bne.n	8007c8e <_raise_r+0x42>
 8007c86:	2316      	movs	r3, #22
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e7e7      	b.n	8007c5e <_raise_r+0x12>
 8007c8e:	2400      	movs	r4, #0
 8007c90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c94:	4628      	mov	r0, r5
 8007c96:	4798      	blx	r3
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7e0      	b.n	8007c5e <_raise_r+0x12>

08007c9c <raise>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <raise+0xc>)
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f7ff bfd3 	b.w	8007c4c <_raise_r>
 8007ca6:	bf00      	nop
 8007ca8:	20000030 	.word	0x20000030

08007cac <_kill_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	; (8007ccc <_kill_r+0x20>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	f7fa fb2b 	bl	8002314 <_kill>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d102      	bne.n	8007cc8 <_kill_r+0x1c>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	b103      	cbz	r3, 8007cc8 <_kill_r+0x1c>
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	2001c62c 	.word	0x2001c62c

08007cd0 <_getpid_r>:
 8007cd0:	f7fa bb18 	b.w	8002304 <_getpid>

08007cd4 <__sread>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cdc:	f000 f894 	bl	8007e08 <_read_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	bfab      	itete	ge
 8007ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ce8:	181b      	addge	r3, r3, r0
 8007cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cee:	bfac      	ite	ge
 8007cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cf2:	81a3      	strhlt	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__swrite>:
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	898b      	ldrh	r3, [r1, #12]
 8007cfe:	05db      	lsls	r3, r3, #23
 8007d00:	4605      	mov	r5, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4616      	mov	r6, r2
 8007d06:	d505      	bpl.n	8007d14 <__swrite+0x1e>
 8007d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f000 f868 	bl	8007de4 <_lseek_r>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	4632      	mov	r2, r6
 8007d22:	463b      	mov	r3, r7
 8007d24:	4628      	mov	r0, r5
 8007d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2a:	f000 b817 	b.w	8007d5c <_write_r>

08007d2e <__sseek>:
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	460c      	mov	r4, r1
 8007d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d36:	f000 f855 	bl	8007de4 <_lseek_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	bf15      	itete	ne
 8007d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d4a:	81a3      	strheq	r3, [r4, #12]
 8007d4c:	bf18      	it	ne
 8007d4e:	81a3      	strhne	r3, [r4, #12]
 8007d50:	bd10      	pop	{r4, pc}

08007d52 <__sclose>:
 8007d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d56:	f000 b813 	b.w	8007d80 <_close_r>
	...

08007d5c <_write_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_write_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f8 fdae 	bl	80008cc <_write>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_write_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_write_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	2001c62c 	.word	0x2001c62c

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	; (8007d9c <_close_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7fa faf9 	bl	8002382 <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2001c62c 	.word	0x2001c62c

08007da0 <_fstat_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	; (8007dc0 <_fstat_r+0x20>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f7fa faf4 	bl	800239a <_fstat>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d102      	bne.n	8007dbc <_fstat_r+0x1c>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	b103      	cbz	r3, 8007dbc <_fstat_r+0x1c>
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2001c62c 	.word	0x2001c62c

08007dc4 <_isatty_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d06      	ldr	r5, [pc, #24]	; (8007de0 <_isatty_r+0x1c>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7fa faf3 	bl	80023ba <_isatty>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_isatty_r+0x1a>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_isatty_r+0x1a>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	2001c62c 	.word	0x2001c62c

08007de4 <_lseek_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_lseek_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7fa faec 	bl	80023d0 <_lseek>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_lseek_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_lseek_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	2001c62c 	.word	0x2001c62c

08007e08 <_read_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_read_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7fa fa96 	bl	8002348 <_read>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_read_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_read_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2001c62c 	.word	0x2001c62c

08007e2c <_init>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr

08007e38 <_fini>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr
