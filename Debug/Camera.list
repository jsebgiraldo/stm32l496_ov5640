
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08011774  08011774  00021774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012650  08012650  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  08012650  08012650  00022650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012658  08012658  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012658  08012658  00022658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801265c  0801265c  0002265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08012660  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fb1c  20000114  08012774  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001fc30  08012774  0003fc30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260eb  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f22  00000000  00000000  0005622f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0005b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d30  00000000  00000000  0005d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310ba  00000000  00000000  0005edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024890  00000000  00000000  0008feaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114cad  00000000  00000000  000b473a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c93e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b94  00000000  00000000  001c9438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000114 	.word	0x20000114
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801175c 	.word	0x0801175c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000118 	.word	0x20000118
 80001ec:	0801175c 	.word	0x0801175c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f010 f815 	bl	80105d8 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08011774 	.word	0x08011774
 800060c:	08011af8 	.word	0x08011af8
 8000610:	08011778 	.word	0x08011778

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f00f ffd5 	bl	80105d8 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08011774 	.word	0x08011774
 8000658:	08011b0c 	.word	0x08011b0c
 800065c:	08011778 	.word	0x08011778

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f00f ffaf 	bl	80105d8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08011774 	.word	0x08011774
 80006a4:	08011b20 	.word	0x08011b20
 80006a8:	08011778 	.word	0x08011778

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f00f ff85 	bl	80105d8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f00f ffdc 	bl	801068c <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f00f ff77 	bl	80105d8 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f00f ff62 	bl	80105d8 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0801179c 	.word	0x0801179c
 8000724:	08011b38 	.word	0x08011b38
 8000728:	08011778 	.word	0x08011778
 800072c:	08011774 	.word	0x08011774
 8000730:	080117ac 	.word	0x080117ac

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f00f ff45 	bl	80105d8 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08011774 	.word	0x08011774
 800076c:	08011b4c 	.word	0x08011b4c
 8000770:	08011778 	.word	0x08011778

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f00f ff1f 	bl	80105d8 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080117c8 	.word	0x080117c8
 80007bc:	08011b60 	.word	0x08011b60
 80007c0:	08011778 	.word	0x08011778

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f00f fef5 	bl	80105d8 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080117dc 	.word	0x080117dc
 800082c:	08011b70 	.word	0x08011b70
 8000830:	08011778 	.word	0x08011778

08000834 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd1 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d10e      	bne.n	800086e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ffc9 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d806      	bhi.n	800086e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <mfxstm32l152_Init+0x58>)
 8000868:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800086a:	f001 faa3 	bl	8001db4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8db 	bl	8000a2e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8fc 	bl	8000a7a <mfxstm32l152_SetIrqOutPinType>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000130 	.word	0x20000130

08000890 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffc3 	bl	8001828 <mfxstm32l152_ReleaseInstance>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d001      	beq.n	80008b0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80008ac:	f001 fa92 	bl	8001dd4 <MFX_IO_DeInit>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fb25 	bl	8001f18 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 fb64 	bl	8001f9c <MFX_IO_Delay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fb13 	bl	8001f18 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80008f2:	f001 fad9 	bl	8001ea8 <MFX_IO_EnableWakeupPin>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff6c 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d101      	bne.n	800091e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800091a:	f001 fac5 	bl	8001ea8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800091e:	f001 fae7 	bl	8001ef0 <MFX_IO_Wakeup>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fb31 	bl	8001f9c <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800093a:	f001 fa3b 	bl	8001db4 <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fafc 	bl	8001f40 <MFX_IO_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	b29b      	uxth	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2142      	movs	r1, #66	; 0x42
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fae5 	bl	8001f40 <MFX_IO_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2142      	movs	r1, #66	; 0x42
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fac5 	bl	8001f18 <MFX_IO_Write>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2142      	movs	r1, #66	; 0x42
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fac6 	bl	8001f40 <MFX_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80009b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2142      	movs	r1, #66	; 0x42
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 faa1 	bl	8001f18 <MFX_IO_Write>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2108      	movs	r1, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 faa4 	bl	8001f40 <MFX_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2144      	movs	r1, #68	; 0x44
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fa79 	bl	8001f18 <MFX_IO_Write>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2141      	movs	r1, #65	; 0x41
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fa7a 	bl	8001f40 <MFX_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2141      	movs	r1, #65	; 0x41
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fa56 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fa95 	bl	8001f9c <MFX_IO_Delay>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	460a      	mov	r2, r1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2141      	movs	r1, #65	; 0x41
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa54 	bl	8001f40 <MFX_IO_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2141      	movs	r1, #65	; 0x41
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa30 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 fa6f 	bl	8001f9c <MFX_IO_Delay>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fa32 	bl	8001f40 <MFX_IO_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d304      	bcc.n	8000afa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e003      	b.n	8000b02 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fa05 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fa44 	bl	8001f9c <MFX_IO_Delay>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	f200 82d4 	bhi.w	80010e0 <mfxstm32l152_IO_Config+0x5c4>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <mfxstm32l152_IO_Config+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000c61 	.word	0x08000c61
 8000b48:	08000d21 	.word	0x08000d21
 8000b4c:	08000e11 	.word	0x08000e11
 8000b50:	08000f01 	.word	0x08000f01
 8000b54:	08000ff1 	.word	0x08000ff1
 8000b58:	08000ba1 	.word	0x08000ba1
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000c31 	.word	0x08000c31
 8000b68:	080010e1 	.word	0x080010e1
 8000b6c:	08000cf1 	.word	0x08000cf1
 8000b70:	08000cc1 	.word	0x08000cc1
 8000b74:	080010e1 	.word	0x080010e1
 8000b78:	08000c91 	.word	0x08000c91
 8000b7c:	08000c61 	.word	0x08000c61
 8000b80:	08000d71 	.word	0x08000d71
 8000b84:	08000dc1 	.word	0x08000dc1
 8000b88:	08000e61 	.word	0x08000e61
 8000b8c:	08000eb1 	.word	0x08000eb1
 8000b90:	08000f51 	.word	0x08000f51
 8000b94:	08000fa1 	.word	0x08000fa1
 8000b98:	08001041 	.word	0x08001041
 8000b9c:	08001091 	.word	0x08001091
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fb67 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2200      	movs	r2, #0
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa9d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f000 fe57 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2168      	movs	r1, #104	; 0x68
 8000bca:	f000 fe51 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bce:	e28a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb4f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa85 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	2300      	movs	r3, #0
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	f000 fe3f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	2168      	movs	r1, #104	; 0x68
 8000bfa:	f000 fe39 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bfe:	e272      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb37 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa6d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	f000 fe27 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	2301      	movs	r3, #1
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	2168      	movs	r1, #104	; 0x68
 8000c2a:	f000 fe21 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c2e:	e25a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fb1f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa55 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	f000 fe0f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c52:	88f8      	ldrh	r0, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	f000 fe09 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c5e:	e242      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb07 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa3d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f000 fdf7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c82:	88f8      	ldrh	r0, [r7, #6]
 8000c84:	2300      	movs	r3, #0
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	2168      	movs	r1, #104	; 0x68
 8000c8a:	f000 fdf1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c8e:	e22a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 faef 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa25 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f000 fddf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2168      	movs	r1, #104	; 0x68
 8000cba:	f000 fdd9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cbe:	e212      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fad7 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa0d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f000 fdc7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	2168      	movs	r1, #104	; 0x68
 8000cea:	f000 fdc1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cee:	e1fa      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fabf 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9f5 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	f000 fdaf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	2301      	movs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	2168      	movs	r1, #104	; 0x68
 8000d1a:	f000 fda9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000d1e:	e1e2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa7a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9de 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	2300      	movs	r3, #0
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f000 fd98 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	2301      	movs	r3, #1
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	2168      	movs	r1, #104	; 0x68
 8000d48:	f000 fd92 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9de 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ed 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d6e:	e1ba      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa52 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9b6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	f000 fd70 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	2168      	movs	r1, #104	; 0x68
 8000d98:	f000 fd6a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f9b6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2201      	movs	r2, #1
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9c5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa4d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000dbe:	e192      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa2a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f98e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd4:	88f8      	ldrh	r0, [r7, #6]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	f000 fd48 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	2300      	movs	r3, #0
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2168      	movs	r1, #104	; 0x68
 8000de8:	f000 fd42 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f98e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f99d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa25 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e0e:	e16a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa02 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f966 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	2300      	movs	r3, #0
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2164      	movs	r1, #100	; 0x64
 8000e2c:	f000 fd20 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e30:	88f8      	ldrh	r0, [r7, #6]
 8000e32:	2301      	movs	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	2168      	movs	r1, #104	; 0x68
 8000e38:	f000 fd1a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f966 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f975 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f9fd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e5e:	e142      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9da 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e74:	88f8      	ldrh	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2164      	movs	r1, #100	; 0x64
 8000e7c:	f000 fcf8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	2301      	movs	r3, #1
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	2168      	movs	r1, #104	; 0x68
 8000e88:	f000 fcf2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f94d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9d5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000eae:	e11a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f916 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	f000 fcd0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	2168      	movs	r1, #104	; 0x68
 8000ed8:	f000 fcca 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f916 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2200      	movs	r2, #0
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f925 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9ad 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000efe:	e0f2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f8ee 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2164      	movs	r1, #100	; 0x64
 8000f1c:	f000 fca8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	2301      	movs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	2168      	movs	r1, #104	; 0x68
 8000f28:	f000 fca2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ee 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8fd 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f985 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f4e:	e0ca      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f962 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8c6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	2301      	movs	r3, #1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	f000 fc80 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	2301      	movs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	2168      	movs	r1, #104	; 0x68
 8000f78:	f000 fc7a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8c6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8d5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f95d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f9e:	e0a2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2200      	movs	r2, #0
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f000 fc58 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	2168      	movs	r1, #104	; 0x68
 8000fc8:	f000 fc52 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f89e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8ad 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f935 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000fee:	e07a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f912 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f876 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	f000 fc30 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	2301      	movs	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	2168      	movs	r1, #104	; 0x68
 8001018:	f000 fc2a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f876 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f885 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f90d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800103e:	e052      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8ea 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f84e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	2301      	movs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	f000 fc08 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001060:	88f8      	ldrh	r0, [r7, #6]
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	2168      	movs	r1, #104	; 0x68
 8001068:	f000 fc02 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f84e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f85d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8e5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800108e:	e02a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8c2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f826 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	2301      	movs	r3, #1
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	f000 fbe0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010b0:	88f8      	ldrh	r0, [r7, #6]
 80010b2:	2300      	movs	r3, #0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	2168      	movs	r1, #104	; 0x68
 80010b8:	f000 fbda 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	2200      	movs	r2, #0
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f826 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f835 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8bd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 80010de:	e002      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	bf00      	nop
  }

  return error_code;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4613      	mov	r3, r2
 80010fe:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	f000 fbb2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	214c      	movs	r1, #76	; 0x4c
 800112c:	f000 fba0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 ff33 	bl	8001f9c <MFX_IO_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	f000 fb8b 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 ff1e 	bl	8001f9c <MFX_IO_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	2301      	movs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	216c      	movs	r1, #108	; 0x6c
 8001186:	f000 fb73 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800118a:	e005      	b.n	8001198 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800118c:	88f8      	ldrh	r0, [r7, #6]
 800118e:	2301      	movs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	f000 fb6c 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	2110      	movs	r1, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 febb 	bl	8001f40 <MFX_IO_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2111      	movs	r1, #17
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 feaf 	bl	8001f40 <MFX_IO_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2112      	movs	r1, #18
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fea3 	bl	8001f40 <MFX_IO_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4013      	ands	r3, r2
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001226:	f000 fe11 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb92 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fba3 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2148      	movs	r1, #72	; 0x48
 800126c:	f000 fb00 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	2300      	movs	r3, #0
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2148      	movs	r1, #72	; 0x48
 800128c:	f000 faf0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	210c      	movs	r1, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fe3f 	bl	8001f40 <MFX_IO_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	210d      	movs	r1, #13
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fe31 	bl	8001f40 <MFX_IO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	210e      	movs	r1, #14
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fe25 	bl	8001f40 <MFX_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4013      	ands	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2154      	movs	r1, #84	; 0x54
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fde8 	bl	8001f18 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2155      	movs	r1, #85	; 0x55
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fddf 	bl	8001f18 <MFX_IO_Write>
  }
  if (pin_16_23)
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2156      	movs	r1, #86	; 0x56
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fdd6 	bl	8001f18 <MFX_IO_Write>
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fdd8 	bl	8001f40 <MFX_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fdb6 	bl	8001f18 <MFX_IO_Write>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fdb0 	bl	8001f40 <MFX_IO_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd89 	bl	8001f18 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001406:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030e 	and.w	r3, r3, #14
 8001412:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd64 	bl	8001f18 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800145a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800145c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001466:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2181      	movs	r1, #129	; 0x81
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd4d 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800147e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2182      	movs	r1, #130	; 0x82
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fd41 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	2183      	movs	r1, #131	; 0x83
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fd37 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80014aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	2184      	movs	r1, #132	; 0x84
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd2b 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	2185      	movs	r1, #133	; 0x85
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fd21 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80014d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2186      	movs	r1, #134	; 0x86
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fd15 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80014ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2187      	movs	r1, #135	; 0x87
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fd0b 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	2188      	movs	r1, #136	; 0x88
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fcff 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2189      	movs	r1, #137	; 0x89
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcf5 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800152e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	218a      	movs	r1, #138	; 0x8a
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fce9 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001548:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	218b      	movs	r1, #139	; 0x8b
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fcdf 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800155a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800155c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	2190      	movs	r1, #144	; 0x90
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fcd5 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800156e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001570:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	2191      	movs	r1, #145	; 0x91
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fccb 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	2192      	movs	r1, #146	; 0x92
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fcc1 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001598:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2193      	movs	r1, #147	; 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fcb7 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80015aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fcad 	bl	8001f18 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	218c      	movs	r1, #140	; 0x8c
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fca1 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	218d      	movs	r1, #141	; 0x8d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fc97 	bl	8001f18 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	218e      	movs	r1, #142	; 0x8e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fc8b 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	218f      	movs	r1, #143	; 0x8f
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fc81 	bl	8001f18 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001616:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800161a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	2196      	movs	r1, #150	; 0x96
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fc76 	bl	8001f18 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800162c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001636:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001638:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	2197      	movs	r1, #151	; 0x97
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fc5f 	bl	8001f18 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	2198      	movs	r1, #152	; 0x98
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fc54 	bl	8001f18 <MFX_IO_Write>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2303      	movs	r3, #3
 8001696:	2114      	movs	r1, #20
 8001698:	f000 fc66 	bl	8001f68 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016c2:	f000 fbc3 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f944 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f98f 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f96b 	bl	80009de <mfxstm32l152_GlobalITStatus>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f938 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fbfd 	bl	8001f40 <MFX_IO_Read>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fbec 	bl	8001f40 <MFX_IO_Read>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800177c:	f000 fb66 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f932 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f90e 	bl	80009de <mfxstm32l152_GlobalITStatus>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8db 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e00b      	b.n	8001810 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mfxstm32l152_GetInstance+0x3c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9f0      	bls.n	80017f8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001816:	23ff      	movs	r3, #255	; 0xff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000130 	.word	0x20000130

08001828 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00f      	b.n	8001858 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d105      	bne.n	8001852 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800184a:	2100      	movs	r1, #0
 800184c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d9ec      	bls.n	8001838 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000130 	.word	0x20000130

08001870 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	717b      	strb	r3, [r7, #5]
 8001882:	4613      	mov	r3, r2
 8001884:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80018a0:	797a      	ldrb	r2, [r7, #5]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb4a 	bl	8001f40 <MFX_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e008      	b.n	80018d2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80018c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fb1d 	bl	8001f18 <MFX_IO_Write>
  }

  if (pin_8_15)
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fb26 	bl	8001f40 <MFX_IO_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	4313      	orrs	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e008      	b.n	800191a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	3301      	adds	r3, #1
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 faf7 	bl	8001f18 <MFX_IO_Write>
  }

  if (pin_16_23)
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3302      	adds	r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb00 	bl	8001f40 <MFX_IO_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e008      	b.n	8001966 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	b25a      	sxtb	r2, r3
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4013      	ands	r3, r2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	3302      	adds	r3, #2
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fad1 	bl	8001f18 <MFX_IO_Write>
  }
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  while (1);
 8001982:	e7fe      	b.n	8001982 <BSP_ErrorHandler+0x4>

08001984 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d109      	bne.n	80019a8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <BSP_LED_On+0x3c>)
 8001998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <BSP_LED_On+0x40>)
 80019a2:	f004 fcc9 	bl	8006338 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80019a6:	e007      	b.n	80019b8 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <BSP_LED_On+0x3c>)
 80019ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd38 	bl	8002428 <BSP_IO_WritePin>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08011b80 	.word	0x08011b80
 80019c4:	48000400 	.word	0x48000400

080019c8 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d109      	bne.n	80019ec <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <BSP_LED_Off+0x3c>)
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <BSP_LED_Off+0x40>)
 80019e6:	f004 fca7 	bl	8006338 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 80019ea:	e007      	b.n	80019fc <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <BSP_LED_Off+0x3c>)
 80019f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fd16 	bl	8002428 <BSP_IO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	08011b80 	.word	0x08011b80
 8001a08:	48000400 	.word	0x48000400

08001a0c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <I2C2_Init+0x50>)
 8001a12:	f005 f8c8 	bl	8006ba6 <HAL_I2C_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11d      	bne.n	8001a58 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <I2C2_Init+0x50>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <I2C2_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <I2C2_Init+0x50>)
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <I2C2_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <I2C2_Init+0x50>)
 8001a2a:	2270      	movs	r2, #112	; 0x70
 8001a2c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <I2C2_Init+0x50>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <I2C2_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <I2C2_Init+0x50>)
 8001a3c:	22ff      	movs	r2, #255	; 0xff
 8001a3e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <I2C2_Init+0x50>)
 8001a4e:	f000 f80b 	bl	8001a68 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8001a52:	4802      	ldr	r0, [pc, #8]	; (8001a5c <I2C2_Init+0x50>)
 8001a54:	f004 fca0 	bl	8006398 <HAL_I2C_Init>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000134 	.word	0x20000134
 8001a60:	40005800 	.word	0x40005800
 8001a64:	40403e5d 	.word	0x40403e5d

08001a68 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0ae      	sub	sp, #184	; 0xb8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <I2C2_MspInit+0xec>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d168      	bne.n	8001b4c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 fa27 	bl	8007edc <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481e      	ldr	r0, [pc, #120]	; (8001b5c <I2C2_MspInit+0xf4>)
 8001ae4:	f004 f9a4 	bl	8005e30 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af4:	4619      	mov	r1, r3
 8001af6:	481a      	ldr	r0, [pc, #104]	; (8001b60 <I2C2_MspInit+0xf8>)
 8001af8:	f004 f99a 	bl	8005e30 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b26:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2021      	movs	r0, #33	; 0x21
 8001b32:	f003 f95e 	bl	8004df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001b36:	2021      	movs	r0, #33	; 0x21
 8001b38:	f003 f977 	bl	8004e2a <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	f003 f956 	bl	8004df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001b46:	2022      	movs	r0, #34	; 0x22
 8001b48:	f003 f96f 	bl	8004e2a <HAL_NVIC_EnableIRQ>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	37b8      	adds	r7, #184	; 0xb8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40005800 	.word	0x40005800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48001c00 	.word	0x48001c00
 8001b60:	48000400 	.word	0x48000400

08001b64 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b6a:	f005 f81c 	bl	8006ba6 <HAL_I2C_GetState>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b76:	f004 fc9e 	bl	80064b6 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b7c:	f000 f804 	bl	8001b88 <I2C2_MspDeInit>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000134 	.word	0x20000134

08001b88 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <I2C2_MspDeInit+0x8c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d138      	bne.n	8001c0c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001bca:	2110      	movs	r1, #16
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <I2C2_MspDeInit+0x94>)
 8001bce:	f004 fac1 	bl	8006154 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8001bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <I2C2_MspDeInit+0x98>)
 8001bd8:	f004 fabc 	bl	8006154 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bfa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001c00:	2021      	movs	r0, #33	; 0x21
 8001c02:	f003 f920 	bl	8004e46 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001c06:	2022      	movs	r0, #34	; 0x22
 8001c08:	f003 f91d 	bl	8004e46 <HAL_NVIC_DisableIRQ>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005800 	.word	0x40005800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48001c00 	.word	0x48001c00
 8001c20:	48000400 	.word	0x48000400

08001c24 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	4603      	mov	r3, r0
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c46:	b672      	cpsid	i
}
 8001c48:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <I2C2_WriteData+0x5c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	8878      	ldrh	r0, [r7, #2]
 8001c50:	88ba      	ldrh	r2, [r7, #4]
 8001c52:	88f9      	ldrh	r1, [r7, #6]
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	1c7b      	adds	r3, r7, #1
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <I2C2_WriteData+0x60>)
 8001c62:	f004 fc6b 	bl	800653c <HAL_I2C_Mem_Write>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6a:	b662      	cpsie	i
}
 8001c6c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001c74:	f000 f890 	bl	8001d98 <I2C2_Error>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	20000078 	.word	0x20000078
 8001c84:	20000134 	.word	0x20000134

08001c88 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca2:	b672      	cpsid	i
}
 8001ca4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <I2C2_ReadData+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	8878      	ldrh	r0, [r7, #2]
 8001cac:	88ba      	ldrh	r2, [r7, #4]
 8001cae:	88f9      	ldrh	r1, [r7, #6]
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 030e 	add.w	r3, r7, #14
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <I2C2_ReadData+0x64>)
 8001cc0:	f004 fd50 	bl	8006764 <HAL_I2C_Mem_Read>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cc8:	b662      	cpsie	i
}
 8001cca:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001cd2:	f000 f861 	bl	8001d98 <I2C2_Error>
    HAL_Delay(200);
 8001cd6:	20c8      	movs	r0, #200	; 0xc8
 8001cd8:	f002 ff68 	bl	8004bac <HAL_Delay>
  }

  return value;
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000078 	.word	0x20000078
 8001cec:	20000134 	.word	0x20000134

08001cf0 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8001d08:	88f9      	ldrh	r1, [r7, #6]
 8001d0a:	2332      	movs	r3, #50	; 0x32
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	480a      	ldr	r0, [pc, #40]	; (8001d38 <I2C2_isDeviceReady+0x48>)
 8001d10:	f004 fe42 	bl	8006998 <HAL_I2C_IsDeviceReady>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d18:	b662      	cpsie	i
}
 8001d1a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001d22:	f000 f839 	bl	8001d98 <I2C2_Error>
    HAL_Delay(200);
 8001d26:	20c8      	movs	r0, #200	; 0xc8
 8001d28:	f002 ff40 	bl	8004bac <HAL_Delay>
  }

  return value;
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000134 	.word	0x20000134

08001d3c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4603      	mov	r3, r0
 8001d46:	81fb      	strh	r3, [r7, #14]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	81bb      	strh	r3, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <I2C2_ReadBuffer+0x54>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	8978      	ldrh	r0, [r7, #10]
 8001d5e:	89ba      	ldrh	r2, [r7, #12]
 8001d60:	89f9      	ldrh	r1, [r7, #14]
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	8c3b      	ldrh	r3, [r7, #32]
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <I2C2_ReadBuffer+0x58>)
 8001d70:	f004 fcf8 	bl	8006764 <HAL_I2C_Mem_Read>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d78:	b662      	cpsie	i
}
 8001d7a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001d82:	f000 f809 	bl	8001d98 <I2C2_Error>
  }

  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000078 	.word	0x20000078
 8001d94:	20000134 	.word	0x20000134

08001d98 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8001d9c:	f7ff fdef 	bl	800197e <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <I2C2_Error+0x18>)
 8001da2:	f004 fb88 	bl	80064b6 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8001da6:	f7ff fe31 	bl	8001a0c <I2C2_Init>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000134 	.word	0x20000134

08001db4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8001db8:	f7ff fe28 	bl	8001a0c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	2084      	movs	r0, #132	; 0x84
 8001dc0:	f7ff ff96 	bl	8001cf0 <I2C2_isDeviceReady>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8001dca:	f7ff fdd8 	bl	800197e <BSP_ErrorHandler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001df2:	2340      	movs	r3, #64	; 0x40
 8001df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4619      	mov	r1, r3
 8001e08:	480e      	ldr	r0, [pc, #56]	; (8001e44 <MFX_IO_DeInit+0x70>)
 8001e0a:	f004 f811 	bl	8005e30 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8001e0e:	2017      	movs	r0, #23
 8001e10:	f003 f819 	bl	8004e46 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MFX_IO_DeInit+0x74>)
 8001e30:	f004 f990 	bl	8006154 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8001e34:	f7ff fe96 	bl	8001b64 <I2C2_DeInit>
}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48001c00 	.word	0x48001c00
 8001e48:	48000800 	.word	0x48000800

08001e4c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8001e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MFX_IO_ITConfig+0x58>)
 8001e82:	f003 ffd5 	bl	8005e30 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8001e86:	220f      	movs	r2, #15
 8001e88:	210f      	movs	r1, #15
 8001e8a:	2017      	movs	r0, #23
 8001e8c:	f002 ffb1 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8001e90:	2017      	movs	r0, #23
 8001e92:	f002 ffca 	bl	8004e2a <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000800 	.word	0x48000800

08001ea8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <MFX_IO_EnableWakeupPin+0x44>)
 8001edc:	f003 ffa8 	bl	8005e30 <HAL_GPIO_Init>
}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48001c00 	.word	0x48001c00

08001ef0 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MFX_IO_Wakeup+0x24>)
 8001efa:	f004 fa1d 	bl	8006338 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f002 fe54 	bl	8004bac <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <MFX_IO_Wakeup+0x24>)
 8001f0a:	f004 fa15 	bl	8006338 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	48001c00 	.word	0x48001c00

08001f18 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
 8001f22:	460b      	mov	r3, r1
 8001f24:	717b      	strb	r3, [r7, #5]
 8001f26:	4613      	mov	r3, r2
 8001f28:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	793b      	ldrb	r3, [r7, #4]
 8001f30:	88f8      	ldrh	r0, [r7, #6]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f7ff fe76 	bl	8001c24 <I2C2_WriteData>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	80fb      	strh	r3, [r7, #6]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe95 	bl	8001c88 <I2C2_ReadData>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	81fb      	strh	r3, [r7, #14]
 8001f76:	460b      	mov	r3, r1
 8001f78:	737b      	strb	r3, [r7, #13]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f7e:	7b7b      	ldrb	r3, [r7, #13]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	89f8      	ldrh	r0, [r7, #14]
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f7ff fed6 	bl	8001d3c <I2C2_ReadBuffer>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f002 fe01 	bl	8004bac <HAL_Delay>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OV5640_IO_t              IOCtx;
	static OV5640_Object_t   OV5640Obj;

	/* Configure the audio driver */
	IOCtx.Address     = 0x78U; //# CAMERA_OV5640_ADDRESS
 8001fc2:	2378      	movs	r3, #120	; 0x78
 8001fc4:	833b      	strh	r3, [r7, #24]
	IOCtx.Init        = I2C2_Init;
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <BSP_CAMERA_Init+0x14c>)
 8001fc8:	613b      	str	r3, [r7, #16]
	IOCtx.DeInit      = I2C2_DeInit;
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <BSP_CAMERA_Init+0x150>)
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Get the DCMI handle structure */
  phdcmi = &hdcmi;
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <BSP_CAMERA_Init+0x154>)
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize the IO functionalities */
  BSP_IO_Init();
 8001fd2:	f000 f9c9 	bl	8002368 <BSP_IO_Init>


  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	609a      	str	r2, [r3, #8]
  phdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  phdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  phdcmi->Init.JPEGMode			= DCMI_JPEG_ENABLE;
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	2208      	movs	r2, #8
 800200a:	621a      	str	r2, [r3, #32]
  phdcmi->Instance              = DCMI;
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <BSP_CAMERA_Init+0x158>)
 8002010:	601a      	str	r2, [r3, #0]

  /* Camera initialization */
  BSP_CAMERA_MspInit(&hdcmi, NULL);
 8002012:	2100      	movs	r1, #0
 8002014:	483c      	ldr	r0, [pc, #240]	; (8002108 <BSP_CAMERA_Init+0x154>)
 8002016:	f000 f899 	bl	800214c <BSP_CAMERA_MspInit>

  uint32_t CameraId;
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	483b      	ldr	r0, [pc, #236]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 8002022:	f001 fba9 	bl	8003778 <OV5640_RegisterBusIO>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <BSP_CAMERA_Init+0x7e>
  {
	  printf("OV5640_RegisterBusIO ERROR!\r\n");
 800202c:	4839      	ldr	r0, [pc, #228]	; (8002114 <BSP_CAMERA_Init+0x160>)
 800202e:	f00e ff99 	bl	8010f64 <puts>
  }
  /* Read ID of Camera module via I2C */
  if (OV5640_ReadID(&OV5640Obj, &CameraId) == OV5640_ID)
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4835      	ldr	r0, [pc, #212]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 800203a:	f001 fe5d 	bl	8003cf8 <OV5640_ReadID>
 800203e:	4603      	mov	r3, r0
 8002040:	f245 6240 	movw	r2, #22080	; 0x5640
 8002044:	4293      	cmp	r3, r2
 8002046:	d151      	bne.n	80020ec <BSP_CAMERA_Init+0x138>
  {
    /* Initialize the camera driver structure */
    //camera_drv = &ov5640_drv;
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <BSP_CAMERA_Init+0x164>)
 800204a:	2278      	movs	r2, #120	; 0x78
 800204c:	601a      	str	r2, [r3, #0]
    /* DCMI Initialization */
    HAL_DCMI_Init(phdcmi);
 800204e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002050:	f002 ff14 	bl	8004e7c <HAL_DCMI_Init>
    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d121      	bne.n	800209e <BSP_CAMERA_Init+0xea>
    {
      /* For 240x240 resolution, the OV9655 sensor is set to QVGA resolution
       * as OV9655 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      OV5640_Init(&OV5640Obj, RESOLUTION_R320x240, OV5640_RGB565);
 800205a:	2200      	movs	r2, #0
 800205c:	2101      	movs	r1, #1
 800205e:	482c      	ldr	r0, [pc, #176]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 8002060:	f001 fbb0 	bl	80037c4 <OV5640_Init>
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
#endif

      /* Set the RGB565 mode */
      MFX_IO_Write(CameraHwAddress, 0x12 /*OV9655_COM7*/, 0x63);
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	2263      	movs	r2, #99	; 0x63
 800206c:	2112      	movs	r1, #18
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff52 	bl	8001f18 <MFX_IO_Write>
      MFX_IO_Write(CameraHwAddress, 0x40 /*OV9655_COM15*/, 0x10);
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2210      	movs	r2, #16
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff4a 	bl	8001f18 <MFX_IO_Write>
      /* Invert the HRef signal */
      MFX_IO_Write(CameraHwAddress, 0x15 /*OV9655_COM10*/, 0x08);
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2208      	movs	r2, #8
 800208c:	2115      	movs	r1, #21
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff42 	bl	8001f18 <MFX_IO_Write>
      HAL_Delay(500);
 8002094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002098:	f002 fd88 	bl	8004bac <HAL_Delay>
 800209c:	e00b      	b.n	80020b6 <BSP_CAMERA_Init+0x102>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <BSP_CAMERA_Init+0x168>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <BSP_CAMERA_Init+0x164>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	b292      	uxth	r2, r2
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 80020b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b2:	f003 f98b 	bl	80053cc <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <BSP_CAMERA_Init+0x16c>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6013      	str	r3, [r2, #0]

    OV5640_SetLightMode(&OV5640Obj, OV5640_LIGHT_AUTO);
 80020bc:	2100      	movs	r1, #0
 80020be:	4814      	ldr	r0, [pc, #80]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020c0:	f001 fe48 	bl	8003d54 <OV5640_SetLightMode>
    OV5640_SetSaturation(&OV5640Obj, 0);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020c8:	f001 ff94 	bl	8003ff4 <OV5640_SetSaturation>
    OV5640_SetBrightness(&OV5640Obj, 0);
 80020cc:	2100      	movs	r1, #0
 80020ce:	4810      	ldr	r0, [pc, #64]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020d0:	f001 ff48 	bl	8003f64 <OV5640_SetBrightness>
    OV5640_SetHueDegree(&OV5640Obj, 1);
 80020d4:	2101      	movs	r1, #1
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020d8:	f001 ffd2 	bl	8004080 <OV5640_SetHueDegree>

    OV5640_SetPixelFormat(&OV5640Obj, OV5640_JPEG);
 80020dc:	2108      	movs	r1, #8
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020e0:	f001 fbe0 	bl	80038a4 <OV5640_SetPixelFormat>



    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020ea:	e002      	b.n	80020f2 <BSP_CAMERA_Init+0x13e>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 80020ec:	2304      	movs	r3, #4
 80020ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return status;
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08001a0d 	.word	0x08001a0d
 8002104:	08001b65 	.word	0x08001b65
 8002108:	2000028c 	.word	0x2000028c
 800210c:	50050000 	.word	0x50050000
 8002110:	20000194 	.word	0x20000194
 8002114:	08011814 	.word	0x08011814
 8002118:	20000190 	.word	0x20000190
 800211c:	20000188 	.word	0x20000188
 8002120:	2000018c 	.word	0x2000018c

08002124 <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Suspend(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Suspend the Camera Capture */
  HAL_DCMI_Suspend(&hdcmi);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <BSP_CAMERA_Suspend+0x10>)
 800212a:	f003 f85a 	bl	80051e2 <HAL_DCMI_Suspend>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000028c 	.word	0x2000028c

08002138 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Resume(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Start the Camera Capture */
  HAL_DCMI_Resume(&hdcmi);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <BSP_CAMERA_Resume+0x10>)
 800213e:	f003 f89d 	bl	800527c <HAL_DCMI_Resume>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000028c 	.word	0x2000028c

0800214c <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08e      	sub	sp, #56	; 0x38
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800216e:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	4a5d      	ldr	r2, [pc, #372]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6493      	str	r3, [r2, #72]	; 0x48
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002192:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219e:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 80021e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021ea:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80021ee:	2000      	movs	r0, #0
 80021f0:	f005 fd1c 	bl	8007c2c <HAL_RCC_MCOConfig>
  __HAL_RCC_HSI48_ENABLE();
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fa:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <BSP_CAMERA_MspInit+0x19c>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  HAL_Delay(10); // HSI48 should start in 10ms
 8002204:	200a      	movs	r0, #10
 8002206:	f002 fcd1 	bl	8004bac <HAL_Delay>


  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_5;
 800220a:	2320      	movs	r3, #32
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 800221a:	230a      	movs	r3, #10
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	4831      	ldr	r0, [pc, #196]	; (80022ec <BSP_CAMERA_MspInit+0x1a0>)
 8002226:	f003 fe03 	bl	8005e30 <HAL_GPIO_Init>


  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | \
 800222a:	f645 7320 	movw	r3, #24352	; 0x5f20
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 800223c:	230a      	movs	r3, #10
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	482a      	ldr	r0, [pc, #168]	; (80022f0 <BSP_CAMERA_MspInit+0x1a4>)
 8002248:	f003 fdf2 	bl	8005e30 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 800224c:	23b0      	movs	r3, #176	; 0xb0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 800225c:	230a      	movs	r3, #10
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <BSP_CAMERA_MspInit+0x1a8>)
 8002268:	f003 fde2 	bl	8005e30 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 800226e:	4a23      	ldr	r2, [pc, #140]	; (80022fc <BSP_CAMERA_MspInit+0x1b0>)
 8002270:	601a      	str	r2, [r3, #0]

  hdma_handler.Init.Request             = DMA_REQUEST_0;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 800228c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002290:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 8002294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002298:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 80022a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a6:	621a      	str	r2, [r3, #32]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <BSP_CAMERA_MspInit+0x1ac>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6293      	str	r3, [r2, #40]	; 0x28

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	210f      	movs	r1, #15
 80022b8:	2055      	movs	r0, #85	; 0x55
 80022ba:	f002 fd9a 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80022be:	2055      	movs	r0, #85	; 0x55
 80022c0:	f002 fdb3 	bl	8004e2a <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	210f      	movs	r1, #15
 80022c8:	2044      	movs	r0, #68	; 0x44
 80022ca:	f002 fd92 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80022ce:	2044      	movs	r0, #68	; 0x44
 80022d0:	f002 fdab 	bl	8004e2a <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fa23 	bl	8005724 <HAL_DMA_Init>
}
 80022de:	bf00      	nop
 80022e0:	3738      	adds	r7, #56	; 0x38
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48001000 	.word	0x48001000
 80022f0:	48001c00 	.word	0x48001c00
 80022f4:	48002000 	.word	0x48002000
 80022f8:	200001bc 	.word	0x200001bc
 80022fc:	4002046c 	.word	0x4002046c

08002300 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8002308:	f000 f804 	bl	8002314 <BSP_CAMERA_LineEventCallback>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 800232a:	f000 f804 	bl	8002336 <BSP_CAMERA_VsyncEventCallback>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 800234c:	f000 f804 	bl	8002358 <BSP_CAMERA_ErrorCallback>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <BSP_IO_Init+0x78>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d128      	bne.n	80023d0 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <BSP_IO_Init+0x7c>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2084      	movs	r0, #132	; 0x84
 8002384:	4798      	blx	r3

    HAL_Delay(10);
 8002386:	200a      	movs	r0, #10
 8002388:	f002 fc10 	bl	8004bac <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <BSP_IO_Init+0x80>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2084      	movs	r0, #132	; 0x84
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
 8002396:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	2b7b      	cmp	r3, #123	; 0x7b
 800239c:	d002      	beq.n	80023a4 <BSP_IO_Init+0x3c>
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	2b79      	cmp	r3, #121	; 0x79
 80023a2:	d117      	bne.n	80023d4 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <BSP_IO_Init+0x78>)
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <BSP_IO_Init+0x80>)
 80023a8:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <BSP_IO_Init+0x78>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00f      	beq.n	80023d4 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <BSP_IO_Init+0x78>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2084      	movs	r0, #132	; 0x84
 80023bc:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <BSP_IO_Init+0x78>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4909      	ldr	r1, [pc, #36]	; (80023ec <BSP_IO_Init+0x84>)
 80023c6:	2084      	movs	r0, #132	; 0x84
 80023c8:	4798      	blx	r3

        ret = IO_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	e001      	b.n	80023d4 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 80023d0:	2303      	movs	r3, #3
 80023d2:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000204 	.word	0x20000204
 80023e4:	2000002c 	.word	0x2000002c
 80023e8:	20000000 	.word	0x20000000
 80023ec:	000301ff 	.word	0x000301ff

080023f0 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <BSP_IO_ConfigPin+0x30>)
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <BSP_IO_ConfigPin+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	2084      	movs	r0, #132	; 0x84
 8002414:	4798      	blx	r3

  return IO_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	000301ff 	.word	0x000301ff
 8002424:	20000204 	.word	0x20000204

08002428 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <BSP_IO_WritePin+0x30>)
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <BSP_IO_WritePin+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	2084      	movs	r0, #132	; 0x84
 800244c:	4798      	blx	r3

}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	000301ff 	.word	0x000301ff
 800245c:	20000204 	.word	0x20000204

08002460 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <BSP_IO_ReadPin+0x38>)
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <BSP_IO_ReadPin+0x3c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	2084      	movs	r0, #132	; 0x84
 8002482:	4798      	blx	r3
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]


  return pin_state;
 800248c:	68fb      	ldr	r3, [r7, #12]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	000301ff 	.word	0x000301ff
 800249c:	20000204 	.word	0x20000204

080024a0 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <BSP_SD_Init+0x8c>)
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <BSP_SD_Init+0x90>)
 80024ae:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <BSP_SD_Init+0x8c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <BSP_SD_Init+0x8c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <BSP_SD_Init+0x8c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <BSP_SD_Init+0x8c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <BSP_SD_Init+0x8c>)
 80024ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ce:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <BSP_SD_Init+0x8c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 80024d6:	f000 f966 	bl	80027a6 <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80024da:	f000 f844 	bl	8002566 <BSP_SD_IsDetected>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80024e4:	2302      	movs	r3, #2
 80024e6:	e01c      	b.n	8002522 <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80024e8:	2100      	movs	r1, #0
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <BSP_SD_Init+0x8c>)
 80024ec:	f000 f8bc 	bl	8002668 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 80024f0:	480e      	ldr	r0, [pc, #56]	; (800252c <BSP_SD_Init+0x8c>)
 80024f2:	f007 f96f 	bl	80097d4 <HAL_SD_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800250a:	4808      	ldr	r0, [pc, #32]	; (800252c <BSP_SD_Init+0x8c>)
 800250c:	f008 f8ec 	bl	800a6e8 <HAL_SD_ConfigWideBusOperation>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	e001      	b.n	8002520 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 8002520:	79fb      	ldrb	r3, [r7, #7]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000208 	.word	0x20000208
 8002530:	40012800 	.word	0x40012800

08002534 <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 8002538:	f44f 7080 	mov.w	r0, #256	; 0x100
 800253c:	f7ff ff90 	bl	8002460 <BSP_IO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002546:	d006      	beq.n	8002556 <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 8002548:	2110      	movs	r1, #16
 800254a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800254e:	f7ff ff4f 	bl	80023f0 <BSP_IO_ConfigPin>
 8002552:	4603      	mov	r3, r0
 8002554:	e005      	b.n	8002562 <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 8002556:	2112      	movs	r1, #18
 8002558:	f44f 7080 	mov.w	r0, #256	; 0x100
 800255c:	f7ff ff48 	bl	80023f0 <BSP_IO_ConfigPin>
 8002560:	4603      	mov	r3, r0
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}

08002566 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800256c:	2301      	movs	r3, #1
 800256e:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002574:	f7ff ff74 	bl	8002460 <BSP_IO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 800257e:	2300      	movs	r3, #0
 8002580:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	b2db      	uxtb	r3, r3
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]

  sd_state =  HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <BSP_SD_ReadBlocks+0x3c>)
 80025ae:	f007 f9e7 	bl	8009980 <HAL_SD_ReadBlocks>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <BSP_SD_ReadBlocks+0x30>
  {
    return MSD_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <BSP_SD_ReadBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 80025c0:	2301      	movs	r3, #1
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000208 	.word	0x20000208

080025d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]

  sd_state = HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <BSP_SD_WriteBlocks+0x3c>)
 80025ee:	f007 fba5 	bl	8009d3c <HAL_SD_WriteBlocks>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <BSP_SD_WriteBlocks+0x30>
  {
    return MSD_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <BSP_SD_WriteBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 8002600:	2301      	movs	r3, #1
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000208 	.word	0x20000208

08002610 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 8002616:	480c      	ldr	r0, [pc, #48]	; (8002648 <BSP_SD_GetCardState+0x38>)
 8002618:	f008 f922 	bl	800a860 <HAL_SD_GetCardState>
 800261c:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d101      	bne.n	8002628 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8002624:	2300      	movs	r3, #0
 8002626:	e00b      	b.n	8002640 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d005      	beq.n	800263a <BSP_SD_GetCardState+0x2a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d002      	beq.n	800263a <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b07      	cmp	r3, #7
 8002638:	d101      	bne.n	800263e <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000208 	.word	0x20000208

0800264c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4803      	ldr	r0, [pc, #12]	; (8002664 <BSP_SD_GetCardInfo+0x18>)
 8002658:	f008 f81a 	bl	800a690 <HAL_SD_GetCardInfo>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000208 	.word	0x20000208

08002668 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b0ae      	sub	sp, #184	; 0xb8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f005 ff24 	bl	80084d4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800268c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002690:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002692:	2318      	movs	r3, #24
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 8002696:	2304      	movs	r3, #4
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800269a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80026a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fc15 	bl	8007edc <HAL_RCCEx_PeriphCLKConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d000      	beq.n	80026ba <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 80026b8:	e7fe      	b.n	80026b8 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	6613      	str	r3, [r2, #96]	; 0x60
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6493      	str	r3, [r2, #72]	; 0x48
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <BSP_SD_MspInit+0x108>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <BSP_SD_MspInit+0x108>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <BSP_SD_MspInit+0x108>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <BSP_SD_MspInit+0x108>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800272c:	230c      	movs	r3, #12
 800272e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002732:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800273a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800273e:	4619      	mov	r1, r3
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <BSP_SD_MspInit+0x10c>)
 8002742:	f003 fb75 	bl	8005e30 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8002746:	2304      	movs	r3, #4
 8002748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800274c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002750:	4619      	mov	r1, r3
 8002752:	4809      	ldr	r0, [pc, #36]	; (8002778 <BSP_SD_MspInit+0x110>)
 8002754:	f003 fb6c 	bl	8005e30 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2105      	movs	r1, #5
 800275c:	2031      	movs	r0, #49	; 0x31
 800275e:	f002 fb48 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8002762:	2031      	movs	r0, #49	; 0x31
 8002764:	f002 fb61 	bl	8004e2a <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8002768:	bf00      	nop
 800276a:	37b8      	adds	r7, #184	; 0xb8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00

0800277c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 80027aa:	f7ff fddd 	bl	8002368 <BSP_IO_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 80027b4:	f7ff f8e3 	bl	800197e <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 80027b8:	2108      	movs	r1, #8
 80027ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027be:	f7ff fe17 	bl	80023f0 <BSP_IO_ConfigPin>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Error_Handler(void);

int _write(int file, char *ptr, int len) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <_write+0x24>)
 80027de:	f008 fced 	bl	800b1bc <HAL_UART_Transmit>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000414 	.word	0x20000414

080027f0 <print_startup_msg>:

static void print_startup_msg(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 80027f4:	4809      	ldr	r0, [pc, #36]	; (800281c <print_startup_msg+0x2c>)
 80027f6:	f00e fbb5 	bl	8010f64 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 80027fa:	4909      	ldr	r1, [pc, #36]	; (8002820 <print_startup_msg+0x30>)
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <print_startup_msg+0x34>)
 80027fe:	f00e fb2b 	bl	8010e58 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 8002802:	4909      	ldr	r1, [pc, #36]	; (8002828 <print_startup_msg+0x38>)
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <print_startup_msg+0x3c>)
 8002806:	f00e fb27 	bl	8010e58 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 800280a:	4909      	ldr	r1, [pc, #36]	; (8002830 <print_startup_msg+0x40>)
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <print_startup_msg+0x44>)
 800280e:	f00e fb23 	bl	8010e58 <iprintf>
  printf("******************************************\r\n");
 8002812:	4802      	ldr	r0, [pc, #8]	; (800281c <print_startup_msg+0x2c>)
 8002814:	f00e fba6 	bl	8010f64 <puts>
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	08011880 	.word	0x08011880
 8002820:	080118ac 	.word	0x080118ac
 8002824:	080118b8 	.word	0x080118b8
 8002828:	080118d4 	.word	0x080118d4
 800282c:	080118d8 	.word	0x080118d8
 8002830:	080118f8 	.word	0x080118f8
 8002834:	08011904 	.word	0x08011904

08002838 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 8002842:	f002 f9a7 	bl	8004b94 <HAL_GetTick>
 8002846:	4603      	mov	r3, r0
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_GPIO_EXTI_Callback+0x40>)
 800284a:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_GPIO_EXTI_Callback+0x40>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_GPIO_EXTI_Callback+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2bfa      	cmp	r3, #250	; 0xfa
 8002858:	d90a      	bls.n	8002870 <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_GPIO_EXTI_Callback+0x48>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd ff86 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_GPIO_EXTI_Callback+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_GPIO_EXTI_Callback+0x44>)
 800286e:	6013      	str	r3, [r2, #0]
	}

}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2001fbd0 	.word	0x2001fbd0
 800287c:	2001fbd4 	.word	0x2001fbd4
 8002880:	2000053c 	.word	0x2000053c

08002884 <jpeg_dcmi_frame_callback>:
  * @retval None
  */


void jpeg_dcmi_frame_callback(DMA_HandleTypeDef *_hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
        uint8_t *p;
        uint32_t i=0,jpgstart=0,jpglen=0;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
        uint8_t  head=0;
 8002898:	2300      	movs	r3, #0
 800289a:	76fb      	strb	r3, [r7, #27]



        HAL_DCMI_Stop(&hdcmi);
 800289c:	486a      	ldr	r0, [pc, #424]	; (8002a48 <jpeg_dcmi_frame_callback+0x1c4>)
 800289e:	f002 fc45 	bl	800512c <HAL_DCMI_Stop>

        p=(uint8_t*)jpeg_data_buf;
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <jpeg_dcmi_frame_callback+0x1c8>)
 80028a4:	617b      	str	r3, [r7, #20]
        FRESULT res; /* FatFs function common result code */
          uint32_t byteswritten; /* File write/read counts */


          /* Register the file system object to the FatFs module */
          if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80028a6:	2200      	movs	r2, #0
 80028a8:	4969      	ldr	r1, [pc, #420]	; (8002a50 <jpeg_dcmi_frame_callback+0x1cc>)
 80028aa:	486a      	ldr	r0, [pc, #424]	; (8002a54 <jpeg_dcmi_frame_callback+0x1d0>)
 80028ac:	f00c fcfe 	bl	800f2ac <f_mount>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80bd 	bne.w	8002a32 <jpeg_dcmi_frame_callback+0x1ae>
          {
        	printf_dbg("f_mount!\r\n");
 80028b8:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4618      	mov	r0, r3
 80028be:	f00e facb 	bl	8010e58 <iprintf>
 80028c2:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <jpeg_dcmi_frame_callback+0x1d8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f00e fac6 	bl	8010e58 <iprintf>
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f00e fac1 	bl	8010e58 <iprintf>
 80028d6:	4862      	ldr	r0, [pc, #392]	; (8002a60 <jpeg_dcmi_frame_callback+0x1dc>)
 80028d8:	f00e fb44 	bl	8010f64 <puts>
        #if 1
            if (isCreated == 0)
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <jpeg_dcmi_frame_callback+0x1e0>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d110      	bne.n	8002906 <jpeg_dcmi_frame_callback+0x82>
            {
              res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80028e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <jpeg_dcmi_frame_callback+0x1e4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	2107      	movs	r1, #7
 80028f0:	4857      	ldr	r0, [pc, #348]	; (8002a50 <jpeg_dcmi_frame_callback+0x1cc>)
 80028f2:	f00d f90d 	bl	800fb10 <f_mkfs>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]

              if (res != FR_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <jpeg_dcmi_frame_callback+0x82>
              {
                Error_Handler();
 8002900:	f000 ff1c 	bl	800373c <Error_Handler>
                while(1);
 8002904:	e7fe      	b.n	8002904 <jpeg_dcmi_frame_callback+0x80>
              }
            }
            isCreated = 1;
 8002906:	4b57      	ldr	r3, [pc, #348]	; (8002a64 <jpeg_dcmi_frame_callback+0x1e0>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
        #endif
            /* Create and Open a new text file object with write access */
            if(f_open(&MyFile, "STM32.jpeg", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800290c:	220a      	movs	r2, #10
 800290e:	4957      	ldr	r1, [pc, #348]	; (8002a6c <jpeg_dcmi_frame_callback+0x1e8>)
 8002910:	4857      	ldr	r0, [pc, #348]	; (8002a70 <jpeg_dcmi_frame_callback+0x1ec>)
 8002912:	f00c fd11 	bl	800f338 <f_open>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 808a 	bne.w	8002a32 <jpeg_dcmi_frame_callback+0x1ae>
            {
              printf_dbg("f_open!\r\n");
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4618      	mov	r0, r3
 8002924:	f00e fa98 	bl	8010e58 <iprintf>
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <jpeg_dcmi_frame_callback+0x1d8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f00e fa93 	bl	8010e58 <iprintf>
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4618      	mov	r0, r3
 8002938:	f00e fa8e 	bl	8010e58 <iprintf>
 800293c:	484d      	ldr	r0, [pc, #308]	; (8002a74 <jpeg_dcmi_frame_callback+0x1f0>)
 800293e:	f00e fb11 	bl	8010f64 <puts>
              /* Write data to the text file */

              for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	e029      	b.n	800299c <jpeg_dcmi_frame_callback+0x118>
			  {
					  if((p[i]==0XFF)&&(p[i+1]==0XD8))
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d10a      	bne.n	800296a <jpeg_dcmi_frame_callback+0xe6>
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2bd8      	cmp	r3, #216	; 0xd8
 8002960:	d103      	bne.n	800296a <jpeg_dcmi_frame_callback+0xe6>
					  {
							  jpgstart=i;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	623b      	str	r3, [r7, #32]
							  head=1;	// Already found  FF D8
 8002966:	2301      	movs	r3, #1
 8002968:	76fb      	strb	r3, [r7, #27]
					  }
					  if((p[i]==0XFF)&&(p[i+1]==0XD9)&&head)  //search for FF D9
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d10f      	bne.n	8002996 <jpeg_dcmi_frame_callback+0x112>
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2bd9      	cmp	r3, #217	; 0xd9
 8002982:	d108      	bne.n	8002996 <jpeg_dcmi_frame_callback+0x112>
 8002984:	7efb      	ldrb	r3, [r7, #27]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <jpeg_dcmi_frame_callback+0x112>
					  {
							  jpglen=i-jpgstart+2;
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	3302      	adds	r3, #2
 8002992:	61fb      	str	r3, [r7, #28]
							  break;
 8002994:	e006      	b.n	80029a4 <jpeg_dcmi_frame_callback+0x120>
              for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	3301      	adds	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f5b3 3ff8 	cmp.w	r3, #126976	; 0x1f000
 80029a2:	d3d1      	bcc.n	8002948 <jpeg_dcmi_frame_callback+0xc4>
					  }
			  }
			  if(jpglen)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <jpeg_dcmi_frame_callback+0x140>
			  {
					  p+=jpgstart;	// move to FF D8
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	4413      	add	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
					  //HAL_UART_Transmit(&huart2, p, jpglen, 5000);
					  res = f_write(&MyFile, p, jpglen, (void *)&byteswritten);
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	482d      	ldr	r0, [pc, #180]	; (8002a70 <jpeg_dcmi_frame_callback+0x1ec>)
 80029bc:	f00c fe8a 	bl	800f6d4 <f_write>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]

					  // printf("jpg_size :  %d \r\n" , jpglen);
					  //printf("jpgstart :  %d \r\n" , jpgstart);
			  }

              res = f_write(&MyFile, jpeg_data_buf, jpeg_buf_size, (void *)&byteswritten);
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80029cc:	491f      	ldr	r1, [pc, #124]	; (8002a4c <jpeg_dcmi_frame_callback+0x1c8>)
 80029ce:	4828      	ldr	r0, [pc, #160]	; (8002a70 <jpeg_dcmi_frame_callback+0x1ec>)
 80029d0:	f00c fe80 	bl	800f6d4 <f_write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]



              printf_dbg("f_write!\r\n");
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4618      	mov	r0, r3
 80029de:	f00e fa3b 	bl	8010e58 <iprintf>
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <jpeg_dcmi_frame_callback+0x1d8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00e fa36 	bl	8010e58 <iprintf>
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00e fa31 	bl	8010e58 <iprintf>
 80029f6:	4820      	ldr	r0, [pc, #128]	; (8002a78 <jpeg_dcmi_frame_callback+0x1f4>)
 80029f8:	f00e fab4 	bl	8010f64 <puts>

              if((byteswritten > 0) && (res == FR_OK))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d017      	beq.n	8002a32 <jpeg_dcmi_frame_callback+0x1ae>
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d114      	bne.n	8002a32 <jpeg_dcmi_frame_callback+0x1ae>
              {
                /* Close the open text file */
                f_close(&MyFile);
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <jpeg_dcmi_frame_callback+0x1ec>)
 8002a0a:	f00d f856 	bl	800faba <f_close>
                printf_dbg("f_close!\r\n");
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00e fa20 	bl	8010e58 <iprintf>
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <jpeg_dcmi_frame_callback+0x1d8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00e fa1b 	bl	8010e58 <iprintf>
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <jpeg_dcmi_frame_callback+0x1d4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00e fa16 	bl	8010e58 <iprintf>
 8002a2c:	4813      	ldr	r0, [pc, #76]	; (8002a7c <jpeg_dcmi_frame_callback+0x1f8>)
 8002a2e:	f00e fa99 	bl	8010f64 <puts>





        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4);
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <jpeg_dcmi_frame_callback+0x1c8>)
 8002a34:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <jpeg_dcmi_frame_callback+0x1c4>)
 8002a3c:	f002 faa4 	bl	8004f88 <HAL_DCMI_Start_DMA>
}
 8002a40:	bf00      	nop
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000028c 	.word	0x2000028c
 8002a4c:	20000568 	.word	0x20000568
 8002a50:	2001fbe8 	.word	0x2001fbe8
 8002a54:	2001f568 	.word	0x2001f568
 8002a58:	2000007c 	.word	0x2000007c
 8002a5c:	2000009c 	.word	0x2000009c
 8002a60:	0801191c 	.word	0x0801191c
 8002a64:	2001f9cd 	.word	0x2001f9cd
 8002a68:	2001f9d0 	.word	0x2001f9d0
 8002a6c:	08011928 	.word	0x08011928
 8002a70:	2001f79c 	.word	0x2001f79c
 8002a74:	08011934 	.word	0x08011934
 8002a78:	08011940 	.word	0x08011940
 8002a7c:	0801194c 	.word	0x0801194c

08002a80 <SD_Initialize>:
  * @brief  Initialize the SD card.
  * @param  None
  * @retval None
  */
static void SD_Initialize(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <SD_Initialize+0x88>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d13a      	bne.n	8002b02 <SD_Initialize+0x82>
  {
    if (BSP_SD_Init() == MSD_OK)
 8002a8c:	f7ff fd08 	bl	80024a0 <BSP_SD_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d117      	bne.n	8002ac6 <SD_Initialize+0x46>
    {
      BSP_SD_ITConfig();
 8002a96:	f7ff fd4d 	bl	8002534 <BSP_SD_ITConfig>
      isInitialized = 1;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <SD_Initialize+0x88>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
      printf_dbg("SD Initialize Okey!\r\n");
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <SD_Initialize+0x8c>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00e f9d7 	bl	8010e58 <iprintf>
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <SD_Initialize+0x90>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00e f9d2 	bl	8010e58 <iprintf>
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <SD_Initialize+0x8c>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00e f9cd 	bl	8010e58 <iprintf>
 8002abe:	4815      	ldr	r0, [pc, #84]	; (8002b14 <SD_Initialize+0x94>)
 8002ac0:	f00e fa50 	bl	8010f64 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 8002ac4:	e01d      	b.n	8002b02 <SD_Initialize+0x82>
      BSP_LED_On(LED1);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fe ff5c 	bl	8001984 <BSP_LED_On>
      printf_dbg("SD Initialize ERROR!!\r\n");
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <SD_Initialize+0x8c>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00e f9c1 	bl	8010e58 <iprintf>
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <SD_Initialize+0x90>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00e f9bc 	bl	8010e58 <iprintf>
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <SD_Initialize+0x8c>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00e f9b7 	bl	8010e58 <iprintf>
 8002aea:	480b      	ldr	r0, [pc, #44]	; (8002b18 <SD_Initialize+0x98>)
 8002aec:	f00e fa3a 	bl	8010f64 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8002af0:	bf00      	nop
 8002af2:	f7ff fd38 	bl	8002566 <BSP_SD_IsDetected>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d1fa      	bne.n	8002af2 <SD_Initialize+0x72>
      BSP_LED_Off(LED1);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fe ff63 	bl	80019c8 <BSP_LED_Off>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2001f9cc 	.word	0x2001f9cc
 8002b0c:	2000007c 	.word	0x2000007c
 8002b10:	2000009c 	.word	0x2000009c
 8002b14:	08011958 	.word	0x08011958
 8002b18:	08011970 	.word	0x08011970

08002b1c <HAL_DCMI_FrameEventCallback>:
  /* Error */
  Error_Handler();
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_DCMI_FrameEventCallback+0x58>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f00e f995 	bl	8010e58 <iprintf>
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_DCMI_FrameEventCallback+0x5c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00e f990 	bl	8010e58 <iprintf>
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_DCMI_FrameEventCallback+0x58>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00e f98b 	bl	8010e58 <iprintf>
 8002b42:	480e      	ldr	r0, [pc, #56]	; (8002b7c <HAL_DCMI_FrameEventCallback+0x60>)
 8002b44:	f00e fa0e 	bl	8010f64 <puts>

	//FS_FileOperations();

	jpeg_dcmi_frame_callback(&hdma_dcmi);
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <HAL_DCMI_FrameEventCallback+0x64>)
 8002b4a:	f7ff fe9b 	bl	8002884 <jpeg_dcmi_frame_callback>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <HAL_DCMI_FrameEventCallback+0x68>)
 8002b56:	f003 fbef 	bl	8006338 <HAL_GPIO_WritePin>
	__HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 021f 	bic.w	r2, r2, #31
 8002b68:	60da      	str	r2, [r3, #12]


	/* Write data (through DMA2D) */
	//hal_status = LCD_Write((uint32_t) (&pBuffer), (uint32_t)&(LCD_ADDR->REG), ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT);
	//if(hal_status != HAL_OK)Error_Handler();
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000007c 	.word	0x2000007c
 8002b78:	2000009c 	.word	0x2000009c
 8002b7c:	08011988 	.word	0x08011988
 8002b80:	200002f0 	.word	0x200002f0
 8002b84:	48000400 	.word	0x48000400

08002b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b8e:	f001 ff98 	bl	8004ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b92:	f000 f95d 	bl	8002e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b96:	f000 fb2b 	bl	80031f0 <MX_GPIO_Init>
  MX_DCMI_Init();
 8002b9a:	f000 f9d7 	bl	8002f4c <MX_DCMI_Init>
  MX_DMA_Init();
 8002b9e:	f000 fa5b 	bl	8003058 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ba2:	f000 fa29 	bl	8002ff8 <MX_USART2_UART_Init>
  //MX_DMA2D_Init();
  MX_FMC_Init();
 8002ba6:	f000 fa75 	bl	8003094 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002baa:	f000 fa03 	bl	8002fb4 <MX_SDMMC1_SD_Init>
  //MX_FATFS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002bae:	f000 f9a8 	bl	8002f02 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8002bb2:	2114      	movs	r1, #20
 8002bb4:	4893      	ldr	r0, [pc, #588]	; (8002e04 <main+0x27c>)
 8002bb6:	f7fd fd79 	bl	80006ac <ring_buffer_init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a92      	ldr	r2, [pc, #584]	; (8002e08 <main+0x280>)
 8002bbe:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 8002bc0:	f7ff fe16 	bl	80027f0 <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 8002bc4:	f7ff fbd0 	bl	8002368 <BSP_IO_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  if(ret == IO_OK)  printf_dbg("Expander OK\r\n");
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d111      	bne.n	8002bf6 <main+0x6e>
 8002bd2:	4b8e      	ldr	r3, [pc, #568]	; (8002e0c <main+0x284>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00e f93e 	bl	8010e58 <iprintf>
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <main+0x288>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f00e f939 	bl	8010e58 <iprintf>
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <main+0x284>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f00e f934 	bl	8010e58 <iprintf>
 8002bf0:	4888      	ldr	r0, [pc, #544]	; (8002e14 <main+0x28c>)
 8002bf2:	f00e f9b7 	bl	8010f64 <puts>

  /* LCD initialization */
  //ret =BSP_LCD_Init();
  //if(ret == LCD_OK) printf_dbg("LCD OK\r\n");

  BSP_CAMERA_Init(RESOLUTION_R320x240);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7ff f9dc 	bl	8001fb4 <BSP_CAMERA_Init>
  if(ret == CAMERA_OK) printf_dbg("Camera OK\r\n");
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d111      	bne.n	8002c26 <main+0x9e>
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <main+0x284>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00e f926 	bl	8010e58 <iprintf>
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <main+0x288>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f00e f921 	bl	8010e58 <iprintf>
 8002c16:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <main+0x284>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f00e f91c 	bl	8010e58 <iprintf>
 8002c20:	487d      	ldr	r0, [pc, #500]	; (8002e18 <main+0x290>)
 8002c22:	f00e f99f 	bl	8010f64 <puts>

  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
  HAL_Delay(1000);
 8002c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c2a:	f001 ffbf 	bl	8004bac <HAL_Delay>

    /*##-4- Camera Continuous capture start in QVGA resolution ############################*/
    /* Disable unwanted HSYNC (IT_LINE)/VSYNC interrupts */
  __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8002c2e:	4b7b      	ldr	r3, [pc, #492]	; (8002e1c <main+0x294>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <main+0x294>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0218 	bic.w	r2, r2, #24
 8002c3c:	60da      	str	r2, [r3, #12]
  __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002c3e:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <main+0x294>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b75      	ldr	r3, [pc, #468]	; (8002e1c <main+0x294>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 021f 	bic.w	r2, r2, #31
 8002c4c:	60da      	str	r2, [r3, #12]
  hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4 );
 8002c4e:	4a74      	ldr	r2, [pc, #464]	; (8002e20 <main+0x298>)
 8002c50:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002c54:	2100      	movs	r1, #0
 8002c56:	4871      	ldr	r0, [pc, #452]	; (8002e1c <main+0x294>)
 8002c58:	f002 f996 	bl	8004f88 <HAL_DCMI_Start_DMA>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <main+0x29c>)
 8002c62:	701a      	strb	r2, [r3, #0]
  if(hal_status != HAL_OK)Error_Handler();
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <main+0x29c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <main+0xe8>
 8002c6c:	f000 fd66 	bl	800373c <Error_Handler>

    /* 1- Link the micro SD disk I/O driver */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002c70:	496d      	ldr	r1, [pc, #436]	; (8002e28 <main+0x2a0>)
 8002c72:	486e      	ldr	r0, [pc, #440]	; (8002e2c <main+0x2a4>)
 8002c74:	f00d fbc4 	bl	8010400 <FATFS_LinkDriver>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <main+0x128>
  {
	/*##-2- Init the SD Card #################################################*/

	SD_Initialize();
 8002c7e:	f7ff feff 	bl	8002a80 <SD_Initialize>

	if(BSP_SD_IsDetected())
 8002c82:	f7ff fc70 	bl	8002566 <BSP_SD_IsDetected>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <main+0x128>
	{
		//Appli_state = APPLICATION_RUNNING;
		printf_dbg("SD Card OK\r\n");
 8002c8c:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <main+0x284>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00e f8e1 	bl	8010e58 <iprintf>
 8002c96:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <main+0x288>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00e f8dc 	bl	8010e58 <iprintf>
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <main+0x284>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00e f8d7 	bl	8010e58 <iprintf>
 8002caa:	4861      	ldr	r0, [pc, #388]	; (8002e30 <main+0x2a8>)
 8002cac:	f00e f95a 	bl	8010f64 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 8002cb0:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <main+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	495f      	ldr	r1, [pc, #380]	; (8002e34 <main+0x2ac>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fd84 	bl	80007c4 <ring_buffer_get>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 809b 	beq.w	8002dfa <main+0x272>
	  {

		  switch (IRQ_event) {
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <main+0x2ac>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d074      	beq.n	8002db8 <main+0x230>
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	f300 8094 	bgt.w	8002dfe <main+0x276>
 8002cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cda:	d058      	beq.n	8002d8e <main+0x206>
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	f300 808d 	bgt.w	8002dfe <main+0x276>
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d038      	beq.n	8002d5c <main+0x1d4>
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	f300 8086 	bgt.w	8002dfe <main+0x276>
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d003      	beq.n	8002d00 <main+0x178>
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d019      	beq.n	8002d32 <main+0x1aa>
				__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);

				//FS_FileOperations();
				break;
			default:
				break;
 8002cfe:	e07e      	b.n	8002dfe <main+0x276>
				printf_dbg("JOY_UP was pressed!\r\n");
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <main+0x284>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00e f8a7 	bl	8010e58 <iprintf>
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <main+0x288>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00e f8a2 	bl	8010e58 <iprintf>
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <main+0x284>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00e f89d 	bl	8010e58 <iprintf>
 8002d1e:	4846      	ldr	r0, [pc, #280]	; (8002e38 <main+0x2b0>)
 8002d20:	f00e f920 	bl	8010f64 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d2a:	4844      	ldr	r0, [pc, #272]	; (8002e3c <main+0x2b4>)
 8002d2c:	f003 fb04 	bl	8006338 <HAL_GPIO_WritePin>
				break;
 8002d30:	e066      	b.n	8002e00 <main+0x278>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <main+0x284>)
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00e f88e 	bl	8010e58 <iprintf>
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <main+0x288>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f00e f889 	bl	8010e58 <iprintf>
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <main+0x284>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f00e f884 	bl	8010e58 <iprintf>
 8002d50:	483b      	ldr	r0, [pc, #236]	; (8002e40 <main+0x2b8>)
 8002d52:	f00e f907 	bl	8010f64 <puts>
				BSP_CAMERA_Resume();
 8002d56:	f7ff f9ef 	bl	8002138 <BSP_CAMERA_Resume>
				break;
 8002d5a:	e051      	b.n	8002e00 <main+0x278>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <main+0x284>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f00e f879 	bl	8010e58 <iprintf>
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <main+0x288>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f00e f874 	bl	8010e58 <iprintf>
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <main+0x284>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00e f86f 	bl	8010e58 <iprintf>
 8002d7a:	4832      	ldr	r0, [pc, #200]	; (8002e44 <main+0x2bc>)
 8002d7c:	f00e f8f2 	bl	8010f64 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d86:	482d      	ldr	r0, [pc, #180]	; (8002e3c <main+0x2b4>)
 8002d88:	f003 fad6 	bl	8006338 <HAL_GPIO_WritePin>
				break;
 8002d8c:	e038      	b.n	8002e00 <main+0x278>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <main+0x284>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00e f860 	bl	8010e58 <iprintf>
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <main+0x288>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00e f85b 	bl	8010e58 <iprintf>
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <main+0x284>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f00e f856 	bl	8010e58 <iprintf>
 8002dac:	4826      	ldr	r0, [pc, #152]	; (8002e48 <main+0x2c0>)
 8002dae:	f00e f8d9 	bl	8010f64 <puts>
				BSP_CAMERA_Suspend();
 8002db2:	f7ff f9b7 	bl	8002124 <BSP_CAMERA_Suspend>
				break;
 8002db6:	e023      	b.n	8002e00 <main+0x278>
				printf_dbg("JOY_SEL was pressed!\r\n");
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <main+0x284>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00e f84b 	bl	8010e58 <iprintf>
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <main+0x288>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00e f846 	bl	8010e58 <iprintf>
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <main+0x284>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f00e f841 	bl	8010e58 <iprintf>
 8002dd6:	481d      	ldr	r0, [pc, #116]	; (8002e4c <main+0x2c4>)
 8002dd8:	f00e f8c4 	bl	8010f64 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de2:	4816      	ldr	r0, [pc, #88]	; (8002e3c <main+0x2b4>)
 8002de4:	f003 faa8 	bl	8006338 <HAL_GPIO_WritePin>
				__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <main+0x294>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <main+0x294>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 021f 	orr.w	r2, r2, #31
 8002df6:	60da      	str	r2, [r3, #12]
				break;
 8002df8:	e002      	b.n	8002e00 <main+0x278>
		}

	  }
 8002dfa:	bf00      	nop
 8002dfc:	e758      	b.n	8002cb0 <main+0x128>
				break;
 8002dfe:	bf00      	nop
  {
 8002e00:	e756      	b.n	8002cb0 <main+0x128>
 8002e02:	bf00      	nop
 8002e04:	20000540 	.word	0x20000540
 8002e08:	2000053c 	.word	0x2000053c
 8002e0c:	2000007c 	.word	0x2000007c
 8002e10:	2000009c 	.word	0x2000009c
 8002e14:	080119a8 	.word	0x080119a8
 8002e18:	080119b8 	.word	0x080119b8
 8002e1c:	2000028c 	.word	0x2000028c
 8002e20:	20000568 	.word	0x20000568
 8002e24:	20000538 	.word	0x20000538
 8002e28:	2001fbe8 	.word	0x2001fbe8
 8002e2c:	08012080 	.word	0x08012080
 8002e30:	080119c4 	.word	0x080119c4
 8002e34:	2001fbd8 	.word	0x2001fbd8
 8002e38:	080119d0 	.word	0x080119d0
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	080119e8 	.word	0x080119e8
 8002e44:	08011a00 	.word	0x08011a00
 8002e48:	08011a18 	.word	0x08011a18
 8002e4c:	08011a30 	.word	0x08011a30

08002e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b096      	sub	sp, #88	; 0x58
 8002e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	2244      	movs	r2, #68	; 0x44
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f00d fc24 	bl	80106ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e76:	f004 f959 	bl	800712c <HAL_PWREx_ControlVoltageScaling>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e80:	f000 fc5c 	bl	800373c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002e84:	2322      	movs	r3, #34	; 0x22
 8002e86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e92:	2340      	movs	r3, #64	; 0x40
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e96:	2302      	movs	r3, #2
 8002e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002ea2:	230a      	movs	r3, #10
 8002ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 f99e 	bl	80071f8 <HAL_RCC_OscConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002ec2:	f000 fc3b 	bl	800373c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eda:	463b      	mov	r3, r7
 8002edc:	2104      	movs	r1, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fda4 	bl	8007a2c <HAL_RCC_ClockConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002eea:	f000 fc27 	bl	800373c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f004 fe99 	bl	8007c2c <HAL_RCC_MCOConfig>
}
 8002efa:	bf00      	nop
 8002efc:	3758      	adds	r7, #88	; 0x58
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2055      	movs	r0, #85	; 0x55
 8002f0c:	f001 ff71 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002f10:	2055      	movs	r0, #85	; 0x55
 8002f12:	f001 ff8a 	bl	8004e2a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2028      	movs	r0, #40	; 0x28
 8002f1c:	f001 ff69 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f20:	2028      	movs	r0, #40	; 0x28
 8002f22:	f001 ff82 	bl	8004e2a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	2017      	movs	r0, #23
 8002f2c:	f001 ff61 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f30:	2017      	movs	r0, #23
 8002f32:	f001 ff7a 	bl	8004e2a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2026      	movs	r0, #38	; 0x26
 8002f3c:	f001 ff59 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f40:	2026      	movs	r0, #38	; 0x26
 8002f42:	f001 ff72 	bl	8004e2a <HAL_NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <MX_DCMI_Init+0x64>)
 8002f54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f5e:	2220      	movs	r2, #32
 8002f60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002f98:	4804      	ldr	r0, [pc, #16]	; (8002fac <MX_DCMI_Init+0x60>)
 8002f9a:	f001 ff6f 	bl	8004e7c <HAL_DCMI_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002fa4:	f000 fbca 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000028c 	.word	0x2000028c
 8002fb0:	50050000 	.word	0x50050000

08002fb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <MX_SDMMC1_SD_Init+0x40>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fdc:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000390 	.word	0x20000390
 8002ff4:	40012800 	.word	0x40012800

08002ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <MX_USART2_UART_Init+0x5c>)
 8003000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_USART2_UART_Init+0x58>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <MX_USART2_UART_Init+0x58>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <MX_USART2_UART_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <MX_USART2_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <MX_USART2_UART_Init+0x58>)
 800303c:	f008 f870 	bl	800b120 <HAL_UART_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003046:	f000 fb79 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000414 	.word	0x20000414
 8003054:	40004400 	.word	0x40004400

08003058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_DMA_Init+0x38>)
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <MX_DMA_Init+0x38>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6493      	str	r3, [r2, #72]	; 0x48
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_DMA_Init+0x38>)
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2044      	movs	r0, #68	; 0x44
 800307c:	f001 feb9 	bl	8004df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003080:	2044      	movs	r0, #68	; 0x44
 8003082:	f001 fed2 	bl	8004e2a <HAL_NVIC_EnableIRQ>

}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000

08003094 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800309a:	463b      	mov	r3, r7
 800309c:	2220      	movs	r2, #32
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00d fb03 	bl	80106ac <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80030a6:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <MX_FMC_Init+0x150>)
 80030a8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80030ac:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80030ae:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <MX_FMC_Init+0x150>)
 80030b0:	4a4d      	ldr	r2, [pc, #308]	; (80031e8 <MX_FMC_Init+0x154>)
 80030b2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <MX_FMC_Init+0x150>)
 80030b6:	2202      	movs	r2, #2
 80030b8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <MX_FMC_Init+0x150>)
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80030c0:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <MX_FMC_Init+0x150>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <MX_FMC_Init+0x150>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80030cc:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <MX_FMC_Init+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80030d2:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <MX_FMC_Init+0x150>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80030d8:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <MX_FMC_Init+0x150>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <MX_FMC_Init+0x150>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80030e4:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <MX_FMC_Init+0x150>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <MX_FMC_Init+0x150>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80030f0:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <MX_FMC_Init+0x150>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <MX_FMC_Init+0x150>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80030fc:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <MX_FMC_Init+0x150>)
 80030fe:	2200      	movs	r2, #0
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <MX_FMC_Init+0x150>)
 8003104:	2200      	movs	r2, #0
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <MX_FMC_Init+0x150>)
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800310e:	230f      	movs	r3, #15
 8003110:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003112:	230f      	movs	r3, #15
 8003114:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003116:	23ff      	movs	r3, #255	; 0xff
 8003118:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800311a:	230f      	movs	r3, #15
 800311c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800311e:	2310      	movs	r3, #16
 8003120:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003122:	2311      	movs	r3, #17
 8003124:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800312a:	463b      	mov	r3, r7
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	482c      	ldr	r0, [pc, #176]	; (80031e4 <MX_FMC_Init+0x150>)
 8003132:	f007 ffad 	bl	800b090 <HAL_SRAM_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 800313c:	f000 fafe 	bl	800373c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <MX_FMC_Init+0x158>)
 8003142:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003146:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <MX_FMC_Init+0x158>)
 800314a:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <MX_FMC_Init+0x154>)
 800314c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800314e:	4b27      	ldr	r3, [pc, #156]	; (80031ec <MX_FMC_Init+0x158>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <MX_FMC_Init+0x158>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <MX_FMC_Init+0x158>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <MX_FMC_Init+0x158>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <MX_FMC_Init+0x158>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <MX_FMC_Init+0x158>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <MX_FMC_Init+0x158>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <MX_FMC_Init+0x158>)
 800317a:	2200      	movs	r2, #0
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <MX_FMC_Init+0x158>)
 8003180:	2200      	movs	r2, #0
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <MX_FMC_Init+0x158>)
 8003186:	2200      	movs	r2, #0
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_FMC_Init+0x158>)
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <MX_FMC_Init+0x158>)
 8003192:	2200      	movs	r2, #0
 8003194:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <MX_FMC_Init+0x158>)
 8003198:	2200      	movs	r2, #0
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <MX_FMC_Init+0x158>)
 800319e:	2200      	movs	r2, #0
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_FMC_Init+0x158>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80031a8:	230f      	movs	r3, #15
 80031aa:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80031ac:	230f      	movs	r3, #15
 80031ae:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80031b0:	23ff      	movs	r3, #255	; 0xff
 80031b2:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80031b4:	230f      	movs	r3, #15
 80031b6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80031b8:	2310      	movs	r3, #16
 80031ba:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80031bc:	2311      	movs	r3, #17
 80031be:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80031c4:	463b      	mov	r3, r7
 80031c6:	2200      	movs	r2, #0
 80031c8:	4619      	mov	r1, r3
 80031ca:	4808      	ldr	r0, [pc, #32]	; (80031ec <MX_FMC_Init+0x158>)
 80031cc:	f007 ff60 	bl	800b090 <HAL_SRAM_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80031d6:	f000 fab1 	bl	800373c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000498 	.word	0x20000498
 80031e8:	a0000104 	.word	0xa0000104
 80031ec:	200004e8 	.word	0x200004e8

080031f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003206:	4bb2      	ldr	r3, [pc, #712]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	4ab1      	ldr	r2, [pc, #708]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003212:	4baf      	ldr	r3, [pc, #700]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	4bac      	ldr	r3, [pc, #688]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	4aab      	ldr	r2, [pc, #684]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800322a:	4ba9      	ldr	r3, [pc, #676]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003236:	4ba6      	ldr	r3, [pc, #664]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	4aa5      	ldr	r2, [pc, #660]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003242:	4ba3      	ldr	r3, [pc, #652]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324e:	4ba0      	ldr	r3, [pc, #640]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4a9f      	ldr	r2, [pc, #636]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325a:	4b9d      	ldr	r3, [pc, #628]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	4b9a      	ldr	r3, [pc, #616]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	4a99      	ldr	r2, [pc, #612]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003272:	4b97      	ldr	r3, [pc, #604]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800327e:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	4a93      	ldr	r2, [pc, #588]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 8003284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8003296:	f003 ff9f 	bl	80071d8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800329a:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4a8c      	ldr	r2, [pc, #560]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a6:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	4b87      	ldr	r3, [pc, #540]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	4a86      	ldr	r2, [pc, #536]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032be:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ca:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032d6:	4b7e      	ldr	r3, [pc, #504]	; (80034d0 <MX_GPIO_Init+0x2e0>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 80032e2:	2201      	movs	r2, #1
 80032e4:	2114      	movs	r1, #20
 80032e6:	487b      	ldr	r0, [pc, #492]	; (80034d4 <MX_GPIO_Init+0x2e4>)
 80032e8:	f003 f826 	bl	8006338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2101      	movs	r1, #1
 80032f0:	4879      	ldr	r0, [pc, #484]	; (80034d8 <MX_GPIO_Init+0x2e8>)
 80032f2:	f003 f821 	bl	8006338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2143      	movs	r1, #67	; 0x43
 80032fa:	4876      	ldr	r0, [pc, #472]	; (80034d4 <MX_GPIO_Init+0x2e4>)
 80032fc:	f003 f81c 	bl	8006338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	4875      	ldr	r0, [pc, #468]	; (80034dc <MX_GPIO_Init+0x2ec>)
 8003306:	f003 f817 	bl	8006338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 800330a:	2201      	movs	r2, #1
 800330c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003310:	4873      	ldr	r0, [pc, #460]	; (80034e0 <MX_GPIO_Init+0x2f0>)
 8003312:	f003 f811 	bl	8006338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8003316:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800331c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003322:	2302      	movs	r3, #2
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	486a      	ldr	r0, [pc, #424]	; (80034d8 <MX_GPIO_Init+0x2e8>)
 800332e:	f002 fd7f 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8003332:	2304      	movs	r3, #4
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800333e:	2302      	movs	r3, #2
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8003342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003346:	4619      	mov	r1, r3
 8003348:	4862      	ldr	r0, [pc, #392]	; (80034d4 <MX_GPIO_Init+0x2e4>)
 800334a:	f002 fd71 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800335e:	2305      	movs	r3, #5
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4619      	mov	r1, r3
 8003368:	485d      	ldr	r0, [pc, #372]	; (80034e0 <MX_GPIO_Init+0x2f0>)
 800336a:	f002 fd61 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	2301      	movs	r3, #1
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003382:	4619      	mov	r1, r3
 8003384:	4854      	ldr	r0, [pc, #336]	; (80034d8 <MX_GPIO_Init+0x2e8>)
 8003386:	f002 fd53 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800338a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003390:	2312      	movs	r3, #18
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003394:	2301      	movs	r3, #1
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800339c:	2304      	movs	r3, #4
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	4619      	mov	r1, r3
 80033a6:	484e      	ldr	r0, [pc, #312]	; (80034e0 <MX_GPIO_Init+0x2f0>)
 80033a8:	f002 fd42 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80033ac:	2340      	movs	r3, #64	; 0x40
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033bc:	2307      	movs	r3, #7
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80033c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c4:	4619      	mov	r1, r3
 80033c6:	4846      	ldr	r0, [pc, #280]	; (80034e0 <MX_GPIO_Init+0x2f0>)
 80033c8:	f002 fd32 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80033cc:	235c      	movs	r3, #92	; 0x5c
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80033dc:	230d      	movs	r3, #13
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	483f      	ldr	r0, [pc, #252]	; (80034e4 <MX_GPIO_Init+0x2f4>)
 80033e8:	f002 fd22 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80033ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033fe:	2302      	movs	r3, #2
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	4835      	ldr	r0, [pc, #212]	; (80034e0 <MX_GPIO_Init+0x2f0>)
 800340a:	f002 fd11 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 800340e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	2303      	movs	r3, #3
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003420:	2307      	movs	r3, #7
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	482f      	ldr	r0, [pc, #188]	; (80034e8 <MX_GPIO_Init+0x2f8>)
 800342c:	f002 fd00 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	4824      	ldr	r0, [pc, #144]	; (80034d4 <MX_GPIO_Init+0x2e4>)
 8003444:	f002 fcf4 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8003448:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800345a:	230a      	movs	r3, #10
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003468:	f002 fce2 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 800346c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003478:	2302      	movs	r3, #2
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003480:	4619      	mov	r1, r3
 8003482:	4816      	ldr	r0, [pc, #88]	; (80034dc <MX_GPIO_Init+0x2ec>)
 8003484:	f002 fcd4 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8003488:	2343      	movs	r3, #67	; 0x43
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348c:	2301      	movs	r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349c:	4619      	mov	r1, r3
 800349e:	480d      	ldr	r0, [pc, #52]	; (80034d4 <MX_GPIO_Init+0x2e4>)
 80034a0:	f002 fcc6 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80034b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b8:	4619      	mov	r1, r3
 80034ba:	4808      	ldr	r0, [pc, #32]	; (80034dc <MX_GPIO_Init+0x2ec>)
 80034bc:	f002 fcb8 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80034c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e00d      	b.n	80034ec <MX_GPIO_Init+0x2fc>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48001c00 	.word	0x48001c00
 80034d8:	48002000 	.word	0x48002000
 80034dc:	48000800 	.word	0x48000800
 80034e0:	48000400 	.word	0x48000400
 80034e4:	48001000 	.word	0x48001000
 80034e8:	48001800 	.word	0x48001800
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f2:	4619      	mov	r1, r3
 80034f4:	488c      	ldr	r0, [pc, #560]	; (8003728 <MX_GPIO_Init+0x538>)
 80034f6:	f002 fc9b 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800350c:	2300      	movs	r3, #0
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	f002 fc89 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800351e:	2384      	movs	r3, #132	; 0x84
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800352e:	2306      	movs	r3, #6
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003536:	4619      	mov	r1, r3
 8003538:	487c      	ldr	r0, [pc, #496]	; (800372c <MX_GPIO_Init+0x53c>)
 800353a:	f002 fc79 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 800353e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003544:	230b      	movs	r3, #11
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003550:	4619      	mov	r1, r3
 8003552:	4877      	ldr	r0, [pc, #476]	; (8003730 <MX_GPIO_Init+0x540>)
 8003554:	f002 fc6c 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8003558:	231b      	movs	r3, #27
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800355c:	230b      	movs	r3, #11
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003568:	4619      	mov	r1, r3
 800356a:	4870      	ldr	r0, [pc, #448]	; (800372c <MX_GPIO_Init+0x53c>)
 800356c:	f002 fc60 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8003570:	f640 0303 	movw	r3, #2051	; 0x803
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357e:	2303      	movs	r3, #3
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003582:	230a      	movs	r3, #10
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358a:	4619      	mov	r1, r3
 800358c:	4869      	ldr	r0, [pc, #420]	; (8003734 <MX_GPIO_Init+0x544>)
 800358e:	f002 fc4f 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003592:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80035a4:	2308      	movs	r3, #8
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	485e      	ldr	r0, [pc, #376]	; (8003728 <MX_GPIO_Init+0x538>)
 80035b0:	f002 fc3e 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80035b4:	2320      	movs	r3, #32
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80035c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c6:	4619      	mov	r1, r3
 80035c8:	4858      	ldr	r0, [pc, #352]	; (800372c <MX_GPIO_Init+0x53c>)
 80035ca:	f002 fc31 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 80035ce:	2320      	movs	r3, #32
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035de:	2305      	movs	r3, #5
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80035e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ec:	f002 fc20 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 80035f0:	2310      	movs	r3, #16
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035f4:	2311      	movs	r3, #17
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035f8:	2301      	movs	r3, #1
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	4619      	mov	r1, r3
 8003606:	484c      	ldr	r0, [pc, #304]	; (8003738 <MX_GPIO_Init+0x548>)
 8003608:	f002 fc12 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800360c:	2312      	movs	r3, #18
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003610:	230b      	movs	r3, #11
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361c:	4619      	mov	r1, r3
 800361e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003622:	f002 fc05 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8003626:	23c8      	movs	r3, #200	; 0xc8
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003632:	2303      	movs	r3, #3
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003636:	230a      	movs	r3, #10
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003644:	f002 fbf4 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8003648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800364e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003654:	2302      	movs	r3, #2
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8003658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365c:	4619      	mov	r1, r3
 800365e:	4834      	ldr	r0, [pc, #208]	; (8003730 <MX_GPIO_Init+0x540>)
 8003660:	f002 fbe6 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003676:	2305      	movs	r3, #5
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	482c      	ldr	r0, [pc, #176]	; (8003734 <MX_GPIO_Init+0x544>)
 8003682:	f002 fbd5 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8003686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800368c:	2311      	movs	r3, #17
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003690:	2301      	movs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8003698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369c:	4619      	mov	r1, r3
 800369e:	4825      	ldr	r0, [pc, #148]	; (8003734 <MX_GPIO_Init+0x544>)
 80036a0:	f002 fbc6 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80036a4:	2304      	movs	r3, #4
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80036b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b4:	4619      	mov	r1, r3
 80036b6:	481f      	ldr	r0, [pc, #124]	; (8003734 <MX_GPIO_Init+0x544>)
 80036b8:	f002 fbba 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80036ce:	230d      	movs	r3, #13
 80036d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d6:	4619      	mov	r1, r3
 80036d8:	4816      	ldr	r0, [pc, #88]	; (8003734 <MX_GPIO_Init+0x544>)
 80036da:	f002 fba9 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80036de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80036f0:	2306      	movs	r3, #6
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	4619      	mov	r1, r3
 80036fa:	480e      	ldr	r0, [pc, #56]	; (8003734 <MX_GPIO_Init+0x544>)
 80036fc:	f002 fb98 	bl	8005e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003706:	2311      	movs	r3, #17
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	4619      	mov	r1, r3
 8003718:	4806      	ldr	r0, [pc, #24]	; (8003734 <MX_GPIO_Init+0x544>)
 800371a:	f002 fb89 	bl	8005e30 <HAL_GPIO_Init>

}
 800371e:	bf00      	nop
 8003720:	3738      	adds	r7, #56	; 0x38
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	48001800 	.word	0x48001800
 800372c:	48000800 	.word	0x48000800
 8003730:	48001400 	.word	0x48001400
 8003734:	48000400 	.word	0x48000400
 8003738:	48001c00 	.word	0x48001c00

0800373c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <Error_Handler+0x30>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	4618      	mov	r0, r3
 8003746:	f00d fb87 	bl	8010e58 <iprintf>
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <Error_Handler+0x34>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f00d fb82 	bl	8010e58 <iprintf>
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <Error_Handler+0x30>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4618      	mov	r0, r3
 800375a:	f00d fb7d 	bl	8010e58 <iprintf>
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <Error_Handler+0x38>)
 8003760:	f00d fb7a 	bl	8010e58 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8003764:	b672      	cpsid	i
}
 8003766:	bf00      	nop
  __disable_irq();
  while (1)
 8003768:	e7fe      	b.n	8003768 <Error_Handler+0x2c>
 800376a:	bf00      	nop
 800376c:	2000007c 	.word	0x2000007c
 8003770:	2000009c 	.word	0x2000009c
 8003774:	08011a48 	.word	0x08011a48

08003778 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  if (pObj == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <OV5640_RegisterBusIO+0x16>
  {
    return OV5640_ERROR;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	e016      	b.n	80037bc <OV5640_RegisterBusIO+0x44>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	891a      	ldrh	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	811a      	strh	r2, [r3, #8]

    if (pObj->IO.Init != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <OV5640_RegisterBusIO+0x40>
    {
      pObj->IO.Init();
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4798      	blx	r3
      return OV5640_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e001      	b.n	80037bc <OV5640_RegisterBusIO+0x44>
    }

  }

  return OV5640_ERROR;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };


  if (pObj->IsInitialized == 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d15a      	bne.n	8003894 <OV5640_Init+0xd0>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d80e      	bhi.n	8003802 <OV5640_Init+0x3e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00f      	beq.n	800380a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d00c      	beq.n	800380a <OV5640_Init+0x46>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d009      	beq.n	800380a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b07      	cmp	r3, #7
 80037fa:	d006      	beq.n	800380a <OV5640_Init+0x46>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d003      	beq.n	800380a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e044      	b.n	8003894 <OV5640_Init+0xd0>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e014      	b.n	800383a <OV5640_Init+0x76>
      {
        if (ret != OV5640_ERROR)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d00d      	beq.n	8003834 <OV5640_Init+0x70>
        {

          I2C2_WriteData(OV5640_ADDR, OV5640_Common[index][0], 2, (uint8_t)OV5640_Common[index][1]);
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <OV5640_Init+0xdc>)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003820:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <OV5640_Init+0xdc>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2202      	movs	r2, #2
 800382e:	2078      	movs	r0, #120	; 0x78
 8003830:	f7fe f9f8 	bl	8001c24 <I2C2_WriteData>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2bfd      	cmp	r3, #253	; 0xfd
 800383e:	d9e7      	bls.n	8003810 <OV5640_Init+0x4c>

        }
      }

      if (ret == OV5640_OK)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d126      	bne.n	8003894 <OV5640_Init+0xd0>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f92d 	bl	8003aa8 <OV5640_SetResolution>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <OV5640_Init+0x98>
        {
          ret = OV5640_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e01b      	b.n	8003894 <OV5640_Init+0xd0>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f820 	bl	80038a4 <OV5640_SetPixelFormat>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	e010      	b.n	8003894 <OV5640_Init+0xd0>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_LOW, OV5640_POLARITY_HREF_HIGH,
 8003872:	2300      	movs	r3, #0
 8003874:	2201      	movs	r2, #1
 8003876:	2100      	movs	r1, #0
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa01 	bl	8003c80 <OV5640_SetPolarities>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <OV5640_Init+0xc8>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e003      	b.n	8003894 <OV5640_Init+0xd0>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8003894:	693b      	ldr	r3, [r7, #16]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	08011b84 	.word	0x08011b84

080038a4 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <OV5640_SetPixelFormat+0x34>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d00c      	beq.n	80038d8 <OV5640_SetPixelFormat+0x34>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d009      	beq.n	80038d8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b07      	cmp	r3, #7
 80038c8:	d006      	beq.n	80038d8 <OV5640_SetPixelFormat+0x34>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d003      	beq.n	80038d8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e0d7      	b.n	8003a88 <OV5640_SetPixelFormat+0x1e4>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	3b01      	subs	r3, #1
 80038dc:	2b07      	cmp	r3, #7
 80038de:	d87f      	bhi.n	80039e0 <OV5640_SetPixelFormat+0x13c>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <OV5640_SetPixelFormat+0x44>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800393b 	.word	0x0800393b
 80038ec:	08003909 	.word	0x08003909
 80038f0:	080039e1 	.word	0x080039e1
 80038f4:	080039e1 	.word	0x080039e1
 80038f8:	080039e1 	.word	0x080039e1
 80038fc:	080039e1 	.word	0x080039e1
 8003900:	08003975 	.word	0x08003975
 8003904:	080039af 	.word	0x080039af
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e011      	b.n	8003932 <OV5640_SetPixelFormat+0x8e>
        {

            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800390e:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <OV5640_SetPixelFormat+0x1f0>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	885b      	ldrh	r3, [r3, #2]
 8003918:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_YUV422[index][0], 2, tmp);
 800391a:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <OV5640_SetPixelFormat+0x1f0>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2202      	movs	r2, #2
 8003926:	2078      	movs	r0, #120	; 0x78
 8003928:	f7fe f97c 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3301      	adds	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d9ea      	bls.n	800390e <OV5640_SetPixelFormat+0x6a>


        }
        break;
 8003938:	e06a      	b.n	8003a10 <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e015      	b.n	800396c <OV5640_SetPixelFormat+0xc8>
        {
          if (ret != OV5640_ERROR)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d00e      	beq.n	8003966 <OV5640_SetPixelFormat+0xc2>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003948:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <OV5640_SetPixelFormat+0x1f4>)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	885b      	ldrh	r3, [r3, #2]
 8003952:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB888[index][0], 2, tmp);
 8003954:	4a50      	ldr	r2, [pc, #320]	; (8003a98 <OV5640_SetPixelFormat+0x1f4>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2202      	movs	r2, #2
 8003960:	2078      	movs	r0, #120	; 0x78
 8003962:	f7fe f95f 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d9e6      	bls.n	8003940 <OV5640_SetPixelFormat+0x9c>
          }
        }
        break;
 8003972:	e04d      	b.n	8003a10 <OV5640_SetPixelFormat+0x16c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e015      	b.n	80039a6 <OV5640_SetPixelFormat+0x102>
        {
          if (ret != OV5640_ERROR)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d00e      	beq.n	80039a0 <OV5640_SetPixelFormat+0xfc>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8003982:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <OV5640_SetPixelFormat+0x1f8>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	885b      	ldrh	r3, [r3, #2]
 800398c:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_Y8[index][0], 2, tmp);
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <OV5640_SetPixelFormat+0x1f8>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2202      	movs	r2, #2
 800399a:	2078      	movs	r0, #120	; 0x78
 800399c:	f7fe f942 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3301      	adds	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d9e6      	bls.n	800397a <OV5640_SetPixelFormat+0xd6>
          }
        }
        break;
 80039ac:	e030      	b.n	8003a10 <OV5640_SetPixelFormat+0x16c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e011      	b.n	80039d8 <OV5640_SetPixelFormat+0x134>
        {
			tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80039b4:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <OV5640_SetPixelFormat+0x1fc>)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	885b      	ldrh	r3, [r3, #2]
 80039be:	73fb      	strb	r3, [r7, #15]
			I2C2_WriteData(OV5640_ADDR, OV5640_PF_JPEG[index][0], 2, tmp);
 80039c0:	4a37      	ldr	r2, [pc, #220]	; (8003aa0 <OV5640_SetPixelFormat+0x1fc>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2202      	movs	r2, #2
 80039cc:	2078      	movs	r0, #120	; 0x78
 80039ce:	f7fe f929 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d9ea      	bls.n	80039b4 <OV5640_SetPixelFormat+0x110>
        }
        break;
 80039de:	e017      	b.n	8003a10 <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e010      	b.n	8003a08 <OV5640_SetPixelFormat+0x164>
        {

            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB565[index][0], 2, (uint8_t)OV5640_PF_RGB565[index][1]);
 80039e6:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <OV5640_SetPixelFormat+0x200>)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80039ee:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <OV5640_SetPixelFormat+0x200>)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	885b      	ldrh	r3, [r3, #2]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2202      	movs	r2, #2
 80039fc:	2078      	movs	r0, #120	; 0x78
 80039fe:	f7fe f911 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3301      	adds	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d9eb      	bls.n	80039e6 <OV5640_SetPixelFormat+0x142>

        }
        break;
 8003a0e:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d138      	bne.n	8003a88 <OV5640_SetPixelFormat+0x1e4>
    {

    	tmp = I2C2_ReadData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2);
 8003a16:	2202      	movs	r2, #2
 8003a18:	f643 0121 	movw	r1, #14369	; 0x3821
 8003a1c:	2078      	movs	r0, #120	; 0x78
 8003a1e:	f7fe f933 	bl	8001c88 <I2C2_ReadData>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
        tmp |= (1 << 5);
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	f043 0320 	orr.w	r3, r3, #32
 8003a2c:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2, tmp);
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f643 0121 	movw	r1, #14369	; 0x3821
 8003a36:	2078      	movs	r0, #120	; 0x78
 8003a38:	f7fe f8f4 	bl	8001c24 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2);
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f243 0102 	movw	r1, #12290	; 0x3002
 8003a42:	2078      	movs	r0, #120	; 0x78
 8003a44:	f7fe f920 	bl	8001c88 <I2C2_ReadData>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73fb      	strb	r3, [r7, #15]
        tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	f023 031c 	bic.w	r3, r3, #28
 8003a52:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2, tmp);
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f243 0102 	movw	r1, #12290	; 0x3002
 8003a5c:	2078      	movs	r0, #120	; 0x78
 8003a5e:	f7fe f8e1 	bl	8001c24 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2);
 8003a62:	2202      	movs	r2, #2
 8003a64:	f243 0106 	movw	r1, #12294	; 0x3006
 8003a68:	2078      	movs	r0, #120	; 0x78
 8003a6a:	f7fe f90d 	bl	8001c88 <I2C2_ReadData>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]
        tmp |= ((1 << 5) | (1 << 3));
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003a78:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2, tmp);
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f243 0106 	movw	r1, #12294	; 0x3006
 8003a82:	2078      	movs	r0, #120	; 0x78
 8003a84:	f7fe f8ce 	bl	8001c24 <I2C2_WriteData>


      }

  }
  return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	08011f7c 	.word	0x08011f7c
 8003a98:	08011f84 	.word	0x08011f84
 8003a9c:	08011f8c 	.word	0x08011f8c
 8003aa0:	08011f94 	.word	0x08011f94
 8003aa4:	08011f9c 	.word	0x08011f9c

08003aa8 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d903      	bls.n	8003ac4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e0cd      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	f200 80c6 	bhi.w	8003c58 <OV5640_SetResolution+0x1b0>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <OV5640_SetResolution+0x2c>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003ae9 	.word	0x08003ae9
 8003ad8:	08003b37 	.word	0x08003b37
 8003adc:	08003b6f 	.word	0x08003b6f
 8003ae0:	08003bbd 	.word	0x08003bbd
 8003ae4:	08003c0b 	.word	0x08003c0b
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e01f      	b.n	8003b2e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d018      	beq.n	8003b28 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003af6:	4a5d      	ldr	r2, [pc, #372]	; (8003c6c <OV5640_SetResolution+0x1c4>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	885b      	ldrh	r3, [r3, #2]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f103 0018 	add.w	r0, r3, #24
 8003b0a:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <OV5640_SetResolution+0x1c4>)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b12:	f107 020f 	add.w	r2, r7, #15
 8003b16:	2301      	movs	r3, #1
 8003b18:	f000 fb1a 	bl	8004150 <ov5640_write_reg>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d9dc      	bls.n	8003aee <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003b34:	e094      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e014      	b.n	8003b66 <OV5640_SetResolution+0xbe>
        {
          if (ret != OV5640_ERROR)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d00d      	beq.n	8003b60 <OV5640_SetResolution+0xb8>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_QVGA[index][0], 2, (uint8_t)OV5640_QVGA[index][1]);
 8003b44:	4a4a      	ldr	r2, [pc, #296]	; (8003c70 <OV5640_SetResolution+0x1c8>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b4c:	4a48      	ldr	r2, [pc, #288]	; (8003c70 <OV5640_SetResolution+0x1c8>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2202      	movs	r2, #2
 8003b5a:	2078      	movs	r0, #120	; 0x78
 8003b5c:	f7fe f862 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3301      	adds	r3, #1
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d9e7      	bls.n	8003b3c <OV5640_SetResolution+0x94>

          }
        }
        break;
 8003b6c:	e078      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e01f      	b.n	8003bb4 <OV5640_SetResolution+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d018      	beq.n	8003bae <OV5640_SetResolution+0x106>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8003b7c:	4a3d      	ldr	r2, [pc, #244]	; (8003c74 <OV5640_SetResolution+0x1cc>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	885b      	ldrh	r3, [r3, #2]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f103 0018 	add.w	r0, r3, #24
 8003b90:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <OV5640_SetResolution+0x1cc>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b98:	f107 020f 	add.w	r2, r7, #15
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f000 fad7 	bl	8004150 <ov5640_write_reg>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <OV5640_SetResolution+0x106>
            {
              ret = OV5640_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d9dc      	bls.n	8003b74 <OV5640_SetResolution+0xcc>
            }
          }
        }
        break;
 8003bba:	e051      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e01f      	b.n	8003c02 <OV5640_SetResolution+0x15a>
        {
          if (ret != OV5640_ERROR)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d018      	beq.n	8003bfc <OV5640_SetResolution+0x154>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <OV5640_SetResolution+0x1d0>)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	885b      	ldrh	r3, [r3, #2]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0018 	add.w	r0, r3, #24
 8003bde:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <OV5640_SetResolution+0x1d0>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003be6:	f107 020f 	add.w	r2, r7, #15
 8003bea:	2301      	movs	r3, #1
 8003bec:	f000 fab0 	bl	8004150 <ov5640_write_reg>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <OV5640_SetResolution+0x154>
            {
              ret = OV5640_ERROR;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d9dc      	bls.n	8003bc2 <OV5640_SetResolution+0x11a>
            }
          }
        }
        break;
 8003c08:	e02a      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e01f      	b.n	8003c50 <OV5640_SetResolution+0x1a8>
        {
          if (ret != OV5640_ERROR)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d018      	beq.n	8003c4a <OV5640_SetResolution+0x1a2>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <OV5640_SetResolution+0x1d4>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	885b      	ldrh	r3, [r3, #2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f103 0018 	add.w	r0, r3, #24
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <OV5640_SetResolution+0x1d4>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c34:	f107 020f 	add.w	r2, r7, #15
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f000 fa89 	bl	8004150 <ov5640_write_reg>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <OV5640_SetResolution+0x1a2>
            {
              ret = OV5640_ERROR;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d9dc      	bls.n	8003c10 <OV5640_SetResolution+0x168>
            }
          }
        }
        break;
 8003c56:	e003      	b.n	8003c60 <OV5640_SetResolution+0x1b8>
      default:
        ret = OV5640_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	617b      	str	r3, [r7, #20]
        break;
 8003c5e:	bf00      	nop
    }
  }

  return ret;
 8003c60:	697b      	ldr	r3, [r7, #20]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08011fa4 	.word	0x08011fa4
 8003c70:	08011fb4 	.word	0x08011fb4
 8003c74:	08011fc4 	.word	0x08011fc4
 8003c78:	08011fd4 	.word	0x08011fd4
 8003c7c:	08011fe4 	.word	0x08011fe4

08003c80 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <OV5640_SetPolarities+0x3c>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <OV5640_SetPolarities+0x24>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10b      	bne.n	8003cbc <OV5640_SetPolarities+0x3c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <OV5640_SetPolarities+0x3c>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d006      	beq.n	8003cc4 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e014      	b.n	8003cee <OV5640_SetPolarities+0x6e>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	015b      	lsls	r3, r3, #5
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	74fb      	strb	r3, [r7, #19]
    I2C2_WriteData(OV5640_ADDR, OV5640_POLARITY_CTRL, 2, tmp);
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f244 7140 	movw	r1, #18240	; 0x4740
 8003ce8:	2078      	movs	r0, #120	; 0x78
 8003cea:	f7fd ff9b 	bl	8001c24 <I2C2_WriteData>

  }

  return ret;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint16_t reg;

  /* Initialize I2C */
  pObj->IO.Init();
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4798      	blx	r3

  /* Prepare the camera to be configured */
  I2C2_WriteData(OV5640_ADDR, OV5640_SYSTEM_CTROL0, 2,0x80);
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f243 0108 	movw	r1, #12296	; 0x3008
 8003d10:	2078      	movs	r0, #120	; 0x78
 8003d12:	f7fd ff87 	bl	8001c24 <I2C2_WriteData>
  HAL_Delay(500);
 8003d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d1a:	f000 ff47 	bl	8004bac <HAL_Delay>

  reg = I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_HIGH_BYTE, 2);
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f243 010a 	movw	r1, #12298	; 0x300a
 8003d24:	2078      	movs	r0, #120	; 0x78
 8003d26:	f7fd ffaf 	bl	8001c88 <I2C2_ReadData>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	81fb      	strh	r3, [r7, #14]
  reg <<= 8;
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	81fb      	strh	r3, [r7, #14]
  reg |= I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_LOW_BYTE, 2);
 8003d34:	2202      	movs	r2, #2
 8003d36:	f243 010b 	movw	r1, #12299	; 0x300b
 8003d3a:	2078      	movs	r0, #120	; 0x78
 8003d3c:	f7fd ffa4 	bl	8001c88 <I2C2_ReadData>
 8003d40:	4603      	mov	r3, r0
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	81fb      	strh	r3, [r7, #14]

 return reg;
 8003d4a:	89fb      	ldrh	r3, [r7, #14]

}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_MANUAL_CONTROL, 2, tmp);
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f243 4106 	movw	r1, #13318	; 0x3406
 8003d6a:	2078      	movs	r0, #120	; 0x78
 8003d6c:	f7fd ff5a 	bl	8001c24 <I2C2_WriteData>
  tmp = 0x46;
 8003d70:	2346      	movs	r3, #70	; 0x46
 8003d72:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL16, 2, tmp);
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f245 1190 	movw	r1, #20880	; 0x5190
 8003d7c:	2078      	movs	r0, #120	; 0x78
 8003d7e:	f7fd ff51 	bl	8001c24 <I2C2_WriteData>
  tmp = 0xF8;
 8003d82:	23f8      	movs	r3, #248	; 0xf8
 8003d84:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL17, 2, tmp);
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f245 1191 	movw	r1, #20881	; 0x5191
 8003d8e:	2078      	movs	r0, #120	; 0x78
 8003d90:	f7fd ff48 	bl	8001c24 <I2C2_WriteData>
  tmp = 0x04;
 8003d94:	2304      	movs	r3, #4
 8003d96:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL18, 2, tmp);
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f245 1192 	movw	r1, #20882	; 0x5192
 8003da0:	2078      	movs	r0, #120	; 0x78
 8003da2:	f7fd ff3f 	bl	8001c24 <I2C2_WriteData>


    switch (LightMode)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	2b07      	cmp	r3, #7
 8003dac:	f200 80b0 	bhi.w	8003f10 <OV5640_SetLightMode+0x1bc>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <OV5640_SetLightMode+0x64>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dd9 	.word	0x08003dd9
 8003dbc:	08003e27 	.word	0x08003e27
 8003dc0:	08003f11 	.word	0x08003f11
 8003dc4:	08003ec3 	.word	0x08003ec3
 8003dc8:	08003f11 	.word	0x08003f11
 8003dcc:	08003f11 	.word	0x08003f11
 8003dd0:	08003f11 	.word	0x08003f11
 8003dd4:	08003e75 	.word	0x08003e75
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e01f      	b.n	8003e1e <OV5640_SetLightMode+0xca>
        {
          if (ret != OV5640_ERROR)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d018      	beq.n	8003e18 <OV5640_SetLightMode+0xc4>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8003de6:	4a5a      	ldr	r2, [pc, #360]	; (8003f50 <OV5640_SetLightMode+0x1fc>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	885b      	ldrh	r3, [r3, #2]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f103 0018 	add.w	r0, r3, #24
 8003dfa:	4a55      	ldr	r2, [pc, #340]	; (8003f50 <OV5640_SetLightMode+0x1fc>)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e02:	f107 020f 	add.w	r2, r7, #15
 8003e06:	2301      	movs	r3, #1
 8003e08:	f000 f9a2 	bl	8004150 <ov5640_write_reg>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <OV5640_SetLightMode+0xc4>
            {
              ret = OV5640_ERROR;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d9dc      	bls.n	8003dde <OV5640_SetLightMode+0x8a>
            }
          }
        }
        break;
 8003e24:	e08e      	b.n	8003f44 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e01f      	b.n	8003e6c <OV5640_SetLightMode+0x118>
        {
          if (ret != OV5640_ERROR)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d018      	beq.n	8003e66 <OV5640_SetLightMode+0x112>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8003e34:	4a47      	ldr	r2, [pc, #284]	; (8003f54 <OV5640_SetLightMode+0x200>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	885b      	ldrh	r3, [r3, #2]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f103 0018 	add.w	r0, r3, #24
 8003e48:	4a42      	ldr	r2, [pc, #264]	; (8003f54 <OV5640_SetLightMode+0x200>)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e50:	f107 020f 	add.w	r2, r7, #15
 8003e54:	2301      	movs	r3, #1
 8003e56:	f000 f97b 	bl	8004150 <ov5640_write_reg>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <OV5640_SetLightMode+0x112>
            {
              ret = OV5640_ERROR;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
 8003e64:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d9dc      	bls.n	8003e2c <OV5640_SetLightMode+0xd8>
            }
          }
        }
        break;
 8003e72:	e067      	b.n	8003f44 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	e01f      	b.n	8003eba <OV5640_SetLightMode+0x166>
        {
          if (ret != OV5640_ERROR)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d018      	beq.n	8003eb4 <OV5640_SetLightMode+0x160>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8003e82:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <OV5640_SetLightMode+0x204>)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	885b      	ldrh	r3, [r3, #2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f103 0018 	add.w	r0, r3, #24
 8003e96:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <OV5640_SetLightMode+0x204>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e9e:	f107 020f 	add.w	r2, r7, #15
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f000 f954 	bl	8004150 <ov5640_write_reg>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <OV5640_SetLightMode+0x160>
            {
              ret = OV5640_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d9dc      	bls.n	8003e7a <OV5640_SetLightMode+0x126>
            }
          }
        }
        break;
 8003ec0:	e040      	b.n	8003f44 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e01f      	b.n	8003f08 <OV5640_SetLightMode+0x1b4>
        {
          if (ret != OV5640_ERROR)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d018      	beq.n	8003f02 <OV5640_SetLightMode+0x1ae>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <OV5640_SetLightMode+0x208>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	885b      	ldrh	r3, [r3, #2]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f103 0018 	add.w	r0, r3, #24
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <OV5640_SetLightMode+0x208>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003eec:	f107 020f 	add.w	r2, r7, #15
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f000 f92d 	bl	8004150 <ov5640_write_reg>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <OV5640_SetLightMode+0x1ae>
            {
              ret = OV5640_ERROR;
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d9dc      	bls.n	8003ec8 <OV5640_SetLightMode+0x174>
            }
          }
        }
        break;
 8003f0e:	e019      	b.n	8003f44 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e012      	b.n	8003f3c <OV5640_SetLightMode+0x1e8>
        {

            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <OV5640_SetLightMode+0x20c>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	885b      	ldrh	r3, [r3, #2]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	73fb      	strb	r3, [r7, #15]

            I2C2_WriteData(OV5640_ADDR, OV5640_LightModeAuto[index][0], 2, tmp);
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <OV5640_SetLightMode+0x20c>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	2078      	movs	r0, #120	; 0x78
 8003f32:	f7fd fe77 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d9e9      	bls.n	8003f16 <OV5640_SetLightMode+0x1c2>

        }
        break;
 8003f42:	bf00      	nop
    }

  return ret;
 8003f44:	697b      	ldr	r3, [r7, #20]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	08011ff4 	.word	0x08011ff4
 8003f54:	08012010 	.word	0x08012010
 8003f58:	0801202c 	.word	0x0801202c
 8003f5c:	08012048 	.word	0x08012048
 8003f60:	08012064 	.word	0x08012064

08003f64 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <OV5640_SetBrightness+0x8c>)
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f76:	c303      	stmia	r3!, {r0, r1}
 8003f78:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8003f7a:	23ff      	movs	r3, #255	; 0xff
 8003f7c:	75fb      	strb	r3, [r7, #23]
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f245 0101 	movw	r1, #20481	; 0x5001
 8003f86:	2078      	movs	r0, #120	; 0x78
 8003f88:	f7fd fe4c 	bl	8001c24 <I2C2_WriteData>


	tmp = brightness_level[Level + 4];
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	3318      	adds	r3, #24
 8003f92:	443b      	add	r3, r7
 8003f94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003f98:	75fb      	strb	r3, [r7, #23]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL7, 2, tmp);
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f245 5187 	movw	r1, #21895	; 0x5587
 8003fa2:	2078      	movs	r0, #120	; 0x78
 8003fa4:	f7fd fe3e 	bl	8001c24 <I2C2_WriteData>


    tmp = 0x04;
 8003fa8:	2304      	movs	r3, #4
 8003faa:	75fb      	strb	r3, [r7, #23]
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003fb4:	2078      	movs	r0, #120	; 0x78
 8003fb6:	f7fd fe35 	bl	8001c24 <I2C2_WriteData>


    if (Level < 0)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da09      	bge.n	8003fd4 <OV5640_SetBrightness+0x70>
    {
      tmp = 0x01;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f245 5188 	movw	r1, #21896	; 0x5588
 8003fcc:	2078      	movs	r0, #120	; 0x78
 8003fce:	f7fd fe29 	bl	8001c24 <I2C2_WriteData>
 8003fd2:	e008      	b.n	8003fe6 <OV5640_SetBrightness+0x82>

    }
    else
    {
      tmp = 0x09;
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f245 5188 	movw	r1, #21896	; 0x5588
 8003fe0:	2078      	movs	r0, #120	; 0x78
 8003fe2:	f7fd fe1f 	bl	8001c24 <I2C2_WriteData>
    }


  return 1;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	08011a68 	.word	0x08011a68

08003ff4 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <OV5640_SetSaturation+0x88>)
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	ca07      	ldmia	r2, {r0, r1, r2}
 8004006:	c303      	stmia	r3!, {r0, r1}
 8004008:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800400a:	23ff      	movs	r3, #255	; 0xff
 800400c:	77fb      	strb	r3, [r7, #31]


	I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	2202      	movs	r2, #2
 8004012:	f245 0101 	movw	r1, #20481	; 0x5001
 8004016:	2078      	movs	r0, #120	; 0x78
 8004018:	f7fd fe04 	bl	8001c24 <I2C2_WriteData>


	tmp = saturation_level[Level + 4];
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	3304      	adds	r3, #4
 8004020:	3320      	adds	r3, #32
 8004022:	443b      	add	r3, r7
 8004024:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004028:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL3, 2, tmp);
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	2202      	movs	r2, #2
 800402e:	f245 5183 	movw	r1, #21891	; 0x5583
 8004032:	2078      	movs	r0, #120	; 0x78
 8004034:	f7fd fdf6 	bl	8001c24 <I2C2_WriteData>


	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL4, 2, tmp);
 8004038:	7ffb      	ldrb	r3, [r7, #31]
 800403a:	2202      	movs	r2, #2
 800403c:	f245 5184 	movw	r1, #21892	; 0x5584
 8004040:	2078      	movs	r0, #120	; 0x78
 8004042:	f7fd fdef 	bl	8001c24 <I2C2_WriteData>


	tmp = 0x02;
 8004046:	2302      	movs	r3, #2
 8004048:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2202      	movs	r2, #2
 800404e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004052:	2078      	movs	r0, #120	; 0x78
 8004054:	f7fd fde6 	bl	8001c24 <I2C2_WriteData>



	tmp = 0x41;
 8004058:	2341      	movs	r3, #65	; 0x41
 800405a:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	2202      	movs	r2, #2
 8004060:	f245 5188 	movw	r1, #21896	; 0x5588
 8004064:	2078      	movs	r0, #120	; 0x78
 8004066:	f7fd fddd 	bl	8001c24 <I2C2_WriteData>




    ret = OV5640_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	61bb      	str	r3, [r7, #24]


  return ret;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	08011a74 	.word	0x08011a74

08004080 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800408a:	4a2e      	ldr	r2, [pc, #184]	; (8004144 <OV5640_SetHueDegree+0xc4>)
 800408c:	f107 0320 	add.w	r3, r7, #32
 8004090:	ca07      	ldmia	r2, {r0, r1, r2}
 8004092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004096:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <OV5640_SetHueDegree+0xc8>)
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	ca07      	ldmia	r2, {r0, r1, r2}
 800409e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <OV5640_SetHueDegree+0xcc>)
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80040aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 80040b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040b8:	2202      	movs	r2, #2
 80040ba:	f245 0101 	movw	r1, #20481	; 0x5001
 80040be:	2078      	movs	r0, #120	; 0x78
 80040c0:	f7fd fdb0 	bl	8001c24 <I2C2_WriteData>


    tmp = 0x01;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 80040ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040ce:	2202      	movs	r2, #2
 80040d0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80040d4:	2078      	movs	r0, #120	; 0x78
 80040d6:	f7fd fda5 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl1[Degree + 6];
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3306      	adds	r3, #6
 80040de:	3330      	adds	r3, #48	; 0x30
 80040e0:	443b      	add	r3, r7
 80040e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL1, 2, tmp);
 80040ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040ee:	2202      	movs	r2, #2
 80040f0:	f245 5181 	movw	r1, #21889	; 0x5581
 80040f4:	2078      	movs	r0, #120	; 0x78
 80040f6:	f7fd fd95 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl2[Degree + 6];
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3306      	adds	r3, #6
 80040fe:	3330      	adds	r3, #48	; 0x30
 8004100:	443b      	add	r3, r7
 8004102:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL2, 2, tmp);
 800410a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800410e:	2202      	movs	r2, #2
 8004110:	f245 5182 	movw	r1, #21890	; 0x5582
 8004114:	2078      	movs	r0, #120	; 0x78
 8004116:	f7fd fd85 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl8[Degree + 6];
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	3306      	adds	r3, #6
 800411e:	3330      	adds	r3, #48	; 0x30
 8004120:	443b      	add	r3, r7
 8004122:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 800412a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800412e:	2202      	movs	r2, #2
 8004130:	f245 5188 	movw	r1, #21896	; 0x5588
 8004134:	2078      	movs	r0, #120	; 0x78
 8004136:	f7fd fd75 	bl	8001c24 <I2C2_WriteData>

  return 1;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	3730      	adds	r7, #48	; 0x30
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	08011a8c 	.word	0x08011a8c
 8004148:	08011a98 	.word	0x08011a98
 800414c:	08011aa4 	.word	0x08011aa4

08004150 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	817b      	strh	r3, [r7, #10]
 8004160:	4613      	mov	r3, r2
 8004162:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681c      	ldr	r4, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6898      	ldr	r0, [r3, #8]
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	47a0      	blx	r4
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}
	...

08004180 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <SD_CheckStatus+0x38>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004190:	f7fe fa3e 	bl	8002610 <BSP_SD_GetCardState>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <SD_CheckStatus+0x38>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SD_CheckStatus+0x38>)
 80041a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80041aa:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <SD_CheckStatus+0x38>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200000a0 	.word	0x200000a0

080041bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ffd9 	bl	8004180 <SD_CheckStatus>
 80041ce:	4603      	mov	r3, r0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ffcb 	bl	8004180 <SD_CheckStatus>
 80041ea:	4603      	mov	r3, r0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f7fe f9bd 	bl	8002590 <BSP_SD_ReadBlocks>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800421c:	bf00      	nop
 800421e:	f7fe f9f7 	bl	8002610 <BSP_SD_GetCardState>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1fa      	bne.n	800421e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	f7fe f9bc 	bl	80025d0 <BSP_SD_WriteBlocks>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d107      	bne.n	800426e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800425e:	bf00      	nop
 8004260:	f7fe f9d6 	bl	8002610 <BSP_SD_GetCardState>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1fa      	bne.n	8004260 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08c      	sub	sp, #48	; 0x30
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	603a      	str	r2, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	460b      	mov	r3, r1
 8004286:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <SD_ioctl+0xa8>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <SD_ioctl+0x28>
 800429c:	2303      	movs	r3, #3
 800429e:	e03b      	b.n	8004318 <SD_ioctl+0xa0>

  switch (cmd)
 80042a0:	79bb      	ldrb	r3, [r7, #6]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d833      	bhi.n	800430e <SD_ioctl+0x96>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <SD_ioctl+0x34>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c5 	.word	0x080042c5
 80042b4:	080042dd 	.word	0x080042dd
 80042b8:	080042f7 	.word	0x080042f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042c2:	e027      	b.n	8004314 <SD_ioctl+0x9c>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe f9bf 	bl	800264c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042da:	e01b      	b.n	8004314 <SD_ioctl+0x9c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe f9b3 	bl	800264c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042f4:	e00e      	b.n	8004314 <SD_ioctl+0x9c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042f6:	f107 030c 	add.w	r3, r7, #12
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe f9a6 	bl	800264c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8004300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800430c:	e002      	b.n	8004314 <SD_ioctl+0x9c>

  default:
    res = RES_PARERR;
 800430e:	2304      	movs	r3, #4
 8004310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004318:	4618      	mov	r0, r3
 800431a:	3730      	adds	r7, #48	; 0x30
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200000a0 	.word	0x200000a0

08004324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_MspInit+0x44>)
 800432c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432e:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <HAL_MspInit+0x44>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6613      	str	r3, [r2, #96]	; 0x60
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_MspInit+0x44>)
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_MspInit+0x44>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <HAL_MspInit+0x44>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6593      	str	r3, [r2, #88]	; 0x58
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_MspInit+0x44>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4a      	ldr	r2, [pc, #296]	; (80044b4 <HAL_DCMI_MspInit+0x148>)
 800438a:	4293      	cmp	r3, r2
 800438c:	f040 808d 	bne.w	80044aa <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	4a48      	ldr	r2, [pc, #288]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 8004396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439c:	4b46      	ldr	r3, [pc, #280]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	4a42      	ldr	r2, [pc, #264]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043c0:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	4a3c      	ldr	r2, [pc, #240]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043de:	f043 0310 	orr.w	r3, r3, #16
 80043e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_DCMI_MspInit+0x14c>)
 80043e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80043f0:	f645 7320 	movw	r3, #24352	; 0x5f20
 80043f4:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043fe:	2302      	movs	r3, #2
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004402:	230a      	movs	r3, #10
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004406:	f107 031c 	add.w	r3, r7, #28
 800440a:	4619      	mov	r1, r3
 800440c:	482b      	ldr	r0, [pc, #172]	; (80044bc <HAL_DCMI_MspInit+0x150>)
 800440e:	f001 fd0f 	bl	8005e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8004412:	23b0      	movs	r3, #176	; 0xb0
 8004414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800441e:	2302      	movs	r3, #2
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004422:	230a      	movs	r3, #10
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004426:	f107 031c 	add.w	r3, r7, #28
 800442a:	4619      	mov	r1, r3
 800442c:	4824      	ldr	r0, [pc, #144]	; (80044c0 <HAL_DCMI_MspInit+0x154>)
 800442e:	f001 fcff 	bl	8005e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8004432:	2320      	movs	r3, #32
 8004434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800443e:	2302      	movs	r3, #2
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004442:	230a      	movs	r3, #10
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8004446:	f107 031c 	add.w	r3, r7, #28
 800444a:	4619      	mov	r1, r3
 800444c:	481d      	ldr	r0, [pc, #116]	; (80044c4 <HAL_DCMI_MspInit+0x158>)
 800444e:	f001 fcef 	bl	8005e30 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004454:	4a1d      	ldr	r2, [pc, #116]	; (80044cc <HAL_DCMI_MspInit+0x160>)
 8004456:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8004464:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800446a:	4b17      	ldr	r3, [pc, #92]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004470:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 800447a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004488:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800448c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800448e:	480e      	ldr	r0, [pc, #56]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 8004490:	f001 f948 	bl	8005724 <HAL_DMA_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 800449a:	f7ff f94f 	bl	800373c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <HAL_DCMI_MspInit+0x15c>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80044aa:	bf00      	nop
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	50050000 	.word	0x50050000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	48001c00 	.word	0x48001c00
 80044c0:	48002000 	.word	0x48002000
 80044c4:	48001000 	.word	0x48001000
 80044c8:	200002f0 	.word	0x200002f0
 80044cc:	4002046c 	.word	0x4002046c

080044d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b0ae      	sub	sp, #184	; 0xb8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	228c      	movs	r2, #140	; 0x8c
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f00c f8db 	bl	80106ac <memset>
  if(hsd->Instance==SDMMC1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <HAL_SD_MspInit+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d176      	bne.n	80045ee <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8004500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004504:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8004506:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800450a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800450e:	2302      	movs	r3, #2
 8004510:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004516:	2308      	movs	r3, #8
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800451a:	2302      	movs	r3, #2
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800451e:	2304      	movs	r3, #4
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004522:	2302      	movs	r3, #2
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004526:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800452c:	f107 0318 	add.w	r3, r7, #24
 8004530:	4618      	mov	r0, r3
 8004532:	f003 fcd3 	bl	8007edc <HAL_RCCEx_PeriphCLKConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 800453c:	f7ff f8fe 	bl	800373c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004540:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_SD_MspInit+0x12c>)
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	4a2d      	ldr	r2, [pc, #180]	; (80045fc <HAL_SD_MspInit+0x12c>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	6613      	str	r3, [r2, #96]	; 0x60
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_SD_MspInit+0x12c>)
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004558:	4b28      	ldr	r3, [pc, #160]	; (80045fc <HAL_SD_MspInit+0x12c>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <HAL_SD_MspInit+0x12c>)
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_SD_MspInit+0x12c>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_SD_MspInit+0x12c>)
 8004572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004574:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_SD_MspInit+0x12c>)
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_SD_MspInit+0x12c>)
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004588:	2304      	movs	r3, #4
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459a:	2303      	movs	r3, #3
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80045a0:	230c      	movs	r3, #12
 80045a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80045a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4814      	ldr	r0, [pc, #80]	; (8004600 <HAL_SD_MspInit+0x130>)
 80045ae:	f001 fc3f 	bl	8005e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80045b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80045b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	2302      	movs	r3, #2
 80045bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c6:	2303      	movs	r3, #3
 80045c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80045cc:	230c      	movs	r3, #12
 80045ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045d6:	4619      	mov	r1, r3
 80045d8:	480a      	ldr	r0, [pc, #40]	; (8004604 <HAL_SD_MspInit+0x134>)
 80045da:	f001 fc29 	bl	8005e30 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	2031      	movs	r0, #49	; 0x31
 80045e4:	f000 fc05 	bl	8004df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045e8:	2031      	movs	r0, #49	; 0x31
 80045ea:	f000 fc1e 	bl	8004e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045ee:	bf00      	nop
 80045f0:	37b8      	adds	r7, #184	; 0xb8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40012800 	.word	0x40012800
 80045fc:	40021000 	.word	0x40021000
 8004600:	48000c00 	.word	0x48000c00
 8004604:	48000800 	.word	0x48000800

08004608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0ae      	sub	sp, #184	; 0xb8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004620:	f107 0318 	add.w	r3, r7, #24
 8004624:	228c      	movs	r2, #140	; 0x8c
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f00c f83f 	bl	80106ac <memset>
  if(huart->Instance==USART2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a32      	ldr	r2, [pc, #200]	; (80046fc <HAL_UART_MspInit+0xf4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d15c      	bne.n	80046f2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004638:	2302      	movs	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800463c:	2300      	movs	r3, #0
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004640:	f107 0318 	add.w	r3, r7, #24
 8004644:	4618      	mov	r0, r3
 8004646:	f003 fc49 	bl	8007edc <HAL_RCCEx_PeriphCLKConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004650:	f7ff f874 	bl	800373c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_UART_MspInit+0xf8>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004658:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_UART_MspInit+0xf8>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465e:	6593      	str	r3, [r2, #88]	; 0x58
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_UART_MspInit+0xf8>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_UART_MspInit+0xf8>)
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	4a23      	ldr	r2, [pc, #140]	; (8004700 <HAL_UART_MspInit+0xf8>)
 8004672:	f043 0308 	orr.w	r3, r3, #8
 8004676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_UART_MspInit+0xf8>)
 800467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <HAL_UART_MspInit+0xf8>)
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <HAL_UART_MspInit+0xf8>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_UART_MspInit+0xf8>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	2303      	movs	r3, #3
 80046b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046b4:	2307      	movs	r3, #7
 80046b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80046ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046be:	4619      	mov	r1, r3
 80046c0:	4810      	ldr	r0, [pc, #64]	; (8004704 <HAL_UART_MspInit+0xfc>)
 80046c2:	f001 fbb5 	bl	8005e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80046c6:	2304      	movs	r3, #4
 80046c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046cc:	2302      	movs	r3, #2
 80046ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d8:	2303      	movs	r3, #3
 80046da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046de:	2307      	movs	r3, #7
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80046e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046e8:	4619      	mov	r1, r3
 80046ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ee:	f001 fb9f 	bl	8005e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046f2:	bf00      	nop
 80046f4:	37b8      	adds	r7, #184	; 0xb8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40004400 	.word	0x40004400
 8004700:	40021000 	.word	0x40021000
 8004704:	48000c00 	.word	0x48000c00

08004708 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_FMC_MspInit+0xc4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d14f      	bne.n	80047c4 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_FMC_MspInit+0xc4>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800472a:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_FMC_MspInit+0xc8>)
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <HAL_FMC_MspInit+0xc8>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6513      	str	r3, [r2, #80]	; 0x50
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_FMC_MspInit+0xc8>)
 8004738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8004742:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004746:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004750:	2303      	movs	r3, #3
 8004752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004754:	230c      	movs	r3, #12
 8004756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	4619      	mov	r1, r3
 800475c:	481d      	ldr	r0, [pc, #116]	; (80047d4 <HAL_FMC_MspInit+0xcc>)
 800475e:	f001 fb67 	bl	8005e30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8004762:	f240 233f 	movw	r3, #575	; 0x23f
 8004766:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	2303      	movs	r3, #3
 8004772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004774:	230c      	movs	r3, #12
 8004776:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	4619      	mov	r1, r3
 800477c:	4816      	ldr	r0, [pc, #88]	; (80047d8 <HAL_FMC_MspInit+0xd0>)
 800477e:	f001 fb57 	bl	8005e30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8004782:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 8004786:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004790:	2303      	movs	r3, #3
 8004792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004794:	230c      	movs	r3, #12
 8004796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	480f      	ldr	r0, [pc, #60]	; (80047dc <HAL_FMC_MspInit+0xd4>)
 800479e:	f001 fb47 	bl	8005e30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80047a2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80047a6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b0:	2303      	movs	r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047b4:	230c      	movs	r3, #12
 80047b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4808      	ldr	r0, [pc, #32]	; (80047e0 <HAL_FMC_MspInit+0xd8>)
 80047be:	f001 fb37 	bl	8005e30 <HAL_GPIO_Init>
 80047c2:	e000      	b.n	80047c6 <HAL_FMC_MspInit+0xbe>
    return;
 80047c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	2001fbdc 	.word	0x2001fbdc
 80047d0:	40021000 	.word	0x40021000
 80047d4:	48001000 	.word	0x48001000
 80047d8:	48001800 	.word	0x48001800
 80047dc:	48000c00 	.word	0x48000c00
 80047e0:	48001400 	.word	0x48001400

080047e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80047ec:	f7ff ff8c 	bl	8004708 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <NMI_Handler+0x4>

080047fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004802:	e7fe      	b.n	8004802 <HardFault_Handler+0x4>

08004804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004808:	e7fe      	b.n	8004808 <MemManage_Handler+0x4>

0800480a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800480e:	e7fe      	b.n	800480e <BusFault_Handler+0x4>

08004810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004814:	e7fe      	b.n	8004814 <UsageFault_Handler+0x4>

08004816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004844:	f000 f992 	bl	8004b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}

0800484c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8004850:	2020      	movs	r0, #32
 8004852:	f001 fd89 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8004856:	f44f 7080 	mov.w	r0, #256	; 0x100
 800485a:	f001 fd85 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 800485e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004862:	f001 fd81 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <USART2_IRQHandler+0x10>)
 8004872:	f006 fd37 	bl	800b2e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000414 	.word	0x20000414

08004880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8004884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004888:	f001 fd6e 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 800488c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004890:	f001 fd6a 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 8004894:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004898:	f001 fd66 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800489c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048a0:	f001 fd62 	bl	8006368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <SDMMC1_IRQHandler+0x10>)
 80048ae:	f005 fbcb 	bl	800a048 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000390 	.word	0x20000390

080048bc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <DMA2_Channel6_IRQHandler+0x10>)
 80048c2:	f001 f8c6 	bl	8005a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200002f0 	.word	0x200002f0

080048d0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <DCMI_IRQHandler+0x10>)
 80048d6:	f000 fcfd 	bl	80052d4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000028c 	.word	0x2000028c

080048e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <DMA2D_IRQHandler+0x10>)
 80048ea:	f001 f991 	bl	8005c10 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000338 	.word	0x20000338

080048f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
	return 1;
 80048fc:	2301      	movs	r3, #1
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <_kill>:

int _kill(int pid, int sig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004912:	f00b fe7f 	bl	8010614 <__errno>
 8004916:	4603      	mov	r3, r0
 8004918:	2216      	movs	r2, #22
 800491a:	601a      	str	r2, [r3, #0]
	return -1;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_exit>:

void _exit (int status)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ffe7 	bl	8004908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800493a:	e7fe      	b.n	800493a <_exit+0x12>

0800493c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e00a      	b.n	8004964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800494e:	f3af 8000 	nop.w
 8004952:	4601      	mov	r1, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	60ba      	str	r2, [r7, #8]
 800495a:	b2ca      	uxtb	r2, r1
 800495c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	3301      	adds	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	dbf0      	blt.n	800494e <_read+0x12>
	}

return len;
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
	return -1;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800499e:	605a      	str	r2, [r3, #4]
	return 0;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <_isatty>:

int _isatty(int file)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	return 1;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
	return 0;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049e8:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <_sbrk+0x5c>)
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <_sbrk+0x60>)
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049f4:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <_sbrk+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <_sbrk+0x64>)
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <_sbrk+0x68>)
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d207      	bcs.n	8004a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a10:	f00b fe00 	bl	8010614 <__errno>
 8004a14:	4603      	mov	r3, r0
 8004a16:	220c      	movs	r2, #12
 8004a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	e009      	b.n	8004a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <_sbrk+0x64>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <_sbrk+0x64>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <_sbrk+0x64>)
 8004a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a32:	68fb      	ldr	r3, [r7, #12]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20050000 	.word	0x20050000
 8004a40:	00000400 	.word	0x00000400
 8004a44:	2001fbe0 	.word	0x2001fbe0
 8004a48:	2001fc30 	.word	0x2001fc30

08004a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <SystemInit+0x20>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <SystemInit+0x20>)
 8004a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004aa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a74:	f7ff ffea 	bl	8004a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a78:	480c      	ldr	r0, [pc, #48]	; (8004aac <LoopForever+0x6>)
  ldr r1, =_edata
 8004a7a:	490d      	ldr	r1, [pc, #52]	; (8004ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <LoopForever+0xe>)
  movs r3, #0
 8004a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a80:	e002      	b.n	8004a88 <LoopCopyDataInit>

08004a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a86:	3304      	adds	r3, #4

08004a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a8c:	d3f9      	bcc.n	8004a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a90:	4c0a      	ldr	r4, [pc, #40]	; (8004abc <LoopForever+0x16>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a94:	e001      	b.n	8004a9a <LoopFillZerobss>

08004a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a98:	3204      	adds	r2, #4

08004a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a9c:	d3fb      	bcc.n	8004a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a9e:	f00b fdd1 	bl	8010644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004aa2:	f7fe f871 	bl	8002b88 <main>

08004aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8004aa6:	e7fe      	b.n	8004aa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004aa8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab0:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8004ab4:	08012660 	.word	0x08012660
  ldr r2, =_sbss
 8004ab8:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8004abc:	2001fc30 	.word	0x2001fc30

08004ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ac0:	e7fe      	b.n	8004ac0 <ADC1_2_IRQHandler>

08004ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 f985 	bl	8004ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f80e 	bl	8004af4 <HAL_InitTick>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	71fb      	strb	r3, [r7, #7]
 8004ae2:	e001      	b.n	8004ae8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ae4:	f7ff fc1e 	bl	8004324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <HAL_InitTick+0x6c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d023      	beq.n	8004b50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_InitTick+0x70>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <HAL_InitTick+0x6c>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f99f 	bl	8004e62 <HAL_SYSTICK_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0f      	cmp	r3, #15
 8004b2e:	d809      	bhi.n	8004b44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b30:	2200      	movs	r2, #0
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	f000 f95b 	bl	8004df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_InitTick+0x74>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e007      	b.n	8004b54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e004      	b.n	8004b54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e001      	b.n	8004b54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200000ac 	.word	0x200000ac
 8004b64:	200000a4 	.word	0x200000a4
 8004b68:	200000a8 	.word	0x200000a8

08004b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_IncTick+0x20>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_IncTick+0x24>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <HAL_IncTick+0x24>)
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	200000ac 	.word	0x200000ac
 8004b90:	2001fbe4 	.word	0x2001fbe4

08004b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return uwTick;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_GetTick+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2001fbe4 	.word	0x2001fbe4

08004bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb4:	f7ff ffee 	bl	8004b94 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d005      	beq.n	8004bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_Delay+0x44>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bd2:	bf00      	nop
 8004bd4:	f7ff ffde 	bl	8004b94 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d8f7      	bhi.n	8004bd4 <HAL_Delay+0x28>
  {
  }
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200000ac 	.word	0x200000ac

08004bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	60d3      	str	r3, [r2, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	; (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db12      	blt.n	8004ccc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	f003 021f 	and.w	r2, r3, #31
 8004cac:	490a      	ldr	r1, [pc, #40]	; (8004cd8 <__NVIC_DisableIRQ+0x44>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cba:	3320      	adds	r3, #32
 8004cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004cc0:	f3bf 8f4f 	dsb	sy
}
 8004cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cc6:	f3bf 8f6f 	isb	sy
}
 8004cca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000e100 	.word	0xe000e100

08004cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	6039      	str	r1, [r7, #0]
 8004ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	db0a      	blt.n	8004d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	490c      	ldr	r1, [pc, #48]	; (8004d28 <__NVIC_SetPriority+0x4c>)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	0112      	lsls	r2, r2, #4
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d04:	e00a      	b.n	8004d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4908      	ldr	r1, [pc, #32]	; (8004d2c <__NVIC_SetPriority+0x50>)
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	3b04      	subs	r3, #4
 8004d14:	0112      	lsls	r2, r2, #4
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	440b      	add	r3, r1
 8004d1a:	761a      	strb	r2, [r3, #24]
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	e000e100 	.word	0xe000e100
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f1c3 0307 	rsb	r3, r3, #7
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	bf28      	it	cs
 8004d4e:	2304      	movcs	r3, #4
 8004d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3304      	adds	r3, #4
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d902      	bls.n	8004d60 <NVIC_EncodePriority+0x30>
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3b03      	subs	r3, #3
 8004d5e:	e000      	b.n	8004d62 <NVIC_EncodePriority+0x32>
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43da      	mvns	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	401a      	ands	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d78:	f04f 31ff 	mov.w	r1, #4294967295
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	43d9      	mvns	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d88:	4313      	orrs	r3, r2
         );
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3724      	adds	r7, #36	; 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da8:	d301      	bcc.n	8004dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004daa:	2301      	movs	r3, #1
 8004dac:	e00f      	b.n	8004dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dae:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <SysTick_Config+0x40>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004db6:	210f      	movs	r1, #15
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	f7ff ff8e 	bl	8004cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <SysTick_Config+0x40>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <SysTick_Config+0x40>)
 8004dc8:	2207      	movs	r2, #7
 8004dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000e010 	.word	0xe000e010

08004ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff05 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e04:	f7ff ff1a 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	6978      	ldr	r0, [r7, #20]
 8004e10:	f7ff ff8e 	bl	8004d30 <NVIC_EncodePriority>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff ff5d 	bl	8004cdc <__NVIC_SetPriority>
}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff ff0d 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff1d 	bl	8004c94 <__NVIC_DisableIRQ>
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ff94 	bl	8004d98 <SysTick_Config>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e075      	b.n	8004f7a <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fa62 	bl	800436c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ebe:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_DCMI_Init+0x108>)
 8004eda:	400b      	ands	r3, r1
 8004edc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004ef2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004efe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004f0a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004f16:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004f22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d112      	bne.n	8004f5a <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7f1b      	ldrb	r3, [r3, #28]
 8004f38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7f5b      	ldrb	r3, [r3, #29]
 8004f3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7f9b      	ldrb	r3, [r3, #30]
 8004f46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004f48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7fdb      	ldrb	r3, [r3, #31]
 8004f50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004f56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f58:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 021f 	orr.w	r2, r2, #31
 8004f68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	ffe0f007 	.word	0xffe0f007

08004f88 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DCMI_Start_DMA+0x1c>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e0b8      	b.n	8005116 <HAL_DCMI_Start_DMA+0x18e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fbe:	f023 0302 	bic.w	r3, r3, #2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_DCMI_Start_DMA+0x198>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	4a51      	ldr	r2, [pc, #324]	; (8005124 <HAL_DCMI_Start_DMA+0x19c>)
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d21f      	bcs.n	8005030 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3328      	adds	r3, #40	; 0x28
 8005000:	4619      	mov	r1, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	f000 fc45 	bl	8005894 <HAL_DMA_Start_IT>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d075      	beq.n	80050fc <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e072      	b.n	8005116 <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	2220      	movs	r2, #32
 8005036:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	4a3a      	ldr	r2, [pc, #232]	; (8005128 <HAL_DCMI_Start_DMA+0x1a0>)
 800503e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 800504c:	6838      	ldr	r0, [r7, #0]
 800504e:	f000 fae3 	bl	8005618 <DCMI_TransferSize>
 8005052:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e053      	b.n	8005116 <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	005a      	lsls	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	085a      	lsrs	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3328      	adds	r3, #40	; 0x28
 80050ca:	4619      	mov	r1, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f000 fbdf 	bl	8005894 <HAL_DMA_Start_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00f      	beq.n	80050fc <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e00c      	b.n	8005116 <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	08005421 	.word	0x08005421
 8005124:	080055e9 	.word	0x080055e9
 8005128:	08005551 	.word	0x08005551

0800512c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_DCMI_Stop+0x1a>
 8005142:	2302      	movs	r3, #2
 8005144:	e049      	b.n	80051da <HAL_DCMI_Stop+0xae>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005166:	f7ff fd15 	bl	8004b94 <HAL_GetTick>
 800516a:	60b8      	str	r0, [r7, #8]

  /* Check if the DCMI capture is effectively disabled */
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800516c:	e010      	b.n	8005190 <HAL_DCMI_Stop+0x64>
  {
    if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 800516e:	f7ff fd11 	bl	8004b94 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517c:	d908      	bls.n	8005190 <HAL_DCMI_Stop+0x64>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	659a      	str	r2, [r3, #88]	; 0x58

      status = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	73fb      	strb	r3, [r7, #15]
      break;
 800518e:	e006      	b.n	800519e <HAL_DCMI_Stop+0x72>
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e7      	bne.n	800516e <HAL_DCMI_Stop+0x42>
    }
  }

  /* Disable the DMA */
  if (HAL_DMA_Abort(hdcmi->DMA_Handle) != HAL_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fbd6 	bl	8005954 <HAL_DMA_Abort>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_DCMI_Stop+0x8c>
  {
    DCMI_DMAError(hdcmi->DMA_Handle);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa18 	bl	80055e8 <DCMI_DMAError>
  }

  /* Disable DCMI IP */
  __HAL_DCMI_DISABLE(hdcmi);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051c6:	601a      	str	r2, [r3, #0]

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_DCMI_Suspend+0x16>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e03d      	b.n	8005274 <HAL_DCMI_Suspend+0x92>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d12e      	bne.n	800526a <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2205      	movs	r2, #5
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005224:	f7ff fcb6 	bl	8004b94 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    /* Check if the DCMI capture is effectively disabled */
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800522a:	e017      	b.n	800525c <HAL_DCMI_Suspend+0x7a>
    {
      if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 800522c:	f7ff fcb2 	bl	8004b94 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523a:	d90f      	bls.n	800525c <HAL_DCMI_Suspend+0x7a>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00b      	b.n	8005274 <HAL_DCMI_Suspend+0x92>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e0      	bne.n	800522c <HAL_DCMI_Suspend+0x4a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_DCMI_Resume+0x16>
 800528e:	2302      	movs	r3, #2
 8005290:	e01a      	b.n	80052c8 <HAL_DCMI_Resume+0x4c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d10b      	bne.n	80052be <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2204      	movs	r2, #4
 80052f4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2202      	movs	r2, #2
 8005312:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	2b00      	cmp	r3, #0
 8005326:	d014      	beq.n	8005352 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005334:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <HAL_DCMI_IRQHandler+0xf4>)
 8005336:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fb47 	bl	80059d0 <HAL_DMA_Abort_IT>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f94b 	bl	80055e8 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2210      	movs	r2, #16
 8005362:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fc ffcb 	bl	8002300 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2208      	movs	r2, #8
 800537a:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fc ffd0 	bl	8002322 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d019      	beq.n	80053c0 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d10b      	bne.n	80053b2 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 021e 	bic.w	r2, r2, #30
 80053a8:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd fbae 	bl	8002b1c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	080055e9 	.word	0x080055e9

080053cc <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_DCMI_DisableCrop+0x16>
 80053de:	2302      	movs	r3, #2
 80053e0:	e018      	b.n	8005414 <HAL_DCMI_DisableCrop+0x48>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0204 	bic.w	r2, r2, #4
 8005400:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	d05c      	beq.n	80054f0 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800543e:	4293      	cmp	r3, r2
 8005440:	d10c      	bne.n	800545c <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 800545a:	e075      	b.n	8005548 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f000 f9e7 	bl	8005894 <HAL_DMA_Start_IT>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d03d      	beq.n	8005548 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 80054e8:	69f8      	ldr	r0, [r7, #28]
 80054ea:	f7fc ff2b 	bl	8002344 <HAL_DCMI_ErrorCallback>
}
 80054ee:	e02b      	b.n	8005548 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d124      	bne.n	8005548 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01d      	beq.n	8005548 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d10f      	bne.n	8005542 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 021e 	bic.w	r2, r2, #30
 8005530:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8005542:	69f8      	ldr	r0, [r7, #28]
 8005544:	f7fd faea 	bl	8002b1c <HAL_DCMI_FrameEventCallback>
}
 8005548:	bf00      	nop
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03c      	beq.n	80055e0 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800556e:	4293      	cmp	r3, r2
 8005570:	d036      	beq.n	80055e0 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	1e5a      	subs	r2, r3, #1
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f000 f96e 	bl	8005894 <HAL_DMA_Start_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d010      	beq.n	80055e0 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 80055da:	6978      	ldr	r0, [r7, #20]
 80055dc:	f7fc feb2 	bl	8002344 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7fc fe9a 	bl	8002344 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b096      	sub	sp, #88	; 0x58
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8005620:	2301      	movs	r3, #1
 8005622:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	2240      	movs	r2, #64	; 0x40
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f00b f83b 	bl	80106ac <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8005636:	2302      	movs	r3, #2
 8005638:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 800563a:	e02b      	b.n	8005694 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 800563c:	4a38      	ldr	r2, [pc, #224]	; (8005720 <DCMI_TransferSize+0x108>)
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005646:	429a      	cmp	r2, r3
 8005648:	d328      	bcc.n	800569c <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 800564a:	e014      	b.n	8005676 <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 800564c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	3358      	adds	r3, #88	; 0x58
 8005652:	443b      	add	r3, r7
 8005654:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3358      	adds	r3, #88	; 0x58
 8005660:	443b      	add	r3, r7
 8005662:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8005666:	4a2e      	ldr	r2, [pc, #184]	; (8005720 <DCMI_TransferSize+0x108>)
 8005668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 8005676:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <DCMI_TransferSize+0x108>)
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	fbb3 f1f2 	udiv	r1, r3, r2
 8005684:	fb01 f202 	mul.w	r2, r1, r2
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0de      	beq.n	800564c <DCMI_TransferSize+0x34>
    }
    j++;
 800568e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005690:	3301      	adds	r3, #1
 8005692:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8005694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d9d0      	bls.n	800563c <DCMI_TransferSize+0x24>
 800569a:	e000      	b.n	800569e <DCMI_TransferSize+0x86>
      break;
 800569c:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 80056a4:	230f      	movs	r3, #15
 80056a6:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80056a8:	e02c      	b.n	8005704 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 80056aa:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <DCMI_TransferSize+0x108>)
 80056ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056bc:	4293      	cmp	r3, r2
 80056be:	d81d      	bhi.n	80056fc <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80056c0:	4a17      	ldr	r2, [pc, #92]	; (8005720 <DCMI_TransferSize+0x108>)
 80056c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 80056d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	3358      	adds	r3, #88	; 0x58
 80056d6:	443b      	add	r3, r7
 80056d8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	3358      	adds	r3, #88	; 0x58
 80056e4:	443b      	add	r3, r7
 80056e6:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 80056ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	3358      	adds	r3, #88	; 0x58
 80056f0:	443b      	add	r3, r7
 80056f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1d7      	bne.n	80056aa <DCMI_TransferSize+0x92>
 80056fa:	e000      	b.n	80056fe <DCMI_TransferSize+0xe6>
        break;
 80056fc:	bf00      	nop
      }
    }
    j--;
 80056fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005700:	3b01      	subs	r3, #1
 8005702:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8005704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <DCMI_TransferSize+0xfc>
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005710:	4293      	cmp	r3, r2
 8005712:	d9ea      	bls.n	80056ea <DCMI_TransferSize+0xd2>
  }



  return output;
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005716:	4618      	mov	r0, r3
 8005718:	3758      	adds	r7, #88	; 0x58
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	080120dc 	.word	0x080120dc

08005724 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e098      	b.n	8005868 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	4b4d      	ldr	r3, [pc, #308]	; (8005874 <HAL_DMA_Init+0x150>)
 800573e:	429a      	cmp	r2, r3
 8005740:	d80f      	bhi.n	8005762 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_DMA_Init+0x154>)
 800574a:	4413      	add	r3, r2
 800574c:	4a4b      	ldr	r2, [pc, #300]	; (800587c <HAL_DMA_Init+0x158>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	009a      	lsls	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a48      	ldr	r2, [pc, #288]	; (8005880 <HAL_DMA_Init+0x15c>)
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
 8005760:	e00e      	b.n	8005780 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	4b46      	ldr	r3, [pc, #280]	; (8005884 <HAL_DMA_Init+0x160>)
 800576a:	4413      	add	r3, r2
 800576c:	4a43      	ldr	r2, [pc, #268]	; (800587c <HAL_DMA_Init+0x158>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	009a      	lsls	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a42      	ldr	r2, [pc, #264]	; (8005888 <HAL_DMA_Init+0x164>)
 800577e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057da:	d039      	beq.n	8005850 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_DMA_Init+0x15c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d11a      	bne.n	800581c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <HAL_DMA_Init+0x168>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f003 031c 	and.w	r3, r3, #28
 80057f2:	210f      	movs	r1, #15
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	4924      	ldr	r1, [pc, #144]	; (800588c <HAL_DMA_Init+0x168>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_DMA_Init+0x168>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580c:	f003 031c 	and.w	r3, r3, #28
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	491d      	ldr	r1, [pc, #116]	; (800588c <HAL_DMA_Init+0x168>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
 800581a:	e019      	b.n	8005850 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800581c:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <HAL_DMA_Init+0x16c>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f003 031c 	and.w	r3, r3, #28
 8005828:	210f      	movs	r1, #15
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	4917      	ldr	r1, [pc, #92]	; (8005890 <HAL_DMA_Init+0x16c>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005836:	4b16      	ldr	r3, [pc, #88]	; (8005890 <HAL_DMA_Init+0x16c>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	f003 031c 	and.w	r3, r3, #28
 8005846:	fa01 f303 	lsl.w	r3, r1, r3
 800584a:	4911      	ldr	r1, [pc, #68]	; (8005890 <HAL_DMA_Init+0x16c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40020407 	.word	0x40020407
 8005878:	bffdfff8 	.word	0xbffdfff8
 800587c:	cccccccd 	.word	0xcccccccd
 8005880:	40020000 	.word	0x40020000
 8005884:	bffdfbf8 	.word	0xbffdfbf8
 8005888:	40020400 	.word	0x40020400
 800588c:	400200a8 	.word	0x400200a8
 8005890:	400204a8 	.word	0x400204a8

08005894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Start_IT+0x20>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e04b      	b.n	800594c <HAL_DMA_Start_IT+0xb8>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d13a      	bne.n	800593e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f95f 	bl	8005bb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 020e 	orr.w	r2, r2, #14
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e00f      	b.n	800592c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 020a 	orr.w	r2, r2, #10
 800592a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e005      	b.n	800594a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d008      	beq.n	800597e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2204      	movs	r2, #4
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e022      	b.n	80059c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 020e 	bic.w	r2, r2, #14
 800598c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f003 021c 	and.w	r2, r3, #28
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f202 	lsl.w	r2, r1, r2
 80059b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d005      	beq.n	80059f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2204      	movs	r2, #4
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	e029      	b.n	8005a48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 020e 	bic.w	r2, r2, #14
 8005a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f003 021c 	and.w	r2, r3, #28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f202 	lsl.w	r2, r1, r2
 8005a26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
    }
  }
  return status;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f003 031c 	and.w	r3, r3, #28
 8005a72:	2204      	movs	r2, #4
 8005a74:	409a      	lsls	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d026      	beq.n	8005acc <HAL_DMA_IRQHandler+0x7a>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d021      	beq.n	8005acc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0204 	bic.w	r2, r2, #4
 8005aa4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	f003 021c 	and.w	r2, r3, #28
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d071      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005aca:	e06c      	b.n	8005ba6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	f003 031c 	and.w	r3, r3, #28
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02e      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xec>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d029      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 020a 	bic.w	r2, r2, #10
 8005b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b14:	f003 021c 	and.w	r2, r3, #28
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d038      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b3c:	e033      	b.n	8005ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f003 031c 	and.w	r3, r3, #28
 8005b46:	2208      	movs	r2, #8
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02a      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x156>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d025      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 020e 	bic.w	r2, r2, #14
 8005b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f003 021c 	and.w	r2, r3, #28
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2101      	movs	r1, #1
 8005b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
}
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f003 021c 	and.w	r2, r3, #28
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d108      	bne.n	8005bf4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005bf2:	e007      	b.n	8005c04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d026      	beq.n	8005c80 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d021      	beq.n	8005c80 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c4a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	f043 0201 	orr.w	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d026      	beq.n	8005cd8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d021      	beq.n	8005cd8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	f043 0202 	orr.w	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d026      	beq.n	8005d30 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d021      	beq.n	8005d30 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	f043 0204 	orr.w	r2, r3, #4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d013      	beq.n	8005d62 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00e      	beq.n	8005d62 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f853 	bl	8005e08 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d024      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01f      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d84:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01f      	beq.n	8005e00 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01a      	beq.n	8005e00 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f80e 	bl	8005e1c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e3e:	e166      	b.n	800610e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2101      	movs	r1, #1
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8158 	beq.w	8006108 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d005      	beq.n	8005e70 <HAL_GPIO_Init+0x40>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d130      	bne.n	8005ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4013      	ands	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	f003 0201 	and.w	r2, r3, #1
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d017      	beq.n	8005f0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	2203      	movs	r2, #3
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d123      	bne.n	8005f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	08da      	lsrs	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3208      	adds	r2, #8
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	220f      	movs	r2, #15
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	08da      	lsrs	r2, r3, #3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3208      	adds	r2, #8
 8005f5c:	6939      	ldr	r1, [r7, #16]
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0203 	and.w	r2, r3, #3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80b2 	beq.w	8006108 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_GPIO_Init+0x2fc>)
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	4a60      	ldr	r2, [pc, #384]	; (800612c <HAL_GPIO_Init+0x2fc>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	6613      	str	r3, [r2, #96]	; 0x60
 8005fb0:	4b5e      	ldr	r3, [pc, #376]	; (800612c <HAL_GPIO_Init+0x2fc>)
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fbc:	4a5c      	ldr	r2, [pc, #368]	; (8006130 <HAL_GPIO_Init+0x300>)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	220f      	movs	r2, #15
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fe6:	d02b      	beq.n	8006040 <HAL_GPIO_Init+0x210>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a52      	ldr	r2, [pc, #328]	; (8006134 <HAL_GPIO_Init+0x304>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d025      	beq.n	800603c <HAL_GPIO_Init+0x20c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a51      	ldr	r2, [pc, #324]	; (8006138 <HAL_GPIO_Init+0x308>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01f      	beq.n	8006038 <HAL_GPIO_Init+0x208>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a50      	ldr	r2, [pc, #320]	; (800613c <HAL_GPIO_Init+0x30c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d019      	beq.n	8006034 <HAL_GPIO_Init+0x204>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a4f      	ldr	r2, [pc, #316]	; (8006140 <HAL_GPIO_Init+0x310>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_GPIO_Init+0x200>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a4e      	ldr	r2, [pc, #312]	; (8006144 <HAL_GPIO_Init+0x314>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00d      	beq.n	800602c <HAL_GPIO_Init+0x1fc>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a4d      	ldr	r2, [pc, #308]	; (8006148 <HAL_GPIO_Init+0x318>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <HAL_GPIO_Init+0x1f8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a4c      	ldr	r2, [pc, #304]	; (800614c <HAL_GPIO_Init+0x31c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_GPIO_Init+0x1f4>
 8006020:	2307      	movs	r3, #7
 8006022:	e00e      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006024:	2308      	movs	r3, #8
 8006026:	e00c      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006028:	2306      	movs	r3, #6
 800602a:	e00a      	b.n	8006042 <HAL_GPIO_Init+0x212>
 800602c:	2305      	movs	r3, #5
 800602e:	e008      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006030:	2304      	movs	r3, #4
 8006032:	e006      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006034:	2303      	movs	r3, #3
 8006036:	e004      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006038:	2302      	movs	r3, #2
 800603a:	e002      	b.n	8006042 <HAL_GPIO_Init+0x212>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_GPIO_Init+0x212>
 8006040:	2300      	movs	r3, #0
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	f002 0203 	and.w	r2, r2, #3
 8006048:	0092      	lsls	r2, r2, #2
 800604a:	4093      	lsls	r3, r2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006052:	4937      	ldr	r1, [pc, #220]	; (8006130 <HAL_GPIO_Init+0x300>)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3302      	adds	r3, #2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006060:	4b3b      	ldr	r3, [pc, #236]	; (8006150 <HAL_GPIO_Init+0x320>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006084:	4a32      	ldr	r2, [pc, #200]	; (8006150 <HAL_GPIO_Init+0x320>)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <HAL_GPIO_Init+0x320>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	43db      	mvns	r3, r3
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060ae:	4a28      	ldr	r2, [pc, #160]	; (8006150 <HAL_GPIO_Init+0x320>)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060b4:	4b26      	ldr	r3, [pc, #152]	; (8006150 <HAL_GPIO_Init+0x320>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	43db      	mvns	r3, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060d8:	4a1d      	ldr	r2, [pc, #116]	; (8006150 <HAL_GPIO_Init+0x320>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <HAL_GPIO_Init+0x320>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006102:	4a13      	ldr	r2, [pc, #76]	; (8006150 <HAL_GPIO_Init+0x320>)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3301      	adds	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	f47f ae91 	bne.w	8005e40 <HAL_GPIO_Init+0x10>
  }
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40021000 	.word	0x40021000
 8006130:	40010000 	.word	0x40010000
 8006134:	48000400 	.word	0x48000400
 8006138:	48000800 	.word	0x48000800
 800613c:	48000c00 	.word	0x48000c00
 8006140:	48001000 	.word	0x48001000
 8006144:	48001400 	.word	0x48001400
 8006148:	48001800 	.word	0x48001800
 800614c:	48001c00 	.word	0x48001c00
 8006150:	40010400 	.word	0x40010400

08006154 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006162:	e0c9      	b.n	80062f8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006164:	2201      	movs	r2, #1
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	4013      	ands	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80bc 	beq.w	80062f2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800617a:	4a66      	ldr	r2, [pc, #408]	; (8006314 <HAL_GPIO_DeInit+0x1c0>)
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	089b      	lsrs	r3, r3, #2
 8006180:	3302      	adds	r3, #2
 8006182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006186:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	220f      	movs	r2, #15
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061a2:	d02b      	beq.n	80061fc <HAL_GPIO_DeInit+0xa8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a5c      	ldr	r2, [pc, #368]	; (8006318 <HAL_GPIO_DeInit+0x1c4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d025      	beq.n	80061f8 <HAL_GPIO_DeInit+0xa4>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_GPIO_DeInit+0x1c8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d01f      	beq.n	80061f4 <HAL_GPIO_DeInit+0xa0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a5a      	ldr	r2, [pc, #360]	; (8006320 <HAL_GPIO_DeInit+0x1cc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d019      	beq.n	80061f0 <HAL_GPIO_DeInit+0x9c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a59      	ldr	r2, [pc, #356]	; (8006324 <HAL_GPIO_DeInit+0x1d0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <HAL_GPIO_DeInit+0x98>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a58      	ldr	r2, [pc, #352]	; (8006328 <HAL_GPIO_DeInit+0x1d4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00d      	beq.n	80061e8 <HAL_GPIO_DeInit+0x94>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a57      	ldr	r2, [pc, #348]	; (800632c <HAL_GPIO_DeInit+0x1d8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <HAL_GPIO_DeInit+0x90>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a56      	ldr	r2, [pc, #344]	; (8006330 <HAL_GPIO_DeInit+0x1dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <HAL_GPIO_DeInit+0x8c>
 80061dc:	2307      	movs	r3, #7
 80061de:	e00e      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061e0:	2308      	movs	r3, #8
 80061e2:	e00c      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061e4:	2306      	movs	r3, #6
 80061e6:	e00a      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061e8:	2305      	movs	r3, #5
 80061ea:	e008      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061ec:	2304      	movs	r3, #4
 80061ee:	e006      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061f0:	2303      	movs	r3, #3
 80061f2:	e004      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e002      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_GPIO_DeInit+0xaa>
 80061fc:	2300      	movs	r3, #0
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	f002 0203 	and.w	r2, r2, #3
 8006204:	0092      	lsls	r2, r2, #2
 8006206:	4093      	lsls	r3, r2
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	429a      	cmp	r2, r3
 800620c:	d132      	bne.n	8006274 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800620e:	4b49      	ldr	r3, [pc, #292]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	43db      	mvns	r3, r3
 8006216:	4947      	ldr	r1, [pc, #284]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 8006218:	4013      	ands	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800621c:	4b45      	ldr	r3, [pc, #276]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	43db      	mvns	r3, r3
 8006224:	4943      	ldr	r1, [pc, #268]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 8006226:	4013      	ands	r3, r2
 8006228:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800622a:	4b42      	ldr	r3, [pc, #264]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	43db      	mvns	r3, r3
 8006232:	4940      	ldr	r1, [pc, #256]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 8006234:	4013      	ands	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006238:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	43db      	mvns	r3, r3
 8006240:	493c      	ldr	r1, [pc, #240]	; (8006334 <HAL_GPIO_DeInit+0x1e0>)
 8006242:	4013      	ands	r3, r2
 8006244:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	220f      	movs	r2, #15
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006256:	4a2f      	ldr	r2, [pc, #188]	; (8006314 <HAL_GPIO_DeInit+0x1c0>)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	3302      	adds	r3, #2
 800625e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	43da      	mvns	r2, r3
 8006266:	482b      	ldr	r0, [pc, #172]	; (8006314 <HAL_GPIO_DeInit+0x1c0>)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	400a      	ands	r2, r1
 800626e:	3302      	adds	r3, #2
 8006270:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	2103      	movs	r1, #3
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	08da      	lsrs	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3208      	adds	r2, #8
 8006290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	220f      	movs	r2, #15
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	08d2      	lsrs	r2, r2, #3
 80062a8:	4019      	ands	r1, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3208      	adds	r2, #8
 80062ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	2103      	movs	r1, #3
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	2101      	movs	r1, #1
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	401a      	ands	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	2103      	movs	r1, #3
 80062e6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ea:	43db      	mvns	r3, r3
 80062ec:	401a      	ands	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	3301      	adds	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af2f 	bne.w	8006164 <HAL_GPIO_DeInit+0x10>
  }
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40010000 	.word	0x40010000
 8006318:	48000400 	.word	0x48000400
 800631c:	48000800 	.word	0x48000800
 8006320:	48000c00 	.word	0x48000c00
 8006324:	48001000 	.word	0x48001000
 8006328:	48001400 	.word	0x48001400
 800632c:	48001800 	.word	0x48001800
 8006330:	48001c00 	.word	0x48001c00
 8006334:	40010400 	.word	0x40010400

08006338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	807b      	strh	r3, [r7, #2]
 8006344:	4613      	mov	r3, r2
 8006346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006348:	787b      	ldrb	r3, [r7, #1]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006354:	e002      	b.n	800635c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006372:	4b08      	ldr	r3, [pc, #32]	; (8006394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d006      	beq.n	800638c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800637e:	4a05      	ldr	r2, [pc, #20]	; (8006394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc fa56 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40010400 	.word	0x40010400

08006398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e081      	b.n	80064ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8a8 	bl	8006514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2224      	movs	r2, #36	; 0x24
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d107      	bne.n	8006412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800640e:	609a      	str	r2, [r3, #8]
 8006410:	e006      	b.n	8006420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800641e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d104      	bne.n	8006432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e021      	b.n	800650c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2224      	movs	r2, #36	; 0x24
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f821 	bl	8006528 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	817b      	strh	r3, [r7, #10]
 800654e:	460b      	mov	r3, r1
 8006550:	813b      	strh	r3, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b20      	cmp	r3, #32
 8006560:	f040 80f9 	bne.w	8006756 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_I2C_Mem_Write+0x34>
 800656a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0ed      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_I2C_Mem_Write+0x4e>
 8006586:	2302      	movs	r3, #2
 8006588:	e0e6      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006592:	f7fe faff 	bl	8004b94 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2319      	movs	r3, #25
 800659e:	2201      	movs	r2, #1
 80065a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fbd9 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0d1      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	; 0x21
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a3a      	ldr	r2, [r7, #32]
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065dc:	88f8      	ldrh	r0, [r7, #6]
 80065de:	893a      	ldrh	r2, [r7, #8]
 80065e0:	8979      	ldrh	r1, [r7, #10]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	4603      	mov	r3, r0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fae9 	bl	8006bc4 <I2C_RequestMemoryWrite>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0a9      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d90e      	bls.n	800662c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006618:	b2da      	uxtb	r2, r3
 800661a:	8979      	ldrh	r1, [r7, #10]
 800661c:	2300      	movs	r3, #0
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fd41 	bl	80070ac <I2C_TransferConfig>
 800662a:	e00f      	b.n	800664c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	b2da      	uxtb	r2, r3
 800663c:	8979      	ldrh	r1, [r7, #10]
 800663e:	2300      	movs	r3, #0
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fd30 	bl	80070ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fbc3 	bl	8006ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e07b      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d034      	beq.n	8006704 <HAL_I2C_Mem_Write+0x1c8>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d130      	bne.n	8006704 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fb55 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e04d      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2bff      	cmp	r3, #255	; 0xff
 80066c4:	d90e      	bls.n	80066e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22ff      	movs	r2, #255	; 0xff
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	8979      	ldrh	r1, [r7, #10]
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fce5 	bl	80070ac <I2C_TransferConfig>
 80066e2:	e00f      	b.n	8006704 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	8979      	ldrh	r1, [r7, #10]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fcd4 	bl	80070ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d19e      	bne.n	800664c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fba2 	bl	8006e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e01a      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2220      	movs	r2, #32
 8006728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <HAL_I2C_Mem_Write+0x224>)
 8006736:	400b      	ands	r3, r1
 8006738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	fe00e800 	.word	0xfe00e800

08006764 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	4608      	mov	r0, r1
 800676e:	4611      	mov	r1, r2
 8006770:	461a      	mov	r2, r3
 8006772:	4603      	mov	r3, r0
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	460b      	mov	r3, r1
 8006778:	813b      	strh	r3, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b20      	cmp	r3, #32
 8006788:	f040 80fd 	bne.w	8006986 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_I2C_Mem_Read+0x34>
 8006792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0f1      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_I2C_Mem_Read+0x4e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0ea      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067ba:	f7fe f9eb 	bl	8004b94 <HAL_GetTick>
 80067be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	2319      	movs	r3, #25
 80067c6:	2201      	movs	r2, #1
 80067c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fac5 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0d5      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2222      	movs	r2, #34	; 0x22
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006804:	88f8      	ldrh	r0, [r7, #6]
 8006806:	893a      	ldrh	r2, [r7, #8]
 8006808:	8979      	ldrh	r1, [r7, #10]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4603      	mov	r3, r0
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fa29 	bl	8006c6c <I2C_RequestMemoryRead>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0ad      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2bff      	cmp	r3, #255	; 0xff
 8006834:	d90e      	bls.n	8006854 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	8979      	ldrh	r1, [r7, #10]
 8006844:	4b52      	ldr	r3, [pc, #328]	; (8006990 <HAL_I2C_Mem_Read+0x22c>)
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fc2d 	bl	80070ac <I2C_TransferConfig>
 8006852:	e00f      	b.n	8006874 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	b2da      	uxtb	r2, r3
 8006864:	8979      	ldrh	r1, [r7, #10]
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_I2C_Mem_Read+0x22c>)
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fc1c 	bl	80070ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2200      	movs	r2, #0
 800687c:	2104      	movs	r1, #4
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fa6c 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e07c      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d034      	beq.n	8006934 <HAL_I2C_Mem_Read+0x1d0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d130      	bne.n	8006934 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	2200      	movs	r2, #0
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa3d 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e04d      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d90e      	bls.n	8006914 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	22ff      	movs	r2, #255	; 0xff
 80068fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	b2da      	uxtb	r2, r3
 8006902:	8979      	ldrh	r1, [r7, #10]
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fbcd 	bl	80070ac <I2C_TransferConfig>
 8006912:	e00f      	b.n	8006934 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	b2da      	uxtb	r2, r3
 8006924:	8979      	ldrh	r1, [r7, #10]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fbbc 	bl	80070ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d19a      	bne.n	8006874 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa8a 	bl	8006e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e01a      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2220      	movs	r2, #32
 8006958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_I2C_Mem_Read+0x230>)
 8006966:	400b      	ands	r3, r1
 8006968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	80002400 	.word	0x80002400
 8006994:	fe00e800 	.word	0xfe00e800

08006998 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	f040 80f1 	bne.w	8006b9c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c8:	d101      	bne.n	80069ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0e7      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_I2C_IsDeviceReady+0x44>
 80069d8:	2302      	movs	r3, #2
 80069da:	e0e0      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2224      	movs	r2, #36	; 0x24
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d107      	bne.n	8006a0a <HAL_I2C_IsDeviceReady+0x72>
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a08:	e004      	b.n	8006a14 <HAL_I2C_IsDeviceReady+0x7c>
 8006a0a:	897b      	ldrh	r3, [r7, #10]
 8006a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a10:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fe f8bb 	bl	8004b94 <HAL_GetTick>
 8006a1e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	bf0c      	ite	eq
 8006a44:	2301      	moveq	r3, #1
 8006a46:	2300      	movne	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006a4c:	e034      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d01a      	beq.n	8006a8c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fe f89d 	bl	8004b94 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <HAL_I2C_IsDeviceReady+0xd4>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e088      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006ab8:	7ffb      	ldrb	r3, [r7, #31]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_I2C_IsDeviceReady+0x12c>
 8006abe:	7fbb      	ldrb	r3, [r7, #30]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0c4      	beq.n	8006a4e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d01a      	beq.n	8006b08 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2120      	movs	r1, #32
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f93d 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e058      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2220      	movs	r2, #32
 8006af2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e04a      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2120      	movs	r1, #32
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f922 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e03d      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2210      	movs	r2, #16
 8006b28:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d118      	bne.n	8006b6c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b48:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2120      	movs	r1, #32
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f901 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e01c      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f63f af3b 	bhi.w	80069f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bb4:	b2db      	uxtb	r3, r3
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	817b      	strh	r3, [r7, #10]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	813b      	strh	r3, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	8979      	ldrh	r1, [r7, #10]
 8006be4:	4b20      	ldr	r3, [pc, #128]	; (8006c68 <I2C_RequestMemoryWrite+0xa4>)
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fa5d 	bl	80070ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f8f0 	bl	8006ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e02c      	b.n	8006c60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d105      	bne.n	8006c18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c0c:	893b      	ldrh	r3, [r7, #8]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	629a      	str	r2, [r3, #40]	; 0x28
 8006c16:	e015      	b.n	8006c44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c18:	893b      	ldrh	r3, [r7, #8]
 8006c1a:	0a1b      	lsrs	r3, r3, #8
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f8d6 	bl	8006ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e012      	b.n	8006c60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3a:	893b      	ldrh	r3, [r7, #8]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f884 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	80002000 	.word	0x80002000

08006c6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	813b      	strh	r3, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	8979      	ldrh	r1, [r7, #10]
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <I2C_RequestMemoryRead+0xa4>)
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2300      	movs	r3, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa0a 	bl	80070ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f89d 	bl	8006ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e02c      	b.n	8006d06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d105      	bne.n	8006cbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb2:	893b      	ldrh	r3, [r7, #8]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28
 8006cbc:	e015      	b.n	8006cea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cbe:	893b      	ldrh	r3, [r7, #8]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	69b9      	ldr	r1, [r7, #24]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f883 	bl	8006ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e012      	b.n	8006d06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce0:	893b      	ldrh	r3, [r7, #8]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2140      	movs	r1, #64	; 0x40
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f831 	bl	8006d5c <I2C_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	80002000 	.word	0x80002000

08006d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d103      	bne.n	8006d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d007      	beq.n	8006d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	619a      	str	r2, [r3, #24]
  }
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d6c:	e022      	b.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d01e      	beq.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fd ff0d 	bl	8004b94 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f043 0220 	orr.w	r2, r3, #32
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e00f      	b.n	8006dd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2301      	moveq	r3, #1
 8006dc6:	2300      	movne	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d0cd      	beq.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006de8:	e02c      	b.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f870 	bl	8006ed4 <I2C_IsErrorOccurred>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e02a      	b.n	8006e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d01e      	beq.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fd fec5 	bl	8004b94 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d113      	bne.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e007      	b.n	8006e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d1cb      	bne.n	8006dea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e68:	e028      	b.n	8006ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f830 	bl	8006ed4 <I2C_IsErrorOccurred>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e026      	b.n	8006ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7e:	f7fd fe89 	bl	8004b94 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d113      	bne.n	8006ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e007      	b.n	8006ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d1cf      	bne.n	8006e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d075      	beq.n	8006fec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2210      	movs	r2, #16
 8006f06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f08:	e056      	b.n	8006fb8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d052      	beq.n	8006fb8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f12:	f7fd fe3f 	bl	8004b94 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <I2C_IsErrorOccurred+0x54>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d147      	bne.n	8006fb8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4a:	d12e      	bne.n	8006faa <I2C_IsErrorOccurred+0xd6>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f52:	d02a      	beq.n	8006faa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006f54:	7cfb      	ldrb	r3, [r7, #19]
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d027      	beq.n	8006faa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f6a:	f7fd fe13 	bl	8004b94 <HAL_GetTick>
 8006f6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f70:	e01b      	b.n	8006faa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f72:	f7fd fe0f 	bl	8004b94 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b19      	cmp	r3, #25
 8006f7e:	d914      	bls.n	8006faa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f84:	f043 0220 	orr.w	r2, r3, #32
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d1dc      	bne.n	8006f72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d003      	beq.n	8006fce <I2C_IsErrorOccurred+0xfa>
 8006fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d09d      	beq.n	8006f0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f043 0304 	orr.w	r3, r3, #4
 8006fe4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800700e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	f043 0308 	orr.w	r3, r3, #8
 8007026:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800705a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01c      	beq.n	800709c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff fe56 	bl	8006d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6859      	ldr	r1, [r3, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <I2C_IsErrorOccurred+0x1d4>)
 8007074:	400b      	ands	r3, r1
 8007076:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	431a      	orrs	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	fe00e800 	.word	0xfe00e800

080070ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	817b      	strh	r3, [r7, #10]
 80070ba:	4613      	mov	r3, r2
 80070bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070be:	897b      	ldrh	r3, [r7, #10]
 80070c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070c4:	7a7b      	ldrb	r3, [r7, #9]
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	0d5b      	lsrs	r3, r3, #21
 80070e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <I2C_TransferConfig+0x60>)
 80070ec:	430b      	orrs	r3, r1
 80070ee:	43db      	mvns	r3, r3
 80070f0:	ea02 0103 	and.w	r1, r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	03ff63ff 	.word	0x03ff63ff

08007110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_PWREx_GetVoltageRange+0x18>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800711c:	4618      	mov	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40007000 	.word	0x40007000

0800712c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713a:	d130      	bne.n	800719e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800713c:	4b23      	ldr	r3, [pc, #140]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007148:	d038      	beq.n	80071bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800715a:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2232      	movs	r2, #50	; 0x32
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	0c9b      	lsrs	r3, r3, #18
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007170:	e002      	b.n	8007178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b01      	subs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007184:	d102      	bne.n	800718c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f2      	bne.n	8007172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007198:	d110      	bne.n	80071bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e00f      	b.n	80071be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071aa:	d007      	beq.n	80071bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071b4:	4a05      	ldr	r2, [pc, #20]	; (80071cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40007000 	.word	0x40007000
 80071d0:	200000a4 	.word	0x200000a4
 80071d4:	431bde83 	.word	0x431bde83

080071d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80071e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071e6:	6053      	str	r3, [r2, #4]
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40007000 	.word	0x40007000

080071f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f000 bc08 	b.w	8007a1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800720c:	4b96      	ldr	r3, [pc, #600]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007216:	4b94      	ldr	r3, [pc, #592]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80e4 	beq.w	80073f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <HAL_RCC_OscConfig+0x4c>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b0c      	cmp	r3, #12
 8007238:	f040 808b 	bne.w	8007352 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b01      	cmp	r3, #1
 8007240:	f040 8087 	bne.w	8007352 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007244:	4b88      	ldr	r3, [pc, #544]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_RCC_OscConfig+0x64>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e3df      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1a      	ldr	r2, [r3, #32]
 8007260:	4b81      	ldr	r3, [pc, #516]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <HAL_RCC_OscConfig+0x7e>
 800726c:	4b7e      	ldr	r3, [pc, #504]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007274:	e005      	b.n	8007282 <HAL_RCC_OscConfig+0x8a>
 8007276:	4b7c      	ldr	r3, [pc, #496]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007282:	4293      	cmp	r3, r2
 8007284:	d223      	bcs.n	80072ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fdc6 	bl	8007e1c <RCC_SetFlashLatencyFromMSIRange>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e3c0      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800729a:	4b73      	ldr	r3, [pc, #460]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a72      	ldr	r2, [pc, #456]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072a0:	f043 0308 	orr.w	r3, r3, #8
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	4b70      	ldr	r3, [pc, #448]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	496d      	ldr	r1, [pc, #436]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072b8:	4b6b      	ldr	r3, [pc, #428]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	4968      	ldr	r1, [pc, #416]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	604b      	str	r3, [r1, #4]
 80072cc:	e025      	b.n	800731a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072ce:	4b66      	ldr	r3, [pc, #408]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a65      	ldr	r2, [pc, #404]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072d4:	f043 0308 	orr.w	r3, r3, #8
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	4b63      	ldr	r3, [pc, #396]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	4960      	ldr	r1, [pc, #384]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	495b      	ldr	r1, [pc, #364]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fd86 	bl	8007e1c <RCC_SetFlashLatencyFromMSIRange>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e380      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800731a:	f000 fcbb 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 800731e:	4602      	mov	r2, r0
 8007320:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	091b      	lsrs	r3, r3, #4
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	4950      	ldr	r1, [pc, #320]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800732c:	5ccb      	ldrb	r3, [r1, r3]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	4a4e      	ldr	r2, [pc, #312]	; (8007470 <HAL_RCC_OscConfig+0x278>)
 8007338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800733a:	4b4e      	ldr	r3, [pc, #312]	; (8007474 <HAL_RCC_OscConfig+0x27c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd fbd8 	bl	8004af4 <HAL_InitTick>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d052      	beq.n	80073f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	e364      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d032      	beq.n	80073c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800735a:	4b43      	ldr	r3, [pc, #268]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a42      	ldr	r2, [pc, #264]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007366:	f7fd fc15 	bl	8004b94 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800736e:	f7fd fc11 	bl	8004b94 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e34d      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007380:	4b39      	ldr	r3, [pc, #228]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800738c:	4b36      	ldr	r3, [pc, #216]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a35      	ldr	r2, [pc, #212]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007392:	f043 0308 	orr.w	r3, r3, #8
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	4b33      	ldr	r3, [pc, #204]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	4930      	ldr	r1, [pc, #192]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073aa:	4b2f      	ldr	r3, [pc, #188]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	492b      	ldr	r1, [pc, #172]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	604b      	str	r3, [r1, #4]
 80073be:	e01a      	b.n	80073f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073c0:	4b29      	ldr	r3, [pc, #164]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a28      	ldr	r2, [pc, #160]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073cc:	f7fd fbe2 	bl	8004b94 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073d4:	f7fd fbde 	bl	8004b94 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e31a      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073e6:	4b20      	ldr	r3, [pc, #128]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x1dc>
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d073      	beq.n	80074ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d005      	beq.n	8007414 <HAL_RCC_OscConfig+0x21c>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b0c      	cmp	r3, #12
 800740c:	d10e      	bne.n	800742c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b03      	cmp	r3, #3
 8007412:	d10b      	bne.n	800742c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d063      	beq.n	80074e8 <HAL_RCC_OscConfig+0x2f0>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d15f      	bne.n	80074e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e2f7      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d106      	bne.n	8007444 <HAL_RCC_OscConfig+0x24c>
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800743c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e025      	b.n	8007490 <HAL_RCC_OscConfig+0x298>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800744c:	d114      	bne.n	8007478 <HAL_RCC_OscConfig+0x280>
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a05      	ldr	r2, [pc, #20]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a02      	ldr	r2, [pc, #8]	; (8007468 <HAL_RCC_OscConfig+0x270>)
 8007460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	e013      	b.n	8007490 <HAL_RCC_OscConfig+0x298>
 8007468:	40021000 	.word	0x40021000
 800746c:	08012094 	.word	0x08012094
 8007470:	200000a4 	.word	0x200000a4
 8007474:	200000a8 	.word	0x200000a8
 8007478:	4ba0      	ldr	r3, [pc, #640]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a9f      	ldr	r2, [pc, #636]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800747e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	4b9d      	ldr	r3, [pc, #628]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a9c      	ldr	r2, [pc, #624]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800748a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800748e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d013      	beq.n	80074c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fd fb7c 	bl	8004b94 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a0:	f7fd fb78 	bl	8004b94 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e2b4      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074b2:	4b92      	ldr	r3, [pc, #584]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x2a8>
 80074be:	e014      	b.n	80074ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c0:	f7fd fb68 	bl	8004b94 <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074c8:	f7fd fb64 	bl	8004b94 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b64      	cmp	r3, #100	; 0x64
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e2a0      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074da:	4b88      	ldr	r3, [pc, #544]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0x2d0>
 80074e6:	e000      	b.n	80074ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d060      	beq.n	80075b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_OscConfig+0x310>
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b0c      	cmp	r3, #12
 8007500:	d119      	bne.n	8007536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d116      	bne.n	8007536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007508:	4b7c      	ldr	r3, [pc, #496]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_OscConfig+0x328>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e27d      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007520:	4b76      	ldr	r3, [pc, #472]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	061b      	lsls	r3, r3, #24
 800752e:	4973      	ldr	r1, [pc, #460]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007530:	4313      	orrs	r3, r2
 8007532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007534:	e040      	b.n	80075b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d023      	beq.n	8007586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800753e:	4b6f      	ldr	r3, [pc, #444]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a6e      	ldr	r2, [pc, #440]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754a:	f7fd fb23 	bl	8004b94 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007552:	f7fd fb1f 	bl	8004b94 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e25b      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007564:	4b65      	ldr	r3, [pc, #404]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007570:	4b62      	ldr	r3, [pc, #392]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	495f      	ldr	r1, [pc, #380]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007580:	4313      	orrs	r3, r2
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	e018      	b.n	80075b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007586:	4b5d      	ldr	r3, [pc, #372]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5c      	ldr	r2, [pc, #368]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800758c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007592:	f7fd faff 	bl	8004b94 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800759a:	f7fd fafb 	bl	8004b94 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e237      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075ac:	4b53      	ldr	r3, [pc, #332]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f0      	bne.n	800759a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d03c      	beq.n	800763e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01c      	beq.n	8007606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075cc:	4b4b      	ldr	r3, [pc, #300]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80075ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d2:	4a4a      	ldr	r2, [pc, #296]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075dc:	f7fd fada 	bl	8004b94 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e4:	f7fd fad6 	bl	8004b94 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e212      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075f6:	4b41      	ldr	r3, [pc, #260]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80075f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ef      	beq.n	80075e4 <HAL_RCC_OscConfig+0x3ec>
 8007604:	e01b      	b.n	800763e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007606:	4b3d      	ldr	r3, [pc, #244]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760c:	4a3b      	ldr	r2, [pc, #236]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007616:	f7fd fabd 	bl	8004b94 <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800761e:	f7fd fab9 	bl	8004b94 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e1f5      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007630:	4b32      	ldr	r3, [pc, #200]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ef      	bne.n	800761e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80a6 	beq.w	8007798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800764c:	2300      	movs	r3, #0
 800764e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007650:	4b2a      	ldr	r3, [pc, #168]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10d      	bne.n	8007678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800765e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007660:	4a26      	ldr	r2, [pc, #152]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 8007662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007666:	6593      	str	r3, [r2, #88]	; 0x58
 8007668:	4b24      	ldr	r3, [pc, #144]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007674:	2301      	movs	r3, #1
 8007676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <HAL_RCC_OscConfig+0x508>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d118      	bne.n	80076b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007684:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <HAL_RCC_OscConfig+0x508>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <HAL_RCC_OscConfig+0x508>)
 800768a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007690:	f7fd fa80 	bl	8004b94 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007698:	f7fd fa7c 	bl	8004b94 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e1b8      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076aa:	4b15      	ldr	r3, [pc, #84]	; (8007700 <HAL_RCC_OscConfig+0x508>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d108      	bne.n	80076d0 <HAL_RCC_OscConfig+0x4d8>
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076ce:	e029      	b.n	8007724 <HAL_RCC_OscConfig+0x52c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b05      	cmp	r3, #5
 80076d6:	d115      	bne.n	8007704 <HAL_RCC_OscConfig+0x50c>
 80076d8:	4b08      	ldr	r3, [pc, #32]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	4a07      	ldr	r2, [pc, #28]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076e0:	f043 0304 	orr.w	r3, r3, #4
 80076e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076e8:	4b04      	ldr	r3, [pc, #16]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	4a03      	ldr	r2, [pc, #12]	; (80076fc <HAL_RCC_OscConfig+0x504>)
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076f8:	e014      	b.n	8007724 <HAL_RCC_OscConfig+0x52c>
 80076fa:	bf00      	nop
 80076fc:	40021000 	.word	0x40021000
 8007700:	40007000 	.word	0x40007000
 8007704:	4b9d      	ldr	r3, [pc, #628]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	4a9c      	ldr	r2, [pc, #624]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007714:	4b99      	ldr	r3, [pc, #612]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	4a98      	ldr	r2, [pc, #608]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800771c:	f023 0304 	bic.w	r3, r3, #4
 8007720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772c:	f7fd fa32 	bl	8004b94 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007732:	e00a      	b.n	800774a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007734:	f7fd fa2e 	bl	8004b94 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007742:	4293      	cmp	r3, r2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e168      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800774a:	4b8c      	ldr	r3, [pc, #560]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ed      	beq.n	8007734 <HAL_RCC_OscConfig+0x53c>
 8007758:	e015      	b.n	8007786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775a:	f7fd fa1b 	bl	8004b94 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007760:	e00a      	b.n	8007778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007762:	f7fd fa17 	bl	8004b94 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007770:	4293      	cmp	r3, r2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e151      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007778:	4b80      	ldr	r3, [pc, #512]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ed      	bne.n	8007762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007786:	7ffb      	ldrb	r3, [r7, #31]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d105      	bne.n	8007798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800778c:	4b7b      	ldr	r3, [pc, #492]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800778e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007790:	4a7a      	ldr	r2, [pc, #488]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007796:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d03c      	beq.n	800781e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01c      	beq.n	80077e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077ac:	4b73      	ldr	r3, [pc, #460]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80077ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077b2:	4a72      	ldr	r2, [pc, #456]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077bc:	f7fd f9ea 	bl	8004b94 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077c4:	f7fd f9e6 	bl	8004b94 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e122      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077d6:	4b69      	ldr	r3, [pc, #420]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80077d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ef      	beq.n	80077c4 <HAL_RCC_OscConfig+0x5cc>
 80077e4:	e01b      	b.n	800781e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077e6:	4b65      	ldr	r3, [pc, #404]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80077e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ec:	4a63      	ldr	r2, [pc, #396]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f6:	f7fd f9cd 	bl	8004b94 <HAL_GetTick>
 80077fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077fe:	f7fd f9c9 	bl	8004b94 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e105      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007810:	4b5a      	ldr	r3, [pc, #360]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1ef      	bne.n	80077fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80f9 	beq.w	8007a1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	2b02      	cmp	r3, #2
 800782e:	f040 80cf 	bne.w	80079d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007832:	4b52      	ldr	r3, [pc, #328]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f003 0203 	and.w	r2, r3, #3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d12c      	bne.n	80078a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	3b01      	subs	r3, #1
 8007852:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d123      	bne.n	80078a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007864:	429a      	cmp	r2, r3
 8007866:	d11b      	bne.n	80078a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007874:	429a      	cmp	r2, r3
 8007876:	d113      	bne.n	80078a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	3b01      	subs	r3, #1
 8007886:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d109      	bne.n	80078a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	3b01      	subs	r3, #1
 800789a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800789c:	429a      	cmp	r2, r3
 800789e:	d071      	beq.n	8007984 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b0c      	cmp	r3, #12
 80078a4:	d068      	beq.n	8007978 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80078a6:	4b35      	ldr	r3, [pc, #212]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80078b2:	4b32      	ldr	r3, [pc, #200]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0ac      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80078c2:	4b2e      	ldr	r3, [pc, #184]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a2d      	ldr	r2, [pc, #180]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078ce:	f7fd f961 	bl	8004b94 <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078d4:	e008      	b.n	80078e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d6:	f7fd f95d 	bl	8004b94 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e099      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e8:	4b24      	ldr	r3, [pc, #144]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f0      	bne.n	80078d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078f4:	4b21      	ldr	r3, [pc, #132]	; (800797c <HAL_RCC_OscConfig+0x784>)
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	4b21      	ldr	r3, [pc, #132]	; (8007980 <HAL_RCC_OscConfig+0x788>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007904:	3a01      	subs	r2, #1
 8007906:	0112      	lsls	r2, r2, #4
 8007908:	4311      	orrs	r1, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800790e:	0212      	lsls	r2, r2, #8
 8007910:	4311      	orrs	r1, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007916:	0852      	lsrs	r2, r2, #1
 8007918:	3a01      	subs	r2, #1
 800791a:	0552      	lsls	r2, r2, #21
 800791c:	4311      	orrs	r1, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007922:	0852      	lsrs	r2, r2, #1
 8007924:	3a01      	subs	r2, #1
 8007926:	0652      	lsls	r2, r2, #25
 8007928:	4311      	orrs	r1, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800792e:	06d2      	lsls	r2, r2, #27
 8007930:	430a      	orrs	r2, r1
 8007932:	4912      	ldr	r1, [pc, #72]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007934:	4313      	orrs	r3, r2
 8007936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007938:	4b10      	ldr	r3, [pc, #64]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a0f      	ldr	r2, [pc, #60]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800793e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <HAL_RCC_OscConfig+0x784>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4a0c      	ldr	r2, [pc, #48]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800794a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800794e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007950:	f7fd f920 	bl	8004b94 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007958:	f7fd f91c 	bl	8004b94 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e058      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <HAL_RCC_OscConfig+0x784>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f0      	beq.n	8007958 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007976:	e050      	b.n	8007a1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e04f      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
 800797c:	40021000 	.word	0x40021000
 8007980:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d144      	bne.n	8007a1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007990:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a23      	ldr	r2, [pc, #140]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 8007996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800799a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800799c:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 80079a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079a8:	f7fd f8f4 	bl	8004b94 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b0:	f7fd f8f0 	bl	8004b94 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e02c      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079c2:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x7b8>
 80079ce:	e024      	b.n	8007a1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d01f      	beq.n	8007a16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a12      	ldr	r2, [pc, #72]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 80079dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e2:	f7fd f8d7 	bl	8004b94 <HAL_GetTick>
 80079e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e8:	e008      	b.n	80079fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ea:	f7fd f8d3 	bl	8004b94 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e00f      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f0      	bne.n	80079ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	4905      	ldr	r1, [pc, #20]	; (8007a24 <HAL_RCC_OscConfig+0x82c>)
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCC_OscConfig+0x830>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	60cb      	str	r3, [r1, #12]
 8007a14:	e001      	b.n	8007a1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40021000 	.word	0x40021000
 8007a28:	feeefffc 	.word	0xfeeefffc

08007a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0e7      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a40:	4b75      	ldr	r3, [pc, #468]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d910      	bls.n	8007a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4e:	4b72      	ldr	r3, [pc, #456]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f023 0207 	bic.w	r2, r3, #7
 8007a56:	4970      	ldr	r1, [pc, #448]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5e:	4b6e      	ldr	r3, [pc, #440]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0cf      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d010      	beq.n	8007a9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	4b66      	ldr	r3, [pc, #408]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d908      	bls.n	8007a9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a8c:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4960      	ldr	r1, [pc, #384]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d04c      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ab2:	4b5a      	ldr	r3, [pc, #360]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d121      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e0a6      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d107      	bne.n	8007ada <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aca:	4b54      	ldr	r3, [pc, #336]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d115      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e09a      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ae2:	4b4e      	ldr	r3, [pc, #312]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e08e      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af2:	4b4a      	ldr	r3, [pc, #296]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e086      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b02:	4b46      	ldr	r3, [pc, #280]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f023 0203 	bic.w	r2, r3, #3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	4943      	ldr	r1, [pc, #268]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b14:	f7fd f83e 	bl	8004b94 <HAL_GetTick>
 8007b18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b1c:	f7fd f83a 	bl	8004b94 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e06e      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b32:	4b3a      	ldr	r3, [pc, #232]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 020c 	and.w	r2, r3, #12
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d1eb      	bne.n	8007b1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d010      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	4b31      	ldr	r3, [pc, #196]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d208      	bcs.n	8007b72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b60:	4b2e      	ldr	r3, [pc, #184]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	492b      	ldr	r1, [pc, #172]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b72:	4b29      	ldr	r3, [pc, #164]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d210      	bcs.n	8007ba2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f023 0207 	bic.w	r2, r3, #7
 8007b88:	4923      	ldr	r1, [pc, #140]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b90:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <HAL_RCC_ClockConfig+0x1ec>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d001      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e036      	b.n	8007c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d008      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bae:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	4918      	ldr	r1, [pc, #96]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d009      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	4910      	ldr	r1, [pc, #64]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007be0:	f000 f858 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <HAL_RCC_ClockConfig+0x1f0>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	091b      	lsrs	r3, r3, #4
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	490b      	ldr	r1, [pc, #44]	; (8007c20 <HAL_RCC_ClockConfig+0x1f4>)
 8007bf2:	5ccb      	ldrb	r3, [r1, r3]
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1f8>)
 8007bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c00:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_ClockConfig+0x1fc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fc ff75 	bl	8004af4 <HAL_InitTick>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40022000 	.word	0x40022000
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	08012094 	.word	0x08012094
 8007c24:	200000a4 	.word	0x200000a4
 8007c28:	200000a8 	.word	0x200000a8

08007c2c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <HAL_RCC_MCOConfig+0x64>)
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3c:	4a14      	ldr	r2, [pc, #80]	; (8007c90 <HAL_RCC_MCOConfig+0x64>)
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_RCC_MCOConfig+0x64>)
 8007c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c56:	2302      	movs	r3, #2
 8007c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c62:	2300      	movs	r3, #0
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007c66:	f107 0314 	add.w	r3, r7, #20
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c70:	f7fe f8de 	bl	8005e30 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_RCC_MCOConfig+0x64>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	430b      	orrs	r3, r1
 8007c82:	4903      	ldr	r1, [pc, #12]	; (8007c90 <HAL_RCC_MCOConfig+0x64>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	3728      	adds	r7, #40	; 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40021000 	.word	0x40021000

08007c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ca2:	4b3e      	ldr	r3, [pc, #248]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 030c 	and.w	r3, r3, #12
 8007caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cac:	4b3b      	ldr	r3, [pc, #236]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b0c      	cmp	r3, #12
 8007cc0:	d121      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d11e      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007cc8:	4b34      	ldr	r3, [pc, #208]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cd4:	4b31      	ldr	r3, [pc, #196]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	e005      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ce4:	4b2d      	ldr	r3, [pc, #180]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cf0:	4a2b      	ldr	r2, [pc, #172]	; (8007da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10d      	bne.n	8007d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d04:	e00a      	b.n	8007d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d102      	bne.n	8007d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	e004      	b.n	8007d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d101      	bne.n	8007d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d18:	4b23      	ldr	r3, [pc, #140]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b0c      	cmp	r3, #12
 8007d20:	d134      	bne.n	8007d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d22:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d003      	beq.n	8007d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d003      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0xac>
 8007d38:	e005      	b.n	8007d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007d3c:	617b      	str	r3, [r7, #20]
      break;
 8007d3e:	e005      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007d40:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007d42:	617b      	str	r3, [r7, #20]
      break;
 8007d44:	e002      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	617b      	str	r3, [r7, #20]
      break;
 8007d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d4c:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	091b      	lsrs	r3, r3, #4
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	3301      	adds	r3, #1
 8007d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	fb03 f202 	mul.w	r2, r3, r2
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d72:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	0e5b      	lsrs	r3, r3, #25
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3724      	adds	r7, #36	; 0x24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	080120ac 	.word	0x080120ac
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	007a1200 	.word	0x007a1200

08007dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db0:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007db2:	681b      	ldr	r3, [r3, #0]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200000a4 	.word	0x200000a4

08007dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dc8:	f7ff fff0 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	4904      	ldr	r1, [pc, #16]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dda:	5ccb      	ldrb	r3, [r1, r3]
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40021000 	.word	0x40021000
 8007dec:	080120a4 	.word	0x080120a4

08007df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007df4:	f7ff ffda 	bl	8007dac <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	0adb      	lsrs	r3, r3, #11
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4904      	ldr	r1, [pc, #16]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40021000 	.word	0x40021000
 8007e18:	080120a4 	.word	0x080120a4

08007e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e28:	4b2a      	ldr	r3, [pc, #168]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e34:	f7ff f96c 	bl	8007110 <HAL_PWREx_GetVoltageRange>
 8007e38:	6178      	str	r0, [r7, #20]
 8007e3a:	e014      	b.n	8007e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e40:	4a24      	ldr	r2, [pc, #144]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e46:	6593      	str	r3, [r2, #88]	; 0x58
 8007e48:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e54:	f7ff f95c 	bl	8007110 <HAL_PWREx_GetVoltageRange>
 8007e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d10b      	bne.n	8007e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d919      	bls.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2ba0      	cmp	r3, #160	; 0xa0
 8007e78:	d902      	bls.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	e013      	b.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e80:	2301      	movs	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	e010      	b.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d902      	bls.n	8007e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	613b      	str	r3, [r7, #16]
 8007e90:	e00a      	b.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d102      	bne.n	8007e9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e98:	2302      	movs	r3, #2
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	e004      	b.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b70      	cmp	r3, #112	; 0x70
 8007ea2:	d101      	bne.n	8007ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f023 0207 	bic.w	r2, r3, #7
 8007eb0:	4909      	ldr	r1, [pc, #36]	; (8007ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007eb8:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d001      	beq.n	8007eca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	40022000 	.word	0x40022000

08007edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ee8:	2300      	movs	r3, #0
 8007eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d041      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f00:	d02a      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f06:	d824      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f0c:	d008      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f12:	d81e      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f1c:	d010      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f1e:	e018      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f20:	4b86      	ldr	r3, [pc, #536]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	4a85      	ldr	r2, [pc, #532]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f2c:	e015      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3304      	adds	r3, #4
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f97d 	bl	8009234 <RCCEx_PLLSAI1_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f3e:	e00c      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3320      	adds	r3, #32
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fa66 	bl	8009418 <RCCEx_PLLSAI2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f50:	e003      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	74fb      	strb	r3, [r7, #19]
      break;
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f60:	4b76      	ldr	r3, [pc, #472]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6e:	4973      	ldr	r1, [pc, #460]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f76:	e001      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	7cfb      	ldrb	r3, [r7, #19]
 8007f7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d041      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f90:	d02a      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007f92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f96:	d824      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f9c:	d008      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa2:	d81e      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fac:	d010      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007fae:	e018      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fb0:	4b62      	ldr	r3, [pc, #392]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	4a61      	ldr	r2, [pc, #388]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fbc:	e015      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f935 	bl	8009234 <RCCEx_PLLSAI1_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fce:	e00c      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3320      	adds	r3, #32
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fa1e 	bl	8009418 <RCCEx_PLLSAI2_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fe0:	e003      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8007fe6:	e000      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fea:	7cfb      	ldrb	r3, [r7, #19]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ff0:	4b52      	ldr	r3, [pc, #328]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffe:	494f      	ldr	r1, [pc, #316]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008006:	e001      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	7cfb      	ldrb	r3, [r7, #19]
 800800a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80a0 	beq.w	800815a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800801a:	2300      	movs	r3, #0
 800801c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800801e:	4b47      	ldr	r3, [pc, #284]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00d      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008034:	4b41      	ldr	r3, [pc, #260]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	4a40      	ldr	r2, [pc, #256]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803e:	6593      	str	r3, [r2, #88]	; 0x58
 8008040:	4b3e      	ldr	r3, [pc, #248]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800804c:	2301      	movs	r3, #1
 800804e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008050:	4b3b      	ldr	r3, [pc, #236]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3a      	ldr	r2, [pc, #232]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800805c:	f7fc fd9a 	bl	8004b94 <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008062:	e009      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008064:	f7fc fd96 	bl	8004b94 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d902      	bls.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	74fb      	strb	r3, [r7, #19]
        break;
 8008076:	e005      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008078:	4b31      	ldr	r3, [pc, #196]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ef      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008084:	7cfb      	ldrb	r3, [r7, #19]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d15c      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800808a:	4b2c      	ldr	r3, [pc, #176]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01f      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d019      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080a8:	4b24      	ldr	r3, [pc, #144]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080b4:	4b21      	ldr	r3, [pc, #132]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ba:	4a20      	ldr	r2, [pc, #128]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080c4:	4b1d      	ldr	r3, [pc, #116]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ca:	4a1c      	ldr	r2, [pc, #112]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e6:	f7fc fd55 	bl	8004b94 <HAL_GetTick>
 80080ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ec:	e00b      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ee:	f7fc fd51 	bl	8004b94 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d902      	bls.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	74fb      	strb	r3, [r7, #19]
            break;
 8008104:	e006      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0ec      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008114:	7cfb      	ldrb	r3, [r7, #19]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10c      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812a:	4904      	ldr	r1, [pc, #16]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008132:	e009      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	74bb      	strb	r3, [r7, #18]
 8008138:	e006      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800813a:	bf00      	nop
 800813c:	40021000 	.word	0x40021000
 8008140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	7cfb      	ldrb	r3, [r7, #19]
 8008146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008148:	7c7b      	ldrb	r3, [r7, #17]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d105      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800814e:	4ba6      	ldr	r3, [pc, #664]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	4aa5      	ldr	r2, [pc, #660]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008166:	4ba0      	ldr	r3, [pc, #640]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816c:	f023 0203 	bic.w	r2, r3, #3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	499c      	ldr	r1, [pc, #624]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008188:	4b97      	ldr	r3, [pc, #604]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	f023 020c 	bic.w	r2, r3, #12
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	4994      	ldr	r1, [pc, #592]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008198:	4313      	orrs	r3, r2
 800819a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081aa:	4b8f      	ldr	r3, [pc, #572]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	498b      	ldr	r1, [pc, #556]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081cc:	4b86      	ldr	r3, [pc, #536]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	4983      	ldr	r1, [pc, #524]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081ee:	4b7e      	ldr	r3, [pc, #504]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fc:	497a      	ldr	r1, [pc, #488]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008210:	4b75      	ldr	r3, [pc, #468]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821e:	4972      	ldr	r1, [pc, #456]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008232:	4b6d      	ldr	r3, [pc, #436]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008240:	4969      	ldr	r1, [pc, #420]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008242:	4313      	orrs	r3, r2
 8008244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008254:	4b64      	ldr	r3, [pc, #400]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008262:	4961      	ldr	r1, [pc, #388]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008264:	4313      	orrs	r3, r2
 8008266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008276:	4b5c      	ldr	r3, [pc, #368]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	4958      	ldr	r1, [pc, #352]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008298:	4b53      	ldr	r3, [pc, #332]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	4950      	ldr	r1, [pc, #320]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082ba:	4b4b      	ldr	r3, [pc, #300]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c8:	4947      	ldr	r1, [pc, #284]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082dc:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082e2:	f023 0203 	bic.w	r2, r3, #3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ea:	493f      	ldr	r1, [pc, #252]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d028      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082fe:	4b3a      	ldr	r3, [pc, #232]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	4936      	ldr	r1, [pc, #216]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800831c:	d106      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800831e:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4a31      	ldr	r2, [pc, #196]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008328:	60d3      	str	r3, [r2, #12]
 800832a:	e011      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008334:	d10c      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	2101      	movs	r1, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f000 ff79 	bl	8009234 <RCCEx_PLLSAI1_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008346:	7cfb      	ldrb	r3, [r7, #19]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800834c:	7cfb      	ldrb	r3, [r7, #19]
 800834e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d028      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800835c:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836a:	491f      	ldr	r1, [pc, #124]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837a:	d106      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800837c:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008386:	60d3      	str	r3, [r2, #12]
 8008388:	e011      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008392:	d10c      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3304      	adds	r3, #4
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f000 ff4a 	bl	8009234 <RCCEx_PLLSAI1_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083a4:	7cfb      	ldrb	r3, [r7, #19]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80083aa:	7cfb      	ldrb	r3, [r7, #19]
 80083ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d02a      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d8:	d108      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4a02      	ldr	r2, [pc, #8]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e4:	60d3      	str	r3, [r2, #12]
 80083e6:	e013      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80083e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f4:	d10c      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3304      	adds	r3, #4
 80083fa:	2101      	movs	r1, #1
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 ff19 	bl	8009234 <RCCEx_PLLSAI1_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008406:	7cfb      	ldrb	r3, [r7, #19]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800840c:	7cfb      	ldrb	r3, [r7, #19]
 800840e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d02f      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800841c:	4b2c      	ldr	r3, [pc, #176]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842a:	4929      	ldr	r1, [pc, #164]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800843a:	d10d      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	2102      	movs	r1, #2
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fef6 	bl	8009234 <RCCEx_PLLSAI1_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800844c:	7cfb      	ldrb	r3, [r7, #19]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d014      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008452:	7cfb      	ldrb	r3, [r7, #19]
 8008454:	74bb      	strb	r3, [r7, #18]
 8008456:	e011      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008460:	d10c      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3320      	adds	r3, #32
 8008466:	2102      	movs	r1, #2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 ffd5 	bl	8009418 <RCCEx_PLLSAI2_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008478:	7cfb      	ldrb	r3, [r7, #19]
 800847a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008488:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008498:	490d      	ldr	r1, [pc, #52]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084bc:	4904      	ldr	r1, [pc, #16]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80084c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40021000 	.word	0x40021000

080084d4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a77      	ldr	r2, [pc, #476]	; (80086bc <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 80084e0:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80084e2:	4b77      	ldr	r3, [pc, #476]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f003 0203 	and.w	r2, r3, #3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80084ee:	4b74      	ldr	r3, [pc, #464]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80084fe:	4b70      	ldr	r3, [pc, #448]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800850c:	4b6c      	ldr	r3, [pc, #432]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	0c5b      	lsrs	r3, r3, #17
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	1dda      	adds	r2, r3, #7
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800851e:	4b68      	ldr	r3, [pc, #416]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	0d5b      	lsrs	r3, r3, #21
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	3301      	adds	r3, #1
 800852a:	005a      	lsls	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008530:	4b63      	ldr	r3, [pc, #396]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	0e5b      	lsrs	r3, r3, #25
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	3301      	adds	r3, #1
 800853c:	005a      	lsls	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008552:	4b5b      	ldr	r3, [pc, #364]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008560:	4b57      	ldr	r3, [pc, #348]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	0c5b      	lsrs	r3, r3, #17
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	1dda      	adds	r2, r3, #7
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008572:	4b53      	ldr	r3, [pc, #332]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	0e5b      	lsrs	r3, r3, #25
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	3301      	adds	r3, #1
 800857e:	005a      	lsls	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008584:	4b4e      	ldr	r3, [pc, #312]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858a:	f003 0203 	and.w	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008592:	4b4b      	ldr	r3, [pc, #300]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	f003 020c 	and.w	r2, r3, #12
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 80085a0:	4b47      	ldr	r3, [pc, #284]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80085ae:	4b44      	ldr	r3, [pc, #272]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 80085bc:	4b40      	ldr	r3, [pc, #256]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80085ca:	4b3d      	ldr	r3, [pc, #244]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80085d8:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085de:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80085e6:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 80085f4:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 8008602:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008608:	f003 0203 	and.w	r2, r3, #3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008610:	4b2b      	ldr	r3, [pc, #172]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008616:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800861e:	4b28      	ldr	r3, [pc, #160]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008624:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800862c:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008632:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008640:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008648:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008658:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800865a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008666:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008674:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008682:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008688:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008690:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008696:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80086a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	001fffff 	.word	0x001fffff
 80086c0:	40021000 	.word	0x40021000

080086c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d6:	d13e      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80086d8:	4bb4      	ldr	r3, [pc, #720]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d028      	beq.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f2:	f200 858c 	bhi.w	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fc:	d005      	beq.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008704:	d00e      	beq.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8008706:	f000 bd82 	b.w	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800870a:	4ba8      	ldr	r3, [pc, #672]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b02      	cmp	r3, #2
 8008716:	f040 857c 	bne.w	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 800871a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800871e:	61fb      	str	r3, [r7, #28]
      break;
 8008720:	f000 bd77 	b.w	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008724:	4ba1      	ldr	r3, [pc, #644]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	f040 8571 	bne.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8008734:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008738:	61fb      	str	r3, [r7, #28]
      break;
 800873a:	f000 bd6c 	b.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800873e:	4b9b      	ldr	r3, [pc, #620]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874a:	f040 8566 	bne.w	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800874e:	4b98      	ldr	r3, [pc, #608]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008750:	61fb      	str	r3, [r7, #28]
      break;
 8008752:	f000 bd62 	b.w	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008756:	4b95      	ldr	r3, [pc, #596]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d036      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d840      	bhi.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d003      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d020      	beq.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008778:	e039      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800877a:	4b8c      	ldr	r3, [pc, #560]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b02      	cmp	r3, #2
 8008784:	d116      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008786:	4b89      	ldr	r3, [pc, #548]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008792:	4b86      	ldr	r3, [pc, #536]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	091b      	lsrs	r3, r3, #4
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	e005      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800879e:	4b83      	ldr	r3, [pc, #524]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80087a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	4a82      	ldr	r2, [pc, #520]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80087ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80087b2:	e01f      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]
      break;
 80087b8:	e01c      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087ba:	4b7c      	ldr	r3, [pc, #496]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c6:	d102      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80087c8:	4b7b      	ldr	r3, [pc, #492]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80087ca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80087cc:	e012      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61bb      	str	r3, [r7, #24]
      break;
 80087d2:	e00f      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087d4:	4b75      	ldr	r3, [pc, #468]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087e0:	d102      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80087e2:	4b76      	ldr	r3, [pc, #472]	; (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80087e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80087e6:	e005      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
      break;
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
      break;
 80087f2:	bf00      	nop
    }

    switch(PeriphClk)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087fa:	f000 842a 	beq.w	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008804:	f200 850b 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800880e:	f000 80df 	beq.w	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008818:	f200 8501 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008822:	f000 80d5 	beq.w	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800882c:	f200 84f7 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008836:	f000 8377 	beq.w	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008840:	f200 84ed 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884a:	f000 84c3 	beq.w	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008854:	f200 84e3 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800885e:	f000 82e6 	beq.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008868:	f200 84d9 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008872:	f000 80ad 	beq.w	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887c:	f200 84cf 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008886:	f000 809b 	beq.w	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008890:	f200 84c5 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889a:	d07f      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a2:	f200 84bc 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ac:	f000 8448 	beq.w	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b6:	f200 84b2 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c0:	f000 83f0 	beq.w	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ca:	f200 84a8 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d4:	f000 8391 	beq.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088de:	f200 849e 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	f000 835c 	beq.w	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	f200 8496 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d84b      	bhi.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 848f 	beq.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3b01      	subs	r3, #1
 8008904:	2b1f      	cmp	r3, #31
 8008906:	f200 848a 	bhi.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008b27 	.word	0x08008b27
 8008914:	08008b97 	.word	0x08008b97
 8008918:	0800921f 	.word	0x0800921f
 800891c:	08008c2b 	.word	0x08008c2b
 8008920:	0800921f 	.word	0x0800921f
 8008924:	0800921f 	.word	0x0800921f
 8008928:	0800921f 	.word	0x0800921f
 800892c:	08008cb3 	.word	0x08008cb3
 8008930:	0800921f 	.word	0x0800921f
 8008934:	0800921f 	.word	0x0800921f
 8008938:	0800921f 	.word	0x0800921f
 800893c:	0800921f 	.word	0x0800921f
 8008940:	0800921f 	.word	0x0800921f
 8008944:	0800921f 	.word	0x0800921f
 8008948:	0800921f 	.word	0x0800921f
 800894c:	08008d2b 	.word	0x08008d2b
 8008950:	0800921f 	.word	0x0800921f
 8008954:	0800921f 	.word	0x0800921f
 8008958:	0800921f 	.word	0x0800921f
 800895c:	0800921f 	.word	0x0800921f
 8008960:	0800921f 	.word	0x0800921f
 8008964:	0800921f 	.word	0x0800921f
 8008968:	0800921f 	.word	0x0800921f
 800896c:	0800921f 	.word	0x0800921f
 8008970:	0800921f 	.word	0x0800921f
 8008974:	0800921f 	.word	0x0800921f
 8008978:	0800921f 	.word	0x0800921f
 800897c:	0800921f 	.word	0x0800921f
 8008980:	0800921f 	.word	0x0800921f
 8008984:	0800921f 	.word	0x0800921f
 8008988:	0800921f 	.word	0x0800921f
 800898c:	08008dad 	.word	0x08008dad
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	f000 82d9 	beq.w	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008998:	f000 bc41 	b.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800899c:	69b9      	ldr	r1, [r7, #24]
 800899e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80089a2:	f000 fe15 	bl	80095d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80089a6:	61f8      	str	r0, [r7, #28]
      break;
 80089a8:	f000 bc3a 	b.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80089ac:	40021000 	.word	0x40021000
 80089b0:	0003d090 	.word	0x0003d090
 80089b4:	080120ac 	.word	0x080120ac
 80089b8:	00f42400 	.word	0x00f42400
 80089bc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80089c0:	69b9      	ldr	r1, [r7, #24]
 80089c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80089c6:	f000 fe03 	bl	80095d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80089ca:	61f8      	str	r0, [r7, #28]
      break;
 80089cc:	f000 bc28 	b.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80089d0:	4ba6      	ldr	r3, [pc, #664]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80089e2:	d015      	beq.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80089ea:	f200 8092 	bhi.w	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089f4:	d029      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fc:	f200 8089 	bhi.w	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d07b      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a0c:	d04a      	beq.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8008a0e:	e080      	b.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008a10:	4b96      	ldr	r3, [pc, #600]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d17c      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008a1c:	4b93      	ldr	r3, [pc, #588]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008a28:	4b90      	ldr	r3, [pc, #576]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	e005      	b.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008a34:	4b8d      	ldr	r3, [pc, #564]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	4a8b      	ldr	r2, [pc, #556]	; (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a46:	61fb      	str	r3, [r7, #28]
          break;
 8008a48:	e065      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008a4a:	4b88      	ldr	r3, [pc, #544]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a56:	d160      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008a58:	4b84      	ldr	r3, [pc, #528]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a64:	d159      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a66:	4b81      	ldr	r3, [pc, #516]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a70:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	fb03 f202 	mul.w	r2, r3, r2
 8008a7a:	4b7c      	ldr	r3, [pc, #496]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	091b      	lsrs	r3, r3, #4
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	3301      	adds	r3, #1
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008a8c:	4b77      	ldr	r3, [pc, #476]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	0d5b      	lsrs	r3, r3, #21
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	3301      	adds	r3, #1
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa0:	61fb      	str	r3, [r7, #28]
          break;
 8008aa2:	e03a      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008aa4:	4b71      	ldr	r3, [pc, #452]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ab0:	d135      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008ab2:	4b6e      	ldr	r3, [pc, #440]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008abe:	d12e      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008ac0:	4b6a      	ldr	r3, [pc, #424]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aca:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	fb03 f202 	mul.w	r2, r3, r2
 8008ad4:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	3301      	adds	r3, #1
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008ae6:	4b61      	ldr	r3, [pc, #388]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	0d5b      	lsrs	r3, r3, #21
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	3301      	adds	r3, #1
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afa:	61fb      	str	r3, [r7, #28]
          break;
 8008afc:	e00f      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008afe:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d10a      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8008b0c:	4b59      	ldr	r3, [pc, #356]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8008b0e:	61fb      	str	r3, [r7, #28]
          break;
 8008b10:	e007      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8008b12:	bf00      	nop
 8008b14:	e384      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b16:	bf00      	nop
 8008b18:	e382      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b1a:	bf00      	nop
 8008b1c:	e380      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b1e:	bf00      	nop
 8008b20:	e37e      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b22:	bf00      	nop
        break;
 8008b24:	e37c      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008b26:	4b51      	ldr	r3, [pc, #324]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	613b      	str	r3, [r7, #16]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d828      	bhi.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b59 	.word	0x08008b59
 8008b48:	08008b61 	.word	0x08008b61
 8008b4c:	08008b75 	.word	0x08008b75
          frequency = HAL_RCC_GetPCLK2Freq();
 8008b50:	f7ff f94e 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
 8008b54:	61f8      	str	r0, [r7, #28]
          break;
 8008b56:	e01d      	b.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b58:	f7ff f89c 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008b5c:	61f8      	str	r0, [r7, #28]
          break;
 8008b5e:	e019      	b.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b60:	4b42      	ldr	r3, [pc, #264]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6c:	d10f      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8008b6e:	4b42      	ldr	r3, [pc, #264]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008b70:	61fb      	str	r3, [r7, #28]
          break;
 8008b72:	e00c      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b74:	4b3d      	ldr	r3, [pc, #244]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d107      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8008b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b86:	61fb      	str	r3, [r7, #28]
          break;
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8008b8a:	bf00      	nop
 8008b8c:	e348      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b8e:	bf00      	nop
 8008b90:	e346      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b92:	bf00      	nop
        break;
 8008b94:	e344      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008b96:	4b35      	ldr	r3, [pc, #212]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9c:	f003 030c 	and.w	r3, r3, #12
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	d83a      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008be5 	.word	0x08008be5
 8008bb4:	08008c1f 	.word	0x08008c1f
 8008bb8:	08008c1f 	.word	0x08008c1f
 8008bbc:	08008c1f 	.word	0x08008c1f
 8008bc0:	08008bed 	.word	0x08008bed
 8008bc4:	08008c1f 	.word	0x08008c1f
 8008bc8:	08008c1f 	.word	0x08008c1f
 8008bcc:	08008c1f 	.word	0x08008c1f
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008c1f 	.word	0x08008c1f
 8008bd8:	08008c1f 	.word	0x08008c1f
 8008bdc:	08008c1f 	.word	0x08008c1f
 8008be0:	08008c09 	.word	0x08008c09
          frequency = HAL_RCC_GetPCLK1Freq();
 8008be4:	f7ff f8ee 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008be8:	61f8      	str	r0, [r7, #28]
          break;
 8008bea:	e01d      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8008bec:	f7ff f852 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008bf0:	61f8      	str	r0, [r7, #28]
          break;
 8008bf2:	e019      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c00:	d10f      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008c04:	61fb      	str	r3, [r7, #28]
          break;
 8008c06:	e00c      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c08:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d107      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8008c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1a:	61fb      	str	r3, [r7, #28]
          break;
 8008c1c:	e003      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8008c1e:	bf00      	nop
 8008c20:	e2fe      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c22:	bf00      	nop
 8008c24:	e2fc      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c26:	bf00      	nop
        break;
 8008c28:	e2fa      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008c2a:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b30      	cmp	r3, #48	; 0x30
 8008c3a:	d029      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b30      	cmp	r3, #48	; 0x30
 8008c40:	d831      	bhi.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d019      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d82b      	bhi.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d004      	beq.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8008c5a:	e024      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c5c:	f7ff f8b2 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008c60:	61f8      	str	r0, [r7, #28]
          break;
 8008c62:	e025      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c64:	f7ff f816 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008c68:	61f8      	str	r0, [r7, #28]
          break;
 8008c6a:	e021      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	080120ac 	.word	0x080120ac
 8008c74:	02dc6c00 	.word	0x02dc6c00
 8008c78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c7c:	4b8f      	ldr	r3, [pc, #572]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c88:	d10f      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8008c8a:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008c8c:	61fb      	str	r3, [r7, #28]
          break;
 8008c8e:	e00c      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c90:	4b8a      	ldr	r3, [pc, #552]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d107      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ca2:	61fb      	str	r3, [r7, #28]
          break;
 8008ca4:	e003      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8008ca6:	bf00      	nop
 8008ca8:	e2ba      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008caa:	bf00      	nop
 8008cac:	e2b8      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008cae:	bf00      	nop
        break;
 8008cb0:	e2b6      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008cb2:	4b82      	ldr	r3, [pc, #520]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2bc0      	cmp	r3, #192	; 0xc0
 8008cc2:	d021      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8008cc8:	d829      	bhi.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b80      	cmp	r3, #128	; 0x80
 8008cce:	d011      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d823      	bhi.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d004      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8008ce2:	e01c      	b.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ce4:	f7ff f86e 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008ce8:	61f8      	str	r0, [r7, #28]
          break;
 8008cea:	e01d      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cec:	f7fe ffd2 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008cf0:	61f8      	str	r0, [r7, #28]
          break;
 8008cf2:	e019      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cf4:	4b71      	ldr	r3, [pc, #452]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d00:	d10f      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8008d02:	4b6f      	ldr	r3, [pc, #444]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008d04:	61fb      	str	r3, [r7, #28]
          break;
 8008d06:	e00c      	b.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d08:	4b6c      	ldr	r3, [pc, #432]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8008d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1a:	61fb      	str	r3, [r7, #28]
          break;
 8008d1c:	e003      	b.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8008d1e:	bf00      	nop
 8008d20:	e27e      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d22:	bf00      	nop
 8008d24:	e27c      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d26:	bf00      	nop
        break;
 8008d28:	e27a      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008d2a:	4b64      	ldr	r3, [pc, #400]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d3c:	d025      	beq.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d44:	d82c      	bhi.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4c:	d013      	beq.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d54:	d824      	bhi.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d004      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8008d64:	e01c      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d66:	f7ff f82d 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008d6a:	61f8      	str	r0, [r7, #28]
          break;
 8008d6c:	e01d      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fe ff91 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008d72:	61f8      	str	r0, [r7, #28]
          break;
 8008d74:	e019      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d76:	4b51      	ldr	r3, [pc, #324]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d82:	d10f      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8008d84:	4b4e      	ldr	r3, [pc, #312]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008d86:	61fb      	str	r3, [r7, #28]
          break;
 8008d88:	e00c      	b.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d8a:	4b4c      	ldr	r3, [pc, #304]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d107      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8008d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d9c:	61fb      	str	r3, [r7, #28]
          break;
 8008d9e:	e003      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8008da0:	bf00      	nop
 8008da2:	e23d      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008da4:	bf00      	nop
 8008da6:	e23b      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008da8:	bf00      	nop
        break;
 8008daa:	e239      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008dac:	4b43      	ldr	r3, [pc, #268]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008dbe:	d025      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008dc6:	d82c      	bhi.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dce:	d013      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd6:	d824      	bhi.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008de4:	d004      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8008de6:	e01c      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008de8:	f7fe ffec 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008dec:	61f8      	str	r0, [r7, #28]
          break;
 8008dee:	e01d      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8008df0:	f7fe ff50 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008df4:	61f8      	str	r0, [r7, #28]
          break;
 8008df6:	e019      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008df8:	4b30      	ldr	r3, [pc, #192]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e04:	d10f      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8008e06:	4b2e      	ldr	r3, [pc, #184]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008e08:	61fb      	str	r3, [r7, #28]
          break;
 8008e0a:	e00c      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d107      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8008e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e1e:	61fb      	str	r3, [r7, #28]
          break;
 8008e20:	e003      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8008e22:	bf00      	nop
 8008e24:	e1fc      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008e26:	bf00      	nop
 8008e28:	e1fa      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008e2a:	bf00      	nop
        break;
 8008e2c:	e1f8      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e2e:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e40:	d00c      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e48:	d868      	bhi.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e50:	d008      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e58:	d034      	beq.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8008e5a:	e05f      	b.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e5c:	f7fe ff1a 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008e60:	61f8      	str	r0, [r7, #28]
          break;
 8008e62:	e060      	b.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008e64:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e70:	d156      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d050      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e88:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	fb03 f202 	mul.w	r2, r3, r2
 8008e92:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	0e5b      	lsrs	r3, r3, #25
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	3301      	adds	r3, #1
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb8:	61fb      	str	r3, [r7, #28]
          break;
 8008eba:	e031      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008ec4:	4b9c      	ldr	r3, [pc, #624]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed0:	d128      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8008ed2:	4b99      	ldr	r3, [pc, #612]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d022      	beq.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008ede:	4b96      	ldr	r3, [pc, #600]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee8:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	fb03 f202 	mul.w	r2, r3, r2
 8008ef2:	4b91      	ldr	r3, [pc, #580]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	091b      	lsrs	r3, r3, #4
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	3301      	adds	r3, #1
 8008efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f02:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008f04:	4b8c      	ldr	r3, [pc, #560]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	0e5b      	lsrs	r3, r3, #25
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	3301      	adds	r3, #1
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	61fb      	str	r3, [r7, #28]
          break;
 8008f1a:	e003      	b.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8008f1c:	bf00      	nop
 8008f1e:	e17f      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008f20:	bf00      	nop
 8008f22:	e17d      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008f24:	bf00      	nop
        break;
 8008f26:	e17b      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008f28:	4b83      	ldr	r3, [pc, #524]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f32:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008f3a:	f7fe ff59 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
 8008f3e:	61f8      	str	r0, [r7, #28]
        break;
 8008f40:	e16e      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f42:	f7fe fea7 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008f46:	61f8      	str	r0, [r7, #28]
        break;
 8008f48:	e16a      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f4a:	4b7b      	ldr	r3, [pc, #492]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f50:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f54:	613b      	str	r3, [r7, #16]
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f5c:	d013      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f64:	d819      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d004      	beq.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f72:	d004      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8008f74:	e011      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f76:	f7fe ff25 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008f7a:	61f8      	str	r0, [r7, #28]
          break;
 8008f7c:	e010      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f7e:	f7fe fe89 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008f82:	61f8      	str	r0, [r7, #28]
          break;
 8008f84:	e00c      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f86:	4b6c      	ldr	r3, [pc, #432]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f92:	d104      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8008f94:	4b69      	ldr	r3, [pc, #420]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008f96:	61fb      	str	r3, [r7, #28]
          break;
 8008f98:	e001      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8008f9a:	bf00      	nop
 8008f9c:	e140      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008f9e:	bf00      	nop
        break;
 8008fa0:	e13e      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008fa2:	4b65      	ldr	r3, [pc, #404]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fb4:	d013      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fbc:	d819      	bhi.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fca:	d004      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8008fcc:	e011      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fce:	f7fe fef9 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8008fd2:	61f8      	str	r0, [r7, #28]
          break;
 8008fd4:	e010      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fd6:	f7fe fe5d 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8008fda:	61f8      	str	r0, [r7, #28]
          break;
 8008fdc:	e00c      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fde:	4b56      	ldr	r3, [pc, #344]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fea:	d104      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8008fec:	4b53      	ldr	r3, [pc, #332]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008fee:	61fb      	str	r3, [r7, #28]
          break;
 8008ff0:	e001      	b.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8008ff2:	bf00      	nop
 8008ff4:	e114      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008ff6:	bf00      	nop
        break;
 8008ff8:	e112      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008ffa:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800900c:	d013      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009014:	d819      	bhi.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009022:	d004      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8009024:	e011      	b.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009026:	f7fe fecd 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 800902a:	61f8      	str	r0, [r7, #28]
          break;
 800902c:	e010      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800902e:	f7fe fe31 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8009032:	61f8      	str	r0, [r7, #28]
          break;
 8009034:	e00c      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009036:	4b40      	ldr	r3, [pc, #256]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800903e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009042:	d104      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8009044:	4b3d      	ldr	r3, [pc, #244]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8009046:	61fb      	str	r3, [r7, #28]
          break;
 8009048:	e001      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800904a:	bf00      	nop
 800904c:	e0e8      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800904e:	bf00      	nop
        break;
 8009050:	e0e6      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009052:	4b39      	ldr	r3, [pc, #228]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8009054:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d011      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d818      	bhi.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d004      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8009076:	e011      	b.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009078:	f7fe fea4 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 800907c:	61f8      	str	r0, [r7, #28]
          break;
 800907e:	e010      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8009080:	f7fe fe08 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 8009084:	61f8      	str	r0, [r7, #28]
          break;
 8009086:	e00c      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009094:	d104      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8009096:	4b29      	ldr	r3, [pc, #164]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8009098:	61fb      	str	r3, [r7, #28]
          break;
 800909a:	e001      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800909c:	bf00      	nop
 800909e:	e0bf      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80090a0:	bf00      	nop
        break;
 80090a2:	e0bd      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80090a4:	4b24      	ldr	r3, [pc, #144]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090aa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090b6:	d02c      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090be:	d833      	bhi.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090c6:	d01a      	beq.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090ce:	d82b      	bhi.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090dc:	d004      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80090de:	e023      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090e0:	f7fe fe70 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 80090e4:	61f8      	str	r0, [r7, #28]
          break;
 80090e6:	e026      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80090ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d11a      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80090f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80090fa:	61fb      	str	r3, [r7, #28]
          break;
 80090fc:	e016      	b.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090fe:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800910a:	d111      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800910c:	4b0b      	ldr	r3, [pc, #44]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800910e:	61fb      	str	r3, [r7, #28]
          break;
 8009110:	e00e      	b.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8009114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b02      	cmp	r3, #2
 800911e:	d109      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8009120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009124:	61fb      	str	r3, [r7, #28]
          break;
 8009126:	e005      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8009128:	bf00      	nop
 800912a:	e079      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800912c:	bf00      	nop
 800912e:	e077      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009130:	bf00      	nop
 8009132:	e075      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009134:	bf00      	nop
        break;
 8009136:	e073      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009138:	40021000 	.word	0x40021000
 800913c:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009140:	4b3a      	ldr	r3, [pc, #232]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8009142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009146:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009152:	d02c      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800915a:	d833      	bhi.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009162:	d01a      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800916a:	d82b      	bhi.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009178:	d004      	beq.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800917a:	e023      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800917c:	f7fe fe22 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 8009180:	61f8      	str	r0, [r7, #28]
          break;
 8009182:	e026      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009184:	4b29      	ldr	r3, [pc, #164]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8009186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d11a      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8009192:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009196:	61fb      	str	r3, [r7, #28]
          break;
 8009198:	e016      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a6:	d111      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80091a8:	4b21      	ldr	r3, [pc, #132]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80091aa:	61fb      	str	r3, [r7, #28]
          break;
 80091ac:	e00e      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091ae:	4b1f      	ldr	r3, [pc, #124]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80091b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d109      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80091bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c0:	61fb      	str	r3, [r7, #28]
          break;
 80091c2:	e005      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80091c4:	bf00      	nop
 80091c6:	e02b      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80091c8:	bf00      	nop
 80091ca:	e029      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80091cc:	bf00      	nop
 80091ce:	e027      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80091d0:	bf00      	nop
        break;
 80091d2:	e025      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ec:	d004      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80091ee:	e00d      	b.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091f0:	f7fe fde8 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 80091f4:	61f8      	str	r0, [r7, #28]
          break;
 80091f6:	e009      	b.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009204:	d101      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8009206:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8009208:	61fb      	str	r3, [r7, #28]
          break;
 800920a:	bf00      	nop
        break;
 800920c:	e008      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800920e:	bf00      	nop
 8009210:	e006      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8009212:	bf00      	nop
 8009214:	e004      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8009216:	bf00      	nop
 8009218:	e002      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800921a:	bf00      	nop
 800921c:	e000      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800921e:	bf00      	nop
    }
  }

  return(frequency);
 8009220:	69fb      	ldr	r3, [r7, #28]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40021000 	.word	0x40021000
 8009230:	00f42400 	.word	0x00f42400

08009234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009242:	4b74      	ldr	r3, [pc, #464]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d018      	beq.n	8009280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800924e:	4b71      	ldr	r3, [pc, #452]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0203 	and.w	r2, r3, #3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d10d      	bne.n	800927a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
       ||
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009266:	4b6b      	ldr	r3, [pc, #428]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
       ||
 8009276:	429a      	cmp	r2, r3
 8009278:	d047      	beq.n	800930a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	e044      	b.n	800930a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d018      	beq.n	80092ba <RCCEx_PLLSAI1_Config+0x86>
 8009288:	2b03      	cmp	r3, #3
 800928a:	d825      	bhi.n	80092d8 <RCCEx_PLLSAI1_Config+0xa4>
 800928c:	2b01      	cmp	r3, #1
 800928e:	d002      	beq.n	8009296 <RCCEx_PLLSAI1_Config+0x62>
 8009290:	2b02      	cmp	r3, #2
 8009292:	d009      	beq.n	80092a8 <RCCEx_PLLSAI1_Config+0x74>
 8009294:	e020      	b.n	80092d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009296:	4b5f      	ldr	r3, [pc, #380]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d11d      	bne.n	80092de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092a6:	e01a      	b.n	80092de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092a8:	4b5a      	ldr	r3, [pc, #360]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d116      	bne.n	80092e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092b8:	e013      	b.n	80092e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80092ba:	4b56      	ldr	r3, [pc, #344]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10f      	bne.n	80092e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80092c6:	4b53      	ldr	r3, [pc, #332]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d109      	bne.n	80092e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092d6:	e006      	b.n	80092e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	73fb      	strb	r3, [r7, #15]
      break;
 80092dc:	e004      	b.n	80092e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092de:	bf00      	nop
 80092e0:	e002      	b.n	80092e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092e2:	bf00      	nop
 80092e4:	e000      	b.n	80092e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80092ee:	4b49      	ldr	r3, [pc, #292]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6819      	ldr	r1, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	3b01      	subs	r3, #1
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	430b      	orrs	r3, r1
 8009304:	4943      	ldr	r1, [pc, #268]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009306:	4313      	orrs	r3, r2
 8009308:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d17c      	bne.n	800940a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009310:	4b40      	ldr	r3, [pc, #256]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a3f      	ldr	r2, [pc, #252]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800931a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800931c:	f7fb fc3a 	bl	8004b94 <HAL_GetTick>
 8009320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009322:	e009      	b.n	8009338 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009324:	f7fb fc36 	bl	8004b94 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d902      	bls.n	8009338 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
        break;
 8009336:	e005      	b.n	8009344 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009338:	4b36      	ldr	r3, [pc, #216]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1ef      	bne.n	8009324 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d15f      	bne.n	800940a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d110      	bne.n	8009372 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009350:	4b30      	ldr	r3, [pc, #192]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009358:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6892      	ldr	r2, [r2, #8]
 8009360:	0211      	lsls	r1, r2, #8
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	68d2      	ldr	r2, [r2, #12]
 8009366:	06d2      	lsls	r2, r2, #27
 8009368:	430a      	orrs	r2, r1
 800936a:	492a      	ldr	r1, [pc, #168]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 800936c:	4313      	orrs	r3, r2
 800936e:	610b      	str	r3, [r1, #16]
 8009370:	e027      	b.n	80093c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d112      	bne.n	800939e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009378:	4b26      	ldr	r3, [pc, #152]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6892      	ldr	r2, [r2, #8]
 8009388:	0211      	lsls	r1, r2, #8
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6912      	ldr	r2, [r2, #16]
 800938e:	0852      	lsrs	r2, r2, #1
 8009390:	3a01      	subs	r2, #1
 8009392:	0552      	lsls	r2, r2, #21
 8009394:	430a      	orrs	r2, r1
 8009396:	491f      	ldr	r1, [pc, #124]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009398:	4313      	orrs	r3, r2
 800939a:	610b      	str	r3, [r1, #16]
 800939c:	e011      	b.n	80093c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6892      	ldr	r2, [r2, #8]
 80093ae:	0211      	lsls	r1, r2, #8
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6952      	ldr	r2, [r2, #20]
 80093b4:	0852      	lsrs	r2, r2, #1
 80093b6:	3a01      	subs	r2, #1
 80093b8:	0652      	lsls	r2, r2, #25
 80093ba:	430a      	orrs	r2, r1
 80093bc:	4915      	ldr	r1, [pc, #84]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80093c2:	4b14      	ldr	r3, [pc, #80]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a13      	ldr	r2, [pc, #76]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ce:	f7fb fbe1 	bl	8004b94 <HAL_GetTick>
 80093d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093d4:	e009      	b.n	80093ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093d6:	f7fb fbdd 	bl	8004b94 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d902      	bls.n	80093ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	73fb      	strb	r3, [r7, #15]
          break;
 80093e8:	e005      	b.n	80093f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	4903      	ldr	r1, [pc, #12]	; (8009414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009406:	4313      	orrs	r3, r2
 8009408:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40021000 	.word	0x40021000

08009418 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009426:	4b69      	ldr	r3, [pc, #420]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d018      	beq.n	8009464 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009432:	4b66      	ldr	r3, [pc, #408]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f003 0203 	and.w	r2, r3, #3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d10d      	bne.n	800945e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
       ||
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800944a:	4b60      	ldr	r3, [pc, #384]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	091b      	lsrs	r3, r3, #4
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
       ||
 800945a:	429a      	cmp	r2, r3
 800945c:	d047      	beq.n	80094ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
 8009462:	e044      	b.n	80094ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b03      	cmp	r3, #3
 800946a:	d018      	beq.n	800949e <RCCEx_PLLSAI2_Config+0x86>
 800946c:	2b03      	cmp	r3, #3
 800946e:	d825      	bhi.n	80094bc <RCCEx_PLLSAI2_Config+0xa4>
 8009470:	2b01      	cmp	r3, #1
 8009472:	d002      	beq.n	800947a <RCCEx_PLLSAI2_Config+0x62>
 8009474:	2b02      	cmp	r3, #2
 8009476:	d009      	beq.n	800948c <RCCEx_PLLSAI2_Config+0x74>
 8009478:	e020      	b.n	80094bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800947a:	4b54      	ldr	r3, [pc, #336]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11d      	bne.n	80094c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800948a:	e01a      	b.n	80094c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800948c:	4b4f      	ldr	r3, [pc, #316]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009494:	2b00      	cmp	r3, #0
 8009496:	d116      	bne.n	80094c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800949c:	e013      	b.n	80094c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800949e:	4b4b      	ldr	r3, [pc, #300]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10f      	bne.n	80094ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80094aa:	4b48      	ldr	r3, [pc, #288]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094ba:	e006      	b.n	80094ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
      break;
 80094c0:	e004      	b.n	80094cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094c2:	bf00      	nop
 80094c4:	e002      	b.n	80094cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094c6:	bf00      	nop
 80094c8:	e000      	b.n	80094cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10d      	bne.n	80094ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80094d2:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6819      	ldr	r1, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	430b      	orrs	r3, r1
 80094e8:	4938      	ldr	r1, [pc, #224]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d166      	bne.n	80095c2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80094f4:	4b35      	ldr	r3, [pc, #212]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a34      	ldr	r2, [pc, #208]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80094fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009500:	f7fb fb48 	bl	8004b94 <HAL_GetTick>
 8009504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009506:	e009      	b.n	800951c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009508:	f7fb fb44 	bl	8004b94 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b02      	cmp	r3, #2
 8009514:	d902      	bls.n	800951c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	73fb      	strb	r3, [r7, #15]
        break;
 800951a:	e005      	b.n	8009528 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800951c:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1ef      	bne.n	8009508 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d149      	bne.n	80095c2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d110      	bne.n	8009556 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009534:	4b25      	ldr	r3, [pc, #148]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800953c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6892      	ldr	r2, [r2, #8]
 8009544:	0211      	lsls	r1, r2, #8
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68d2      	ldr	r2, [r2, #12]
 800954a:	06d2      	lsls	r2, r2, #27
 800954c:	430a      	orrs	r2, r1
 800954e:	491f      	ldr	r1, [pc, #124]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009550:	4313      	orrs	r3, r2
 8009552:	614b      	str	r3, [r1, #20]
 8009554:	e011      	b.n	800957a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800955e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6892      	ldr	r2, [r2, #8]
 8009566:	0211      	lsls	r1, r2, #8
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6912      	ldr	r2, [r2, #16]
 800956c:	0852      	lsrs	r2, r2, #1
 800956e:	3a01      	subs	r2, #1
 8009570:	0652      	lsls	r2, r2, #25
 8009572:	430a      	orrs	r2, r1
 8009574:	4915      	ldr	r1, [pc, #84]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009576:	4313      	orrs	r3, r2
 8009578:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a13      	ldr	r2, [pc, #76]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8009580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009586:	f7fb fb05 	bl	8004b94 <HAL_GetTick>
 800958a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800958c:	e009      	b.n	80095a2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800958e:	f7fb fb01 	bl	8004b94 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d902      	bls.n	80095a2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	73fb      	strb	r3, [r7, #15]
          break;
 80095a0:	e005      	b.n	80095ae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095a2:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0ef      	beq.n	800958e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80095b4:	4b05      	ldr	r3, [pc, #20]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80095b6:	695a      	ldr	r2, [r3, #20]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	4903      	ldr	r1, [pc, #12]	; (80095cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40021000 	.word	0x40021000

080095d0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b089      	sub	sp, #36	; 0x24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ec:	d10c      	bne.n	8009608 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80095ee:	4b77      	ldr	r3, [pc, #476]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80095f8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009600:	d112      	bne.n	8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009602:	4b73      	ldr	r3, [pc, #460]	; (80097d0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e00f      	b.n	8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960e:	d10b      	bne.n	8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009610:	4b6e      	ldr	r3, [pc, #440]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009616:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800961a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009622:	d101      	bne.n	8009628 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009624:	4b6a      	ldr	r3, [pc, #424]	; (80097d0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8009626:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 80c6 	bne.w	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800963a:	d003      	beq.n	8009644 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009642:	d13b      	bne.n	80096bc <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009644:	4b61      	ldr	r3, [pc, #388]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009650:	f040 80b3 	bne.w	80097ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8009654:	4b5d      	ldr	r3, [pc, #372]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80ac 	beq.w	80097ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009662:	4b5a      	ldr	r3, [pc, #360]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	091b      	lsrs	r3, r3, #4
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	3301      	adds	r3, #1
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	fbb2 f3f3 	udiv	r3, r2, r3
 8009674:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009676:	4b55      	ldr	r3, [pc, #340]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009680:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009682:	4b52      	ldr	r3, [pc, #328]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	0edb      	lsrs	r3, r3, #27
 8009688:	f003 031f 	and.w	r3, r3, #31
 800968c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009694:	4b4d      	ldr	r3, [pc, #308]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80096a0:	2311      	movs	r3, #17
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e001      	b.n	80096aa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80096a6:	2307      	movs	r3, #7
 80096a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	fb03 f202 	mul.w	r2, r3, r2
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80096ba:	e07e      	b.n	80097ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d139      	bne.n	8009736 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80096c2:	4b42      	ldr	r3, [pc, #264]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ce:	d175      	bne.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80096d0:	4b3e      	ldr	r3, [pc, #248]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d06f      	beq.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80096dc:	4b3b      	ldr	r3, [pc, #236]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	091b      	lsrs	r3, r3, #4
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	3301      	adds	r3, #1
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80096f0:	4b36      	ldr	r3, [pc, #216]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096fa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80096fc:	4b33      	ldr	r3, [pc, #204]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	0edb      	lsrs	r3, r3, #27
 8009702:	f003 031f 	and.w	r3, r3, #31
 8009706:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800970e:	4b2f      	ldr	r3, [pc, #188]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800971a:	2311      	movs	r3, #17
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e001      	b.n	8009724 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8009720:	2307      	movs	r3, #7
 8009722:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	fb03 f202 	mul.w	r2, r3, r2
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	e042      	b.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973c:	d003      	beq.n	8009746 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009744:	d13a      	bne.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009746:	4b21      	ldr	r3, [pc, #132]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800974e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009752:	d133      	bne.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8009754:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02d      	beq.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009760:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	091b      	lsrs	r3, r3, #4
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	3301      	adds	r3, #1
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009774:	4b15      	ldr	r3, [pc, #84]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	0a1b      	lsrs	r3, r3, #8
 800977a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009780:	4b12      	ldr	r3, [pc, #72]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	0edb      	lsrs	r3, r3, #27
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800979e:	2311      	movs	r3, #17
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e001      	b.n	80097a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80097a4:	2307      	movs	r3, #7
 80097a6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	fb03 f202 	mul.w	r2, r3, r2
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	e000      	b.n	80097bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80097ba:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3724      	adds	r7, #36	; 0x24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40021000 	.word	0x40021000
 80097d0:	001fff68 	.word	0x001fff68

080097d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e022      	b.n	800982c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d105      	bne.n	80097fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7fa fe69 	bl	80044d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2203      	movs	r2, #3
 8009802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f814 	bl	8009834 <HAL_SD_InitCard>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e00a      	b.n	800982c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009834:	b5b0      	push	{r4, r5, r7, lr}
 8009836:	b08e      	sub	sp, #56	; 0x38
 8009838:	af04      	add	r7, sp, #16
 800983a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800983c:	2300      	movs	r3, #0
 800983e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009844:	2300      	movs	r3, #0
 8009846:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009850:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009854:	f7fe ff36 	bl	80086c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009858:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d109      	bne.n	8009874 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800986e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e07b      	b.n	800996c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	09db      	lsrs	r3, r3, #7
 8009878:	4a3e      	ldr	r2, [pc, #248]	; (8009974 <HAL_SD_InitCard+0x140>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	091b      	lsrs	r3, r3, #4
 8009880:	3b02      	subs	r3, #2
 8009882:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681d      	ldr	r5, [r3, #0]
 8009888:	466c      	mov	r4, sp
 800988a:	f107 0314 	add.w	r3, r7, #20
 800988e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009892:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800989c:	4628      	mov	r0, r5
 800989e:	f002 fe4f 	bl	800c540 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098b0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f002 fe8d 	bl	800c5d6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ca:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	3302      	adds	r3, #2
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80098d8:	4a27      	ldr	r2, [pc, #156]	; (8009978 <HAL_SD_InitCard+0x144>)
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e0:	3301      	adds	r3, #1
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fb f962 	bl	8004bac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 f915 	bl	800ab18 <SD_PowerON>
 80098ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00b      	beq.n	800990e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e02e      	b.n	800996c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f834 	bl	800a97c <SD_InitCard>
 8009914:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e01b      	b.n	800996c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800993c:	4618      	mov	r0, r3
 800993e:	f002 fedd 	bl	800c6fc <SDMMC_CmdBlockLength>
 8009942:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00f      	beq.n	800996a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0b      	ldr	r2, [pc, #44]	; (800997c <HAL_SD_InitCard+0x148>)
 8009950:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3728      	adds	r7, #40	; 0x28
 8009970:	46bd      	mov	sp, r7
 8009972:	bdb0      	pop	{r4, r5, r7, pc}
 8009974:	014f8b59 	.word	0x014f8b59
 8009978:	00012110 	.word	0x00012110
 800997c:	004005ff 	.word	0x004005ff

08009980 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b092      	sub	sp, #72	; 0x48
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800998e:	f7fb f901 	bl	8004b94 <HAL_GetTick>
 8009992:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d107      	bne.n	80099b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e1bd      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	f040 81b0 	bne.w	8009d20 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	441a      	add	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d907      	bls.n	80099e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e1a4      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2203      	movs	r2, #3
 80099e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d002      	beq.n	8009a02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	025b      	lsls	r3, r3, #9
 8009a00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a02:	f04f 33ff 	mov.w	r3, #4294967295
 8009a06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	025b      	lsls	r3, r3, #9
 8009a0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a0e:	2390      	movs	r3, #144	; 0x90
 8009a10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a12:	2302      	movs	r3, #2
 8009a14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f107 0214 	add.w	r2, r7, #20
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f002 fe3b 	bl	800c6a4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d90a      	bls.n	8009a4a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2202      	movs	r2, #2
 8009a38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a40:	4618      	mov	r0, r3
 8009a42:	f002 fe9f 	bl	800c784 <SDMMC_CmdReadMultiBlock>
 8009a46:	6478      	str	r0, [r7, #68]	; 0x44
 8009a48:	e009      	b.n	8009a5e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a56:	4618      	mov	r0, r3
 8009a58:	f002 fe72 	bl	800c740 <SDMMC_CmdReadSingleBlock>
 8009a5c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d012      	beq.n	8009a8a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a7a      	ldr	r2, [pc, #488]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a72:	431a      	orrs	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e151      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a8e:	e061      	b.n	8009b54 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d03c      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x198>
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d039      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa8:	e033      	b.n	8009b12 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 fd73 	bl	800c59a <SDMMC_ReadFIFO>
 8009ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	3b01      	subs	r3, #1
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aec:	3301      	adds	r3, #1
 8009aee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af2:	3b01      	subs	r3, #1
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	0e1b      	lsrs	r3, r3, #24
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	3301      	adds	r3, #1
 8009b04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0e:	3301      	adds	r3, #1
 8009b10:	643b      	str	r3, [r7, #64]	; 0x40
 8009b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	d9c8      	bls.n	8009aaa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b18:	f7fb f83c 	bl	8004b94 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d902      	bls.n	8009b2e <HAL_SD_ReadBlocks+0x1ae>
 8009b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d112      	bne.n	8009b54 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a48      	ldr	r2, [pc, #288]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009b34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e0ec      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d096      	beq.n	8009a90 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d022      	beq.n	8009bb6 <HAL_SD_ReadBlocks+0x236>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d91f      	bls.n	8009bb6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d01b      	beq.n	8009bb6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 fe64 	bl	800c850 <SDMMC_CmdStopTransfer>
 8009b88:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d012      	beq.n	8009bb6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a2f      	ldr	r2, [pc, #188]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e0bb      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d012      	beq.n	8009bea <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd0:	f043 0208 	orr.w	r2, r3, #8
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e0a1      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d012      	beq.n	8009c1e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a15      	ldr	r2, [pc, #84]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	f043 0202 	orr.w	r2, r3, #2
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e087      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d064      	beq.n	8009cf6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <HAL_SD_ReadBlocks+0x2d4>)
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	f043 0220 	orr.w	r2, r3, #32
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e06d      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
 8009c52:	bf00      	nop
 8009c54:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f002 fc9c 	bl	800c59a <SDMMC_ReadFIFO>
 8009c62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	3301      	adds	r3, #1
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c74:	3b01      	subs	r3, #1
 8009c76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	3301      	adds	r3, #1
 8009c86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	0c1b      	lsrs	r3, r3, #16
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	0e1b      	lsrs	r3, r3, #24
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009cba:	f7fa ff6b 	bl	8004b94 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d902      	bls.n	8009cd0 <HAL_SD_ReadBlocks+0x350>
 8009cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d112      	bne.n	8009cf6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a18      	ldr	r2, [pc, #96]	; (8009d38 <HAL_SD_ReadBlocks+0x3b8>)
 8009cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e01b      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_SD_ReadBlocks+0x38a>
 8009d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1a6      	bne.n	8009c58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e006      	b.n	8009d2e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3748      	adds	r7, #72	; 0x48
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	004005ff 	.word	0x004005ff

08009d3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b092      	sub	sp, #72	; 0x48
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d4a:	f7fa ff23 	bl	8004b94 <HAL_GetTick>
 8009d4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d107      	bne.n	8009d6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e165      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	f040 8158 	bne.w	800a02c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	441a      	add	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d907      	bls.n	8009da0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e14c      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2203      	movs	r2, #3
 8009da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2200      	movs	r2, #0
 8009dae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d002      	beq.n	8009dbe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	025b      	lsls	r3, r3, #9
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	025b      	lsls	r3, r3, #9
 8009dc8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009dca:	2390      	movs	r3, #144	; 0x90
 8009dcc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f107 0218 	add.w	r2, r7, #24
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 fc5d 	bl	800c6a4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d90a      	bls.n	8009e06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2220      	movs	r2, #32
 8009df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f002 fd05 	bl	800c80c <SDMMC_CmdWriteMultiBlock>
 8009e02:	6478      	str	r0, [r7, #68]	; 0x44
 8009e04:	e009      	b.n	8009e1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2210      	movs	r2, #16
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e12:	4618      	mov	r0, r3
 8009e14:	f002 fcd8 	bl	800c7c8 <SDMMC_CmdWriteSingleBlock>
 8009e18:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d012      	beq.n	8009e46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a87      	ldr	r2, [pc, #540]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e0f9      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e4a:	e065      	b.n	8009f18 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d040      	beq.n	8009edc <HAL_SD_WriteBlocks+0x1a0>
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d03d      	beq.n	8009edc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009e60:	2300      	movs	r3, #0
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
 8009e64:	e037      	b.n	8009ed6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6e:	3301      	adds	r3, #1
 8009e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e74:	3b01      	subs	r3, #1
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	021a      	lsls	r2, r3, #8
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e86:	3301      	adds	r3, #1
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	041a      	lsls	r2, r3, #16
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	061a      	lsls	r2, r3, #24
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f107 0214 	add.w	r2, r7, #20
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 fb72 	bl	800c5b4 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed8:	2b07      	cmp	r3, #7
 8009eda:	d9c4      	bls.n	8009e66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009edc:	f7fa fe5a 	bl	8004b94 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d902      	bls.n	8009ef2 <HAL_SD_WriteBlocks+0x1b6>
 8009eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d112      	bne.n	8009f18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a53      	ldr	r2, [pc, #332]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f00:	431a      	orrs	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e090      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d092      	beq.n	8009e4c <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d022      	beq.n	8009f7a <HAL_SD_WriteBlocks+0x23e>
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d91f      	bls.n	8009f7a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d01b      	beq.n	8009f7a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f002 fc82 	bl	800c850 <SDMMC_CmdStopTransfer>
 8009f4c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d012      	beq.n	8009f7a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a3a      	ldr	r2, [pc, #232]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e05f      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d012      	beq.n	8009fae <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a2d      	ldr	r2, [pc, #180]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f94:	f043 0208 	orr.w	r2, r3, #8
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e045      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d012      	beq.n	8009fe2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a20      	ldr	r2, [pc, #128]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	f043 0202 	orr.w	r2, r3, #2
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e02b      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	f003 0310 	and.w	r3, r3, #16
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d012      	beq.n	800a016 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <HAL_SD_WriteBlocks+0x308>)
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	f043 0210 	orr.w	r2, r3, #16
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e011      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	e006      	b.n	800a03a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
  }
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3748      	adds	r7, #72	; 0x48
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	004005ff 	.word	0x004005ff

0800a048 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a054:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d008      	beq.n	800a076 <HAL_SD_IRQHandler+0x2e>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0308 	and.w	r3, r3, #8
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 ff68 	bl	800af44 <SD_Read_IT>
 800a074:	e155      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 808f 	beq.w	800a1a4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a08e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a09e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a0a2:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0201 	bic.w	r2, r2, #1
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d039      	beq.n	800a132 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d104      	bne.n	800a0d2 <HAL_SD_IRQHandler+0x8a>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d011      	beq.n	800a0f6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f002 fbba 	bl	800c850 <SDMMC_CmdStopTransfer>
 800a0dc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f91f 	bl	800a334 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f240 523a 	movw	r2, #1338	; 0x53a
 800a0fe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d104      	bne.n	800a122 <HAL_SD_IRQHandler+0xda>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f002 ff9e 	bl	800d064 <HAL_SD_RxCpltCallback>
 800a128:	e0fb      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f002 ff90 	bl	800d050 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800a130:	e0f7      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80f2 	beq.w	800a322 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f003 0320 	and.w	r3, r3, #32
 800a144:	2b00      	cmp	r3, #0
 800a146:	d011      	beq.n	800a16c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f002 fb7f 	bl	800c850 <SDMMC_CmdStopTransfer>
 800a152:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d008      	beq.n	800a16c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	431a      	orrs	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f8e4 	bl	800a334 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	f040 80d5 	bne.w	800a322 <HAL_SD_IRQHandler+0x2da>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 80cf 	bne.w	800a322 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0208 	bic.w	r2, r2, #8
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f002 ff57 	bl	800d050 <HAL_SD_TxCpltCallback>
}
 800a1a2:	e0be      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <HAL_SD_IRQHandler+0x17c>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 ff12 	bl	800afe6 <SD_Write_IT>
 800a1c2:	e0ae      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80a7 	beq.w	800a322 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	f043 0202 	orr.w	r2, r3, #2
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	f043 0208 	orr.w	r2, r3, #8
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	f043 0220 	orr.w	r2, r3, #32
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a228:	f003 0310 	and.w	r3, r3, #16
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d005      	beq.n	800a23c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a234:	f043 0210 	orr.w	r2, r3, #16
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f240 523a 	movw	r2, #1338	; 0x53a
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a254:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f002 faf8 	bl	800c850 <SDMMC_CmdStopTransfer>
 800a260:	4602      	mov	r2, r0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f855 	bl	800a334 <HAL_SD_ErrorCallback>
}
 800a28a:	e04a      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a292:	2b00      	cmp	r3, #0
 800a294:	d045      	beq.n	800a322 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 0310 	and.w	r3, r3, #16
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <HAL_SD_IRQHandler+0x262>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d011      	beq.n	800a2ce <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ae:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <HAL_SD_IRQHandler+0x2e4>)
 800a2b0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fb fb8a 	bl	80059d0 <HAL_DMA_Abort_IT>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d02f      	beq.n	800a322 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 faea 	bl	800a8a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a2cc:	e029      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <HAL_SD_IRQHandler+0x29a>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d011      	beq.n	800a306 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	4a12      	ldr	r2, [pc, #72]	; (800a330 <HAL_SD_IRQHandler+0x2e8>)
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fb fb6e 	bl	80059d0 <HAL_DMA_Abort_IT>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d013      	beq.n	800a322 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fb05 	bl	800a90e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a304:	e00d      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f002 fe8e 	bl	800d03c <HAL_SD_AbortCallback>
}
 800a320:	e7ff      	b.n	800a322 <HAL_SD_IRQHandler+0x2da>
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	0800a8a1 	.word	0x0800a8a1
 800a330:	0800a90f 	.word	0x0800a90f

0800a334 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a356:	0f9b      	lsrs	r3, r3, #30
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a362:	0e9b      	lsrs	r3, r3, #26
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f003 030f 	and.w	r3, r3, #15
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a374:	0e1b      	lsrs	r3, r3, #24
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a386:	0c1b      	lsrs	r3, r3, #16
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	b2da      	uxtb	r2, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3a8:	0d1b      	lsrs	r3, r3, #20
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3b4:	0c1b      	lsrs	r3, r3, #16
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3c6:	0bdb      	lsrs	r3, r3, #15
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3d8:	0b9b      	lsrs	r3, r3, #14
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ea:	0b5b      	lsrs	r3, r3, #13
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3fc:	0b1b      	lsrs	r3, r3, #12
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2200      	movs	r2, #0
 800a40e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a414:	2b00      	cmp	r3, #0
 800a416:	d163      	bne.n	800a4e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a41c:	009a      	lsls	r2, r3, #2
 800a41e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a422:	4013      	ands	r3, r2
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a428:	0f92      	lsrs	r2, r2, #30
 800a42a:	431a      	orrs	r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a434:	0edb      	lsrs	r3, r3, #27
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a446:	0e1b      	lsrs	r3, r3, #24
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a458:	0d5b      	lsrs	r3, r3, #21
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	b2da      	uxtb	r2, r3
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46a:	0c9b      	lsrs	r3, r3, #18
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	b2da      	uxtb	r2, r3
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47c:	0bdb      	lsrs	r3, r3, #15
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0307 	and.w	r3, r3, #7
 800a484:	b2da      	uxtb	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	7e1b      	ldrb	r3, [r3, #24]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	3302      	adds	r3, #2
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a4aa:	fb03 f202 	mul.w	r2, r3, r2
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	7a1b      	ldrb	r3, [r3, #8]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	2201      	movs	r2, #1
 800a4be:	409a      	lsls	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a4cc:	0a52      	lsrs	r2, r2, #9
 800a4ce:	fb03 f202 	mul.w	r2, r3, r2
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4dc:	661a      	str	r2, [r3, #96]	; 0x60
 800a4de:	e031      	b.n	800a544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d11d      	bne.n	800a524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4ec:	041b      	lsls	r3, r3, #16
 800a4ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f6:	0c1b      	lsrs	r3, r3, #16
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	3301      	adds	r3, #1
 800a504:	029a      	lsls	r2, r3, #10
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a518:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	661a      	str	r2, [r3, #96]	; 0x60
 800a522:	e00f      	b.n	800a544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a58      	ldr	r2, [pc, #352]	; (800a68c <HAL_SD_GetCardCSD+0x344>)
 800a52a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e09d      	b.n	800a680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a548:	0b9b      	lsrs	r3, r3, #14
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a55a:	09db      	lsrs	r3, r3, #7
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a562:	b2da      	uxtb	r2, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57c:	0fdb      	lsrs	r3, r3, #31
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a588:	0f5b      	lsrs	r3, r3, #29
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0303 	and.w	r3, r3, #3
 800a590:	b2da      	uxtb	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59a:	0e9b      	lsrs	r3, r3, #26
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ac:	0d9b      	lsrs	r3, r3, #22
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	0d5b      	lsrs	r3, r3, #21
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5da:	0c1b      	lsrs	r3, r3, #16
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ee:	0bdb      	lsrs	r3, r3, #15
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	0b9b      	lsrs	r3, r3, #14
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a616:	0b5b      	lsrs	r3, r3, #13
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62a:	0b1b      	lsrs	r3, r3, #12
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	0a9b      	lsrs	r3, r3, #10
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	b2da      	uxtb	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a666:	085b      	lsrs	r3, r3, #1
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	004005ff 	.word	0x004005ff

0800a690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a6e8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ea:	b090      	sub	sp, #64	; 0x40
 800a6ec:	af04      	add	r7, sp, #16
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2203      	movs	r2, #3
 800a6fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a704:	2b03      	cmp	r3, #3
 800a706:	d02e      	beq.n	800a766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a70e:	d106      	bne.n	800a71e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38
 800a71c:	e029      	b.n	800a772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a724:	d10a      	bne.n	800a73c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 faac 	bl	800ac84 <SD_WideBus_Enable>
 800a72c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	431a      	orrs	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	639a      	str	r2, [r3, #56]	; 0x38
 800a73a:	e01a      	b.n	800a772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fae9 	bl	800ad1a <SD_WideBus_Disable>
 800a748:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	431a      	orrs	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	639a      	str	r2, [r3, #56]	; 0x38
 800a756:	e00c      	b.n	800a772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38
 800a764:	e005      	b.n	800a772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a35      	ldr	r2, [pc, #212]	; (800a854 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a788:	e042      	b.n	800a810 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a78a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a78e:	f7fd ff99 	bl	80086c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a792:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	2b00      	cmp	r3, #0
 800a798:	d031      	beq.n	800a7fe <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c2:	4a25      	ldr	r2, [pc, #148]	; (800a858 <HAL_SD_ConfigWideBusOperation+0x170>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d907      	bls.n	800a7d8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	4a24      	ldr	r2, [pc, #144]	; (800a85c <HAL_SD_ConfigWideBusOperation+0x174>)
 800a7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d0:	0ddb      	lsrs	r3, r3, #23
 800a7d2:	3b02      	subs	r3, #2
 800a7d4:	623b      	str	r3, [r7, #32]
 800a7d6:	e002      	b.n	800a7de <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681d      	ldr	r5, [r3, #0]
 800a7e2:	466c      	mov	r4, sp
 800a7e4:	f107 0318 	add.w	r3, r7, #24
 800a7e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f001 fea2 	bl	800c540 <SDMMC_Init>
 800a7fc:	e008      	b.n	800a810 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a818:	4618      	mov	r0, r3
 800a81a:	f001 ff6f 	bl	800c6fc <SDMMC_CmdBlockLength>
 800a81e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00c      	beq.n	800a840 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a0a      	ldr	r2, [pc, #40]	; (800a854 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3730      	adds	r7, #48	; 0x30
 800a850:	46bd      	mov	sp, r7
 800a852:	bdb0      	pop	{r4, r5, r7, pc}
 800a854:	004005ff 	.word	0x004005ff
 800a858:	017d7840 	.word	0x017d7840
 800a85c:	55e63b89 	.word	0x55e63b89

0800a860 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9de 	bl	800ac34 <SD_SendStatus>
 800a878:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	431a      	orrs	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	0a5b      	lsrs	r3, r3, #9
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a896:	693b      	ldr	r3, [r7, #16]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a8b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff ffd1 	bl	800a860 <HAL_SD_GetCardState>
 800a8be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b06      	cmp	r3, #6
 800a8d2:	d002      	beq.n	800a8da <SD_DMATxAbort+0x3a>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d10a      	bne.n	800a8f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 ffb6 	bl	800c850 <SDMMC_CmdStopTransfer>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f002 fb9f 	bl	800d03c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a8fe:	e002      	b.n	800a906 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7ff fd17 	bl	800a334 <HAL_SD_ErrorCallback>
}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f240 523a 	movw	r2, #1338	; 0x53a
 800a924:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff ff9a 	bl	800a860 <HAL_SD_GetCardState>
 800a92c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b06      	cmp	r3, #6
 800a940:	d002      	beq.n	800a948 <SD_DMARxAbort+0x3a>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b05      	cmp	r3, #5
 800a946:	d10a      	bne.n	800a95e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 ff7f 	bl	800c850 <SDMMC_CmdStopTransfer>
 800a952:	4602      	mov	r2, r0
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	431a      	orrs	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	d103      	bne.n	800a96e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f002 fb68 	bl	800d03c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a96c:	e002      	b.n	800a974 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fce0 	bl	800a334 <HAL_SD_ErrorCallback>
}
 800a974:	bf00      	nop
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a97c:	b5b0      	push	{r4, r5, r7, lr}
 800a97e:	b094      	sub	sp, #80	; 0x50
 800a980:	af04      	add	r7, sp, #16
 800a982:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a984:	2301      	movs	r3, #1
 800a986:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fe31 	bl	800c5f4 <SDMMC_GetPowerState>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a99c:	e0b8      	b.n	800ab10 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d02f      	beq.n	800aa06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f002 f85a 	bl	800ca64 <SDMMC_CmdSendCID>
 800a9b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <SD_InitCard+0x40>
    {
      return errorstate;
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	e0a9      	b.n	800ab10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fe5b 	bl	800c67e <SDMMC_GetResponse>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2104      	movs	r1, #4
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 fe52 	bl	800c67e <SDMMC_GetResponse>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2108      	movs	r1, #8
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 fe49 	bl	800c67e <SDMMC_GetResponse>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	210c      	movs	r1, #12
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 fe40 	bl	800c67e <SDMMC_GetResponse>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d00d      	beq.n	800aa2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f107 020e 	add.w	r2, r7, #14
 800aa16:	4611      	mov	r1, r2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f002 f860 	bl	800cade <SDMMC_CmdSetRelAdd>
 800aa1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <SD_InitCard+0xae>
    {
      return errorstate;
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	e072      	b.n	800ab10 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d036      	beq.n	800aaa0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa32:	89fb      	ldrh	r3, [r7, #14]
 800aa34:	461a      	mov	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa42:	041b      	lsls	r3, r3, #16
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f002 f82a 	bl	800caa0 <SDMMC_CmdSendCSD>
 800aa4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <SD_InitCard+0xdc>
    {
      return errorstate;
 800aa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa56:	e05b      	b.n	800ab10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 fe0d 	bl	800c67e <SDMMC_GetResponse>
 800aa64:	4602      	mov	r2, r0
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2104      	movs	r1, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f001 fe04 	bl	800c67e <SDMMC_GetResponse>
 800aa76:	4602      	mov	r2, r0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2108      	movs	r1, #8
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fdfb 	bl	800c67e <SDMMC_GetResponse>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	210c      	movs	r1, #12
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 fdf2 	bl	800c67e <SDMMC_GetResponse>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2104      	movs	r1, #4
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fde9 	bl	800c67e <SDMMC_GetResponse>
 800aaac:	4603      	mov	r3, r0
 800aaae:	0d1a      	lsrs	r2, r3, #20
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aab4:	f107 0310 	add.w	r3, r7, #16
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff fc44 	bl	800a348 <HAL_SD_GetCardCSD>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaca:	e021      	b.n	800ab10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	2200      	movs	r2, #0
 800aad8:	461c      	mov	r4, r3
 800aada:	4615      	mov	r5, r2
 800aadc:	4622      	mov	r2, r4
 800aade:	462b      	mov	r3, r5
 800aae0:	4608      	mov	r0, r1
 800aae2:	f001 fed7 	bl	800c894 <SDMMC_CmdSelDesel>
 800aae6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <SD_InitCard+0x176>
  {
    return errorstate;
 800aaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf0:	e00e      	b.n	800ab10 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	466c      	mov	r4, sp
 800aafa:	f103 0210 	add.w	r2, r3, #16
 800aafe:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab04:	3304      	adds	r3, #4
 800ab06:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f001 fd19 	bl	800c540 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3740      	adds	r7, #64	; 0x40
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bdb0      	pop	{r4, r5, r7, pc}

0800ab18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fed2 	bl	800c8da <SDMMC_CmdGoIdleState>
 800ab36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	e072      	b.n	800ac28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fee5 	bl	800c916 <SDMMC_CmdOperCond>
 800ab4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00d      	beq.n	800ab70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 febb 	bl	800c8da <SDMMC_CmdGoIdleState>
 800ab64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d004      	beq.n	800ab76 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	e05b      	b.n	800ac28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d137      	bne.n	800abee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2100      	movs	r1, #0
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 fee5 	bl	800c954 <SDMMC_CmdAppCommand>
 800ab8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d02d      	beq.n	800abee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ab96:	e047      	b.n	800ac28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 fed8 	bl	800c954 <SDMMC_CmdAppCommand>
 800aba4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <SD_PowerON+0x98>
    {
      return errorstate;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	e03b      	b.n	800ac28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	491e      	ldr	r1, [pc, #120]	; (800ac30 <SD_PowerON+0x118>)
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 feee 	bl	800c998 <SDMMC_CmdAppOperCommand>
 800abbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800abc8:	e02e      	b.n	800ac28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2100      	movs	r1, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f001 fd54 	bl	800c67e <SDMMC_GetResponse>
 800abd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	0fdb      	lsrs	r3, r3, #31
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <SD_PowerON+0xcc>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e000      	b.n	800abe6 <SD_PowerON+0xce>
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]

    count++;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	3301      	adds	r3, #1
 800abec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d802      	bhi.n	800abfe <SD_PowerON+0xe6>
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0cc      	beq.n	800ab98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d902      	bls.n	800ac0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ac08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac0c:	e00c      	b.n	800ac28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	645a      	str	r2, [r3, #68]	; 0x44
 800ac1e:	e002      	b.n	800ac26 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	c1100000 	.word	0xc1100000

0800ac34 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ac44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac48:	e018      	b.n	800ac7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac52:	041b      	lsls	r3, r3, #16
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f001 ff62 	bl	800cb20 <SDMMC_CmdSendStatus>
 800ac5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	e009      	b.n	800ac7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 fd05 	bl	800c67e <SDMMC_GetResponse>
 800ac74:	4602      	mov	r2, r0
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	2300      	movs	r3, #0
 800ac92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2100      	movs	r1, #0
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fcef 	bl	800c67e <SDMMC_GetResponse>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acaa:	d102      	bne.n	800acb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800acac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acb0:	e02f      	b.n	800ad12 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800acb2:	f107 030c 	add.w	r3, r7, #12
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f879 	bl	800adb0 <SD_FindSCR>
 800acbe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	e023      	b.n	800ad12 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01c      	beq.n	800ad0e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acdc:	041b      	lsls	r3, r3, #16
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f001 fe37 	bl	800c954 <SDMMC_CmdAppCommand>
 800ace6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	e00f      	b.n	800ad12 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f001 fe70 	bl	800c9de <SDMMC_CmdBusWidth>
 800acfe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	e003      	b.n	800ad12 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e001      	b.n	800ad12 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	2300      	movs	r3, #0
 800ad28:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 fca4 	bl	800c67e <SDMMC_GetResponse>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad40:	d102      	bne.n	800ad48 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad46:	e02f      	b.n	800ada8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad48:	f107 030c 	add.w	r3, r7, #12
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f82e 	bl	800adb0 <SD_FindSCR>
 800ad54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	e023      	b.n	800ada8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01c      	beq.n	800ada4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad72:	041b      	lsls	r3, r3, #16
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f001 fdec 	bl	800c954 <SDMMC_CmdAppCommand>
 800ad7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	e00f      	b.n	800ada8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f001 fe25 	bl	800c9de <SDMMC_CmdBusWidth>
 800ad94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	e003      	b.n	800ada8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	e001      	b.n	800ada8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ada4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800adb0:	b590      	push	{r4, r7, lr}
 800adb2:	b08f      	sub	sp, #60	; 0x3c
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800adba:	f7f9 feeb 	bl	8004b94 <HAL_GetTick>
 800adbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800adc4:	2300      	movs	r3, #0
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2108      	movs	r1, #8
 800add6:	4618      	mov	r0, r3
 800add8:	f001 fc90 	bl	800c6fc <SDMMC_CmdBlockLength>
 800addc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	e0a9      	b.n	800af3c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf0:	041b      	lsls	r3, r3, #16
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f001 fdad 	bl	800c954 <SDMMC_CmdAppCommand>
 800adfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	e09a      	b.n	800af3c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae06:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ae0c:	2308      	movs	r3, #8
 800ae0e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ae10:	2330      	movs	r3, #48	; 0x30
 800ae12:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae14:	2302      	movs	r3, #2
 800ae16:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f107 0210 	add.w	r2, r7, #16
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 fc3a 	bl	800c6a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 fdf4 	bl	800ca22 <SDMMC_CmdSendSCR>
 800ae3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d022      	beq.n	800ae88 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	e07a      	b.n	800af3c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00e      	beq.n	800ae72 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6819      	ldr	r1, [r3, #0]
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	f107 0208 	add.w	r2, r7, #8
 800ae60:	18d4      	adds	r4, r2, r3
 800ae62:	4608      	mov	r0, r1
 800ae64:	f001 fb99 	bl	800c59a <SDMMC_ReadFIFO>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	6023      	str	r3, [r4, #0]
      index++;
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	3301      	adds	r3, #1
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae72:	f7f9 fe8f 	bl	8004b94 <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d102      	bne.n	800ae88 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae86:	e059      	b.n	800af3c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae8e:	f240 432a 	movw	r3, #1066	; 0x42a
 800ae92:	4013      	ands	r3, r2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0d6      	beq.n	800ae46 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9e:	f003 0308 	and.w	r3, r3, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d005      	beq.n	800aeb2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2208      	movs	r2, #8
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aeae:	2308      	movs	r3, #8
 800aeb0:	e044      	b.n	800af3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2202      	movs	r2, #2
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aec8:	2302      	movs	r3, #2
 800aeca:	e037      	b.n	800af3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2220      	movs	r2, #32
 800aee0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aee2:	2320      	movs	r3, #32
 800aee4:	e02a      	b.n	800af3c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f240 523a 	movw	r2, #1338	; 0x53a
 800aeee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	061a      	lsls	r2, r3, #24
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	021b      	lsls	r3, r3, #8
 800aef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aefc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	0a1b      	lsrs	r3, r3, #8
 800af02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800af06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	0e1b      	lsrs	r3, r3, #24
 800af0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	601a      	str	r2, [r3, #0]
    scr++;
 800af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af14:	3304      	adds	r3, #4
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	061a      	lsls	r2, r3, #24
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	021b      	lsls	r3, r3, #8
 800af20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	0a1b      	lsrs	r3, r3, #8
 800af2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800af2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	0e1b      	lsrs	r3, r3, #24
 800af34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	373c      	adds	r7, #60	; 0x3c
 800af40:	46bd      	mov	sp, r7
 800af42:	bd90      	pop	{r4, r7, pc}

0800af44 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d03f      	beq.n	800afde <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]
 800af62:	e033      	b.n	800afcc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 fb16 	bl	800c59a <SDMMC_ReadFIFO>
 800af6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	b2da      	uxtb	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3b01      	subs	r3, #1
 800af82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3301      	adds	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	3b01      	subs	r3, #1
 800af98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	0c1b      	lsrs	r3, r3, #16
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3b01      	subs	r3, #1
 800afae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	0e1b      	lsrs	r3, r3, #24
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	3301      	adds	r3, #1
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2b07      	cmp	r3, #7
 800afd0:	d9c8      	bls.n	800af64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800afde:	bf00      	nop
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d043      	beq.n	800b088 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b000:	2300      	movs	r3, #0
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	e037      	b.n	800b076 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3b01      	subs	r3, #1
 800b016:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	021a      	lsls	r2, r3, #8
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	041a      	lsls	r2, r3, #16
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	3b01      	subs	r3, #1
 800b046:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	061a      	lsls	r2, r3, #24
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4313      	orrs	r3, r2
 800b052:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3301      	adds	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f107 0208 	add.w	r2, r7, #8
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 faa2 	bl	800c5b4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	3301      	adds	r3, #1
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b07      	cmp	r3, #7
 800b07a:	d9c4      	bls.n	800b006 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b088:	bf00      	nop
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e038      	b.n	800b118 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f7f9 fb92 	bl	80047e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f001 f920 	bl	800c310 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	f001 f9a8 	bl	800c430 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6858      	ldr	r0, [r3, #4]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	689a      	ldr	r2, [r3, #8]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	f001 f9ef 	bl	800c4d0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	6892      	ldr	r2, [r2, #8]
 800b0fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	6892      	ldr	r2, [r2, #8]
 800b106:	f041 0101 	orr.w	r1, r1, #1
 800b10a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e040      	b.n	800b1b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7f9 fa60 	bl	8004608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2224      	movs	r2, #36	; 0x24
 800b14c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fbc2 	bl	800b8e8 <UART_SetConfig>
 800b164:	4603      	mov	r3, r0
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e022      	b.n	800b1b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fe6e 	bl	800be58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b19a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fef5 	bl	800bf9c <UART_CheckIdleState>
 800b1b2:	4603      	mov	r3, r0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08a      	sub	sp, #40	; 0x28
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	f040 8082 	bne.w	800b2da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <HAL_UART_Transmit+0x26>
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e07a      	b.n	800b2dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UART_Transmit+0x38>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e073      	b.n	800b2dc <HAL_UART_Transmit+0x120>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2221      	movs	r2, #33	; 0x21
 800b208:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b20a:	f7f9 fcc3 	bl	8004b94 <HAL_GetTick>
 800b20e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	88fa      	ldrh	r2, [r7, #6]
 800b21c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b228:	d108      	bne.n	800b23c <HAL_UART_Transmit+0x80>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d104      	bne.n	800b23c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61bb      	str	r3, [r7, #24]
 800b23a:	e003      	b.n	800b244 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b24c:	e02d      	b.n	800b2aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2200      	movs	r2, #0
 800b256:	2180      	movs	r1, #128	; 0x80
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 fee8 	bl	800c02e <UART_WaitOnFlagUntilTimeout>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e039      	b.n	800b2dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	881a      	ldrh	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b27a:	b292      	uxth	r2, r2
 800b27c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	3302      	adds	r3, #2
 800b282:	61bb      	str	r3, [r7, #24]
 800b284:	e008      	b.n	800b298 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	781a      	ldrb	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	b292      	uxth	r2, r2
 800b290:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3301      	adds	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1cb      	bne.n	800b24e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2140      	movs	r1, #64	; 0x40
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 feb4 	bl	800c02e <UART_WaitOnFlagUntilTimeout>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e005      	b.n	800b2dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e000      	b.n	800b2dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b2da:	2302      	movs	r3, #2
  }
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3720      	adds	r7, #32
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b0ba      	sub	sp, #232	; 0xe8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b30a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b30e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b312:	4013      	ands	r3, r2
 800b314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d115      	bne.n	800b34c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b324:	f003 0320 	and.w	r3, r3, #32
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00f      	beq.n	800b34c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 82a6 	beq.w	800b88e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
      }
      return;
 800b34a:	e2a0      	b.n	800b88e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b34c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 8117 	beq.w	800b584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b366:	4b85      	ldr	r3, [pc, #532]	; (800b57c <HAL_UART_IRQHandler+0x298>)
 800b368:	4013      	ands	r3, r2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 810a 	beq.w	800b584 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d011      	beq.n	800b3a0 <HAL_UART_IRQHandler+0xbc>
 800b37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2201      	movs	r2, #1
 800b38e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b396:	f043 0201 	orr.w	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d011      	beq.n	800b3d0 <HAL_UART_IRQHandler+0xec>
 800b3ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2202      	movs	r2, #2
 800b3be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3c6:	f043 0204 	orr.w	r2, r3, #4
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d011      	beq.n	800b400 <HAL_UART_IRQHandler+0x11c>
 800b3dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3f6:	f043 0202 	orr.w	r2, r3, #2
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d017      	beq.n	800b43c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b410:	f003 0320 	and.w	r3, r3, #32
 800b414:	2b00      	cmp	r3, #0
 800b416:	d105      	bne.n	800b424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b41c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2208      	movs	r2, #8
 800b42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b432:	f043 0208 	orr.w	r2, r3, #8
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b444:	2b00      	cmp	r3, #0
 800b446:	d012      	beq.n	800b46e <HAL_UART_IRQHandler+0x18a>
 800b448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b44c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00c      	beq.n	800b46e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b45c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b464:	f043 0220 	orr.w	r2, r3, #32
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 820c 	beq.w	800b892 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b6:	2b40      	cmp	r3, #64	; 0x40
 800b4b8:	d005      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04f      	beq.n	800b566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fe75 	bl	800c1b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d141      	bne.n	800b55e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3308      	adds	r3, #8
 800b502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b50a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1d9      	bne.n	800b4da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d013      	beq.n	800b556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b532:	4a13      	ldr	r2, [pc, #76]	; (800b580 <HAL_UART_IRQHandler+0x29c>)
 800b534:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fa fa48 	bl	80059d0 <HAL_DMA_Abort_IT>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d017      	beq.n	800b576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	e00f      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f9b0 	bl	800b8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b55c:	e00b      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f9ac 	bl	800b8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b564:	e007      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f9a8 	bl	800b8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b574:	e18d      	b.n	800b892 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b576:	bf00      	nop
    return;
 800b578:	e18b      	b.n	800b892 <HAL_UART_IRQHandler+0x5ae>
 800b57a:	bf00      	nop
 800b57c:	04000120 	.word	0x04000120
 800b580:	0800c27d 	.word	0x0800c27d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b588:	2b01      	cmp	r3, #1
 800b58a:	f040 8146 	bne.w	800b81a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 813f 	beq.w	800b81a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 8138 	beq.w	800b81a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5bc:	2b40      	cmp	r3, #64	; 0x40
 800b5be:	f040 80b4 	bne.w	800b72a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 815f 	beq.w	800b896 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b5de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	f080 8157 	bcs.w	800b896 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0320 	and.w	r3, r3, #32
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 8085 	bne.w	800b70e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b62e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b632:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b63a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1da      	bne.n	800b604 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3308      	adds	r3, #8
 800b654:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b65e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b660:	f023 0301 	bic.w	r3, r3, #1
 800b664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3308      	adds	r3, #8
 800b66e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b672:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b676:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b67a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e1      	bne.n	800b64e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b69a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b6b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e3      	bne.n	800b68a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6de:	f023 0310 	bic.w	r3, r3, #16
 800b6e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e4      	bne.n	800b6ce <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fa f923 	bl	8005954 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f8d4 	bl	800b8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b728:	e0b5      	b.n	800b896 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b736:	b29b      	uxth	r3, r3
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b744:	b29b      	uxth	r3, r3
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80a7 	beq.w	800b89a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b74c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 80a2 	beq.w	800b89a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b76a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
 800b77a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b77e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e4      	bne.n	800b756 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	623b      	str	r3, [r7, #32]
   return(result);
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	f023 0301 	bic.w	r3, r3, #1
 800b7a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7b0:	633a      	str	r2, [r7, #48]	; 0x30
 800b7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e3      	bne.n	800b78c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0310 	bic.w	r3, r3, #16
 800b7ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	617b      	str	r3, [r7, #20]
   return(result);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e4      	bne.n	800b7d6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b80c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f85c 	bl	800b8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b818:	e03f      	b.n	800b89a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00e      	beq.n	800b844 <HAL_UART_IRQHandler+0x560>
 800b826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b82a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b83a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fd5d 	bl	800c2fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b842:	e02d      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00e      	beq.n	800b86e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d008      	beq.n	800b86e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01c      	beq.n	800b89e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
    }
    return;
 800b86c:	e017      	b.n	800b89e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b876:	2b00      	cmp	r3, #0
 800b878:	d012      	beq.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
 800b87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00c      	beq.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fd0e 	bl	800c2a8 <UART_EndTransmit_IT>
    return;
 800b88c:	e008      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b88e:	bf00      	nop
 800b890:	e006      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b892:	bf00      	nop
 800b894:	e004      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b896:	bf00      	nop
 800b898:	e002      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b89e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b8a0:	37e8      	adds	r7, #232	; 0xe8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop

0800b8a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8ec:	b08a      	sub	sp, #40	; 0x28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	431a      	orrs	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	431a      	orrs	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	4ba4      	ldr	r3, [pc, #656]	; (800bba8 <UART_SetConfig+0x2c0>)
 800b918:	4013      	ands	r3, r2
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b920:	430b      	orrs	r3, r1
 800b922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a99      	ldr	r2, [pc, #612]	; (800bbac <UART_SetConfig+0x2c4>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d004      	beq.n	800b954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b950:	4313      	orrs	r3, r2
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b964:	430a      	orrs	r2, r1
 800b966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a90      	ldr	r2, [pc, #576]	; (800bbb0 <UART_SetConfig+0x2c8>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d126      	bne.n	800b9c0 <UART_SetConfig+0xd8>
 800b972:	4b90      	ldr	r3, [pc, #576]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800b974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b978:	f003 0303 	and.w	r3, r3, #3
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d81b      	bhi.n	800b9b8 <UART_SetConfig+0xd0>
 800b980:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <UART_SetConfig+0xa0>)
 800b982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b986:	bf00      	nop
 800b988:	0800b999 	.word	0x0800b999
 800b98c:	0800b9a9 	.word	0x0800b9a9
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	2301      	movs	r3, #1
 800b99a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b99e:	e116      	b.n	800bbce <UART_SetConfig+0x2e6>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9a6:	e112      	b.n	800bbce <UART_SetConfig+0x2e6>
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9ae:	e10e      	b.n	800bbce <UART_SetConfig+0x2e6>
 800b9b0:	2308      	movs	r3, #8
 800b9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9b6:	e10a      	b.n	800bbce <UART_SetConfig+0x2e6>
 800b9b8:	2310      	movs	r3, #16
 800b9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9be:	e106      	b.n	800bbce <UART_SetConfig+0x2e6>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a7c      	ldr	r2, [pc, #496]	; (800bbb8 <UART_SetConfig+0x2d0>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d138      	bne.n	800ba3c <UART_SetConfig+0x154>
 800b9ca:	4b7a      	ldr	r3, [pc, #488]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800b9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d0:	f003 030c 	and.w	r3, r3, #12
 800b9d4:	2b0c      	cmp	r3, #12
 800b9d6:	d82d      	bhi.n	800ba34 <UART_SetConfig+0x14c>
 800b9d8:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <UART_SetConfig+0xf8>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800ba15 	.word	0x0800ba15
 800b9e4:	0800ba35 	.word	0x0800ba35
 800b9e8:	0800ba35 	.word	0x0800ba35
 800b9ec:	0800ba35 	.word	0x0800ba35
 800b9f0:	0800ba25 	.word	0x0800ba25
 800b9f4:	0800ba35 	.word	0x0800ba35
 800b9f8:	0800ba35 	.word	0x0800ba35
 800b9fc:	0800ba35 	.word	0x0800ba35
 800ba00:	0800ba1d 	.word	0x0800ba1d
 800ba04:	0800ba35 	.word	0x0800ba35
 800ba08:	0800ba35 	.word	0x0800ba35
 800ba0c:	0800ba35 	.word	0x0800ba35
 800ba10:	0800ba2d 	.word	0x0800ba2d
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba1a:	e0d8      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba22:	e0d4      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba24:	2304      	movs	r3, #4
 800ba26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba2a:	e0d0      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba2c:	2308      	movs	r3, #8
 800ba2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba32:	e0cc      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba34:	2310      	movs	r3, #16
 800ba36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba3a:	e0c8      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a5e      	ldr	r2, [pc, #376]	; (800bbbc <UART_SetConfig+0x2d4>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d125      	bne.n	800ba92 <UART_SetConfig+0x1aa>
 800ba46:	4b5b      	ldr	r3, [pc, #364]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800ba48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba50:	2b30      	cmp	r3, #48	; 0x30
 800ba52:	d016      	beq.n	800ba82 <UART_SetConfig+0x19a>
 800ba54:	2b30      	cmp	r3, #48	; 0x30
 800ba56:	d818      	bhi.n	800ba8a <UART_SetConfig+0x1a2>
 800ba58:	2b20      	cmp	r3, #32
 800ba5a:	d00a      	beq.n	800ba72 <UART_SetConfig+0x18a>
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	d814      	bhi.n	800ba8a <UART_SetConfig+0x1a2>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <UART_SetConfig+0x182>
 800ba64:	2b10      	cmp	r3, #16
 800ba66:	d008      	beq.n	800ba7a <UART_SetConfig+0x192>
 800ba68:	e00f      	b.n	800ba8a <UART_SetConfig+0x1a2>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba70:	e0ad      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba72:	2302      	movs	r3, #2
 800ba74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba78:	e0a9      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba7a:	2304      	movs	r3, #4
 800ba7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba80:	e0a5      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba82:	2308      	movs	r3, #8
 800ba84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba88:	e0a1      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba8a:	2310      	movs	r3, #16
 800ba8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba90:	e09d      	b.n	800bbce <UART_SetConfig+0x2e6>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a4a      	ldr	r2, [pc, #296]	; (800bbc0 <UART_SetConfig+0x2d8>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d125      	bne.n	800bae8 <UART_SetConfig+0x200>
 800ba9c:	4b45      	ldr	r3, [pc, #276]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800ba9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800baa6:	2bc0      	cmp	r3, #192	; 0xc0
 800baa8:	d016      	beq.n	800bad8 <UART_SetConfig+0x1f0>
 800baaa:	2bc0      	cmp	r3, #192	; 0xc0
 800baac:	d818      	bhi.n	800bae0 <UART_SetConfig+0x1f8>
 800baae:	2b80      	cmp	r3, #128	; 0x80
 800bab0:	d00a      	beq.n	800bac8 <UART_SetConfig+0x1e0>
 800bab2:	2b80      	cmp	r3, #128	; 0x80
 800bab4:	d814      	bhi.n	800bae0 <UART_SetConfig+0x1f8>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d002      	beq.n	800bac0 <UART_SetConfig+0x1d8>
 800baba:	2b40      	cmp	r3, #64	; 0x40
 800babc:	d008      	beq.n	800bad0 <UART_SetConfig+0x1e8>
 800babe:	e00f      	b.n	800bae0 <UART_SetConfig+0x1f8>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bac6:	e082      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bac8:	2302      	movs	r3, #2
 800baca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bace:	e07e      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bad0:	2304      	movs	r3, #4
 800bad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bad6:	e07a      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bad8:	2308      	movs	r3, #8
 800bada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bade:	e076      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bae0:	2310      	movs	r3, #16
 800bae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bae6:	e072      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a35      	ldr	r2, [pc, #212]	; (800bbc4 <UART_SetConfig+0x2dc>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d12a      	bne.n	800bb48 <UART_SetConfig+0x260>
 800baf2:	4b30      	ldr	r3, [pc, #192]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800baf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bafc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb00:	d01a      	beq.n	800bb38 <UART_SetConfig+0x250>
 800bb02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb06:	d81b      	bhi.n	800bb40 <UART_SetConfig+0x258>
 800bb08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb0c:	d00c      	beq.n	800bb28 <UART_SetConfig+0x240>
 800bb0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb12:	d815      	bhi.n	800bb40 <UART_SetConfig+0x258>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <UART_SetConfig+0x238>
 800bb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb1c:	d008      	beq.n	800bb30 <UART_SetConfig+0x248>
 800bb1e:	e00f      	b.n	800bb40 <UART_SetConfig+0x258>
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb26:	e052      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb2e:	e04e      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb30:	2304      	movs	r3, #4
 800bb32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb36:	e04a      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb38:	2308      	movs	r3, #8
 800bb3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb3e:	e046      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb40:	2310      	movs	r3, #16
 800bb42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb46:	e042      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a17      	ldr	r2, [pc, #92]	; (800bbac <UART_SetConfig+0x2c4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d13a      	bne.n	800bbc8 <UART_SetConfig+0x2e0>
 800bb52:	4b18      	ldr	r3, [pc, #96]	; (800bbb4 <UART_SetConfig+0x2cc>)
 800bb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb60:	d01a      	beq.n	800bb98 <UART_SetConfig+0x2b0>
 800bb62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb66:	d81b      	bhi.n	800bba0 <UART_SetConfig+0x2b8>
 800bb68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb6c:	d00c      	beq.n	800bb88 <UART_SetConfig+0x2a0>
 800bb6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb72:	d815      	bhi.n	800bba0 <UART_SetConfig+0x2b8>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <UART_SetConfig+0x298>
 800bb78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb7c:	d008      	beq.n	800bb90 <UART_SetConfig+0x2a8>
 800bb7e:	e00f      	b.n	800bba0 <UART_SetConfig+0x2b8>
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb86:	e022      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb8e:	e01e      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb90:	2304      	movs	r3, #4
 800bb92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb96:	e01a      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bb98:	2308      	movs	r3, #8
 800bb9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb9e:	e016      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bba0:	2310      	movs	r3, #16
 800bba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bba6:	e012      	b.n	800bbce <UART_SetConfig+0x2e6>
 800bba8:	efff69f3 	.word	0xefff69f3
 800bbac:	40008000 	.word	0x40008000
 800bbb0:	40013800 	.word	0x40013800
 800bbb4:	40021000 	.word	0x40021000
 800bbb8:	40004400 	.word	0x40004400
 800bbbc:	40004800 	.word	0x40004800
 800bbc0:	40004c00 	.word	0x40004c00
 800bbc4:	40005000 	.word	0x40005000
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a9f      	ldr	r2, [pc, #636]	; (800be50 <UART_SetConfig+0x568>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d17a      	bne.n	800bcce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d824      	bhi.n	800bc2a <UART_SetConfig+0x342>
 800bbe0:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <UART_SetConfig+0x300>)
 800bbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe6:	bf00      	nop
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bc2b 	.word	0x0800bc2b
 800bbf0:	0800bc15 	.word	0x0800bc15
 800bbf4:	0800bc2b 	.word	0x0800bc2b
 800bbf8:	0800bc1b 	.word	0x0800bc1b
 800bbfc:	0800bc2b 	.word	0x0800bc2b
 800bc00:	0800bc2b 	.word	0x0800bc2b
 800bc04:	0800bc2b 	.word	0x0800bc2b
 800bc08:	0800bc23 	.word	0x0800bc23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc0c:	f7fc f8da 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 800bc10:	61f8      	str	r0, [r7, #28]
        break;
 800bc12:	e010      	b.n	800bc36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc14:	4b8f      	ldr	r3, [pc, #572]	; (800be54 <UART_SetConfig+0x56c>)
 800bc16:	61fb      	str	r3, [r7, #28]
        break;
 800bc18:	e00d      	b.n	800bc36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc1a:	f7fc f83b 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 800bc1e:	61f8      	str	r0, [r7, #28]
        break;
 800bc20:	e009      	b.n	800bc36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc26:	61fb      	str	r3, [r7, #28]
        break;
 800bc28:	e005      	b.n	800bc36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bc34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 80fb 	beq.w	800be34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	4613      	mov	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	4413      	add	r3, r2
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d305      	bcc.n	800bc5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc54:	69fa      	ldr	r2, [r7, #28]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d903      	bls.n	800bc62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bc60:	e0e8      	b.n	800be34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	2200      	movs	r2, #0
 800bc66:	461c      	mov	r4, r3
 800bc68:	4615      	mov	r5, r2
 800bc6a:	f04f 0200 	mov.w	r2, #0
 800bc6e:	f04f 0300 	mov.w	r3, #0
 800bc72:	022b      	lsls	r3, r5, #8
 800bc74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bc78:	0222      	lsls	r2, r4, #8
 800bc7a:	68f9      	ldr	r1, [r7, #12]
 800bc7c:	6849      	ldr	r1, [r1, #4]
 800bc7e:	0849      	lsrs	r1, r1, #1
 800bc80:	2000      	movs	r0, #0
 800bc82:	4688      	mov	r8, r1
 800bc84:	4681      	mov	r9, r0
 800bc86:	eb12 0a08 	adds.w	sl, r2, r8
 800bc8a:	eb43 0b09 	adc.w	fp, r3, r9
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	603b      	str	r3, [r7, #0]
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc9c:	4650      	mov	r0, sl
 800bc9e:	4659      	mov	r1, fp
 800bca0:	f7f4 faf6 	bl	8000290 <__aeabi_uldivmod>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4613      	mov	r3, r2
 800bcaa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcb2:	d308      	bcc.n	800bcc6 <UART_SetConfig+0x3de>
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcba:	d204      	bcs.n	800bcc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	60da      	str	r2, [r3, #12]
 800bcc4:	e0b6      	b.n	800be34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bccc:	e0b2      	b.n	800be34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd6:	d15e      	bne.n	800bd96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800bcd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d828      	bhi.n	800bd32 <UART_SetConfig+0x44a>
 800bce0:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0x400>)
 800bce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce6:	bf00      	nop
 800bce8:	0800bd0d 	.word	0x0800bd0d
 800bcec:	0800bd15 	.word	0x0800bd15
 800bcf0:	0800bd1d 	.word	0x0800bd1d
 800bcf4:	0800bd33 	.word	0x0800bd33
 800bcf8:	0800bd23 	.word	0x0800bd23
 800bcfc:	0800bd33 	.word	0x0800bd33
 800bd00:	0800bd33 	.word	0x0800bd33
 800bd04:	0800bd33 	.word	0x0800bd33
 800bd08:	0800bd2b 	.word	0x0800bd2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd0c:	f7fc f85a 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 800bd10:	61f8      	str	r0, [r7, #28]
        break;
 800bd12:	e014      	b.n	800bd3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd14:	f7fc f86c 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
 800bd18:	61f8      	str	r0, [r7, #28]
        break;
 800bd1a:	e010      	b.n	800bd3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	; (800be54 <UART_SetConfig+0x56c>)
 800bd1e:	61fb      	str	r3, [r7, #28]
        break;
 800bd20:	e00d      	b.n	800bd3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd22:	f7fb ffb7 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 800bd26:	61f8      	str	r0, [r7, #28]
        break;
 800bd28:	e009      	b.n	800bd3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd2e:	61fb      	str	r3, [r7, #28]
        break;
 800bd30:	e005      	b.n	800bd3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bd3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d077      	beq.n	800be34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	005a      	lsls	r2, r3, #1
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	441a      	add	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	2b0f      	cmp	r3, #15
 800bd5e:	d916      	bls.n	800bd8e <UART_SetConfig+0x4a6>
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd66:	d212      	bcs.n	800bd8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f023 030f 	bic.w	r3, r3, #15
 800bd70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	f003 0307 	and.w	r3, r3, #7
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	8afb      	ldrh	r3, [r7, #22]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	8afa      	ldrh	r2, [r7, #22]
 800bd8a:	60da      	str	r2, [r3, #12]
 800bd8c:	e052      	b.n	800be34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bd94:	e04e      	b.n	800be34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd9a:	2b08      	cmp	r3, #8
 800bd9c:	d827      	bhi.n	800bdee <UART_SetConfig+0x506>
 800bd9e:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <UART_SetConfig+0x4bc>)
 800bda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda4:	0800bdc9 	.word	0x0800bdc9
 800bda8:	0800bdd1 	.word	0x0800bdd1
 800bdac:	0800bdd9 	.word	0x0800bdd9
 800bdb0:	0800bdef 	.word	0x0800bdef
 800bdb4:	0800bddf 	.word	0x0800bddf
 800bdb8:	0800bdef 	.word	0x0800bdef
 800bdbc:	0800bdef 	.word	0x0800bdef
 800bdc0:	0800bdef 	.word	0x0800bdef
 800bdc4:	0800bde7 	.word	0x0800bde7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdc8:	f7fb fffc 	bl	8007dc4 <HAL_RCC_GetPCLK1Freq>
 800bdcc:	61f8      	str	r0, [r7, #28]
        break;
 800bdce:	e014      	b.n	800bdfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdd0:	f7fc f80e 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
 800bdd4:	61f8      	str	r0, [r7, #28]
        break;
 800bdd6:	e010      	b.n	800bdfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdd8:	4b1e      	ldr	r3, [pc, #120]	; (800be54 <UART_SetConfig+0x56c>)
 800bdda:	61fb      	str	r3, [r7, #28]
        break;
 800bddc:	e00d      	b.n	800bdfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdde:	f7fb ff59 	bl	8007c94 <HAL_RCC_GetSysClockFreq>
 800bde2:	61f8      	str	r0, [r7, #28]
        break;
 800bde4:	e009      	b.n	800bdfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdea:	61fb      	str	r3, [r7, #28]
        break;
 800bdec:	e005      	b.n	800bdfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bdf8:	bf00      	nop
    }

    if (pclk != 0U)
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d019      	beq.n	800be34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	085a      	lsrs	r2, r3, #1
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	441a      	add	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	2b0f      	cmp	r3, #15
 800be18:	d909      	bls.n	800be2e <UART_SetConfig+0x546>
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be20:	d205      	bcs.n	800be2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	b29a      	uxth	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	60da      	str	r2, [r3, #12]
 800be2c:	e002      	b.n	800be34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800be40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800be44:	4618      	mov	r0, r3
 800be46:	3728      	adds	r7, #40	; 0x28
 800be48:	46bd      	mov	sp, r7
 800be4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be4e:	bf00      	nop
 800be50:	40008000 	.word	0x40008000
 800be54:	00f42400 	.word	0x00f42400

0800be58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	f003 0302 	and.w	r3, r3, #2
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00a      	beq.n	800bec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	f003 0308 	and.w	r3, r3, #8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	f003 0310 	and.w	r3, r3, #16
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00a      	beq.n	800bf0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	f003 0320 	and.w	r3, r3, #32
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d01a      	beq.n	800bf6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf56:	d10a      	bne.n	800bf6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00a      	beq.n	800bf90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	605a      	str	r2, [r3, #4]
  }
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfac:	f7f8 fdf2 	bl	8004b94 <HAL_GetTick>
 800bfb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 0308 	and.w	r3, r3, #8
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d10e      	bne.n	800bfde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f82d 	bl	800c02e <UART_WaitOnFlagUntilTimeout>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	e023      	b.n	800c026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0304 	and.w	r3, r3, #4
 800bfe8:	2b04      	cmp	r3, #4
 800bfea:	d10e      	bne.n	800c00a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f817 	bl	800c02e <UART_WaitOnFlagUntilTimeout>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e00d      	b.n	800c026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2220      	movs	r2, #32
 800c00e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b09c      	sub	sp, #112	; 0x70
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c03e:	e0a5      	b.n	800c18c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	f000 80a1 	beq.w	800c18c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c04a:	f7f8 fda3 	bl	8004b94 <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c056:	429a      	cmp	r2, r3
 800c058:	d302      	bcc.n	800c060 <UART_WaitOnFlagUntilTimeout+0x32>
 800c05a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d13e      	bne.n	800c0de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c068:	e853 3f00 	ldrex	r3, [r3]
 800c06c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c074:	667b      	str	r3, [r7, #100]	; 0x64
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	461a      	mov	r2, r3
 800c07c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c07e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c080:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c08c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e6      	bne.n	800c060 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3308      	adds	r3, #8
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	663b      	str	r3, [r7, #96]	; 0x60
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c0b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e5      	bne.n	800c092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2220      	movs	r2, #32
 800c0d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e067      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 0304 	and.w	r3, r3, #4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d04f      	beq.n	800c18c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0fa:	d147      	bne.n	800c18c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c104:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c11a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c124:	637b      	str	r3, [r7, #52]	; 0x34
 800c126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c12a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c12c:	e841 2300 	strex	r3, r2, [r1]
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e6      	bne.n	800c106 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3308      	adds	r3, #8
 800c13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	613b      	str	r3, [r7, #16]
   return(result);
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f023 0301 	bic.w	r3, r3, #1
 800c14e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3308      	adds	r3, #8
 800c156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c158:	623a      	str	r2, [r7, #32]
 800c15a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	69f9      	ldr	r1, [r7, #28]
 800c15e:	6a3a      	ldr	r2, [r7, #32]
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	61bb      	str	r3, [r7, #24]
   return(result);
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e5      	bne.n	800c138 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2220      	movs	r2, #32
 800c170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2220      	movs	r2, #32
 800c176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e010      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69da      	ldr	r2, [r3, #28]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	4013      	ands	r3, r2
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	429a      	cmp	r2, r3
 800c19a:	bf0c      	ite	eq
 800c19c:	2301      	moveq	r3, #1
 800c19e:	2300      	movne	r3, #0
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	79fb      	ldrb	r3, [r7, #7]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	f43f af4a 	beq.w	800c040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3770      	adds	r7, #112	; 0x70
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b095      	sub	sp, #84	; 0x54
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	e853 3f00 	ldrex	r3, [r3]
 800c1ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c1de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1e4:	e841 2300 	strex	r3, r2, [r1]
 800c1e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1e6      	bne.n	800c1be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	f023 0301 	bic.w	r3, r3, #1
 800c206:	64bb      	str	r3, [r7, #72]	; 0x48
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3308      	adds	r3, #8
 800c20e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c210:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c218:	e841 2300 	strex	r3, r2, [r1]
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e5      	bne.n	800c1f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d118      	bne.n	800c25e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	e853 3f00 	ldrex	r3, [r3]
 800c238:	60bb      	str	r3, [r7, #8]
   return(result);
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f023 0310 	bic.w	r3, r3, #16
 800c240:	647b      	str	r3, [r7, #68]	; 0x44
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c24a:	61bb      	str	r3, [r7, #24]
 800c24c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6979      	ldr	r1, [r7, #20]
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	613b      	str	r3, [r7, #16]
   return(result);
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e6      	bne.n	800c22c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2220      	movs	r2, #32
 800c262:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c270:	bf00      	nop
 800c272:	3754      	adds	r7, #84	; 0x54
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f7ff fb0e 	bl	800b8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2a0:	bf00      	nop
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c4:	61fb      	str	r3, [r7, #28]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6979      	ldr	r1, [r7, #20]
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	613b      	str	r3, [r7, #16]
   return(result);
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e6      	bne.n	800c2b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fada 	bl	800b8a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2f4:	bf00      	nop
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800c310:	b480      	push	{r7}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	6812      	ldr	r2, [r2, #0]
 800c328:	f023 0101 	bic.w	r1, r3, #1
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	2b08      	cmp	r3, #8
 800c338:	d102      	bne.n	800c340 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c33a:	2340      	movs	r3, #64	; 0x40
 800c33c:	617b      	str	r3, [r7, #20]
 800c33e:	e001      	b.n	800c344 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c340:	2300      	movs	r3, #0
 800c342:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c350:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c356:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c35c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c362:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800c368:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800c36e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800c374:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800c37a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800c380:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	4313      	orrs	r3, r2
 800c392:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800c3a8:	4b20      	ldr	r3, [pc, #128]	; (800c42c <FMC_NORSRAM_Init+0x11c>)
 800c3aa:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3b2:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3ba:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c3c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	43db      	mvns	r3, r3
 800c3d2:	ea02 0103 	and.w	r1, r2, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	4319      	orrs	r1, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ec:	d10c      	bne.n	800c408 <FMC_NORSRAM_Init+0xf8>
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	431a      	orrs	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d006      	beq.n	800c41e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c418:	431a      	orrs	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	371c      	adds	r7, #28
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	0008fb7f 	.word	0x0008fb7f

0800c430 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c446:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	011b      	lsls	r3, r3, #4
 800c454:	431a      	orrs	r2, r3
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	021b      	lsls	r3, r3, #8
 800c45c:	431a      	orrs	r2, r3
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	041b      	lsls	r3, r3, #16
 800c464:	431a      	orrs	r2, r3
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	051b      	lsls	r3, r3, #20
 800c46e:	431a      	orrs	r2, r3
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	3b02      	subs	r3, #2
 800c476:	061b      	lsls	r3, r3, #24
 800c478:	431a      	orrs	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	4313      	orrs	r3, r2
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	3201      	adds	r2, #1
 800c484:	4319      	orrs	r1, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c498:	d113      	bne.n	800c4c2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c4a2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	051b      	lsls	r3, r3, #20
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4e4:	d11d      	bne.n	800c522 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	6811      	ldr	r1, [r2, #0]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	6852      	ldr	r2, [r2, #4]
 800c4fa:	0112      	lsls	r2, r2, #4
 800c4fc:	4311      	orrs	r1, r2
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	6892      	ldr	r2, [r2, #8]
 800c502:	0212      	lsls	r2, r2, #8
 800c504:	4311      	orrs	r1, r2
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	69d2      	ldr	r2, [r2, #28]
 800c50a:	4311      	orrs	r1, r2
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	6912      	ldr	r2, [r2, #16]
 800c510:	0412      	lsls	r2, r2, #16
 800c512:	430a      	orrs	r2, r1
 800c514:	ea43 0102 	orr.w	r1, r3, r2
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c520:	e005      	b.n	800c52e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c52a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	cff00000 	.word	0xcff00000

0800c540 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c540:	b084      	sub	sp, #16
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	f107 001c 	add.w	r0, r7, #28
 800c54e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800c55e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800c562:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c56a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c56e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c57e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	431a      	orrs	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	b004      	add	sp, #16
 800c598:	4770      	bx	lr

0800c59a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b083      	sub	sp, #12
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c5e4:	2002      	movs	r0, #2
 800c5e6:	f7f8 fae1 	bl	8004bac <HAL_Delay>

  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0303 	and.w	r3, r3, #3
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c62e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c634:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c63a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c64a:	f023 030f 	bic.w	r3, r3, #15
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	431a      	orrs	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	b2db      	uxtb	r3, r3
}
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c67e:	b480      	push	{r7}
 800c680:	b085      	sub	sp, #20
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3314      	adds	r3, #20
 800c68c:	461a      	mov	r2, r3
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	4413      	add	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c6d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c6d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0

}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c70a:	2310      	movs	r3, #16
 800c70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c70e:	2340      	movs	r3, #64	; 0x40
 800c710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c712:	2300      	movs	r3, #0
 800c714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c71a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c71c:	f107 0308 	add.w	r3, r7, #8
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff ff74 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c728:	f241 3288 	movw	r2, #5000	; 0x1388
 800c72c:	2110      	movs	r1, #16
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa18 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c736:	69fb      	ldr	r3, [r7, #28]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3720      	adds	r7, #32
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b088      	sub	sp, #32
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c74e:	2311      	movs	r3, #17
 800c750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c752:	2340      	movs	r3, #64	; 0x40
 800c754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c756:	2300      	movs	r3, #0
 800c758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c760:	f107 0308 	add.w	r3, r7, #8
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7ff ff52 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c770:	2111      	movs	r1, #17
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9f6 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c77a:	69fb      	ldr	r3, [r7, #28]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c792:	2312      	movs	r3, #18
 800c794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c796:	2340      	movs	r3, #64	; 0x40
 800c798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c79a:	2300      	movs	r3, #0
 800c79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a4:	f107 0308 	add.w	r3, r7, #8
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff ff30 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b4:	2112      	movs	r1, #18
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9d4 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7be:	69fb      	ldr	r3, [r7, #28]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c7d6:	2318      	movs	r3, #24
 800c7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7da:	2340      	movs	r3, #64	; 0x40
 800c7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7e8:	f107 0308 	add.w	r3, r7, #8
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff ff0e 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f8:	2118      	movs	r1, #24
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f9b2 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c802:	69fb      	ldr	r3, [r7, #28]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3720      	adds	r7, #32
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c81a:	2319      	movs	r3, #25
 800c81c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c822:	2300      	movs	r3, #0
 800c824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c82a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c82c:	f107 0308 	add.w	r3, r7, #8
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff feec 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c838:	f241 3288 	movw	r2, #5000	; 0x1388
 800c83c:	2119      	movs	r1, #25
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f990 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c846:	69fb      	ldr	r3, [r7, #28]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3720      	adds	r7, #32
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b088      	sub	sp, #32
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c858:	2300      	movs	r3, #0
 800c85a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c85c:	230c      	movs	r3, #12
 800c85e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c860:	2340      	movs	r3, #64	; 0x40
 800c862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c864:	2300      	movs	r3, #0
 800c866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c86c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c86e:	f107 0308 	add.w	r3, r7, #8
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fecb 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c87a:	4a05      	ldr	r2, [pc, #20]	; (800c890 <SDMMC_CmdStopTransfer+0x40>)
 800c87c:	210c      	movs	r1, #12
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f970 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c884:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800c886:	69fb      	ldr	r3, [r7, #28]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3720      	adds	r7, #32
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	05f5e100 	.word	0x05f5e100

0800c894 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08a      	sub	sp, #40	; 0x28
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8a4:	2307      	movs	r3, #7
 800c8a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8a8:	2340      	movs	r3, #64	; 0x40
 800c8aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8b6:	f107 0310 	add.w	r3, r7, #16
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff fea7 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c6:	2107      	movs	r1, #7
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 f94b 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c8ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3728      	adds	r7, #40	; 0x28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b088      	sub	sp, #32
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8f8:	f107 0308 	add.w	r3, r7, #8
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fe86 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 fb65 	bl	800cfd4 <SDMMC_GetCmdError>
 800c90a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c90c:	69fb      	ldr	r3, [r7, #28]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3720      	adds	r7, #32
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b088      	sub	sp, #32
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c91e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c924:	2308      	movs	r3, #8
 800c926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c928:	2340      	movs	r3, #64	; 0x40
 800c92a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c92c:	2300      	movs	r3, #0
 800c92e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c936:	f107 0308 	add.w	r3, r7, #8
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff fe67 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 faf8 	bl	800cf38 <SDMMC_GetCmdResp7>
 800c948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c94a:	69fb      	ldr	r3, [r7, #28]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3720      	adds	r7, #32
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c962:	2337      	movs	r3, #55	; 0x37
 800c964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c966:	2340      	movs	r3, #64	; 0x40
 800c968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c974:	f107 0308 	add.w	r3, r7, #8
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7ff fe48 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c980:	f241 3288 	movw	r2, #5000	; 0x1388
 800c984:	2137      	movs	r1, #55	; 0x37
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f8ec 	bl	800cb64 <SDMMC_GetCmdResp1>
 800c98c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c98e:	69fb      	ldr	r3, [r7, #28]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9ac:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c9ae:	2329      	movs	r3, #41	; 0x29
 800c9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9c0:	f107 0308 	add.w	r3, r7, #8
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff fe22 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f9ff 	bl	800cdd0 <SDMMC_GetCmdResp3>
 800c9d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3720      	adds	r7, #32
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b088      	sub	sp, #32
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c9ec:	2306      	movs	r3, #6
 800c9ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9f0:	2340      	movs	r3, #64	; 0x40
 800c9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9fe:	f107 0308 	add.w	r3, r7, #8
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7ff fe03 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca0e:	2106      	movs	r1, #6
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f8a7 	bl	800cb64 <SDMMC_GetCmdResp1>
 800ca16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca18:	69fb      	ldr	r3, [r7, #28]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3720      	adds	r7, #32
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b088      	sub	sp, #32
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca2e:	2333      	movs	r3, #51	; 0x33
 800ca30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca32:	2340      	movs	r3, #64	; 0x40
 800ca34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff fde2 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ca4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca50:	2133      	movs	r1, #51	; 0x33
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f886 	bl	800cb64 <SDMMC_GetCmdResp1>
 800ca58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca70:	2302      	movs	r3, #2
 800ca72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca74:	23c0      	movs	r3, #192	; 0xc0
 800ca76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fdc1 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f956 	bl	800cd40 <SDMMC_GetCmdResp2>
 800ca94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca96:	69fb      	ldr	r3, [r7, #28]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800caae:	2309      	movs	r3, #9
 800cab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cab2:	23c0      	movs	r3, #192	; 0xc0
 800cab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cab6:	2300      	movs	r3, #0
 800cab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cabe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cac0:	f107 0308 	add.w	r3, r7, #8
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff fda2 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f937 	bl	800cd40 <SDMMC_GetCmdResp2>
 800cad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cad4:	69fb      	ldr	r3, [r7, #28]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3720      	adds	r7, #32
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b088      	sub	sp, #32
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800caec:	2303      	movs	r3, #3
 800caee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caf0:	2340      	movs	r3, #64	; 0x40
 800caf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caf4:	2300      	movs	r3, #0
 800caf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cafc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cafe:	f107 0308 	add.w	r3, r7, #8
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff fd83 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	2103      	movs	r1, #3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f99c 	bl	800ce4c <SDMMC_GetCmdResp6>
 800cb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb16:	69fb      	ldr	r3, [r7, #28]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cb2e:	230d      	movs	r3, #13
 800cb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb32:	2340      	movs	r3, #64	; 0x40
 800cb34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb40:	f107 0308 	add.w	r3, r7, #8
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fd62 	bl	800c610 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb50:	210d      	movs	r1, #13
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f806 	bl	800cb64 <SDMMC_GetCmdResp1>
 800cb58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	607a      	str	r2, [r7, #4]
 800cb70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb72:	4b70      	ldr	r3, [pc, #448]	; (800cd34 <SDMMC_GetCmdResp1+0x1d0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a70      	ldr	r2, [pc, #448]	; (800cd38 <SDMMC_GetCmdResp1+0x1d4>)
 800cb78:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7c:	0a5a      	lsrs	r2, r3, #9
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	fb02 f303 	mul.w	r3, r2, r3
 800cb84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	1e5a      	subs	r2, r3, #1
 800cb8a:	61fa      	str	r2, [r7, #28]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d102      	bne.n	800cb96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb94:	e0c9      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0ef      	beq.n	800cb86 <SDMMC_GetCmdResp1+0x22>
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1ea      	bne.n	800cb86 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2204      	movs	r2, #4
 800cbc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbc2:	2304      	movs	r3, #4
 800cbc4:	e0b1      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e0a6      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	22c5      	movs	r2, #197	; 0xc5
 800cbe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff fd3e 	bl	800c664 <SDMMC_GetCommandResponse>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	7afb      	ldrb	r3, [r7, #11]
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d001      	beq.n	800cbf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e099      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f7ff fd40 	bl	800c67e <SDMMC_GetResponse>
 800cbfe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	4b4e      	ldr	r3, [pc, #312]	; (800cd3c <SDMMC_GetCmdResp1+0x1d8>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e08d      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	da02      	bge.n	800cc1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cc14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc18:	e087      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cc24:	2340      	movs	r3, #64	; 0x40
 800cc26:	e080      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cc32:	2380      	movs	r3, #128	; 0x80
 800cc34:	e079      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cc40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc44:	e071      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cc50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc54:	e069      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cc60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc64:	e061      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cc70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc74:	e059      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc84:	e051      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc94:	e049      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cca4:	e041      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ccb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccb4:	e039      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ccc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ccc4:	e031      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ccd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ccd4:	e029      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cce0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cce4:	e021      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ccf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ccf4:	e019      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd04:	e011      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cd10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cd14:	e009      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f003 0308 	and.w	r3, r3, #8
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cd20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cd24:	e001      	b.n	800cd2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	200000a4 	.word	0x200000a4
 800cd38:	10624dd3 	.word	0x10624dd3
 800cd3c:	fdffe008 	.word	0xfdffe008

0800cd40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd48:	4b1f      	ldr	r3, [pc, #124]	; (800cdc8 <SDMMC_GetCmdResp2+0x88>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a1f      	ldr	r2, [pc, #124]	; (800cdcc <SDMMC_GetCmdResp2+0x8c>)
 800cd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd52:	0a5b      	lsrs	r3, r3, #9
 800cd54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd58:	fb02 f303 	mul.w	r3, r2, r3
 800cd5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	1e5a      	subs	r2, r3, #1
 800cd62:	60fa      	str	r2, [r7, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd6c:	e026      	b.n	800cdbc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0ef      	beq.n	800cd5e <SDMMC_GetCmdResp2+0x1e>
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1ea      	bne.n	800cd5e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2204      	movs	r2, #4
 800cd98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd9a:	2304      	movs	r3, #4
 800cd9c:	e00e      	b.n	800cdbc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda2:	f003 0301 	and.w	r3, r3, #1
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d004      	beq.n	800cdb4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e003      	b.n	800cdbc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	22c5      	movs	r2, #197	; 0xc5
 800cdb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	200000a4 	.word	0x200000a4
 800cdcc:	10624dd3 	.word	0x10624dd3

0800cdd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	; (800ce44 <SDMMC_GetCmdResp3+0x74>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a1a      	ldr	r2, [pc, #104]	; (800ce48 <SDMMC_GetCmdResp3+0x78>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	0a5b      	lsrs	r3, r3, #9
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	fb02 f303 	mul.w	r3, r2, r3
 800cdec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	1e5a      	subs	r2, r3, #1
 800cdf2:	60fa      	str	r2, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdfc:	e01b      	b.n	800ce36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0ef      	beq.n	800cdee <SDMMC_GetCmdResp3+0x1e>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1ea      	bne.n	800cdee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d004      	beq.n	800ce2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2204      	movs	r2, #4
 800ce28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce2a:	2304      	movs	r3, #4
 800ce2c:	e003      	b.n	800ce36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	22c5      	movs	r2, #197	; 0xc5
 800ce32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	200000a4 	.word	0x200000a4
 800ce48:	10624dd3 	.word	0x10624dd3

0800ce4c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	460b      	mov	r3, r1
 800ce56:	607a      	str	r2, [r7, #4]
 800ce58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce5a:	4b35      	ldr	r3, [pc, #212]	; (800cf30 <SDMMC_GetCmdResp6+0xe4>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a35      	ldr	r2, [pc, #212]	; (800cf34 <SDMMC_GetCmdResp6+0xe8>)
 800ce60:	fba2 2303 	umull	r2, r3, r2, r3
 800ce64:	0a5b      	lsrs	r3, r3, #9
 800ce66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce6a:	fb02 f303 	mul.w	r3, r2, r3
 800ce6e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	1e5a      	subs	r2, r3, #1
 800ce74:	61fa      	str	r2, [r7, #28]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d102      	bne.n	800ce80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce7e:	e052      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0ef      	beq.n	800ce70 <SDMMC_GetCmdResp6+0x24>
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1ea      	bne.n	800ce70 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9e:	f003 0304 	and.w	r3, r3, #4
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d004      	beq.n	800ceb0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2204      	movs	r2, #4
 800ceaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceac:	2304      	movs	r3, #4
 800ceae:	e03a      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e02f      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7ff fbcc 	bl	800c664 <SDMMC_GetCommandResponse>
 800cecc:	4603      	mov	r3, r0
 800cece:	461a      	mov	r2, r3
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d001      	beq.n	800ceda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e025      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	22c5      	movs	r2, #197	; 0xc5
 800cede:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cee0:	2100      	movs	r1, #0
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7ff fbcb 	bl	800c67e <SDMMC_GetResponse>
 800cee8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d106      	bne.n	800cf02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	0c1b      	lsrs	r3, r3, #16
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e011      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf10:	e009      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf20:	e001      	b.n	800cf26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cf22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	200000a4 	.word	0x200000a4
 800cf34:	10624dd3 	.word	0x10624dd3

0800cf38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf40:	4b22      	ldr	r3, [pc, #136]	; (800cfcc <SDMMC_GetCmdResp7+0x94>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a22      	ldr	r2, [pc, #136]	; (800cfd0 <SDMMC_GetCmdResp7+0x98>)
 800cf46:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4a:	0a5b      	lsrs	r3, r3, #9
 800cf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf50:	fb02 f303 	mul.w	r3, r2, r3
 800cf54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	1e5a      	subs	r2, r3, #1
 800cf5a:	60fa      	str	r2, [r7, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d102      	bne.n	800cf66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf64:	e02c      	b.n	800cfc0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0ef      	beq.n	800cf56 <SDMMC_GetCmdResp7+0x1e>
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1ea      	bne.n	800cf56 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf84:	f003 0304 	and.w	r3, r3, #4
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d004      	beq.n	800cf96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2204      	movs	r2, #4
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf92:	2304      	movs	r3, #4
 800cf94:	e014      	b.n	800cfc0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d004      	beq.n	800cfac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e009      	b.n	800cfc0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2240      	movs	r2, #64	; 0x40
 800cfbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cfbe:	2300      	movs	r3, #0

}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	200000a4 	.word	0x200000a4
 800cfd0:	10624dd3 	.word	0x10624dd3

0800cfd4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cfdc:	4b11      	ldr	r3, [pc, #68]	; (800d024 <SDMMC_GetCmdError+0x50>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a11      	ldr	r2, [pc, #68]	; (800d028 <SDMMC_GetCmdError+0x54>)
 800cfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe6:	0a5b      	lsrs	r3, r3, #9
 800cfe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfec:	fb02 f303 	mul.w	r3, r2, r3
 800cff0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	1e5a      	subs	r2, r3, #1
 800cff6:	60fa      	str	r2, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d000:	e009      	b.n	800d016 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0f1      	beq.n	800cff2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	22c5      	movs	r2, #197	; 0xc5
 800d012:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	200000a4 	.word	0x200000a4
 800d028:	10624dd3 	.word	0x10624dd3

0800d02c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d030:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d032:	4618      	mov	r0, r3
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d044:	f7f5 fb9a 	bl	800277c <BSP_SD_AbortCallback>
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d058:	f7f5 fb97 	bl	800278a <BSP_SD_WriteCpltCallback>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d06c:	f7f5 fb94 	bl	8002798 <BSP_SD_ReadCpltCallback>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	4a08      	ldr	r2, [pc, #32]	; (800d0a8 <disk_status+0x30>)
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	79fa      	ldrb	r2, [r7, #7]
 800d090:	4905      	ldr	r1, [pc, #20]	; (800d0a8 <disk_status+0x30>)
 800d092:	440a      	add	r2, r1
 800d094:	7a12      	ldrb	r2, [r2, #8]
 800d096:	4610      	mov	r0, r2
 800d098:	4798      	blx	r3
 800d09a:	4603      	mov	r3, r0
 800d09c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	2001fc14 	.word	0x2001fc14

0800d0ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	4a0d      	ldr	r2, [pc, #52]	; (800d0f4 <disk_initialize+0x48>)
 800d0be:	5cd3      	ldrb	r3, [r2, r3]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d111      	bne.n	800d0e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	4a0b      	ldr	r2, [pc, #44]	; (800d0f4 <disk_initialize+0x48>)
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	4a09      	ldr	r2, [pc, #36]	; (800d0f4 <disk_initialize+0x48>)
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	79fa      	ldrb	r2, [r7, #7]
 800d0da:	4906      	ldr	r1, [pc, #24]	; (800d0f4 <disk_initialize+0x48>)
 800d0dc:	440a      	add	r2, r1
 800d0de:	7a12      	ldrb	r2, [r2, #8]
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	4798      	blx	r3
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	2001fc14 	.word	0x2001fc14

0800d0f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d0f8:	b590      	push	{r4, r7, lr}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	607a      	str	r2, [r7, #4]
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	4603      	mov	r3, r0
 800d106:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	4a0a      	ldr	r2, [pc, #40]	; (800d134 <disk_read+0x3c>)
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	689c      	ldr	r4, [r3, #8]
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	4a07      	ldr	r2, [pc, #28]	; (800d134 <disk_read+0x3c>)
 800d118:	4413      	add	r3, r2
 800d11a:	7a18      	ldrb	r0, [r3, #8]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	47a0      	blx	r4
 800d124:	4603      	mov	r3, r0
 800d126:	75fb      	strb	r3, [r7, #23]
  return res;
 800d128:	7dfb      	ldrb	r3, [r7, #23]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	371c      	adds	r7, #28
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd90      	pop	{r4, r7, pc}
 800d132:	bf00      	nop
 800d134:	2001fc14 	.word	0x2001fc14

0800d138 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b087      	sub	sp, #28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	607a      	str	r2, [r7, #4]
 800d142:	603b      	str	r3, [r7, #0]
 800d144:	4603      	mov	r3, r0
 800d146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	4a0a      	ldr	r2, [pc, #40]	; (800d174 <disk_write+0x3c>)
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	68dc      	ldr	r4, [r3, #12]
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	4a07      	ldr	r2, [pc, #28]	; (800d174 <disk_write+0x3c>)
 800d158:	4413      	add	r3, r2
 800d15a:	7a18      	ldrb	r0, [r3, #8]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	47a0      	blx	r4
 800d164:	4603      	mov	r3, r0
 800d166:	75fb      	strb	r3, [r7, #23]
  return res;
 800d168:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	371c      	adds	r7, #28
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd90      	pop	{r4, r7, pc}
 800d172:	bf00      	nop
 800d174:	2001fc14 	.word	0x2001fc14

0800d178 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	603a      	str	r2, [r7, #0]
 800d182:	71fb      	strb	r3, [r7, #7]
 800d184:	460b      	mov	r3, r1
 800d186:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d188:	79fb      	ldrb	r3, [r7, #7]
 800d18a:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <disk_ioctl+0x38>)
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	79fa      	ldrb	r2, [r7, #7]
 800d196:	4906      	ldr	r1, [pc, #24]	; (800d1b0 <disk_ioctl+0x38>)
 800d198:	440a      	add	r2, r1
 800d19a:	7a10      	ldrb	r0, [r2, #8]
 800d19c:	79b9      	ldrb	r1, [r7, #6]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	4798      	blx	r3
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	2001fc14 	.word	0x2001fc14

0800d1b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d1c4:	89fb      	ldrh	r3, [r7, #14]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	b21a      	sxth	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	b21b      	sxth	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b21b      	sxth	r3, r3
 800d1d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d1d6:	89fb      	ldrh	r3, [r7, #14]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3303      	adds	r3, #3
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	021b      	lsls	r3, r3, #8
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	3202      	adds	r2, #2
 800d1fc:	7812      	ldrb	r2, [r2, #0]
 800d1fe:	4313      	orrs	r3, r2
 800d200:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	021b      	lsls	r3, r3, #8
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	3201      	adds	r2, #1
 800d20a:	7812      	ldrb	r2, [r2, #0]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	7812      	ldrb	r2, [r2, #0]
 800d218:	4313      	orrs	r3, r2
 800d21a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d21c:	68fb      	ldr	r3, [r7, #12]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	460b      	mov	r3, r1
 800d234:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	887a      	ldrh	r2, [r7, #2]
 800d23e:	b2d2      	uxtb	r2, r2
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	887b      	ldrh	r3, [r7, #2]
 800d244:	0a1b      	lsrs	r3, r3, #8
 800d246:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	607a      	str	r2, [r7, #4]
 800d24e:	887a      	ldrh	r2, [r7, #2]
 800d250:	b2d2      	uxtb	r2, r2
 800d252:	701a      	strb	r2, [r3, #0]
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	0a1b      	lsrs	r3, r3, #8
 800d27a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	607a      	str	r2, [r7, #4]
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	b2d2      	uxtb	r2, r2
 800d286:	701a      	strb	r2, [r3, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	0a1b      	lsrs	r3, r3, #8
 800d28c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	b2d2      	uxtb	r2, r2
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	0a1b      	lsrs	r3, r3, #8
 800d29e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	1c5a      	adds	r2, r3, #1
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	b2d2      	uxtb	r2, r2
 800d2aa:	701a      	strb	r2, [r3, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00d      	beq.n	800d2ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	1c53      	adds	r3, r2, #1
 800d2d6:	613b      	str	r3, [r7, #16]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	1c59      	adds	r1, r3, #1
 800d2dc:	6179      	str	r1, [r7, #20]
 800d2de:	7812      	ldrb	r2, [r2, #0]
 800d2e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	607b      	str	r3, [r7, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1f1      	bne.n	800d2d2 <mem_cpy+0x1a>
	}
}
 800d2ee:	bf00      	nop
 800d2f0:	371c      	adds	r7, #28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d2fa:	b480      	push	{r7}
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	617a      	str	r2, [r7, #20]
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	3b01      	subs	r3, #1
 800d31a:	607b      	str	r3, [r7, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1f3      	bne.n	800d30a <mem_set+0x10>
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d330:	b480      	push	{r7}
 800d332:	b089      	sub	sp, #36	; 0x24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	61fb      	str	r3, [r7, #28]
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	1c5a      	adds	r2, r3, #1
 800d34c:	61fa      	str	r2, [r7, #28]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	4619      	mov	r1, r3
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	61ba      	str	r2, [r7, #24]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	1acb      	subs	r3, r1, r3
 800d35c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3b01      	subs	r3, #1
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d002      	beq.n	800d370 <mem_cmp+0x40>
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0eb      	beq.n	800d348 <mem_cmp+0x18>

	return r;
 800d370:	697b      	ldr	r3, [r7, #20]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3724      	adds	r7, #36	; 0x24
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d37e:	b480      	push	{r7}
 800d380:	b083      	sub	sp, #12
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d388:	e002      	b.n	800d390 <chk_chr+0x12>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3301      	adds	r3, #1
 800d38e:	607b      	str	r3, [r7, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d005      	beq.n	800d3a4 <chk_chr+0x26>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	461a      	mov	r2, r3
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d1f2      	bne.n	800d38a <chk_chr+0xc>
	return *str;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60bb      	str	r3, [r7, #8]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	e029      	b.n	800d41c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d3c8:	4a27      	ldr	r2, [pc, #156]	; (800d468 <chk_lock+0xb4>)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	011b      	lsls	r3, r3, #4
 800d3ce:	4413      	add	r3, r2
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d01d      	beq.n	800d412 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d3d6:	4a24      	ldr	r2, [pc, #144]	; (800d468 <chk_lock+0xb4>)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	011b      	lsls	r3, r3, #4
 800d3dc:	4413      	add	r3, r2
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d116      	bne.n	800d416 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d3e8:	4a1f      	ldr	r2, [pc, #124]	; (800d468 <chk_lock+0xb4>)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	4413      	add	r3, r2
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d10c      	bne.n	800d416 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3fc:	4a1a      	ldr	r2, [pc, #104]	; (800d468 <chk_lock+0xb4>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	011b      	lsls	r3, r3, #4
 800d402:	4413      	add	r3, r2
 800d404:	3308      	adds	r3, #8
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d102      	bne.n	800d416 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d410:	e007      	b.n	800d422 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d412:	2301      	movs	r3, #1
 800d414:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3301      	adds	r3, #1
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d9d2      	bls.n	800d3c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d109      	bne.n	800d43c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d102      	bne.n	800d434 <chk_lock+0x80>
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d101      	bne.n	800d438 <chk_lock+0x84>
 800d434:	2300      	movs	r3, #0
 800d436:	e010      	b.n	800d45a <chk_lock+0xa6>
 800d438:	2312      	movs	r3, #18
 800d43a:	e00e      	b.n	800d45a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d108      	bne.n	800d454 <chk_lock+0xa0>
 800d442:	4a09      	ldr	r2, [pc, #36]	; (800d468 <chk_lock+0xb4>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	4413      	add	r3, r2
 800d44a:	330c      	adds	r3, #12
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d452:	d101      	bne.n	800d458 <chk_lock+0xa4>
 800d454:	2310      	movs	r3, #16
 800d456:	e000      	b.n	800d45a <chk_lock+0xa6>
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	2001fbf4 	.word	0x2001fbf4

0800d46c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d472:	2300      	movs	r3, #0
 800d474:	607b      	str	r3, [r7, #4]
 800d476:	e002      	b.n	800d47e <enq_lock+0x12>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3301      	adds	r3, #1
 800d47c:	607b      	str	r3, [r7, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d806      	bhi.n	800d492 <enq_lock+0x26>
 800d484:	4a09      	ldr	r2, [pc, #36]	; (800d4ac <enq_lock+0x40>)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	011b      	lsls	r3, r3, #4
 800d48a:	4413      	add	r3, r2
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1f2      	bne.n	800d478 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b02      	cmp	r3, #2
 800d496:	bf14      	ite	ne
 800d498:	2301      	movne	r3, #1
 800d49a:	2300      	moveq	r3, #0
 800d49c:	b2db      	uxtb	r3, r3
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	2001fbf4 	.word	0x2001fbf4

0800d4b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	e01f      	b.n	800d500 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d4c0:	4a41      	ldr	r2, [pc, #260]	; (800d5c8 <inc_lock+0x118>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	011b      	lsls	r3, r3, #4
 800d4c6:	4413      	add	r3, r2
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d113      	bne.n	800d4fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d4d2:	4a3d      	ldr	r2, [pc, #244]	; (800d5c8 <inc_lock+0x118>)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	4413      	add	r3, r2
 800d4da:	3304      	adds	r3, #4
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d109      	bne.n	800d4fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d4e6:	4a38      	ldr	r2, [pc, #224]	; (800d5c8 <inc_lock+0x118>)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	011b      	lsls	r3, r3, #4
 800d4ec:	4413      	add	r3, r2
 800d4ee:	3308      	adds	r3, #8
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d006      	beq.n	800d508 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d9dc      	bls.n	800d4c0 <inc_lock+0x10>
 800d506:	e000      	b.n	800d50a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d508:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d132      	bne.n	800d576 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	e002      	b.n	800d51c <inc_lock+0x6c>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3301      	adds	r3, #1
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d806      	bhi.n	800d530 <inc_lock+0x80>
 800d522:	4a29      	ldr	r2, [pc, #164]	; (800d5c8 <inc_lock+0x118>)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	011b      	lsls	r3, r3, #4
 800d528:	4413      	add	r3, r2
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1f2      	bne.n	800d516 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2b02      	cmp	r3, #2
 800d534:	d101      	bne.n	800d53a <inc_lock+0x8a>
 800d536:	2300      	movs	r3, #0
 800d538:	e040      	b.n	800d5bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4922      	ldr	r1, [pc, #136]	; (800d5c8 <inc_lock+0x118>)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	011b      	lsls	r3, r3, #4
 800d544:	440b      	add	r3, r1
 800d546:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	491e      	ldr	r1, [pc, #120]	; (800d5c8 <inc_lock+0x118>)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	440b      	add	r3, r1
 800d554:	3304      	adds	r3, #4
 800d556:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	695a      	ldr	r2, [r3, #20]
 800d55c:	491a      	ldr	r1, [pc, #104]	; (800d5c8 <inc_lock+0x118>)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	440b      	add	r3, r1
 800d564:	3308      	adds	r3, #8
 800d566:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d568:	4a17      	ldr	r2, [pc, #92]	; (800d5c8 <inc_lock+0x118>)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	4413      	add	r3, r2
 800d570:	330c      	adds	r3, #12
 800d572:	2200      	movs	r2, #0
 800d574:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <inc_lock+0xe0>
 800d57c:	4a12      	ldr	r2, [pc, #72]	; (800d5c8 <inc_lock+0x118>)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	4413      	add	r3, r2
 800d584:	330c      	adds	r3, #12
 800d586:	881b      	ldrh	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <inc_lock+0xe0>
 800d58c:	2300      	movs	r3, #0
 800d58e:	e015      	b.n	800d5bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d108      	bne.n	800d5a8 <inc_lock+0xf8>
 800d596:	4a0c      	ldr	r2, [pc, #48]	; (800d5c8 <inc_lock+0x118>)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	011b      	lsls	r3, r3, #4
 800d59c:	4413      	add	r3, r2
 800d59e:	330c      	adds	r3, #12
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	e001      	b.n	800d5ac <inc_lock+0xfc>
 800d5a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5ac:	4906      	ldr	r1, [pc, #24]	; (800d5c8 <inc_lock+0x118>)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	011b      	lsls	r3, r3, #4
 800d5b2:	440b      	add	r3, r1
 800d5b4:	330c      	adds	r3, #12
 800d5b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3301      	adds	r3, #1
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	2001fbf4 	.word	0x2001fbf4

0800d5cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d825      	bhi.n	800d62c <dec_lock+0x60>
		n = Files[i].ctr;
 800d5e0:	4a17      	ldr	r2, [pc, #92]	; (800d640 <dec_lock+0x74>)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	011b      	lsls	r3, r3, #4
 800d5e6:	4413      	add	r3, r2
 800d5e8:	330c      	adds	r3, #12
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d5ee:	89fb      	ldrh	r3, [r7, #14]
 800d5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5f4:	d101      	bne.n	800d5fa <dec_lock+0x2e>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d5fa:	89fb      	ldrh	r3, [r7, #14]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <dec_lock+0x3a>
 800d600:	89fb      	ldrh	r3, [r7, #14]
 800d602:	3b01      	subs	r3, #1
 800d604:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d606:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <dec_lock+0x74>)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	4413      	add	r3, r2
 800d60e:	330c      	adds	r3, #12
 800d610:	89fa      	ldrh	r2, [r7, #14]
 800d612:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d614:	89fb      	ldrh	r3, [r7, #14]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <dec_lock+0x5a>
 800d61a:	4a09      	ldr	r2, [pc, #36]	; (800d640 <dec_lock+0x74>)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	4413      	add	r3, r2
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	737b      	strb	r3, [r7, #13]
 800d62a:	e001      	b.n	800d630 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d62c:	2302      	movs	r3, #2
 800d62e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d630:	7b7b      	ldrb	r3, [r7, #13]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	2001fbf4 	.word	0x2001fbf4

0800d644 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d64c:	2300      	movs	r3, #0
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	e010      	b.n	800d674 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d652:	4a0d      	ldr	r2, [pc, #52]	; (800d688 <clear_lock+0x44>)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	011b      	lsls	r3, r3, #4
 800d658:	4413      	add	r3, r2
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d105      	bne.n	800d66e <clear_lock+0x2a>
 800d662:	4a09      	ldr	r2, [pc, #36]	; (800d688 <clear_lock+0x44>)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	4413      	add	r3, r2
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3301      	adds	r3, #1
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d9eb      	bls.n	800d652 <clear_lock+0xe>
	}
}
 800d67a:	bf00      	nop
 800d67c:	bf00      	nop
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr
 800d688:	2001fbf4 	.word	0x2001fbf4

0800d68c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	78db      	ldrb	r3, [r3, #3]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d034      	beq.n	800d70a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7858      	ldrb	r0, [r3, #1]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	f7ff fd40 	bl	800d138 <disk_write>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	73fb      	strb	r3, [r7, #15]
 800d6c2:	e022      	b.n	800d70a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	1ad2      	subs	r2, r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d217      	bcs.n	800d70a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	789b      	ldrb	r3, [r3, #2]
 800d6de:	613b      	str	r3, [r7, #16]
 800d6e0:	e010      	b.n	800d704 <sync_window+0x78>
					wsect += fs->fsize;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7858      	ldrb	r0, [r3, #1]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	697a      	ldr	r2, [r7, #20]
 800d6fa:	f7ff fd1d 	bl	800d138 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	3b01      	subs	r3, #1
 800d702:	613b      	str	r3, [r7, #16]
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d8eb      	bhi.n	800d6e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d01b      	beq.n	800d764 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff ffad 	bl	800d68c <sync_window>
 800d732:	4603      	mov	r3, r0
 800d734:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d736:	7bfb      	ldrb	r3, [r7, #15]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d113      	bne.n	800d764 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	7858      	ldrb	r0, [r3, #1]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d746:	2301      	movs	r3, #1
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	f7ff fcd5 	bl	800d0f8 <disk_read>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d754:	f04f 33ff 	mov.w	r3, #4294967295
 800d758:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d764:	7bfb      	ldrb	r3, [r7, #15]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff ff87 	bl	800d68c <sync_window>
 800d77e:	4603      	mov	r3, r0
 800d780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d158      	bne.n	800d83a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b03      	cmp	r3, #3
 800d78e:	d148      	bne.n	800d822 <sync_fs+0xb2>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	791b      	ldrb	r3, [r3, #4]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d144      	bne.n	800d822 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3334      	adds	r3, #52	; 0x34
 800d79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7ff fda9 	bl	800d2fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3334      	adds	r3, #52	; 0x34
 800d7ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff fd38 	bl	800d22a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	3334      	adds	r3, #52	; 0x34
 800d7be:	4921      	ldr	r1, [pc, #132]	; (800d844 <sync_fs+0xd4>)
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fd4d 	bl	800d260 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	3334      	adds	r3, #52	; 0x34
 800d7ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7ce:	491e      	ldr	r1, [pc, #120]	; (800d848 <sync_fs+0xd8>)
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fd45 	bl	800d260 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	3334      	adds	r3, #52	; 0x34
 800d7da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	f7ff fd3b 	bl	800d260 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	3334      	adds	r3, #52	; 0x34
 800d7ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f7ff fd31 	bl	800d260 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	7858      	ldrb	r0, [r3, #1]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d816:	2301      	movs	r3, #1
 800d818:	f7ff fc8e 	bl	800d138 <disk_write>
			fs->fsi_flag = 0;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	785b      	ldrb	r3, [r3, #1]
 800d826:	2200      	movs	r2, #0
 800d828:	2100      	movs	r1, #0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff fca4 	bl	800d178 <disk_ioctl>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <sync_fs+0xca>
 800d836:	2301      	movs	r3, #1
 800d838:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	41615252 	.word	0x41615252
 800d848:	61417272 	.word	0x61417272

0800d84c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	3b02      	subs	r3, #2
 800d85a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	3b02      	subs	r3, #2
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d301      	bcc.n	800d86c <clust2sect+0x20>
 800d868:	2300      	movs	r3, #0
 800d86a:	e008      	b.n	800d87e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	895b      	ldrh	r3, [r3, #10]
 800d870:	461a      	mov	r2, r3
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	fb03 f202 	mul.w	r2, r3, r2
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4413      	add	r3, r2
}
 800d87e:	4618      	mov	r0, r3
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b086      	sub	sp, #24
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d904      	bls.n	800d8aa <get_fat+0x20>
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d302      	bcc.n	800d8b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	617b      	str	r3, [r7, #20]
 800d8ae:	e08f      	b.n	800d9d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b03      	cmp	r3, #3
 800d8bc:	d062      	beq.n	800d984 <get_fat+0xfa>
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	dc7c      	bgt.n	800d9bc <get_fat+0x132>
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d002      	beq.n	800d8cc <get_fat+0x42>
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d042      	beq.n	800d950 <get_fat+0xc6>
 800d8ca:	e077      	b.n	800d9bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	085b      	lsrs	r3, r3, #1
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	0a5b      	lsrs	r3, r3, #9
 800d8e2:	4413      	add	r3, r2
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6938      	ldr	r0, [r7, #16]
 800d8e8:	f7ff ff14 	bl	800d714 <move_window>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d167      	bne.n	800d9c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	1c5a      	adds	r2, r3, #1
 800d8f6:	60fa      	str	r2, [r7, #12]
 800d8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	4413      	add	r3, r2
 800d900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d904:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	0a5b      	lsrs	r3, r3, #9
 800d90e:	4413      	add	r3, r2
 800d910:	4619      	mov	r1, r3
 800d912:	6938      	ldr	r0, [r7, #16]
 800d914:	f7ff fefe 	bl	800d714 <move_window>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d153      	bne.n	800d9c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	4413      	add	r3, r2
 800d928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	461a      	mov	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	4313      	orrs	r3, r2
 800d934:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <get_fat+0xbc>
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	091b      	lsrs	r3, r3, #4
 800d944:	e002      	b.n	800d94c <get_fat+0xc2>
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d94c:	617b      	str	r3, [r7, #20]
			break;
 800d94e:	e03f      	b.n	800d9d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	0a1b      	lsrs	r3, r3, #8
 800d958:	4413      	add	r3, r2
 800d95a:	4619      	mov	r1, r3
 800d95c:	6938      	ldr	r0, [r7, #16]
 800d95e:	f7ff fed9 	bl	800d714 <move_window>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d130      	bne.n	800d9ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d976:	4413      	add	r3, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff fc1b 	bl	800d1b4 <ld_word>
 800d97e:	4603      	mov	r3, r0
 800d980:	617b      	str	r3, [r7, #20]
			break;
 800d982:	e025      	b.n	800d9d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	09db      	lsrs	r3, r3, #7
 800d98c:	4413      	add	r3, r2
 800d98e:	4619      	mov	r1, r3
 800d990:	6938      	ldr	r0, [r7, #16]
 800d992:	f7ff febf 	bl	800d714 <move_window>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d118      	bne.n	800d9ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d9aa:	4413      	add	r3, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fc19 	bl	800d1e4 <ld_dword>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d9b8:	617b      	str	r3, [r7, #20]
			break;
 800d9ba:	e009      	b.n	800d9d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d9bc:	2301      	movs	r3, #1
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	e006      	b.n	800d9d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9c2:	bf00      	nop
 800d9c4:	e004      	b.n	800d9d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9c6:	bf00      	nop
 800d9c8:	e002      	b.n	800d9d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d9ca:	bf00      	nop
 800d9cc:	e000      	b.n	800d9d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d9ce:	bf00      	nop
		}
	}

	return val;
 800d9d0:	697b      	ldr	r3, [r7, #20]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d9da:	b590      	push	{r4, r7, lr}
 800d9dc:	b089      	sub	sp, #36	; 0x24
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	60f8      	str	r0, [r7, #12]
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	f240 80d2 	bls.w	800db96 <put_fat+0x1bc>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	f080 80cc 	bcs.w	800db96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b03      	cmp	r3, #3
 800da04:	f000 8096 	beq.w	800db34 <put_fat+0x15a>
 800da08:	2b03      	cmp	r3, #3
 800da0a:	f300 80cd 	bgt.w	800dba8 <put_fat+0x1ce>
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d002      	beq.n	800da18 <put_fat+0x3e>
 800da12:	2b02      	cmp	r3, #2
 800da14:	d06e      	beq.n	800daf4 <put_fat+0x11a>
 800da16:	e0c7      	b.n	800dba8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	4413      	add	r3, r2
 800da24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	0a5b      	lsrs	r3, r3, #9
 800da2e:	4413      	add	r3, r2
 800da30:	4619      	mov	r1, r3
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7ff fe6e 	bl	800d714 <move_window>
 800da38:	4603      	mov	r3, r0
 800da3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da3c:	7ffb      	ldrb	r3, [r7, #31]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f040 80ab 	bne.w	800db9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	1c59      	adds	r1, r3, #1
 800da4e:	61b9      	str	r1, [r7, #24]
 800da50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da54:	4413      	add	r3, r2
 800da56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	f003 0301 	and.w	r3, r3, #1
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <put_fat+0xa4>
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	b25b      	sxtb	r3, r3
 800da68:	f003 030f 	and.w	r3, r3, #15
 800da6c:	b25a      	sxtb	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	b2db      	uxtb	r3, r3
 800da72:	011b      	lsls	r3, r3, #4
 800da74:	b25b      	sxtb	r3, r3
 800da76:	4313      	orrs	r3, r2
 800da78:	b25b      	sxtb	r3, r3
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	e001      	b.n	800da82 <put_fat+0xa8>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	b2db      	uxtb	r3, r3
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	0a5b      	lsrs	r3, r3, #9
 800da94:	4413      	add	r3, r2
 800da96:	4619      	mov	r1, r3
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff fe3b 	bl	800d714 <move_window>
 800da9e:	4603      	mov	r3, r0
 800daa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800daa2:	7ffb      	ldrb	r3, [r7, #31]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d17a      	bne.n	800db9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab4:	4413      	add	r3, r2
 800dab6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <put_fat+0xf0>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	091b      	lsrs	r3, r3, #4
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	e00e      	b.n	800dae8 <put_fat+0x10e>
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b25b      	sxtb	r3, r3
 800dad0:	f023 030f 	bic.w	r3, r3, #15
 800dad4:	b25a      	sxtb	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	0a1b      	lsrs	r3, r3, #8
 800dada:	b25b      	sxtb	r3, r3
 800dadc:	f003 030f 	and.w	r3, r3, #15
 800dae0:	b25b      	sxtb	r3, r3
 800dae2:	4313      	orrs	r3, r2
 800dae4:	b25b      	sxtb	r3, r3
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2201      	movs	r2, #1
 800daf0:	70da      	strb	r2, [r3, #3]
			break;
 800daf2:	e059      	b.n	800dba8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	0a1b      	lsrs	r3, r3, #8
 800dafc:	4413      	add	r3, r2
 800dafe:	4619      	mov	r1, r3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fe07 	bl	800d714 <move_window>
 800db06:	4603      	mov	r3, r0
 800db08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db0a:	7ffb      	ldrb	r3, [r7, #31]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d148      	bne.n	800dba2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db1e:	4413      	add	r3, r2
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	b292      	uxth	r2, r2
 800db24:	4611      	mov	r1, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fb7f 	bl	800d22a <st_word>
			fs->wflag = 1;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2201      	movs	r2, #1
 800db30:	70da      	strb	r2, [r3, #3]
			break;
 800db32:	e039      	b.n	800dba8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	09db      	lsrs	r3, r3, #7
 800db3c:	4413      	add	r3, r2
 800db3e:	4619      	mov	r1, r3
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7ff fde7 	bl	800d714 <move_window>
 800db46:	4603      	mov	r3, r0
 800db48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d12a      	bne.n	800dba6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db64:	4413      	add	r3, r2
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fb3c 	bl	800d1e4 <ld_dword>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db72:	4323      	orrs	r3, r4
 800db74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db84:	4413      	add	r3, r2
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff fb69 	bl	800d260 <st_dword>
			fs->wflag = 1;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2201      	movs	r2, #1
 800db92:	70da      	strb	r2, [r3, #3]
			break;
 800db94:	e008      	b.n	800dba8 <put_fat+0x1ce>
		}
	}
 800db96:	bf00      	nop
 800db98:	e006      	b.n	800dba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800db9a:	bf00      	nop
 800db9c:	e004      	b.n	800dba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800db9e:	bf00      	nop
 800dba0:	e002      	b.n	800dba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dba6:	bf00      	nop
	return res;
 800dba8:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3724      	adds	r7, #36	; 0x24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd90      	pop	{r4, r7, pc}

0800dbb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b088      	sub	sp, #32
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d904      	bls.n	800dbd8 <remove_chain+0x26>
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d301      	bcc.n	800dbdc <remove_chain+0x2a>
 800dbd8:	2302      	movs	r3, #2
 800dbda:	e04b      	b.n	800dc74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00c      	beq.n	800dbfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	69b8      	ldr	r0, [r7, #24]
 800dbea:	f7ff fef6 	bl	800d9da <put_fat>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dbf2:	7ffb      	ldrb	r3, [r7, #31]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <remove_chain+0x4a>
 800dbf8:	7ffb      	ldrb	r3, [r7, #31]
 800dbfa:	e03b      	b.n	800dc74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f7ff fe43 	bl	800d88a <get_fat>
 800dc04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d031      	beq.n	800dc70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d101      	bne.n	800dc16 <remove_chain+0x64>
 800dc12:	2302      	movs	r3, #2
 800dc14:	e02e      	b.n	800dc74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1c:	d101      	bne.n	800dc22 <remove_chain+0x70>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e028      	b.n	800dc74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dc22:	2200      	movs	r2, #0
 800dc24:	68b9      	ldr	r1, [r7, #8]
 800dc26:	69b8      	ldr	r0, [r7, #24]
 800dc28:	f7ff fed7 	bl	800d9da <put_fat>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dc30:	7ffb      	ldrb	r3, [r7, #31]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <remove_chain+0x88>
 800dc36:	7ffb      	ldrb	r3, [r7, #31]
 800dc38:	e01c      	b.n	800dc74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	695a      	ldr	r2, [r3, #20]
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	3b02      	subs	r3, #2
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d20b      	bcs.n	800dc60 <remove_chain+0xae>
			fs->free_clst++;
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	1c5a      	adds	r2, r3, #1
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	791b      	ldrb	r3, [r3, #4]
 800dc56:	f043 0301 	orr.w	r3, r3, #1
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	699b      	ldr	r3, [r3, #24]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d3c6      	bcc.n	800dbfc <remove_chain+0x4a>
 800dc6e:	e000      	b.n	800dc72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10d      	bne.n	800dcae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d004      	beq.n	800dca8 <create_chain+0x2c>
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d31b      	bcc.n	800dce0 <create_chain+0x64>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	61bb      	str	r3, [r7, #24]
 800dcac:	e018      	b.n	800dce0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fdea 	bl	800d88a <get_fat>
 800dcb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d801      	bhi.n	800dcc2 <create_chain+0x46>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e070      	b.n	800dda4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc8:	d101      	bne.n	800dcce <create_chain+0x52>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	e06a      	b.n	800dda4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d201      	bcs.n	800dcdc <create_chain+0x60>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	e063      	b.n	800dda4 <create_chain+0x128>
		scl = clst;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	3301      	adds	r3, #1
 800dce8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d307      	bcc.n	800dd04 <create_chain+0x88>
				ncl = 2;
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dcf8:	69fa      	ldr	r2, [r7, #28]
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d901      	bls.n	800dd04 <create_chain+0x88>
 800dd00:	2300      	movs	r3, #0
 800dd02:	e04f      	b.n	800dda4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dd04:	69f9      	ldr	r1, [r7, #28]
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7ff fdbf 	bl	800d88a <get_fat>
 800dd0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00e      	beq.n	800dd32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d003      	beq.n	800dd22 <create_chain+0xa6>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd20:	d101      	bne.n	800dd26 <create_chain+0xaa>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	e03e      	b.n	800dda4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dd26:	69fa      	ldr	r2, [r7, #28]
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d1da      	bne.n	800dce4 <create_chain+0x68>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e038      	b.n	800dda4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dd32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dd34:	f04f 32ff 	mov.w	r2, #4294967295
 800dd38:	69f9      	ldr	r1, [r7, #28]
 800dd3a:	6938      	ldr	r0, [r7, #16]
 800dd3c:	f7ff fe4d 	bl	800d9da <put_fat>
 800dd40:	4603      	mov	r3, r0
 800dd42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d109      	bne.n	800dd5e <create_chain+0xe2>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d006      	beq.n	800dd5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd50:	69fa      	ldr	r2, [r7, #28]
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6938      	ldr	r0, [r7, #16]
 800dd56:	f7ff fe40 	bl	800d9da <put_fat>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d116      	bne.n	800dd92 <create_chain+0x116>
		fs->last_clst = ncl;
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	69fa      	ldr	r2, [r7, #28]
 800dd68:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	695a      	ldr	r2, [r3, #20]
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	3b02      	subs	r3, #2
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d804      	bhi.n	800dd82 <create_chain+0x106>
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	1e5a      	subs	r2, r3, #1
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	791b      	ldrb	r3, [r3, #4]
 800dd86:	f043 0301 	orr.w	r3, r3, #1
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	711a      	strb	r2, [r3, #4]
 800dd90:	e007      	b.n	800dda2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d102      	bne.n	800dd9e <create_chain+0x122>
 800dd98:	f04f 33ff 	mov.w	r3, #4294967295
 800dd9c:	e000      	b.n	800dda0 <create_chain+0x124>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dda2:	69fb      	ldr	r3, [r7, #28]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	0a5b      	lsrs	r3, r3, #9
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	8952      	ldrh	r2, [r2, #10]
 800ddcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	613a      	str	r2, [r7, #16]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <clmt_clust+0x3a>
 800dde2:	2300      	movs	r3, #0
 800dde4:	e010      	b.n	800de08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d307      	bcc.n	800ddfe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ddee:	697a      	ldr	r2, [r7, #20]
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	617b      	str	r3, [r7, #20]
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ddfc:	e7e9      	b.n	800ddd2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ddfe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	4413      	add	r3, r2
}
 800de08:	4618      	mov	r0, r3
 800de0a:	371c      	adds	r7, #28
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de2a:	d204      	bcs.n	800de36 <dir_sdi+0x22>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	f003 031f 	and.w	r3, r3, #31
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <dir_sdi+0x26>
		return FR_INT_ERR;
 800de36:	2302      	movs	r3, #2
 800de38:	e063      	b.n	800df02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d106      	bne.n	800de5a <dir_sdi+0x46>
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	2b02      	cmp	r3, #2
 800de52:	d902      	bls.n	800de5a <dir_sdi+0x46>
		clst = fs->dirbase;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10c      	bne.n	800de7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	095b      	lsrs	r3, r3, #5
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	8912      	ldrh	r2, [r2, #8]
 800de68:	4293      	cmp	r3, r2
 800de6a:	d301      	bcc.n	800de70 <dir_sdi+0x5c>
 800de6c:	2302      	movs	r3, #2
 800de6e:	e048      	b.n	800df02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	61da      	str	r2, [r3, #28]
 800de78:	e029      	b.n	800dece <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	895b      	ldrh	r3, [r3, #10]
 800de7e:	025b      	lsls	r3, r3, #9
 800de80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de82:	e019      	b.n	800deb8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6979      	ldr	r1, [r7, #20]
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fcfe 	bl	800d88a <get_fat>
 800de8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de96:	d101      	bne.n	800de9c <dir_sdi+0x88>
 800de98:	2301      	movs	r3, #1
 800de9a:	e032      	b.n	800df02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d904      	bls.n	800deac <dir_sdi+0x98>
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d301      	bcc.n	800deb0 <dir_sdi+0x9c>
 800deac:	2302      	movs	r3, #2
 800deae:	e028      	b.n	800df02 <dir_sdi+0xee>
			ofs -= csz;
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	429a      	cmp	r2, r3
 800debe:	d2e1      	bcs.n	800de84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dec0:	6979      	ldr	r1, [r7, #20]
 800dec2:	6938      	ldr	r0, [r7, #16]
 800dec4:	f7ff fcc2 	bl	800d84c <clust2sect>
 800dec8:	4602      	mov	r2, r0
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	69db      	ldr	r3, [r3, #28]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <dir_sdi+0xcc>
 800dedc:	2302      	movs	r3, #2
 800dede:	e010      	b.n	800df02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	69da      	ldr	r2, [r3, #28]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	0a5b      	lsrs	r3, r3, #9
 800dee8:	441a      	add	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800defa:	441a      	add	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b086      	sub	sp, #24
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	3320      	adds	r3, #32
 800df20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d003      	beq.n	800df32 <dir_next+0x28>
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df30:	d301      	bcc.n	800df36 <dir_next+0x2c>
 800df32:	2304      	movs	r3, #4
 800df34:	e0aa      	b.n	800e08c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f040 8098 	bne.w	800e072 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	69db      	ldr	r3, [r3, #28]
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10b      	bne.n	800df6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	095b      	lsrs	r3, r3, #5
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	8912      	ldrh	r2, [r2, #8]
 800df5c:	4293      	cmp	r3, r2
 800df5e:	f0c0 8088 	bcc.w	800e072 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	61da      	str	r2, [r3, #28]
 800df68:	2304      	movs	r3, #4
 800df6a:	e08f      	b.n	800e08c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	0a5b      	lsrs	r3, r3, #9
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	8952      	ldrh	r2, [r2, #10]
 800df74:	3a01      	subs	r2, #1
 800df76:	4013      	ands	r3, r2
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d17a      	bne.n	800e072 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	4619      	mov	r1, r3
 800df84:	4610      	mov	r0, r2
 800df86:	f7ff fc80 	bl	800d88a <get_fat>
 800df8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d801      	bhi.n	800df96 <dir_next+0x8c>
 800df92:	2302      	movs	r3, #2
 800df94:	e07a      	b.n	800e08c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9c:	d101      	bne.n	800dfa2 <dir_next+0x98>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e074      	b.n	800e08c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	699b      	ldr	r3, [r3, #24]
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d358      	bcc.n	800e05e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d104      	bne.n	800dfbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	61da      	str	r2, [r3, #28]
 800dfb8:	2304      	movs	r3, #4
 800dfba:	e067      	b.n	800e08c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	f7ff fe59 	bl	800dc7c <create_chain>
 800dfca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d101      	bne.n	800dfd6 <dir_next+0xcc>
 800dfd2:	2307      	movs	r3, #7
 800dfd4:	e05a      	b.n	800e08c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d101      	bne.n	800dfe0 <dir_next+0xd6>
 800dfdc:	2302      	movs	r3, #2
 800dfde:	e055      	b.n	800e08c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe6:	d101      	bne.n	800dfec <dir_next+0xe2>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e04f      	b.n	800e08c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7ff fb4d 	bl	800d68c <sync_window>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <dir_next+0xf2>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e047      	b.n	800e08c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3334      	adds	r3, #52	; 0x34
 800e000:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e004:	2100      	movs	r1, #0
 800e006:	4618      	mov	r0, r3
 800e008:	f7ff f977 	bl	800d2fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
 800e010:	6979      	ldr	r1, [r7, #20]
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f7ff fc1a 	bl	800d84c <clust2sect>
 800e018:	4602      	mov	r2, r0
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	631a      	str	r2, [r3, #48]	; 0x30
 800e01e:	e012      	b.n	800e046 <dir_next+0x13c>
						fs->wflag = 1;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2201      	movs	r2, #1
 800e024:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f7ff fb30 	bl	800d68c <sync_window>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d001      	beq.n	800e036 <dir_next+0x12c>
 800e032:	2301      	movs	r3, #1
 800e034:	e02a      	b.n	800e08c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	3301      	adds	r3, #1
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e040:	1c5a      	adds	r2, r3, #1
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	631a      	str	r2, [r3, #48]	; 0x30
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	895b      	ldrh	r3, [r3, #10]
 800e04a:	461a      	mov	r2, r3
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	4293      	cmp	r3, r2
 800e050:	d3e6      	bcc.n	800e020 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	1ad2      	subs	r2, r2, r3
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	697a      	ldr	r2, [r7, #20]
 800e062:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e064:	6979      	ldr	r1, [r7, #20]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff fbf0 	bl	800d84c <clust2sect>
 800e06c:	4602      	mov	r2, r0
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e084:	441a      	add	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff feb4 	bl	800de14 <dir_sdi>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0b0:	7dfb      	ldrb	r3, [r7, #23]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d12b      	bne.n	800e10e <dir_alloc+0x7a>
		n = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7ff fb27 	bl	800d714 <move_window>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e0ca:	7dfb      	ldrb	r3, [r7, #23]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d11d      	bne.n	800e10c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	2be5      	cmp	r3, #229	; 0xe5
 800e0d8:	d004      	beq.n	800e0e4 <dir_alloc+0x50>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d107      	bne.n	800e0f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	613b      	str	r3, [r7, #16]
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d102      	bne.n	800e0f8 <dir_alloc+0x64>
 800e0f2:	e00c      	b.n	800e10e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7ff ff05 	bl	800df0a <dir_next>
 800e100:	4603      	mov	r3, r0
 800e102:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e104:	7dfb      	ldrb	r3, [r7, #23]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0d7      	beq.n	800e0ba <dir_alloc+0x26>
 800e10a:	e000      	b.n	800e10e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e10c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	2b04      	cmp	r3, #4
 800e112:	d101      	bne.n	800e118 <dir_alloc+0x84>
 800e114:	2307      	movs	r3, #7
 800e116:	75fb      	strb	r3, [r7, #23]
	return res;
 800e118:	7dfb      	ldrb	r3, [r7, #23]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3718      	adds	r7, #24
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	331a      	adds	r3, #26
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff f83f 	bl	800d1b4 <ld_word>
 800e136:	4603      	mov	r3, r0
 800e138:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b03      	cmp	r3, #3
 800e140:	d109      	bne.n	800e156 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	3314      	adds	r3, #20
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff f834 	bl	800d1b4 <ld_word>
 800e14c:	4603      	mov	r3, r0
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e156:	68fb      	ldr	r3, [r7, #12]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	331a      	adds	r3, #26
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	b292      	uxth	r2, r2
 800e174:	4611      	mov	r1, r2
 800e176:	4618      	mov	r0, r3
 800e178:	f7ff f857 	bl	800d22a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	2b03      	cmp	r3, #3
 800e182:	d109      	bne.n	800e198 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f103 0214 	add.w	r2, r3, #20
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4619      	mov	r1, r3
 800e192:	4610      	mov	r0, r2
 800e194:	f7ff f849 	bl	800d22a <st_word>
	}
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b087      	sub	sp, #28
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	331a      	adds	r3, #26
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff f800 	bl	800d1b4 <ld_word>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <cmp_lfn+0x1e>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e059      	b.n	800e272 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1c6:	1e5a      	subs	r2, r3, #1
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	4413      	add	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	81fb      	strh	r3, [r7, #14]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	613b      	str	r3, [r7, #16]
 800e1dc:	e033      	b.n	800e246 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e1de:	4a27      	ldr	r2, [pc, #156]	; (800e27c <cmp_lfn+0xdc>)
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fe ffe1 	bl	800d1b4 <ld_word>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e1f6:	89fb      	ldrh	r3, [r7, #14]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d01a      	beq.n	800e232 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2bfe      	cmp	r3, #254	; 0xfe
 800e200:	d812      	bhi.n	800e228 <cmp_lfn+0x88>
 800e202:	89bb      	ldrh	r3, [r7, #12]
 800e204:	4618      	mov	r0, r3
 800e206:	f002 f95d 	bl	80104c4 <ff_wtoupper>
 800e20a:	4603      	mov	r3, r0
 800e20c:	461c      	mov	r4, r3
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	617a      	str	r2, [r7, #20]
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	4413      	add	r3, r2
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f002 f951 	bl	80104c4 <ff_wtoupper>
 800e222:	4603      	mov	r3, r0
 800e224:	429c      	cmp	r4, r3
 800e226:	d001      	beq.n	800e22c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e228:	2300      	movs	r3, #0
 800e22a:	e022      	b.n	800e272 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e22c:	89bb      	ldrh	r3, [r7, #12]
 800e22e:	81fb      	strh	r3, [r7, #14]
 800e230:	e006      	b.n	800e240 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e232:	89bb      	ldrh	r3, [r7, #12]
 800e234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e238:	4293      	cmp	r3, r2
 800e23a:	d001      	beq.n	800e240 <cmp_lfn+0xa0>
 800e23c:	2300      	movs	r3, #0
 800e23e:	e018      	b.n	800e272 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	3301      	adds	r3, #1
 800e244:	613b      	str	r3, [r7, #16]
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	2b0c      	cmp	r3, #12
 800e24a:	d9c8      	bls.n	800e1de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <cmp_lfn+0xd0>
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d008      	beq.n	800e270 <cmp_lfn+0xd0>
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	4413      	add	r3, r2
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d001      	beq.n	800e270 <cmp_lfn+0xd0>
 800e26c:	2300      	movs	r3, #0
 800e26e:	e000      	b.n	800e272 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e270:	2301      	movs	r3, #1
}
 800e272:	4618      	mov	r0, r3
 800e274:	371c      	adds	r7, #28
 800e276:	46bd      	mov	sp, r7
 800e278:	bd90      	pop	{r4, r7, pc}
 800e27a:	bf00      	nop
 800e27c:	0801219c 	.word	0x0801219c

0800e280 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	4611      	mov	r1, r2
 800e28c:	461a      	mov	r2, r3
 800e28e:	460b      	mov	r3, r1
 800e290:	71fb      	strb	r3, [r7, #7]
 800e292:	4613      	mov	r3, r2
 800e294:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	330d      	adds	r3, #13
 800e29a:	79ba      	ldrb	r2, [r7, #6]
 800e29c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	330b      	adds	r3, #11
 800e2a2:	220f      	movs	r2, #15
 800e2a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	330c      	adds	r3, #12
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	331a      	adds	r3, #26
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe ffb8 	bl	800d22a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	1e5a      	subs	r2, r3, #1
 800e2be:	4613      	mov	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	82fb      	strh	r3, [r7, #22]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e2d2:	8afb      	ldrh	r3, [r7, #22]
 800e2d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d007      	beq.n	800e2ec <put_lfn+0x6c>
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	61fa      	str	r2, [r7, #28]
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e2ec:	4a17      	ldr	r2, [pc, #92]	; (800e34c <put_lfn+0xcc>)
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	8afa      	ldrh	r2, [r7, #22]
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe ff93 	bl	800d22a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e304:	8afb      	ldrh	r3, [r7, #22]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d102      	bne.n	800e310 <put_lfn+0x90>
 800e30a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e30e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	3301      	adds	r3, #1
 800e314:	61bb      	str	r3, [r7, #24]
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b0c      	cmp	r3, #12
 800e31a:	d9da      	bls.n	800e2d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e31c:	8afb      	ldrh	r3, [r7, #22]
 800e31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e322:	4293      	cmp	r3, r2
 800e324:	d006      	beq.n	800e334 <put_lfn+0xb4>
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	4413      	add	r3, r2
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <put_lfn+0xbc>
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e33a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	79fa      	ldrb	r2, [r7, #7]
 800e340:	701a      	strb	r2, [r3, #0]
}
 800e342:	bf00      	nop
 800e344:	3720      	adds	r7, #32
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	0801219c 	.word	0x0801219c

0800e350 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08c      	sub	sp, #48	; 0x30
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
 800e35c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e35e:	220b      	movs	r2, #11
 800e360:	68b9      	ldr	r1, [r7, #8]
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7fe ffa8 	bl	800d2b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	2b05      	cmp	r3, #5
 800e36c:	d92b      	bls.n	800e3c6 <gen_numname+0x76>
		sr = seq;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e372:	e022      	b.n	800e3ba <gen_numname+0x6a>
			wc = *lfn++;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	1c9a      	adds	r2, r3, #2
 800e378:	607a      	str	r2, [r7, #4]
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e37e:	2300      	movs	r3, #0
 800e380:	62bb      	str	r3, [r7, #40]	; 0x28
 800e382:	e017      	b.n	800e3b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	005a      	lsls	r2, r3, #1
 800e388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e38a:	f003 0301 	and.w	r3, r3, #1
 800e38e:	4413      	add	r3, r2
 800e390:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e394:	085b      	lsrs	r3, r3, #1
 800e396:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d005      	beq.n	800e3ae <gen_numname+0x5e>
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e3a8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e3ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	2b0f      	cmp	r3, #15
 800e3b8:	d9e4      	bls.n	800e384 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	881b      	ldrh	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1d8      	bne.n	800e374 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e3c6:	2307      	movs	r3, #7
 800e3c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	f003 030f 	and.w	r3, r3, #15
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	3330      	adds	r3, #48	; 0x30
 800e3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3de:	2b39      	cmp	r3, #57	; 0x39
 800e3e0:	d904      	bls.n	800e3ec <gen_numname+0x9c>
 800e3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3e6:	3307      	adds	r3, #7
 800e3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	1e5a      	subs	r2, r3, #1
 800e3f0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3f2:	3330      	adds	r3, #48	; 0x30
 800e3f4:	443b      	add	r3, r7
 800e3f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	091b      	lsrs	r3, r3, #4
 800e402:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1df      	bne.n	800e3ca <gen_numname+0x7a>
	ns[i] = '~';
 800e40a:	f107 0214 	add.w	r2, r7, #20
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	4413      	add	r3, r2
 800e412:	227e      	movs	r2, #126	; 0x7e
 800e414:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e416:	2300      	movs	r3, #0
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
 800e41a:	e002      	b.n	800e422 <gen_numname+0xd2>
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	3301      	adds	r3, #1
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
 800e422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	429a      	cmp	r2, r3
 800e428:	d205      	bcs.n	800e436 <gen_numname+0xe6>
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	4413      	add	r3, r2
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b20      	cmp	r3, #32
 800e434:	d1f2      	bne.n	800e41c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	2b07      	cmp	r3, #7
 800e43a:	d807      	bhi.n	800e44c <gen_numname+0xfc>
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	62ba      	str	r2, [r7, #40]	; 0x28
 800e442:	3330      	adds	r3, #48	; 0x30
 800e444:	443b      	add	r3, r7
 800e446:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e44a:	e000      	b.n	800e44e <gen_numname+0xfe>
 800e44c:	2120      	movs	r1, #32
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	627a      	str	r2, [r7, #36]	; 0x24
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	4413      	add	r3, r2
 800e458:	460a      	mov	r2, r1
 800e45a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	2b07      	cmp	r3, #7
 800e460:	d9e9      	bls.n	800e436 <gen_numname+0xe6>
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	3730      	adds	r7, #48	; 0x30
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e478:	230b      	movs	r3, #11
 800e47a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
 800e47e:	b2da      	uxtb	r2, r3
 800e480:	0852      	lsrs	r2, r2, #1
 800e482:	01db      	lsls	r3, r3, #7
 800e484:	4313      	orrs	r3, r2
 800e486:	b2da      	uxtb	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	1c59      	adds	r1, r3, #1
 800e48c:	6079      	str	r1, [r7, #4]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	4413      	add	r3, r2
 800e492:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3b01      	subs	r3, #1
 800e498:	60bb      	str	r3, [r7, #8]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1ed      	bne.n	800e47c <sum_sfn+0x10>
	return sum;
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b086      	sub	sp, #24
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e4bc:	2100      	movs	r1, #0
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff fca8 	bl	800de14 <dir_sdi>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e4c8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <dir_find+0x24>
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	e0a9      	b.n	800e626 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4d2:	23ff      	movs	r3, #255	; 0xff
 800e4d4:	753b      	strb	r3, [r7, #20]
 800e4d6:	7d3b      	ldrb	r3, [r7, #20]
 800e4d8:	757b      	strb	r3, [r7, #21]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	69db      	ldr	r3, [r3, #28]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6938      	ldr	r0, [r7, #16]
 800e4ea:	f7ff f913 	bl	800d714 <move_window>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f040 8090 	bne.w	800e61a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e502:	7dbb      	ldrb	r3, [r7, #22]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <dir_find+0x60>
 800e508:	2304      	movs	r3, #4
 800e50a:	75fb      	strb	r3, [r7, #23]
 800e50c:	e08a      	b.n	800e624 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	330b      	adds	r3, #11
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e51a:	73fb      	strb	r3, [r7, #15]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	7bfa      	ldrb	r2, [r7, #15]
 800e520:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e522:	7dbb      	ldrb	r3, [r7, #22]
 800e524:	2be5      	cmp	r3, #229	; 0xe5
 800e526:	d007      	beq.n	800e538 <dir_find+0x8a>
 800e528:	7bfb      	ldrb	r3, [r7, #15]
 800e52a:	f003 0308 	and.w	r3, r3, #8
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d009      	beq.n	800e546 <dir_find+0x98>
 800e532:	7bfb      	ldrb	r3, [r7, #15]
 800e534:	2b0f      	cmp	r3, #15
 800e536:	d006      	beq.n	800e546 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e538:	23ff      	movs	r3, #255	; 0xff
 800e53a:	757b      	strb	r3, [r7, #21]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f04f 32ff 	mov.w	r2, #4294967295
 800e542:	631a      	str	r2, [r3, #48]	; 0x30
 800e544:	e05e      	b.n	800e604 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e546:	7bfb      	ldrb	r3, [r7, #15]
 800e548:	2b0f      	cmp	r3, #15
 800e54a:	d136      	bne.n	800e5ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e556:	2b00      	cmp	r3, #0
 800e558:	d154      	bne.n	800e604 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e55a:	7dbb      	ldrb	r3, [r7, #22]
 800e55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00d      	beq.n	800e580 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6a1b      	ldr	r3, [r3, #32]
 800e568:	7b5b      	ldrb	r3, [r3, #13]
 800e56a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e56c:	7dbb      	ldrb	r3, [r7, #22]
 800e56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e572:	75bb      	strb	r3, [r7, #22]
 800e574:	7dbb      	ldrb	r3, [r7, #22]
 800e576:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	695a      	ldr	r2, [r3, #20]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e580:	7dba      	ldrb	r2, [r7, #22]
 800e582:	7d7b      	ldrb	r3, [r7, #21]
 800e584:	429a      	cmp	r2, r3
 800e586:	d115      	bne.n	800e5b4 <dir_find+0x106>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a1b      	ldr	r3, [r3, #32]
 800e58c:	330d      	adds	r3, #13
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	7d3a      	ldrb	r2, [r7, #20]
 800e592:	429a      	cmp	r2, r3
 800e594:	d10e      	bne.n	800e5b4 <dir_find+0x106>
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	68da      	ldr	r2, [r3, #12]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	f7ff fdfd 	bl	800e1a0 <cmp_lfn>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <dir_find+0x106>
 800e5ac:	7d7b      	ldrb	r3, [r7, #21]
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	e000      	b.n	800e5b6 <dir_find+0x108>
 800e5b4:	23ff      	movs	r3, #255	; 0xff
 800e5b6:	757b      	strb	r3, [r7, #21]
 800e5b8:	e024      	b.n	800e604 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e5ba:	7d7b      	ldrb	r3, [r7, #21]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <dir_find+0x126>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a1b      	ldr	r3, [r3, #32]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7ff ff51 	bl	800e46c <sum_sfn>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	7d3b      	ldrb	r3, [r7, #20]
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d024      	beq.n	800e61e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10a      	bne.n	800e5f8 <dir_find+0x14a>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a18      	ldr	r0, [r3, #32]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	3324      	adds	r3, #36	; 0x24
 800e5ea:	220b      	movs	r2, #11
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f7fe fe9f 	bl	800d330 <mem_cmp>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d014      	beq.n	800e622 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5f8:	23ff      	movs	r3, #255	; 0xff
 800e5fa:	757b      	strb	r3, [r7, #21]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e602:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e604:	2100      	movs	r1, #0
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff fc7f 	bl	800df0a <dir_next>
 800e60c:	4603      	mov	r3, r0
 800e60e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f43f af65 	beq.w	800e4e2 <dir_find+0x34>
 800e618:	e004      	b.n	800e624 <dir_find+0x176>
		if (res != FR_OK) break;
 800e61a:	bf00      	nop
 800e61c:	e002      	b.n	800e624 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e61e:	bf00      	nop
 800e620:	e000      	b.n	800e624 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e622:	bf00      	nop

	return res;
 800e624:	7dfb      	ldrb	r3, [r7, #23]
}
 800e626:	4618      	mov	r0, r3
 800e628:	3718      	adds	r7, #24
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
	...

0800e630 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b08c      	sub	sp, #48	; 0x30
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e644:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <dir_register+0x20>
 800e64c:	2306      	movs	r3, #6
 800e64e:	e0e0      	b.n	800e812 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e650:	2300      	movs	r3, #0
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
 800e654:	e002      	b.n	800e65c <dir_register+0x2c>
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	3301      	adds	r3, #1
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	68da      	ldr	r2, [r3, #12]
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	005b      	lsls	r3, r3, #1
 800e664:	4413      	add	r3, r2
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1f4      	bne.n	800e656 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e672:	f107 030c 	add.w	r3, r7, #12
 800e676:	220c      	movs	r2, #12
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fe1d 	bl	800d2b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
 800e680:	f003 0301 	and.w	r3, r3, #1
 800e684:	2b00      	cmp	r3, #0
 800e686:	d032      	beq.n	800e6ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2240      	movs	r2, #64	; 0x40
 800e68c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e690:	2301      	movs	r3, #1
 800e692:	62bb      	str	r3, [r7, #40]	; 0x28
 800e694:	e016      	b.n	800e6c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	f107 010c 	add.w	r1, r7, #12
 800e6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a6:	f7ff fe53 	bl	800e350 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7ff feff 	bl	800e4ae <dir_find>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	2b63      	cmp	r3, #99	; 0x63
 800e6c8:	d9e5      	bls.n	800e696 <dir_register+0x66>
 800e6ca:	e000      	b.n	800e6ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800e6cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2b64      	cmp	r3, #100	; 0x64
 800e6d2:	d101      	bne.n	800e6d8 <dir_register+0xa8>
 800e6d4:	2307      	movs	r3, #7
 800e6d6:	e09c      	b.n	800e812 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e6d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d002      	beq.n	800e6e6 <dir_register+0xb6>
 800e6e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6e4:	e095      	b.n	800e812 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e6e6:	7dfa      	ldrb	r2, [r7, #23]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	f003 0302 	and.w	r3, r3, #2
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d007      	beq.n	800e708 <dir_register+0xd8>
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	330c      	adds	r3, #12
 800e6fc:	4a47      	ldr	r2, [pc, #284]	; (800e81c <dir_register+0x1ec>)
 800e6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e702:	089b      	lsrs	r3, r3, #2
 800e704:	3301      	adds	r3, #1
 800e706:	e000      	b.n	800e70a <dir_register+0xda>
 800e708:	2301      	movs	r3, #1
 800e70a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e70c:	6a39      	ldr	r1, [r7, #32]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff fcc0 	bl	800e094 <dir_alloc>
 800e714:	4603      	mov	r3, r0
 800e716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d148      	bne.n	800e7b4 <dir_register+0x184>
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	3b01      	subs	r3, #1
 800e726:	623b      	str	r3, [r7, #32]
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d042      	beq.n	800e7b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	695a      	ldr	r2, [r3, #20]
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	015b      	lsls	r3, r3, #5
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7ff fb6a 	bl	800de14 <dir_sdi>
 800e740:	4603      	mov	r3, r0
 800e742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d132      	bne.n	800e7b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3324      	adds	r3, #36	; 0x24
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fe8a 	bl	800e46c <sum_sfn>
 800e758:	4603      	mov	r3, r0
 800e75a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	69db      	ldr	r3, [r3, #28]
 800e760:	4619      	mov	r1, r3
 800e762:	69f8      	ldr	r0, [r7, #28]
 800e764:	f7fe ffd6 	bl	800d714 <move_window>
 800e768:	4603      	mov	r3, r0
 800e76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e772:	2b00      	cmp	r3, #0
 800e774:	d11d      	bne.n	800e7b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	68d8      	ldr	r0, [r3, #12]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a19      	ldr	r1, [r3, #32]
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	b2da      	uxtb	r2, r3
 800e782:	7efb      	ldrb	r3, [r7, #27]
 800e784:	f7ff fd7c 	bl	800e280 <put_lfn>
				fs->wflag = 1;
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	2201      	movs	r2, #1
 800e78c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e78e:	2100      	movs	r1, #0
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff fbba 	bl	800df0a <dir_next>
 800e796:	4603      	mov	r3, r0
 800e798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e79c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d107      	bne.n	800e7b4 <dir_register+0x184>
 800e7a4:	6a3b      	ldr	r3, [r7, #32]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	623b      	str	r3, [r7, #32]
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1d5      	bne.n	800e75c <dir_register+0x12c>
 800e7b0:	e000      	b.n	800e7b4 <dir_register+0x184>
				if (res != FR_OK) break;
 800e7b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d128      	bne.n	800e80e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	69f8      	ldr	r0, [r7, #28]
 800e7c4:	f7fe ffa6 	bl	800d714 <move_window>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d11b      	bne.n	800e80e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	2220      	movs	r2, #32
 800e7dc:	2100      	movs	r1, #0
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe fd8b 	bl	800d2fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a18      	ldr	r0, [r3, #32]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3324      	adds	r3, #36	; 0x24
 800e7ec:	220b      	movs	r2, #11
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	f7fe fd62 	bl	800d2b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	330c      	adds	r3, #12
 800e800:	f002 0218 	and.w	r2, r2, #24
 800e804:	b2d2      	uxtb	r2, r2
 800e806:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	2201      	movs	r2, #1
 800e80c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e80e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e812:	4618      	mov	r0, r3
 800e814:	3730      	adds	r7, #48	; 0x30
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e820 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b08a      	sub	sp, #40	; 0x28
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	613b      	str	r3, [r7, #16]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	2300      	movs	r3, #0
 800e83a:	617b      	str	r3, [r7, #20]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	61ba      	str	r2, [r7, #24]
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	4413      	add	r3, r2
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e850:	2b1f      	cmp	r3, #31
 800e852:	d940      	bls.n	800e8d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e856:	2b2f      	cmp	r3, #47	; 0x2f
 800e858:	d006      	beq.n	800e868 <create_name+0x48>
 800e85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e85c:	2b5c      	cmp	r3, #92	; 0x5c
 800e85e:	d110      	bne.n	800e882 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e860:	e002      	b.n	800e868 <create_name+0x48>
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	3301      	adds	r3, #1
 800e866:	61bb      	str	r3, [r7, #24]
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	4413      	add	r3, r2
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b2f      	cmp	r3, #47	; 0x2f
 800e872:	d0f6      	beq.n	800e862 <create_name+0x42>
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	4413      	add	r3, r2
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2b5c      	cmp	r3, #92	; 0x5c
 800e87e:	d0f0      	beq.n	800e862 <create_name+0x42>
			break;
 800e880:	e02a      	b.n	800e8d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2bfe      	cmp	r3, #254	; 0xfe
 800e886:	d901      	bls.n	800e88c <create_name+0x6c>
 800e888:	2306      	movs	r3, #6
 800e88a:	e17d      	b.n	800eb88 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e894:	2101      	movs	r1, #1
 800e896:	4618      	mov	r0, r3
 800e898:	f001 fdd8 	bl	801044c <ff_convert>
 800e89c:	4603      	mov	r3, r0
 800e89e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d101      	bne.n	800e8aa <create_name+0x8a>
 800e8a6:	2306      	movs	r3, #6
 800e8a8:	e16e      	b.n	800eb88 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ac:	2b7f      	cmp	r3, #127	; 0x7f
 800e8ae:	d809      	bhi.n	800e8c4 <create_name+0xa4>
 800e8b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	488d      	ldr	r0, [pc, #564]	; (800eaec <create_name+0x2cc>)
 800e8b6:	f7fe fd62 	bl	800d37e <chk_chr>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <create_name+0xa4>
 800e8c0:	2306      	movs	r3, #6
 800e8c2:	e161      	b.n	800eb88 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	1c5a      	adds	r2, r3, #1
 800e8c8:	617a      	str	r2, [r7, #20]
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e8d4:	e7b4      	b.n	800e840 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e8d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	441a      	add	r2, r3
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8e4:	2b1f      	cmp	r3, #31
 800e8e6:	d801      	bhi.n	800e8ec <create_name+0xcc>
 800e8e8:	2304      	movs	r3, #4
 800e8ea:	e000      	b.n	800e8ee <create_name+0xce>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e8f2:	e011      	b.n	800e918 <create_name+0xf8>
		w = lfn[di - 1];
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	4413      	add	r3, r2
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e908:	2b20      	cmp	r3, #32
 800e90a:	d002      	beq.n	800e912 <create_name+0xf2>
 800e90c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e90e:	2b2e      	cmp	r3, #46	; 0x2e
 800e910:	d106      	bne.n	800e920 <create_name+0x100>
		di--;
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	3b01      	subs	r3, #1
 800e916:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1ea      	bne.n	800e8f4 <create_name+0xd4>
 800e91e:	e000      	b.n	800e922 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e920:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	4413      	add	r3, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <create_name+0x118>
 800e934:	2306      	movs	r3, #6
 800e936:	e127      	b.n	800eb88 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3324      	adds	r3, #36	; 0x24
 800e93c:	220b      	movs	r2, #11
 800e93e:	2120      	movs	r1, #32
 800e940:	4618      	mov	r0, r3
 800e942:	f7fe fcda 	bl	800d2fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e946:	2300      	movs	r3, #0
 800e948:	61bb      	str	r3, [r7, #24]
 800e94a:	e002      	b.n	800e952 <create_name+0x132>
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	3301      	adds	r3, #1
 800e950:	61bb      	str	r3, [r7, #24]
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	4413      	add	r3, r2
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	2b20      	cmp	r3, #32
 800e95e:	d0f5      	beq.n	800e94c <create_name+0x12c>
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4413      	add	r3, r2
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	2b2e      	cmp	r3, #46	; 0x2e
 800e96c:	d0ee      	beq.n	800e94c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <create_name+0x168>
 800e974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e978:	f043 0303 	orr.w	r3, r3, #3
 800e97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e980:	e002      	b.n	800e988 <create_name+0x168>
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	3b01      	subs	r3, #1
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d009      	beq.n	800e9a2 <create_name+0x182>
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e994:	3b01      	subs	r3, #1
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	4413      	add	r3, r2
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a0:	d1ef      	bne.n	800e982 <create_name+0x162>

	i = b = 0; ni = 8;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	623b      	str	r3, [r7, #32]
 800e9ac:	2308      	movs	r3, #8
 800e9ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	61ba      	str	r2, [r7, #24]
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	881b      	ldrh	r3, [r3, #0]
 800e9be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 8090 	beq.w	800eae8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e9c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	d006      	beq.n	800e9dc <create_name+0x1bc>
 800e9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e9d2:	d10a      	bne.n	800e9ea <create_name+0x1ca>
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d006      	beq.n	800e9ea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e0:	f043 0303 	orr.w	r3, r3, #3
 800e9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9e8:	e07d      	b.n	800eae6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e9ea:	6a3a      	ldr	r2, [r7, #32]
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d203      	bcs.n	800e9fa <create_name+0x1da>
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d123      	bne.n	800ea42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	2b0b      	cmp	r3, #11
 800e9fe:	d106      	bne.n	800ea0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ea00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea04:	f043 0303 	orr.w	r3, r3, #3
 800ea08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea0c:	e075      	b.n	800eafa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ea0e:	69ba      	ldr	r2, [r7, #24]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d005      	beq.n	800ea22 <create_name+0x202>
 800ea16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea1a:	f043 0303 	orr.w	r3, r3, #3
 800ea1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ea22:	69ba      	ldr	r2, [r7, #24]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d866      	bhi.n	800eaf8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	61bb      	str	r3, [r7, #24]
 800ea2e:	2308      	movs	r3, #8
 800ea30:	623b      	str	r3, [r7, #32]
 800ea32:	230b      	movs	r3, #11
 800ea34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ea36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea40:	e051      	b.n	800eae6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ea42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea44:	2b7f      	cmp	r3, #127	; 0x7f
 800ea46:	d914      	bls.n	800ea72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ea48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 fcfd 	bl	801044c <ff_convert>
 800ea52:	4603      	mov	r3, r0
 800ea54:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ea56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <create_name+0x246>
 800ea5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea5e:	3b80      	subs	r3, #128	; 0x80
 800ea60:	4a23      	ldr	r2, [pc, #140]	; (800eaf0 <create_name+0x2d0>)
 800ea62:	5cd3      	ldrb	r3, [r2, r3]
 800ea64:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ea66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6a:	f043 0302 	orr.w	r3, r3, #2
 800ea6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ea72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d007      	beq.n	800ea88 <create_name+0x268>
 800ea78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	481d      	ldr	r0, [pc, #116]	; (800eaf4 <create_name+0x2d4>)
 800ea7e:	f7fe fc7e 	bl	800d37e <chk_chr>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d008      	beq.n	800ea9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ea88:	235f      	movs	r3, #95	; 0x5f
 800ea8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ea8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea90:	f043 0303 	orr.w	r3, r3, #3
 800ea94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea98:	e01b      	b.n	800ead2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ea9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea9c:	2b40      	cmp	r3, #64	; 0x40
 800ea9e:	d909      	bls.n	800eab4 <create_name+0x294>
 800eaa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaa2:	2b5a      	cmp	r3, #90	; 0x5a
 800eaa4:	d806      	bhi.n	800eab4 <create_name+0x294>
					b |= 2;
 800eaa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaaa:	f043 0302 	orr.w	r3, r3, #2
 800eaae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eab2:	e00e      	b.n	800ead2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800eab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab6:	2b60      	cmp	r3, #96	; 0x60
 800eab8:	d90b      	bls.n	800ead2 <create_name+0x2b2>
 800eaba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eabc:	2b7a      	cmp	r3, #122	; 0x7a
 800eabe:	d808      	bhi.n	800ead2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eac4:	f043 0301 	orr.w	r3, r3, #1
 800eac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eace:	3b20      	subs	r3, #32
 800ead0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ead2:	6a3b      	ldr	r3, [r7, #32]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	623a      	str	r2, [r7, #32]
 800ead8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eada:	b2d1      	uxtb	r1, r2
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	4413      	add	r3, r2
 800eae0:	460a      	mov	r2, r1
 800eae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800eae6:	e763      	b.n	800e9b0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eae8:	bf00      	nop
 800eaea:	e006      	b.n	800eafa <create_name+0x2da>
 800eaec:	08011ab0 	.word	0x08011ab0
 800eaf0:	0801211c 	.word	0x0801211c
 800eaf4:	08011abc 	.word	0x08011abc
			if (si > di) break;			/* No extension */
 800eaf8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb00:	2be5      	cmp	r3, #229	; 0xe5
 800eb02:	d103      	bne.n	800eb0c <create_name+0x2ec>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2205      	movs	r2, #5
 800eb08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2b08      	cmp	r3, #8
 800eb10:	d104      	bne.n	800eb1c <create_name+0x2fc>
 800eb12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eb1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb20:	f003 030c 	and.w	r3, r3, #12
 800eb24:	2b0c      	cmp	r3, #12
 800eb26:	d005      	beq.n	800eb34 <create_name+0x314>
 800eb28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d105      	bne.n	800eb40 <create_name+0x320>
 800eb34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb38:	f043 0302 	orr.w	r3, r3, #2
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eb40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb44:	f003 0302 	and.w	r3, r3, #2
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d117      	bne.n	800eb7c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eb4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb50:	f003 0303 	and.w	r3, r3, #3
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d105      	bne.n	800eb64 <create_name+0x344>
 800eb58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb5c:	f043 0310 	orr.w	r3, r3, #16
 800eb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eb64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb68:	f003 030c 	and.w	r3, r3, #12
 800eb6c:	2b04      	cmp	r3, #4
 800eb6e:	d105      	bne.n	800eb7c <create_name+0x35c>
 800eb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb74:	f043 0308 	orr.w	r3, r3, #8
 800eb78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800eb86:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3728      	adds	r7, #40	; 0x28
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eba4:	e002      	b.n	800ebac <follow_path+0x1c>
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	2b2f      	cmp	r3, #47	; 0x2f
 800ebb2:	d0f8      	beq.n	800eba6 <follow_path+0x16>
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b5c      	cmp	r3, #92	; 0x5c
 800ebba:	d0f4      	beq.n	800eba6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2b1f      	cmp	r3, #31
 800ebc8:	d80a      	bhi.n	800ebe0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2280      	movs	r2, #128	; 0x80
 800ebce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7ff f91d 	bl	800de14 <dir_sdi>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	75fb      	strb	r3, [r7, #23]
 800ebde:	e043      	b.n	800ec68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebe0:	463b      	mov	r3, r7
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff fe1b 	bl	800e820 <create_name>
 800ebea:	4603      	mov	r3, r0
 800ebec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d134      	bne.n	800ec5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fc5a 	bl	800e4ae <dir_find>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d127      	bne.n	800ec62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec12:	7afb      	ldrb	r3, [r7, #11]
 800ec14:	f003 0304 	and.w	r3, r3, #4
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d122      	bne.n	800ec62 <follow_path+0xd2>
 800ec1c:	2305      	movs	r3, #5
 800ec1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ec20:	e01f      	b.n	800ec62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec22:	7afb      	ldrb	r3, [r7, #11]
 800ec24:	f003 0304 	and.w	r3, r3, #4
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d11c      	bne.n	800ec66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	799b      	ldrb	r3, [r3, #6]
 800ec30:	f003 0310 	and.w	r3, r3, #16
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d102      	bne.n	800ec3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ec38:	2305      	movs	r3, #5
 800ec3a:	75fb      	strb	r3, [r7, #23]
 800ec3c:	e014      	b.n	800ec68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	695b      	ldr	r3, [r3, #20]
 800ec48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec4c:	4413      	add	r3, r2
 800ec4e:	4619      	mov	r1, r3
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f7ff fa66 	bl	800e122 <ld_clust>
 800ec56:	4602      	mov	r2, r0
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec5c:	e7c0      	b.n	800ebe0 <follow_path+0x50>
			if (res != FR_OK) break;
 800ec5e:	bf00      	nop
 800ec60:	e002      	b.n	800ec68 <follow_path+0xd8>
				break;
 800ec62:	bf00      	nop
 800ec64:	e000      	b.n	800ec68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec66:	bf00      	nop
			}
		}
	}

	return res;
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b087      	sub	sp, #28
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d031      	beq.n	800ecec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	617b      	str	r3, [r7, #20]
 800ec8e:	e002      	b.n	800ec96 <get_ldnumber+0x24>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	3301      	adds	r3, #1
 800ec94:	617b      	str	r3, [r7, #20]
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b1f      	cmp	r3, #31
 800ec9c:	d903      	bls.n	800eca6 <get_ldnumber+0x34>
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b3a      	cmp	r3, #58	; 0x3a
 800eca4:	d1f4      	bne.n	800ec90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	2b3a      	cmp	r3, #58	; 0x3a
 800ecac:	d11c      	bne.n	800ece8 <get_ldnumber+0x76>
			tp = *path;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	1c5a      	adds	r2, r3, #1
 800ecb8:	60fa      	str	r2, [r7, #12]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	3b30      	subs	r3, #48	; 0x30
 800ecbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b09      	cmp	r3, #9
 800ecc4:	d80e      	bhi.n	800ece4 <get_ldnumber+0x72>
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d10a      	bne.n	800ece4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d107      	bne.n	800ece4 <get_ldnumber+0x72>
					vol = (int)i;
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	697a      	ldr	r2, [r7, #20]
 800ece2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	e002      	b.n	800ecee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ece8:	2300      	movs	r3, #0
 800ecea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ecec:	693b      	ldr	r3, [r7, #16]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	371c      	adds	r7, #28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
	...

0800ecfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	70da      	strb	r2, [r3, #3]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed12:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7fe fcfc 	bl	800d714 <move_window>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <check_fs+0x2a>
 800ed22:	2304      	movs	r3, #4
 800ed24:	e038      	b.n	800ed98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3334      	adds	r3, #52	; 0x34
 800ed2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fa40 	bl	800d1b4 <ld_word>
 800ed34:	4603      	mov	r3, r0
 800ed36:	461a      	mov	r2, r3
 800ed38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d001      	beq.n	800ed44 <check_fs+0x48>
 800ed40:	2303      	movs	r3, #3
 800ed42:	e029      	b.n	800ed98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed4a:	2be9      	cmp	r3, #233	; 0xe9
 800ed4c:	d009      	beq.n	800ed62 <check_fs+0x66>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed54:	2beb      	cmp	r3, #235	; 0xeb
 800ed56:	d11e      	bne.n	800ed96 <check_fs+0x9a>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ed5e:	2b90      	cmp	r3, #144	; 0x90
 800ed60:	d119      	bne.n	800ed96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3334      	adds	r3, #52	; 0x34
 800ed66:	3336      	adds	r3, #54	; 0x36
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fe fa3b 	bl	800d1e4 <ld_dword>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ed74:	4a0a      	ldr	r2, [pc, #40]	; (800eda0 <check_fs+0xa4>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d101      	bne.n	800ed7e <check_fs+0x82>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e00c      	b.n	800ed98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3334      	adds	r3, #52	; 0x34
 800ed82:	3352      	adds	r3, #82	; 0x52
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fe fa2d 	bl	800d1e4 <ld_dword>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4a05      	ldr	r2, [pc, #20]	; (800eda4 <check_fs+0xa8>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d101      	bne.n	800ed96 <check_fs+0x9a>
 800ed92:	2300      	movs	r3, #0
 800ed94:	e000      	b.n	800ed98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ed96:	2302      	movs	r3, #2
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	00544146 	.word	0x00544146
 800eda4:	33544146 	.word	0x33544146

0800eda8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b096      	sub	sp, #88	; 0x58
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2200      	movs	r2, #0
 800edba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f7ff ff58 	bl	800ec72 <get_ldnumber>
 800edc2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800edc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da01      	bge.n	800edce <find_volume+0x26>
 800edca:	230b      	movs	r3, #11
 800edcc:	e22d      	b.n	800f22a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800edce:	4aa1      	ldr	r2, [pc, #644]	; (800f054 <find_volume+0x2ac>)
 800edd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800edd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d101      	bne.n	800ede2 <find_volume+0x3a>
 800edde:	230c      	movs	r3, #12
 800ede0:	e223      	b.n	800f22a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	f023 0301 	bic.w	r3, r3, #1
 800edee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d01a      	beq.n	800ee2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	785b      	ldrb	r3, [r3, #1]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fe f93b 	bl	800d078 <disk_status>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d10c      	bne.n	800ee2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d007      	beq.n	800ee2a <find_volume+0x82>
 800ee1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee1e:	f003 0304 	and.w	r3, r3, #4
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d001      	beq.n	800ee2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ee26:	230a      	movs	r3, #10
 800ee28:	e1ff      	b.n	800f22a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e1fd      	b.n	800f22a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ee34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	785b      	ldrb	r3, [r3, #1]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe f933 	bl	800d0ac <disk_initialize>
 800ee46:	4603      	mov	r3, r0
 800ee48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ee4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ee58:	2303      	movs	r3, #3
 800ee5a:	e1e6      	b.n	800f22a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d007      	beq.n	800ee72 <find_volume+0xca>
 800ee62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee66:	f003 0304 	and.w	r3, r3, #4
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ee6e:	230a      	movs	r3, #10
 800ee70:	e1db      	b.n	800f22a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee72:	2300      	movs	r3, #0
 800ee74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee7a:	f7ff ff3f 	bl	800ecfc <check_fs>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ee84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d149      	bne.n	800ef20 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ee90:	e01e      	b.n	800eed0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ee98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eea0:	4413      	add	r3, r2
 800eea2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea6:	3304      	adds	r3, #4
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d006      	beq.n	800eebc <find_volume+0x114>
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe f996 	bl	800d1e4 <ld_dword>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	e000      	b.n	800eebe <find_volume+0x116>
 800eebc:	2200      	movs	r2, #0
 800eebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	3358      	adds	r3, #88	; 0x58
 800eec4:	443b      	add	r3, r7
 800eec6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eeca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eecc:	3301      	adds	r3, #1
 800eece:	643b      	str	r3, [r7, #64]	; 0x40
 800eed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d9dd      	bls.n	800ee92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800eed6:	2300      	movs	r3, #0
 800eed8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800eeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <find_volume+0x13e>
 800eee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee2:	3b01      	subs	r3, #1
 800eee4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	3358      	adds	r3, #88	; 0x58
 800eeec:	443b      	add	r3, r7
 800eeee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eef2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d005      	beq.n	800ef06 <find_volume+0x15e>
 800eefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eefe:	f7ff fefd 	bl	800ecfc <check_fs>
 800ef02:	4603      	mov	r3, r0
 800ef04:	e000      	b.n	800ef08 <find_volume+0x160>
 800ef06:	2303      	movs	r3, #3
 800ef08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ef0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d905      	bls.n	800ef20 <find_volume+0x178>
 800ef14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef16:	3301      	adds	r3, #1
 800ef18:	643b      	str	r3, [r7, #64]	; 0x40
 800ef1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d9e2      	bls.n	800eee6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ef20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d101      	bne.n	800ef2c <find_volume+0x184>
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e17e      	b.n	800f22a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ef2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d901      	bls.n	800ef38 <find_volume+0x190>
 800ef34:	230d      	movs	r3, #13
 800ef36:	e178      	b.n	800f22a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	3334      	adds	r3, #52	; 0x34
 800ef3c:	330b      	adds	r3, #11
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe f938 	bl	800d1b4 <ld_word>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef4a:	d001      	beq.n	800ef50 <find_volume+0x1a8>
 800ef4c:	230d      	movs	r3, #13
 800ef4e:	e16c      	b.n	800f22a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	3334      	adds	r3, #52	; 0x34
 800ef54:	3316      	adds	r3, #22
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fe f92c 	bl	800d1b4 <ld_word>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <find_volume+0x1cc>
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	3334      	adds	r3, #52	; 0x34
 800ef6a:	3324      	adds	r3, #36	; 0x24
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fe f939 	bl	800d1e4 <ld_dword>
 800ef72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ef84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef86:	789b      	ldrb	r3, [r3, #2]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d005      	beq.n	800ef98 <find_volume+0x1f0>
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	789b      	ldrb	r3, [r3, #2]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d001      	beq.n	800ef98 <find_volume+0x1f0>
 800ef94:	230d      	movs	r3, #13
 800ef96:	e148      	b.n	800f22a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ef98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9a:	789b      	ldrb	r3, [r3, #2]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa0:	fb02 f303 	mul.w	r3, r2, r3
 800efa4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800efac:	b29a      	uxth	r2, r3
 800efae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	895b      	ldrh	r3, [r3, #10]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d008      	beq.n	800efcc <find_volume+0x224>
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	895b      	ldrh	r3, [r3, #10]
 800efbe:	461a      	mov	r2, r3
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	895b      	ldrh	r3, [r3, #10]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	4013      	ands	r3, r2
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <find_volume+0x228>
 800efcc:	230d      	movs	r3, #13
 800efce:	e12c      	b.n	800f22a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	3334      	adds	r3, #52	; 0x34
 800efd4:	3311      	adds	r3, #17
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe f8ec 	bl	800d1b4 <ld_word>
 800efdc:	4603      	mov	r3, r0
 800efde:	461a      	mov	r2, r3
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	891b      	ldrh	r3, [r3, #8]
 800efe8:	f003 030f 	and.w	r3, r3, #15
 800efec:	b29b      	uxth	r3, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <find_volume+0x24e>
 800eff2:	230d      	movs	r3, #13
 800eff4:	e119      	b.n	800f22a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	3334      	adds	r3, #52	; 0x34
 800effa:	3313      	adds	r3, #19
 800effc:	4618      	mov	r0, r3
 800effe:	f7fe f8d9 	bl	800d1b4 <ld_word>
 800f002:	4603      	mov	r3, r0
 800f004:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <find_volume+0x272>
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	3334      	adds	r3, #52	; 0x34
 800f010:	3320      	adds	r3, #32
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe f8e6 	bl	800d1e4 <ld_dword>
 800f018:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	3334      	adds	r3, #52	; 0x34
 800f01e:	330e      	adds	r3, #14
 800f020:	4618      	mov	r0, r3
 800f022:	f7fe f8c7 	bl	800d1b4 <ld_word>
 800f026:	4603      	mov	r3, r0
 800f028:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f02a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <find_volume+0x28c>
 800f030:	230d      	movs	r3, #13
 800f032:	e0fa      	b.n	800f22a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f034:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f038:	4413      	add	r3, r2
 800f03a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f03c:	8912      	ldrh	r2, [r2, #8]
 800f03e:	0912      	lsrs	r2, r2, #4
 800f040:	b292      	uxth	r2, r2
 800f042:	4413      	add	r3, r2
 800f044:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d204      	bcs.n	800f058 <find_volume+0x2b0>
 800f04e:	230d      	movs	r3, #13
 800f050:	e0eb      	b.n	800f22a <find_volume+0x482>
 800f052:	bf00      	nop
 800f054:	2001fbec 	.word	0x2001fbec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f060:	8952      	ldrh	r2, [r2, #10]
 800f062:	fbb3 f3f2 	udiv	r3, r3, r2
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <find_volume+0x2ca>
 800f06e:	230d      	movs	r3, #13
 800f070:	e0db      	b.n	800f22a <find_volume+0x482>
		fmt = FS_FAT32;
 800f072:	2303      	movs	r3, #3
 800f074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f07e:	4293      	cmp	r3, r2
 800f080:	d802      	bhi.n	800f088 <find_volume+0x2e0>
 800f082:	2302      	movs	r3, #2
 800f084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f08e:	4293      	cmp	r3, r2
 800f090:	d802      	bhi.n	800f098 <find_volume+0x2f0>
 800f092:	2301      	movs	r3, #1
 800f094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	1c9a      	adds	r2, r3, #2
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0a4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f0a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0aa:	441a      	add	r2, r3
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f0b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	441a      	add	r2, r3
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f0ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d11e      	bne.n	800f100 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	3334      	adds	r3, #52	; 0x34
 800f0c6:	332a      	adds	r3, #42	; 0x2a
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fe f873 	bl	800d1b4 <ld_word>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <find_volume+0x330>
 800f0d4:	230d      	movs	r3, #13
 800f0d6:	e0a8      	b.n	800f22a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0da:	891b      	ldrh	r3, [r3, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <find_volume+0x33c>
 800f0e0:	230d      	movs	r3, #13
 800f0e2:	e0a2      	b.n	800f22a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	3334      	adds	r3, #52	; 0x34
 800f0e8:	332c      	adds	r3, #44	; 0x2c
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fe f87a 	bl	800d1e4 <ld_dword>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f0fe:	e01f      	b.n	800f140 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	891b      	ldrh	r3, [r3, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d101      	bne.n	800f10c <find_volume+0x364>
 800f108:	230d      	movs	r3, #13
 800f10a:	e08e      	b.n	800f22a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f112:	441a      	add	r2, r3
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d103      	bne.n	800f128 <find_volume+0x380>
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	e00a      	b.n	800f13e <find_volume+0x396>
 800f128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12a:	699a      	ldr	r2, [r3, #24]
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	085a      	lsrs	r2, r3, #1
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	699b      	ldr	r3, [r3, #24]
 800f138:	f003 0301 	and.w	r3, r3, #1
 800f13c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f13e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	69da      	ldr	r2, [r3, #28]
 800f144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f146:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f14a:	0a5b      	lsrs	r3, r3, #9
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d201      	bcs.n	800f154 <find_volume+0x3ac>
 800f150:	230d      	movs	r3, #13
 800f152:	e06a      	b.n	800f22a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	f04f 32ff 	mov.w	r2, #4294967295
 800f15a:	615a      	str	r2, [r3, #20]
 800f15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15e:	695a      	ldr	r2, [r3, #20]
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	2280      	movs	r2, #128	; 0x80
 800f168:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f16a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f16e:	2b03      	cmp	r3, #3
 800f170:	d149      	bne.n	800f206 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f174:	3334      	adds	r3, #52	; 0x34
 800f176:	3330      	adds	r3, #48	; 0x30
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe f81b 	bl	800d1b4 <ld_word>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b01      	cmp	r3, #1
 800f182:	d140      	bne.n	800f206 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f186:	3301      	adds	r3, #1
 800f188:	4619      	mov	r1, r3
 800f18a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f18c:	f7fe fac2 	bl	800d714 <move_window>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d137      	bne.n	800f206 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f198:	2200      	movs	r2, #0
 800f19a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	3334      	adds	r3, #52	; 0x34
 800f1a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fe f805 	bl	800d1b4 <ld_word>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d127      	bne.n	800f206 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	3334      	adds	r3, #52	; 0x34
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe f812 	bl	800d1e4 <ld_dword>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	4a1c      	ldr	r2, [pc, #112]	; (800f234 <find_volume+0x48c>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d11e      	bne.n	800f206 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	3334      	adds	r3, #52	; 0x34
 800f1cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fe f807 	bl	800d1e4 <ld_dword>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	4a17      	ldr	r2, [pc, #92]	; (800f238 <find_volume+0x490>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d113      	bne.n	800f206 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	3334      	adds	r3, #52	; 0x34
 800f1e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fd fffc 	bl	800d1e4 <ld_dword>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f4:	3334      	adds	r3, #52	; 0x34
 800f1f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fd fff2 	bl	800d1e4 <ld_dword>
 800f200:	4602      	mov	r2, r0
 800f202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f204:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f20c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f20e:	4b0b      	ldr	r3, [pc, #44]	; (800f23c <find_volume+0x494>)
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	3301      	adds	r3, #1
 800f214:	b29a      	uxth	r2, r3
 800f216:	4b09      	ldr	r3, [pc, #36]	; (800f23c <find_volume+0x494>)
 800f218:	801a      	strh	r2, [r3, #0]
 800f21a:	4b08      	ldr	r3, [pc, #32]	; (800f23c <find_volume+0x494>)
 800f21c:	881a      	ldrh	r2, [r3, #0]
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f222:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f224:	f7fe fa0e 	bl	800d644 <clear_lock>
#endif
	return FR_OK;
 800f228:	2300      	movs	r3, #0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3758      	adds	r7, #88	; 0x58
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	41615252 	.word	0x41615252
 800f238:	61417272 	.word	0x61417272
 800f23c:	2001fbf0 	.word	0x2001fbf0

0800f240 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f24a:	2309      	movs	r3, #9
 800f24c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d01c      	beq.n	800f28e <validate+0x4e>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d018      	beq.n	800f28e <validate+0x4e>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d013      	beq.n	800f28e <validate+0x4e>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	889a      	ldrh	r2, [r3, #4]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	88db      	ldrh	r3, [r3, #6]
 800f270:	429a      	cmp	r2, r3
 800f272:	d10c      	bne.n	800f28e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	785b      	ldrb	r3, [r3, #1]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fd fefc 	bl	800d078 <disk_status>
 800f280:	4603      	mov	r3, r0
 800f282:	f003 0301 	and.w	r3, r3, #1
 800f286:	2b00      	cmp	r3, #0
 800f288:	d101      	bne.n	800f28e <validate+0x4e>
			res = FR_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d102      	bne.n	800f29a <validate+0x5a>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	e000      	b.n	800f29c <validate+0x5c>
 800f29a:	2300      	movs	r3, #0
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	6013      	str	r3, [r2, #0]
	return res;
 800f2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b088      	sub	sp, #32
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f2be:	f107 0310 	add.w	r3, r7, #16
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff fcd5 	bl	800ec72 <get_ldnumber>
 800f2c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da01      	bge.n	800f2d4 <f_mount+0x28>
 800f2d0:	230b      	movs	r3, #11
 800f2d2:	e02b      	b.n	800f32c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f2d4:	4a17      	ldr	r2, [pc, #92]	; (800f334 <f_mount+0x88>)
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d005      	beq.n	800f2f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f2e4:	69b8      	ldr	r0, [r7, #24]
 800f2e6:	f7fe f9ad 	bl	800d644 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	490d      	ldr	r1, [pc, #52]	; (800f334 <f_mount+0x88>)
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <f_mount+0x66>
 800f30c:	79fb      	ldrb	r3, [r7, #7]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d001      	beq.n	800f316 <f_mount+0x6a>
 800f312:	2300      	movs	r3, #0
 800f314:	e00a      	b.n	800f32c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f316:	f107 010c 	add.w	r1, r7, #12
 800f31a:	f107 0308 	add.w	r3, r7, #8
 800f31e:	2200      	movs	r2, #0
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff fd41 	bl	800eda8 <find_volume>
 800f326:	4603      	mov	r3, r0
 800f328:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	2001fbec 	.word	0x2001fbec

0800f338 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b09a      	sub	sp, #104	; 0x68
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	4613      	mov	r3, r2
 800f344:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d101      	bne.n	800f350 <f_open+0x18>
 800f34c:	2309      	movs	r3, #9
 800f34e:	e1bd      	b.n	800f6cc <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f356:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f358:	79fa      	ldrb	r2, [r7, #7]
 800f35a:	f107 0110 	add.w	r1, r7, #16
 800f35e:	f107 0308 	add.w	r3, r7, #8
 800f362:	4618      	mov	r0, r3
 800f364:	f7ff fd20 	bl	800eda8 <find_volume>
 800f368:	4603      	mov	r3, r0
 800f36a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f36e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f372:	2b00      	cmp	r3, #0
 800f374:	f040 81a1 	bne.w	800f6ba <f_open+0x382>
		dj.obj.fs = fs;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800f37c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f380:	f001 f84d 	bl	801041e <ff_memalloc>
 800f384:	65b8      	str	r0, [r7, #88]	; 0x58
 800f386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <f_open+0x58>
 800f38c:	2311      	movs	r3, #17
 800f38e:	e19d      	b.n	800f6cc <f_open+0x394>
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f394:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	f107 0314 	add.w	r3, r7, #20
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fbf6 	bl	800eb90 <follow_path>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f3aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d11a      	bne.n	800f3e8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f3b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3b6:	b25b      	sxtb	r3, r3
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	da03      	bge.n	800f3c4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800f3bc:	2306      	movs	r3, #6
 800f3be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3c2:	e011      	b.n	800f3e8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	f023 0301 	bic.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	bf14      	ite	ne
 800f3ce:	2301      	movne	r3, #1
 800f3d0:	2300      	moveq	r3, #0
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	f107 0314 	add.w	r3, r7, #20
 800f3da:	4611      	mov	r1, r2
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fd ffe9 	bl	800d3b4 <chk_lock>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	f003 031c 	and.w	r3, r3, #28
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d07f      	beq.n	800f4f2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800f3f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d017      	beq.n	800f42a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f3fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3fe:	2b04      	cmp	r3, #4
 800f400:	d10e      	bne.n	800f420 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f402:	f7fe f833 	bl	800d46c <enq_lock>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d006      	beq.n	800f41a <f_open+0xe2>
 800f40c:	f107 0314 	add.w	r3, r7, #20
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff f90d 	bl	800e630 <dir_register>
 800f416:	4603      	mov	r3, r0
 800f418:	e000      	b.n	800f41c <f_open+0xe4>
 800f41a:	2312      	movs	r3, #18
 800f41c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	f043 0308 	orr.w	r3, r3, #8
 800f426:	71fb      	strb	r3, [r7, #7]
 800f428:	e010      	b.n	800f44c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f42a:	7ebb      	ldrb	r3, [r7, #26]
 800f42c:	f003 0311 	and.w	r3, r3, #17
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <f_open+0x104>
					res = FR_DENIED;
 800f434:	2307      	movs	r3, #7
 800f436:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f43a:	e007      	b.n	800f44c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f43c:	79fb      	ldrb	r3, [r7, #7]
 800f43e:	f003 0304 	and.w	r3, r3, #4
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <f_open+0x114>
 800f446:	2308      	movs	r3, #8
 800f448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f44c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f450:	2b00      	cmp	r3, #0
 800f452:	d168      	bne.n	800f526 <f_open+0x1ee>
 800f454:	79fb      	ldrb	r3, [r7, #7]
 800f456:	f003 0308 	and.w	r3, r3, #8
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d063      	beq.n	800f526 <f_open+0x1ee>
				dw = GET_FATTIME();
 800f45e:	f7fd fde5 	bl	800d02c <get_fattime>
 800f462:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f466:	330e      	adds	r3, #14
 800f468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fef8 	bl	800d260 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	3316      	adds	r3, #22
 800f474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fef2 	bl	800d260 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	330b      	adds	r3, #11
 800f480:	2220      	movs	r2, #32
 800f482:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fe fe49 	bl	800e122 <ld_clust>
 800f490:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f496:	2200      	movs	r2, #0
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe fe61 	bl	800e160 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a0:	331c      	adds	r3, #28
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fd fedb 	bl	800d260 <st_dword>
					fs->wflag = 1;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d037      	beq.n	800f526 <f_open+0x1ee>
						dw = fs->winsect;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ba:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800f4bc:	f107 0314 	add.w	r3, r7, #20
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fe fb74 	bl	800dbb2 <remove_chain>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d126      	bne.n	800f526 <f_open+0x1ee>
							res = move_window(fs, dw);
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fe f919 	bl	800d714 <move_window>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4ec:	3a01      	subs	r2, #1
 800f4ee:	611a      	str	r2, [r3, #16]
 800f4f0:	e019      	b.n	800f526 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f4f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d115      	bne.n	800f526 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f4fa:	7ebb      	ldrb	r3, [r7, #26]
 800f4fc:	f003 0310 	and.w	r3, r3, #16
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <f_open+0x1d4>
					res = FR_NO_FILE;
 800f504:	2304      	movs	r3, #4
 800f506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f50a:	e00c      	b.n	800f526 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f50c:	79fb      	ldrb	r3, [r7, #7]
 800f50e:	f003 0302 	and.w	r3, r3, #2
 800f512:	2b00      	cmp	r3, #0
 800f514:	d007      	beq.n	800f526 <f_open+0x1ee>
 800f516:	7ebb      	ldrb	r3, [r7, #26]
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d002      	beq.n	800f526 <f_open+0x1ee>
						res = FR_DENIED;
 800f520:	2307      	movs	r3, #7
 800f522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d128      	bne.n	800f580 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f52e:	79fb      	ldrb	r3, [r7, #7]
 800f530:	f003 0308 	and.w	r3, r3, #8
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <f_open+0x208>
				mode |= FA_MODIFIED;
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f53e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f54e:	79fb      	ldrb	r3, [r7, #7]
 800f550:	f023 0301 	bic.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	bf14      	ite	ne
 800f558:	2301      	movne	r3, #1
 800f55a:	2300      	moveq	r3, #0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	f107 0314 	add.w	r3, r7, #20
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd ffa2 	bl	800d4b0 <inc_lock>
 800f56c:	4602      	mov	r2, r0
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d102      	bne.n	800f580 <f_open+0x248>
 800f57a:	2302      	movs	r3, #2
 800f57c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 8095 	bne.w	800f6b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f58e:	4611      	mov	r1, r2
 800f590:	4618      	mov	r0, r3
 800f592:	f7fe fdc6 	bl	800e122 <ld_clust>
 800f596:	4602      	mov	r2, r0
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59e:	331c      	adds	r3, #28
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fd fe1f 	bl	800d1e4 <ld_dword>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f5b2:	693a      	ldr	r2, [r7, #16]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	88da      	ldrh	r2, [r3, #6]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	79fa      	ldrb	r2, [r7, #7]
 800f5c4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3330      	adds	r3, #48	; 0x30
 800f5dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fd fe89 	bl	800d2fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	f003 0320 	and.w	r3, r3, #32
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d060      	beq.n	800f6b4 <f_open+0x37c>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d05c      	beq.n	800f6b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	68da      	ldr	r2, [r3, #12]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	895b      	ldrh	r3, [r3, #10]
 800f606:	025b      	lsls	r3, r3, #9
 800f608:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f616:	e016      	b.n	800f646 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fe f934 	bl	800d88a <get_fat>
 800f622:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f626:	2b01      	cmp	r3, #1
 800f628:	d802      	bhi.n	800f630 <f_open+0x2f8>
 800f62a:	2302      	movs	r3, #2
 800f62c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f636:	d102      	bne.n	800f63e <f_open+0x306>
 800f638:	2301      	movs	r3, #1
 800f63a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f63e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f646:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d103      	bne.n	800f656 <f_open+0x31e>
 800f64e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f652:	429a      	cmp	r2, r3
 800f654:	d8e0      	bhi.n	800f618 <f_open+0x2e0>
				}
				fp->clust = clst;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f65a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f65c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f660:	2b00      	cmp	r3, #0
 800f662:	d127      	bne.n	800f6b4 <f_open+0x37c>
 800f664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d022      	beq.n	800f6b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe f8ea 	bl	800d84c <clust2sect>
 800f678:	64b8      	str	r0, [r7, #72]	; 0x48
 800f67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <f_open+0x350>
						res = FR_INT_ERR;
 800f680:	2302      	movs	r3, #2
 800f682:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f686:	e015      	b.n	800f6b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f68a:	0a5a      	lsrs	r2, r3, #9
 800f68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68e:	441a      	add	r2, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	7858      	ldrb	r0, [r3, #1]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a1a      	ldr	r2, [r3, #32]
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	f7fd fd28 	bl	800d0f8 <disk_read>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <f_open+0x37c>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800f6b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f6b6:	f000 febe 	bl	8010436 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f6ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <f_open+0x390>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f6c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3768      	adds	r7, #104	; 0x68
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08c      	sub	sp, #48	; 0x30
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
 800f6e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f107 0210 	add.w	r2, r7, #16
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fda3 	bl	800f240 <validate>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f704:	2b00      	cmp	r3, #0
 800f706:	d107      	bne.n	800f718 <f_write+0x44>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	7d5b      	ldrb	r3, [r3, #21]
 800f70c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f714:	2b00      	cmp	r3, #0
 800f716:	d002      	beq.n	800f71e <f_write+0x4a>
 800f718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f71c:	e14b      	b.n	800f9b6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	7d1b      	ldrb	r3, [r3, #20]
 800f722:	f003 0302 	and.w	r3, r3, #2
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <f_write+0x5a>
 800f72a:	2307      	movs	r3, #7
 800f72c:	e143      	b.n	800f9b6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	699a      	ldr	r2, [r3, #24]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	441a      	add	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	f080 812d 	bcs.w	800f99a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	43db      	mvns	r3, r3
 800f746:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f748:	e127      	b.n	800f99a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f752:	2b00      	cmp	r3, #0
 800f754:	f040 80e3 	bne.w	800f91e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	0a5b      	lsrs	r3, r3, #9
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	8952      	ldrh	r2, [r2, #10]
 800f762:	3a01      	subs	r2, #1
 800f764:	4013      	ands	r3, r2
 800f766:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d143      	bne.n	800f7f6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10c      	bne.n	800f790 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d11a      	bne.n	800f7b8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2100      	movs	r1, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe fa78 	bl	800dc7c <create_chain>
 800f78c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f78e:	e013      	b.n	800f7b8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	2b00      	cmp	r3, #0
 800f796:	d007      	beq.n	800f7a8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	4619      	mov	r1, r3
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7fe fb04 	bl	800ddac <clmt_clust>
 800f7a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7a6:	e007      	b.n	800f7b8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	69db      	ldr	r3, [r3, #28]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	f7fe fa63 	bl	800dc7c <create_chain>
 800f7b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80f2 	beq.w	800f9a4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d104      	bne.n	800f7d0 <f_write+0xfc>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	755a      	strb	r2, [r3, #21]
 800f7cc:	2302      	movs	r3, #2
 800f7ce:	e0f2      	b.n	800f9b6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d6:	d104      	bne.n	800f7e2 <f_write+0x10e>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	755a      	strb	r2, [r3, #21]
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e0e9      	b.n	800f9b6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d102      	bne.n	800f7f6 <f_write+0x122>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	7d1b      	ldrb	r3, [r3, #20]
 800f7fa:	b25b      	sxtb	r3, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	da18      	bge.n	800f832 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	7858      	ldrb	r0, [r3, #1]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6a1a      	ldr	r2, [r3, #32]
 800f80e:	2301      	movs	r3, #1
 800f810:	f7fd fc92 	bl	800d138 <disk_write>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d004      	beq.n	800f824 <f_write+0x150>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2201      	movs	r2, #1
 800f81e:	755a      	strb	r2, [r3, #21]
 800f820:	2301      	movs	r3, #1
 800f822:	e0c8      	b.n	800f9b6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	7d1b      	ldrb	r3, [r3, #20]
 800f828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f82c:	b2da      	uxtb	r2, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	69db      	ldr	r3, [r3, #28]
 800f838:	4619      	mov	r1, r3
 800f83a:	4610      	mov	r0, r2
 800f83c:	f7fe f806 	bl	800d84c <clust2sect>
 800f840:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d104      	bne.n	800f852 <f_write+0x17e>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2202      	movs	r2, #2
 800f84c:	755a      	strb	r2, [r3, #21]
 800f84e:	2302      	movs	r3, #2
 800f850:	e0b1      	b.n	800f9b6 <f_write+0x2e2>
			sect += csect;
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	4413      	add	r3, r2
 800f858:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	0a5b      	lsrs	r3, r3, #9
 800f85e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f860:	6a3b      	ldr	r3, [r7, #32]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d03c      	beq.n	800f8e0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f866:	69ba      	ldr	r2, [r7, #24]
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	4413      	add	r3, r2
 800f86c:	693a      	ldr	r2, [r7, #16]
 800f86e:	8952      	ldrh	r2, [r2, #10]
 800f870:	4293      	cmp	r3, r2
 800f872:	d905      	bls.n	800f880 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	895b      	ldrh	r3, [r3, #10]
 800f878:	461a      	mov	r2, r3
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	1ad3      	subs	r3, r2, r3
 800f87e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	7858      	ldrb	r0, [r3, #1]
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	69f9      	ldr	r1, [r7, #28]
 800f88a:	f7fd fc55 	bl	800d138 <disk_write>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d004      	beq.n	800f89e <f_write+0x1ca>
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2201      	movs	r2, #1
 800f898:	755a      	strb	r2, [r3, #21]
 800f89a:	2301      	movs	r3, #1
 800f89c:	e08b      	b.n	800f9b6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6a1a      	ldr	r2, [r3, #32]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	6a3a      	ldr	r2, [r7, #32]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d915      	bls.n	800f8d8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a1a      	ldr	r2, [r3, #32]
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	025b      	lsls	r3, r3, #9
 800f8bc:	69fa      	ldr	r2, [r7, #28]
 800f8be:	4413      	add	r3, r2
 800f8c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	f7fd fcf7 	bl	800d2b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	7d1b      	ldrb	r3, [r3, #20]
 800f8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f8d8:	6a3b      	ldr	r3, [r7, #32]
 800f8da:	025b      	lsls	r3, r3, #9
 800f8dc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f8de:	e03f      	b.n	800f960 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6a1b      	ldr	r3, [r3, #32]
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d016      	beq.n	800f918 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	699a      	ldr	r2, [r3, #24]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d210      	bcs.n	800f918 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	7858      	ldrb	r0, [r3, #1]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f900:	2301      	movs	r3, #1
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	f7fd fbf8 	bl	800d0f8 <disk_read>
 800f908:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d004      	beq.n	800f918 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2201      	movs	r2, #1
 800f912:	755a      	strb	r2, [r3, #21]
 800f914:	2301      	movs	r3, #1
 800f916:	e04e      	b.n	800f9b6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	697a      	ldr	r2, [r7, #20]
 800f91c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f926:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f92a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	429a      	cmp	r2, r3
 800f932:	d901      	bls.n	800f938 <f_write+0x264>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f946:	4413      	add	r3, r2
 800f948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f94a:	69f9      	ldr	r1, [r7, #28]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fd fcb3 	bl	800d2b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	7d1b      	ldrb	r3, [r3, #20]
 800f956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f960:	69fa      	ldr	r2, [r7, #28]
 800f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f964:	4413      	add	r3, r2
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	699a      	ldr	r2, [r3, #24]
 800f96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96e:	441a      	add	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	619a      	str	r2, [r3, #24]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	68da      	ldr	r2, [r3, #12]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	bf38      	it	cc
 800f980:	461a      	movcc	r2, r3
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	60da      	str	r2, [r3, #12]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98c:	441a      	add	r2, r3
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f47f aed4 	bne.w	800f74a <f_write+0x76>
 800f9a2:	e000      	b.n	800f9a6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	7d1b      	ldrb	r3, [r3, #20]
 800f9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3730      	adds	r7, #48	; 0x30
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b086      	sub	sp, #24
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f107 0208 	add.w	r2, r7, #8
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff fc36 	bl	800f240 <validate>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d168      	bne.n	800fab0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	7d1b      	ldrb	r3, [r3, #20]
 800f9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d062      	beq.n	800fab0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	7d1b      	ldrb	r3, [r3, #20]
 800f9ee:	b25b      	sxtb	r3, r3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	da15      	bge.n	800fa20 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	7858      	ldrb	r0, [r3, #1]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6a1a      	ldr	r2, [r3, #32]
 800fa02:	2301      	movs	r3, #1
 800fa04:	f7fd fb98 	bl	800d138 <disk_write>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <f_sync+0x54>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e04f      	b.n	800fab2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fa20:	f7fd fb04 	bl	800d02c <get_fattime>
 800fa24:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4610      	mov	r0, r2
 800fa30:	f7fd fe70 	bl	800d714 <move_window>
 800fa34:	4603      	mov	r3, r0
 800fa36:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d138      	bne.n	800fab0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa42:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	330b      	adds	r3, #11
 800fa48:	781a      	ldrb	r2, [r3, #0]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	330b      	adds	r3, #11
 800fa4e:	f042 0220 	orr.w	r2, r2, #32
 800fa52:	b2d2      	uxtb	r2, r2
 800fa54:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	689b      	ldr	r3, [r3, #8]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	68f9      	ldr	r1, [r7, #12]
 800fa62:	f7fe fb7d 	bl	800e160 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f103 021c 	add.w	r2, r3, #28
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7fd fbf4 	bl	800d260 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	3316      	adds	r3, #22
 800fa7c:	6939      	ldr	r1, [r7, #16]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fd fbee 	bl	800d260 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	3312      	adds	r3, #18
 800fa88:	2100      	movs	r1, #0
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fd fbcd 	bl	800d22a <st_word>
					fs->wflag = 1;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	2201      	movs	r2, #1
 800fa94:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fd fe69 	bl	800d770 <sync_fs>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	7d1b      	ldrb	r3, [r3, #20]
 800faa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b084      	sub	sp, #16
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff ff7b 	bl	800f9be <f_sync>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800facc:	7bfb      	ldrb	r3, [r7, #15]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d118      	bne.n	800fb04 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f107 0208 	add.w	r2, r7, #8
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7ff fbb0 	bl	800f240 <validate>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10c      	bne.n	800fb04 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fd fd6c 	bl	800d5cc <dec_lock>
 800faf4:	4603      	mov	r3, r0
 800faf6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800faf8:	7bfb      	ldrb	r3, [r7, #15]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d102      	bne.n	800fb04 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b09d      	sub	sp, #116	; 0x74
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	607a      	str	r2, [r7, #4]
 800fb1a:	603b      	str	r3, [r7, #0]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800fb20:	2301      	movs	r3, #1
 800fb22:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800fb24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb28:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800fb2a:	f107 030c 	add.w	r3, r7, #12
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff f89f 	bl	800ec72 <get_ldnumber>
 800fb34:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	da02      	bge.n	800fb42 <f_mkfs+0x32>
 800fb3c:	230b      	movs	r3, #11
 800fb3e:	f000 bc0d 	b.w	801035c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800fb42:	4a94      	ldr	r2, [pc, #592]	; (800fd94 <f_mkfs+0x284>)
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d005      	beq.n	800fb5a <f_mkfs+0x4a>
 800fb4e:	4a91      	ldr	r2, [pc, #580]	; (800fd94 <f_mkfs+0x284>)
 800fb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb56:	2200      	movs	r2, #0
 800fb58:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800fb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800fb60:	2300      	movs	r3, #0
 800fb62:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800fb66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fd fa9e 	bl	800d0ac <disk_initialize>
 800fb70:	4603      	mov	r3, r0
 800fb72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800fb76:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <f_mkfs+0x76>
 800fb82:	2303      	movs	r3, #3
 800fb84:	e3ea      	b.n	801035c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800fb86:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fb8a:	f003 0304 	and.w	r3, r3, #4
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <f_mkfs+0x86>
 800fb92:	230a      	movs	r3, #10
 800fb94:	e3e2      	b.n	801035c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800fb96:	f107 0214 	add.w	r2, r7, #20
 800fb9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb9e:	2103      	movs	r1, #3
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fd fae9 	bl	800d178 <disk_ioctl>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d10c      	bne.n	800fbc6 <f_mkfs+0xb6>
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <f_mkfs+0xb6>
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbb8:	d805      	bhi.n	800fbc6 <f_mkfs+0xb6>
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	1e5a      	subs	r2, r3, #1
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	4013      	ands	r3, r2
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <f_mkfs+0xba>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800fbca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbce:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d003      	beq.n	800fbde <f_mkfs+0xce>
 800fbd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d309      	bcc.n	800fbf2 <f_mkfs+0xe2>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbe4:	d805      	bhi.n	800fbf2 <f_mkfs+0xe2>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	1e5a      	subs	r2, r3, #1
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4013      	ands	r3, r2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <f_mkfs+0xe6>
 800fbf2:	2313      	movs	r3, #19
 800fbf4:	e3b2      	b.n	801035c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800fbf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbfe:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800fc04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800fc10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	fb02 f303 	mul.w	r3, r2, r3
 800fc18:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800fc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <f_mkfs+0x114>
 800fc20:	230e      	movs	r3, #14
 800fc22:	e39b      	b.n	801035c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800fc24:	f107 0210 	add.w	r2, r7, #16
 800fc28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fd faa2 	bl	800d178 <disk_ioctl>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <f_mkfs+0x12e>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e38e      	b.n	801035c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800fc3e:	7afb      	ldrb	r3, [r7, #11]
 800fc40:	f003 0308 	and.w	r3, r3, #8
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <f_mkfs+0x13c>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	e000      	b.n	800fc4e <f_mkfs+0x13e>
 800fc4c:	233f      	movs	r3, #63	; 0x3f
 800fc4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d901      	bls.n	800fc5c <f_mkfs+0x14c>
 800fc58:	230e      	movs	r3, #14
 800fc5a:	e37f      	b.n	801035c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	2b7f      	cmp	r3, #127	; 0x7f
 800fc68:	d801      	bhi.n	800fc6e <f_mkfs+0x15e>
 800fc6a:	230e      	movs	r3, #14
 800fc6c:	e376      	b.n	801035c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2b80      	cmp	r3, #128	; 0x80
 800fc72:	d901      	bls.n	800fc78 <f_mkfs+0x168>
 800fc74:	2313      	movs	r3, #19
 800fc76:	e371      	b.n	801035c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fc78:	7afb      	ldrb	r3, [r7, #11]
 800fc7a:	f003 0302 	and.w	r3, r3, #2
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00d      	beq.n	800fc9e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fc82:	7afb      	ldrb	r3, [r7, #11]
 800fc84:	f003 0307 	and.w	r3, r3, #7
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d004      	beq.n	800fc96 <f_mkfs+0x186>
 800fc8c:	7afb      	ldrb	r3, [r7, #11]
 800fc8e:	f003 0301 	and.w	r3, r3, #1
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d103      	bne.n	800fc9e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fc96:	2303      	movs	r3, #3
 800fc98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fc9c:	e009      	b.n	800fcb2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fc9e:	7afb      	ldrb	r3, [r7, #11]
 800fca0:	f003 0301 	and.w	r3, r3, #1
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <f_mkfs+0x19c>
 800fca8:	2313      	movs	r3, #19
 800fcaa:	e357      	b.n	801035c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fcac:	2302      	movs	r3, #2
 800fcae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fcb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fcba:	2b03      	cmp	r3, #3
 800fcbc:	d13c      	bne.n	800fd38 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fcbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d11b      	bne.n	800fcfc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	0c5b      	lsrs	r3, r3, #17
 800fcc8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fcca:	2300      	movs	r3, #0
 800fccc:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcce:	2301      	movs	r3, #1
 800fcd0:	653b      	str	r3, [r7, #80]	; 0x50
 800fcd2:	e005      	b.n	800fce0 <f_mkfs+0x1d0>
 800fcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	653b      	str	r3, [r7, #80]	; 0x50
 800fce0:	4a2d      	ldr	r2, [pc, #180]	; (800fd98 <f_mkfs+0x288>)
 800fce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d007      	beq.n	800fcfc <f_mkfs+0x1ec>
 800fcec:	4a2a      	ldr	r2, [pc, #168]	; (800fd98 <f_mkfs+0x288>)
 800fcee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d2eb      	bcs.n	800fcd4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fcfc:	693a      	ldr	r2, [r7, #16]
 800fcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd04:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	3302      	adds	r3, #2
 800fd0a:	009a      	lsls	r2, r3, #2
 800fd0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd0e:	4413      	add	r3, r2
 800fd10:	1e5a      	subs	r2, r3, #1
 800fd12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd14:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd18:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fd1a:	2320      	movs	r3, #32
 800fd1c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fd1e:	2300      	movs	r3, #0
 800fd20:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fd22:	6a3b      	ldr	r3, [r7, #32]
 800fd24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d903      	bls.n	800fd34 <f_mkfs+0x224>
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	4a1b      	ldr	r2, [pc, #108]	; (800fd9c <f_mkfs+0x28c>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d952      	bls.n	800fdda <f_mkfs+0x2ca>
 800fd34:	230e      	movs	r3, #14
 800fd36:	e311      	b.n	801035c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800fd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d11b      	bne.n	800fd76 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	0b1b      	lsrs	r3, r3, #12
 800fd42:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fd44:	2300      	movs	r3, #0
 800fd46:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd48:	2301      	movs	r3, #1
 800fd4a:	653b      	str	r3, [r7, #80]	; 0x50
 800fd4c:	e005      	b.n	800fd5a <f_mkfs+0x24a>
 800fd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd50:	3301      	adds	r3, #1
 800fd52:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd56:	005b      	lsls	r3, r3, #1
 800fd58:	653b      	str	r3, [r7, #80]	; 0x50
 800fd5a:	4a11      	ldr	r2, [pc, #68]	; (800fda0 <f_mkfs+0x290>)
 800fd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d007      	beq.n	800fd76 <f_mkfs+0x266>
 800fd66:	4a0e      	ldr	r2, [pc, #56]	; (800fda0 <f_mkfs+0x290>)
 800fd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd6e:	461a      	mov	r2, r3
 800fd70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d2eb      	bcs.n	800fd4e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fd76:	693a      	ldr	r2, [r7, #16]
 800fd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd7e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fd80:	6a3b      	ldr	r3, [r7, #32]
 800fd82:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d90c      	bls.n	800fda4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fd8a:	6a3b      	ldr	r3, [r7, #32]
 800fd8c:	3302      	adds	r3, #2
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd92:	e012      	b.n	800fdba <f_mkfs+0x2aa>
 800fd94:	2001fbec 	.word	0x2001fbec
 800fd98:	080121ac 	.word	0x080121ac
 800fd9c:	0ffffff5 	.word	0x0ffffff5
 800fda0:	080121bc 	.word	0x080121bc
				} else {
					fmt = FS_FAT12;
 800fda4:	2301      	movs	r3, #1
 800fda6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fdaa:	6a3a      	ldr	r2, [r7, #32]
 800fdac:	4613      	mov	r3, r2
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	085b      	lsrs	r3, r3, #1
 800fdb6:	3303      	adds	r3, #3
 800fdb8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fdba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fdbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdbe:	4413      	add	r3, r2
 800fdc0:	1e5a      	subs	r2, r3, #1
 800fdc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdc8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800fdca:	2301      	movs	r3, #1
 800fdcc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800fdce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdd8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fdda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdde:	4413      	add	r3, r2
 800fde0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fde2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fde4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fde6:	fb03 f202 	mul.w	r2, r3, r2
 800fdea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdec:	4413      	add	r3, r2
 800fdee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdf0:	4413      	add	r3, r2
 800fdf2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	1e5a      	subs	r2, r3, #1
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	425b      	negs	r3, r3
 800fe00:	401a      	ands	r2, r3
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fe08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe0c:	2b03      	cmp	r3, #3
 800fe0e:	d108      	bne.n	800fe22 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fe10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe14:	4413      	add	r3, r2
 800fe16:	657b      	str	r3, [r7, #84]	; 0x54
 800fe18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe1c:	4413      	add	r3, r2
 800fe1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe20:	e006      	b.n	800fe30 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800fe22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe26:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe2c:	4413      	add	r3, r2
 800fe2e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800fe30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe32:	011a      	lsls	r2, r3, #4
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	441a      	add	r2, r3
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	1ad2      	subs	r2, r2, r3
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d901      	bls.n	800fe46 <f_mkfs+0x336>
 800fe42:	230e      	movs	r3, #14
 800fe44:	e28a      	b.n	801035c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800fe46:	693a      	ldr	r2, [r7, #16]
 800fe48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe4a:	1ad2      	subs	r2, r2, r3
 800fe4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe50:	fb01 f303 	mul.w	r3, r1, r3
 800fe54:	1ad2      	subs	r2, r2, r3
 800fe56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe58:	1ad2      	subs	r2, r2, r3
 800fe5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe60:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800fe62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	d10f      	bne.n	800fe8a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800fe6a:	6a3b      	ldr	r3, [r7, #32]
 800fe6c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d80a      	bhi.n	800fe8a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d105      	bne.n	800fe86 <f_mkfs+0x376>
 800fe7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe7c:	085b      	lsrs	r3, r3, #1
 800fe7e:	607b      	str	r3, [r7, #4]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d144      	bne.n	800ff10 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fe86:	230e      	movs	r3, #14
 800fe88:	e268      	b.n	801035c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fe8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d133      	bne.n	800fefa <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d91e      	bls.n	800feda <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d107      	bne.n	800feb2 <f_mkfs+0x3a2>
 800fea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fea4:	005b      	lsls	r3, r3, #1
 800fea6:	2b40      	cmp	r3, #64	; 0x40
 800fea8:	d803      	bhi.n	800feb2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800feaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	607b      	str	r3, [r7, #4]
 800feb0:	e033      	b.n	800ff1a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800feb2:	7afb      	ldrb	r3, [r7, #11]
 800feb4:	f003 0302 	and.w	r3, r3, #2
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d003      	beq.n	800fec4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800febc:	2303      	movs	r3, #3
 800febe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fec2:	e02a      	b.n	800ff1a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d105      	bne.n	800fed6 <f_mkfs+0x3c6>
 800feca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	607b      	str	r3, [r7, #4]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b80      	cmp	r3, #128	; 0x80
 800fed4:	d91e      	bls.n	800ff14 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800fed6:	230e      	movs	r3, #14
 800fed8:	e240      	b.n	801035c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800feda:	6a3b      	ldr	r3, [r7, #32]
 800fedc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d80a      	bhi.n	800fefa <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d105      	bne.n	800fef6 <f_mkfs+0x3e6>
 800feea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feec:	005b      	lsls	r3, r3, #1
 800feee:	607b      	str	r3, [r7, #4]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b80      	cmp	r3, #128	; 0x80
 800fef4:	d910      	bls.n	800ff18 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800fef6:	230e      	movs	r3, #14
 800fef8:	e230      	b.n	801035c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800fefa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d10c      	bne.n	800ff1c <f_mkfs+0x40c>
 800ff02:	6a3b      	ldr	r3, [r7, #32]
 800ff04:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d907      	bls.n	800ff1c <f_mkfs+0x40c>
 800ff0c:	230e      	movs	r3, #14
 800ff0e:	e225      	b.n	801035c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ff10:	bf00      	nop
 800ff12:	e6ce      	b.n	800fcb2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ff14:	bf00      	nop
 800ff16:	e6cc      	b.n	800fcb2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ff18:	bf00      	nop
			pau = au;
 800ff1a:	e6ca      	b.n	800fcb2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ff1c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ff1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff20:	461a      	mov	r2, r3
 800ff22:	2100      	movs	r1, #0
 800ff24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff26:	f7fd f9e8 	bl	800d2fa <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ff2a:	220b      	movs	r2, #11
 800ff2c:	49b2      	ldr	r1, [pc, #712]	; (80101f8 <f_mkfs+0x6e8>)
 800ff2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff30:	f7fd f9c2 	bl	800d2b8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ff34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff36:	330b      	adds	r3, #11
 800ff38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fd f974 	bl	800d22a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	330d      	adds	r3, #13
 800ff46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff48:	b2d2      	uxtb	r2, r2
 800ff4a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ff4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4e:	330e      	adds	r3, #14
 800ff50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff52:	b292      	uxth	r2, r2
 800ff54:	4611      	mov	r1, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fd f967 	bl	800d22a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ff5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5e:	3310      	adds	r3, #16
 800ff60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff62:	b2d2      	uxtb	r2, r2
 800ff64:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	f103 0211 	add.w	r2, r3, #17
 800ff6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff70:	2b03      	cmp	r3, #3
 800ff72:	d002      	beq.n	800ff7a <f_mkfs+0x46a>
 800ff74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	e000      	b.n	800ff7c <f_mkfs+0x46c>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	4610      	mov	r0, r2
 800ff80:	f7fd f953 	bl	800d22a <st_word>
		if (sz_vol < 0x10000) {
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff8a:	d208      	bcs.n	800ff9e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ff8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8e:	3313      	adds	r3, #19
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	b292      	uxth	r2, r2
 800ff94:	4611      	mov	r1, r2
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd f947 	bl	800d22a <st_word>
 800ff9c:	e006      	b.n	800ffac <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	3320      	adds	r3, #32
 800ffa2:	693a      	ldr	r2, [r7, #16]
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fd f95a 	bl	800d260 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	3315      	adds	r3, #21
 800ffb0:	22f8      	movs	r2, #248	; 0xf8
 800ffb2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb6:	3318      	adds	r3, #24
 800ffb8:	213f      	movs	r1, #63	; 0x3f
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fd f935 	bl	800d22a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc2:	331a      	adds	r3, #26
 800ffc4:	21ff      	movs	r1, #255	; 0xff
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fd f92f 	bl	800d22a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffce:	331c      	adds	r3, #28
 800ffd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fd f944 	bl	800d260 <st_dword>
		if (fmt == FS_FAT32) {
 800ffd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffdc:	2b03      	cmp	r3, #3
 800ffde:	d131      	bne.n	8010044 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ffe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ffe6:	f7fd f821 	bl	800d02c <get_fattime>
 800ffea:	4603      	mov	r3, r0
 800ffec:	4619      	mov	r1, r3
 800ffee:	4620      	mov	r0, r4
 800fff0:	f7fd f936 	bl	800d260 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800fff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff6:	3324      	adds	r3, #36	; 0x24
 800fff8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fd f930 	bl	800d260 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010002:	332c      	adds	r3, #44	; 0x2c
 8010004:	2102      	movs	r1, #2
 8010006:	4618      	mov	r0, r3
 8010008:	f7fd f92a 	bl	800d260 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000e:	3330      	adds	r3, #48	; 0x30
 8010010:	2101      	movs	r1, #1
 8010012:	4618      	mov	r0, r3
 8010014:	f7fd f909 	bl	800d22a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001a:	3332      	adds	r3, #50	; 0x32
 801001c:	2106      	movs	r1, #6
 801001e:	4618      	mov	r0, r3
 8010020:	f7fd f903 	bl	800d22a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010026:	3340      	adds	r3, #64	; 0x40
 8010028:	2280      	movs	r2, #128	; 0x80
 801002a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801002c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002e:	3342      	adds	r3, #66	; 0x42
 8010030:	2229      	movs	r2, #41	; 0x29
 8010032:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	3347      	adds	r3, #71	; 0x47
 8010038:	2213      	movs	r2, #19
 801003a:	4970      	ldr	r1, [pc, #448]	; (80101fc <f_mkfs+0x6ec>)
 801003c:	4618      	mov	r0, r3
 801003e:	f7fd f93b 	bl	800d2b8 <mem_cpy>
 8010042:	e020      	b.n	8010086 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	f103 0427 	add.w	r4, r3, #39	; 0x27
 801004a:	f7fc ffef 	bl	800d02c <get_fattime>
 801004e:	4603      	mov	r3, r0
 8010050:	4619      	mov	r1, r3
 8010052:	4620      	mov	r0, r4
 8010054:	f7fd f904 	bl	800d260 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	3316      	adds	r3, #22
 801005c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801005e:	b292      	uxth	r2, r2
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd f8e1 	bl	800d22a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006a:	3324      	adds	r3, #36	; 0x24
 801006c:	2280      	movs	r2, #128	; 0x80
 801006e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	3326      	adds	r3, #38	; 0x26
 8010074:	2229      	movs	r2, #41	; 0x29
 8010076:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007a:	332b      	adds	r3, #43	; 0x2b
 801007c:	2213      	movs	r2, #19
 801007e:	4960      	ldr	r1, [pc, #384]	; (8010200 <f_mkfs+0x6f0>)
 8010080:	4618      	mov	r0, r3
 8010082:	f7fd f919 	bl	800d2b8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010088:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801008c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010090:	4618      	mov	r0, r3
 8010092:	f7fd f8ca 	bl	800d22a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010096:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801009a:	2301      	movs	r3, #1
 801009c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801009e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100a0:	f7fd f84a 	bl	800d138 <disk_write>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <f_mkfs+0x59e>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e156      	b.n	801035c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80100ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100b2:	2b03      	cmp	r3, #3
 80100b4:	d140      	bne.n	8010138 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b8:	1d9a      	adds	r2, r3, #6
 80100ba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80100be:	2301      	movs	r3, #1
 80100c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100c2:	f7fd f839 	bl	800d138 <disk_write>
			mem_set(buf, 0, ss);
 80100c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80100c8:	461a      	mov	r2, r3
 80100ca:	2100      	movs	r1, #0
 80100cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ce:	f7fd f914 	bl	800d2fa <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80100d2:	494c      	ldr	r1, [pc, #304]	; (8010204 <f_mkfs+0x6f4>)
 80100d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100d6:	f7fd f8c3 	bl	800d260 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80100da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80100e0:	4949      	ldr	r1, [pc, #292]	; (8010208 <f_mkfs+0x6f8>)
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fd f8bc 	bl	800d260 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	4619      	mov	r1, r3
 80100f4:	4610      	mov	r0, r2
 80100f6:	f7fd f8b3 	bl	800d260 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010100:	2102      	movs	r1, #2
 8010102:	4618      	mov	r0, r3
 8010104:	f7fd f8ac 	bl	800d260 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801010e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd f889 	bl	800d22a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	1dda      	adds	r2, r3, #7
 801011c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010120:	2301      	movs	r3, #1
 8010122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010124:	f7fd f808 	bl	800d138 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010130:	2301      	movs	r3, #1
 8010132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010134:	f7fd f800 	bl	800d138 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801013a:	2100      	movs	r1, #0
 801013c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801013e:	f7fd f8dc 	bl	800d2fa <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010144:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010146:	2300      	movs	r3, #0
 8010148:	64bb      	str	r3, [r7, #72]	; 0x48
 801014a:	e04b      	b.n	80101e4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 801014c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010150:	2b03      	cmp	r3, #3
 8010152:	d113      	bne.n	801017c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010154:	f06f 0107 	mvn.w	r1, #7
 8010158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801015a:	f7fd f881 	bl	800d260 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	3304      	adds	r3, #4
 8010162:	f04f 31ff 	mov.w	r1, #4294967295
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd f87a 	bl	800d260 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 801016c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016e:	3308      	adds	r3, #8
 8010170:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010174:	4618      	mov	r0, r3
 8010176:	f7fd f873 	bl	800d260 <st_dword>
 801017a:	e00b      	b.n	8010194 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801017c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010180:	2b01      	cmp	r3, #1
 8010182:	d101      	bne.n	8010188 <f_mkfs+0x678>
 8010184:	4b21      	ldr	r3, [pc, #132]	; (801020c <f_mkfs+0x6fc>)
 8010186:	e001      	b.n	801018c <f_mkfs+0x67c>
 8010188:	f06f 0307 	mvn.w	r3, #7
 801018c:	4619      	mov	r1, r3
 801018e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010190:	f7fd f866 	bl	800d260 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010196:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019c:	4293      	cmp	r3, r2
 801019e:	bf28      	it	cs
 80101a0:	4613      	movcs	r3, r2
 80101a2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80101a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80101a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80101ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101ae:	f7fc ffc3 	bl	800d138 <disk_write>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <f_mkfs+0x6ac>
 80101b8:	2301      	movs	r3, #1
 80101ba:	e0cf      	b.n	801035c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80101bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80101be:	461a      	mov	r2, r3
 80101c0:	2100      	movs	r1, #0
 80101c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c4:	f7fd f899 	bl	800d2fa <mem_set>
				sect += n; nsect -= n;
 80101c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80101ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101cc:	4413      	add	r3, r2
 80101ce:	667b      	str	r3, [r7, #100]	; 0x64
 80101d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80101d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1dc      	bne.n	8010198 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80101de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101e0:	3301      	adds	r3, #1
 80101e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80101e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d3af      	bcc.n	801014c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80101ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	d10d      	bne.n	8010210 <f_mkfs+0x700>
 80101f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f6:	e00c      	b.n	8010212 <f_mkfs+0x702>
 80101f8:	08011ac4 	.word	0x08011ac4
 80101fc:	08011ad0 	.word	0x08011ad0
 8010200:	08011ae4 	.word	0x08011ae4
 8010204:	41615252 	.word	0x41615252
 8010208:	61417272 	.word	0x61417272
 801020c:	00fffff8 	.word	0x00fffff8
 8010210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010212:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010218:	4293      	cmp	r3, r2
 801021a:	bf28      	it	cs
 801021c:	4613      	movcs	r3, r2
 801021e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010220:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801022a:	f7fc ff85 	bl	800d138 <disk_write>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d001      	beq.n	8010238 <f_mkfs+0x728>
 8010234:	2301      	movs	r3, #1
 8010236:	e091      	b.n	801035c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010238:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801023a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801023c:	4413      	add	r3, r2
 801023e:	667b      	str	r3, [r7, #100]	; 0x64
 8010240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1e2      	bne.n	8010214 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801024e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010252:	2b03      	cmp	r3, #3
 8010254:	d103      	bne.n	801025e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010256:	230c      	movs	r3, #12
 8010258:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801025c:	e010      	b.n	8010280 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010264:	d303      	bcc.n	801026e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010266:	2306      	movs	r3, #6
 8010268:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801026c:	e008      	b.n	8010280 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801026e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010272:	2b02      	cmp	r3, #2
 8010274:	d101      	bne.n	801027a <f_mkfs+0x76a>
 8010276:	2304      	movs	r3, #4
 8010278:	e000      	b.n	801027c <f_mkfs+0x76c>
 801027a:	2301      	movs	r3, #1
 801027c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010280:	7afb      	ldrb	r3, [r7, #11]
 8010282:	f003 0308 	and.w	r3, r3, #8
 8010286:	2b00      	cmp	r3, #0
 8010288:	d15b      	bne.n	8010342 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801028a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801028c:	461a      	mov	r2, r3
 801028e:	2100      	movs	r1, #0
 8010290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010292:	f7fd f832 	bl	800d2fa <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801029c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fc ffc2 	bl	800d22a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80102ac:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	2200      	movs	r2, #0
 80102b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	3301      	adds	r3, #1
 80102b8:	2201      	movs	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	3302      	adds	r3, #2
 80102c0:	2201      	movs	r2, #1
 80102c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	3303      	adds	r3, #3
 80102c8:	2200      	movs	r2, #0
 80102ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	3304      	adds	r3, #4
 80102d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80102d4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	441a      	add	r2, r3
 80102dc:	4b21      	ldr	r3, [pc, #132]	; (8010364 <f_mkfs+0x854>)
 80102de:	fba3 1302 	umull	r1, r3, r3, r2
 80102e2:	1ad2      	subs	r2, r2, r3
 80102e4:	0852      	lsrs	r2, r2, #1
 80102e6:	4413      	add	r3, r2
 80102e8:	0b5b      	lsrs	r3, r3, #13
 80102ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	3305      	adds	r3, #5
 80102f0:	22fe      	movs	r2, #254	; 0xfe
 80102f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80102f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f6:	089b      	lsrs	r3, r3, #2
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	3306      	adds	r3, #6
 80102fe:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010302:	b2d2      	uxtb	r2, r2
 8010304:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	3307      	adds	r3, #7
 801030a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801030c:	b2d2      	uxtb	r2, r2
 801030e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	3308      	adds	r3, #8
 8010314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010316:	4618      	mov	r0, r3
 8010318:	f7fc ffa2 	bl	800d260 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	330c      	adds	r3, #12
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f7fc ff9b 	bl	800d260 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801032a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801032e:	2301      	movs	r3, #1
 8010330:	2200      	movs	r2, #0
 8010332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010334:	f7fc ff00 	bl	800d138 <disk_write>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <f_mkfs+0x832>
 801033e:	2301      	movs	r3, #1
 8010340:	e00c      	b.n	801035c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010342:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010346:	2200      	movs	r2, #0
 8010348:	2100      	movs	r1, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f7fc ff14 	bl	800d178 <disk_ioctl>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <f_mkfs+0x84a>
 8010356:	2301      	movs	r3, #1
 8010358:	e000      	b.n	801035c <f_mkfs+0x84c>

	return FR_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3774      	adds	r7, #116	; 0x74
 8010360:	46bd      	mov	sp, r7
 8010362:	bd90      	pop	{r4, r7, pc}
 8010364:	0515565b 	.word	0x0515565b

08010368 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010368:	b480      	push	{r7}
 801036a:	b087      	sub	sp, #28
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	4613      	mov	r3, r2
 8010374:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010376:	2301      	movs	r3, #1
 8010378:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801037e:	4b1f      	ldr	r3, [pc, #124]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 8010380:	7a5b      	ldrb	r3, [r3, #9]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d131      	bne.n	80103ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010388:	4b1c      	ldr	r3, [pc, #112]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 801038a:	7a5b      	ldrb	r3, [r3, #9]
 801038c:	b2db      	uxtb	r3, r3
 801038e:	461a      	mov	r2, r3
 8010390:	4b1a      	ldr	r3, [pc, #104]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 8010392:	2100      	movs	r1, #0
 8010394:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010396:	4b19      	ldr	r3, [pc, #100]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 8010398:	7a5b      	ldrb	r3, [r3, #9]
 801039a:	b2db      	uxtb	r3, r3
 801039c:	4a17      	ldr	r2, [pc, #92]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	68fa      	ldr	r2, [r7, #12]
 80103a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80103a6:	4b15      	ldr	r3, [pc, #84]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 80103a8:	7a5b      	ldrb	r3, [r3, #9]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	461a      	mov	r2, r3
 80103ae:	4b13      	ldr	r3, [pc, #76]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 80103b0:	4413      	add	r3, r2
 80103b2:	79fa      	ldrb	r2, [r7, #7]
 80103b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80103b6:	4b11      	ldr	r3, [pc, #68]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 80103b8:	7a5b      	ldrb	r3, [r3, #9]
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	b2d1      	uxtb	r1, r2
 80103c0:	4a0e      	ldr	r2, [pc, #56]	; (80103fc <FATFS_LinkDriverEx+0x94>)
 80103c2:	7251      	strb	r1, [r2, #9]
 80103c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80103c6:	7dbb      	ldrb	r3, [r7, #22]
 80103c8:	3330      	adds	r3, #48	; 0x30
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	3301      	adds	r3, #1
 80103d4:	223a      	movs	r2, #58	; 0x3a
 80103d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	3302      	adds	r3, #2
 80103dc:	222f      	movs	r2, #47	; 0x2f
 80103de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	3303      	adds	r3, #3
 80103e4:	2200      	movs	r2, #0
 80103e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80103e8:	2300      	movs	r3, #0
 80103ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80103ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	371c      	adds	r7, #28
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	2001fc14 	.word	0x2001fc14

08010400 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801040a:	2200      	movs	r2, #0
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7ff ffaa 	bl	8010368 <FATFS_LinkDriverEx>
 8010414:	4603      	mov	r3, r0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f930 	bl	801068c <malloc>
 801042c:	4603      	mov	r3, r0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3708      	adds	r7, #8
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b082      	sub	sp, #8
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f92c 	bl	801069c <free>
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	6039      	str	r1, [r7, #0]
 8010456:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010458:	88fb      	ldrh	r3, [r7, #6]
 801045a:	2b7f      	cmp	r3, #127	; 0x7f
 801045c:	d802      	bhi.n	8010464 <ff_convert+0x18>
		c = chr;
 801045e:	88fb      	ldrh	r3, [r7, #6]
 8010460:	81fb      	strh	r3, [r7, #14]
 8010462:	e025      	b.n	80104b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00b      	beq.n	8010482 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801046a:	88fb      	ldrh	r3, [r7, #6]
 801046c:	2bff      	cmp	r3, #255	; 0xff
 801046e:	d805      	bhi.n	801047c <ff_convert+0x30>
 8010470:	88fb      	ldrh	r3, [r7, #6]
 8010472:	3b80      	subs	r3, #128	; 0x80
 8010474:	4a12      	ldr	r2, [pc, #72]	; (80104c0 <ff_convert+0x74>)
 8010476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801047a:	e000      	b.n	801047e <ff_convert+0x32>
 801047c:	2300      	movs	r3, #0
 801047e:	81fb      	strh	r3, [r7, #14]
 8010480:	e016      	b.n	80104b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010482:	2300      	movs	r3, #0
 8010484:	81fb      	strh	r3, [r7, #14]
 8010486:	e009      	b.n	801049c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010488:	89fb      	ldrh	r3, [r7, #14]
 801048a:	4a0d      	ldr	r2, [pc, #52]	; (80104c0 <ff_convert+0x74>)
 801048c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010490:	88fa      	ldrh	r2, [r7, #6]
 8010492:	429a      	cmp	r2, r3
 8010494:	d006      	beq.n	80104a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010496:	89fb      	ldrh	r3, [r7, #14]
 8010498:	3301      	adds	r3, #1
 801049a:	81fb      	strh	r3, [r7, #14]
 801049c:	89fb      	ldrh	r3, [r7, #14]
 801049e:	2b7f      	cmp	r3, #127	; 0x7f
 80104a0:	d9f2      	bls.n	8010488 <ff_convert+0x3c>
 80104a2:	e000      	b.n	80104a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80104a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80104a6:	89fb      	ldrh	r3, [r7, #14]
 80104a8:	3380      	adds	r3, #128	; 0x80
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80104b0:	89fb      	ldrh	r3, [r7, #14]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3714      	adds	r7, #20
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	080121cc 	.word	0x080121cc

080104c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b087      	sub	sp, #28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80104ce:	88fb      	ldrh	r3, [r7, #6]
 80104d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104d4:	d201      	bcs.n	80104da <ff_wtoupper+0x16>
 80104d6:	4b3e      	ldr	r3, [pc, #248]	; (80105d0 <ff_wtoupper+0x10c>)
 80104d8:	e000      	b.n	80104dc <ff_wtoupper+0x18>
 80104da:	4b3e      	ldr	r3, [pc, #248]	; (80105d4 <ff_wtoupper+0x110>)
 80104dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	1c9a      	adds	r2, r3, #2
 80104e2:	617a      	str	r2, [r7, #20]
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80104e8:	8a7b      	ldrh	r3, [r7, #18]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d068      	beq.n	80105c0 <ff_wtoupper+0xfc>
 80104ee:	88fa      	ldrh	r2, [r7, #6]
 80104f0:	8a7b      	ldrh	r3, [r7, #18]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d364      	bcc.n	80105c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	1c9a      	adds	r2, r3, #2
 80104fa:	617a      	str	r2, [r7, #20]
 80104fc:	881b      	ldrh	r3, [r3, #0]
 80104fe:	823b      	strh	r3, [r7, #16]
 8010500:	8a3b      	ldrh	r3, [r7, #16]
 8010502:	0a1b      	lsrs	r3, r3, #8
 8010504:	81fb      	strh	r3, [r7, #14]
 8010506:	8a3b      	ldrh	r3, [r7, #16]
 8010508:	b2db      	uxtb	r3, r3
 801050a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801050c:	88fa      	ldrh	r2, [r7, #6]
 801050e:	8a79      	ldrh	r1, [r7, #18]
 8010510:	8a3b      	ldrh	r3, [r7, #16]
 8010512:	440b      	add	r3, r1
 8010514:	429a      	cmp	r2, r3
 8010516:	da49      	bge.n	80105ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8010518:	89fb      	ldrh	r3, [r7, #14]
 801051a:	2b08      	cmp	r3, #8
 801051c:	d84f      	bhi.n	80105be <ff_wtoupper+0xfa>
 801051e:	a201      	add	r2, pc, #4	; (adr r2, 8010524 <ff_wtoupper+0x60>)
 8010520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010524:	08010549 	.word	0x08010549
 8010528:	0801055b 	.word	0x0801055b
 801052c:	08010571 	.word	0x08010571
 8010530:	08010579 	.word	0x08010579
 8010534:	08010581 	.word	0x08010581
 8010538:	08010589 	.word	0x08010589
 801053c:	08010591 	.word	0x08010591
 8010540:	08010599 	.word	0x08010599
 8010544:	080105a1 	.word	0x080105a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010548:	88fa      	ldrh	r2, [r7, #6]
 801054a:	8a7b      	ldrh	r3, [r7, #18]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	697a      	ldr	r2, [r7, #20]
 8010552:	4413      	add	r3, r2
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	80fb      	strh	r3, [r7, #6]
 8010558:	e027      	b.n	80105aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801055a:	88fa      	ldrh	r2, [r7, #6]
 801055c:	8a7b      	ldrh	r3, [r7, #18]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	b29b      	uxth	r3, r3
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	b29b      	uxth	r3, r3
 8010568:	88fa      	ldrh	r2, [r7, #6]
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	80fb      	strh	r3, [r7, #6]
 801056e:	e01c      	b.n	80105aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010570:	88fb      	ldrh	r3, [r7, #6]
 8010572:	3b10      	subs	r3, #16
 8010574:	80fb      	strh	r3, [r7, #6]
 8010576:	e018      	b.n	80105aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010578:	88fb      	ldrh	r3, [r7, #6]
 801057a:	3b20      	subs	r3, #32
 801057c:	80fb      	strh	r3, [r7, #6]
 801057e:	e014      	b.n	80105aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010580:	88fb      	ldrh	r3, [r7, #6]
 8010582:	3b30      	subs	r3, #48	; 0x30
 8010584:	80fb      	strh	r3, [r7, #6]
 8010586:	e010      	b.n	80105aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	3b1a      	subs	r3, #26
 801058c:	80fb      	strh	r3, [r7, #6]
 801058e:	e00c      	b.n	80105aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010590:	88fb      	ldrh	r3, [r7, #6]
 8010592:	3308      	adds	r3, #8
 8010594:	80fb      	strh	r3, [r7, #6]
 8010596:	e008      	b.n	80105aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010598:	88fb      	ldrh	r3, [r7, #6]
 801059a:	3b50      	subs	r3, #80	; 0x50
 801059c:	80fb      	strh	r3, [r7, #6]
 801059e:	e004      	b.n	80105aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80105a0:	88fb      	ldrh	r3, [r7, #6]
 80105a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80105a6:	80fb      	strh	r3, [r7, #6]
 80105a8:	bf00      	nop
			}
			break;
 80105aa:	e008      	b.n	80105be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80105ac:	89fb      	ldrh	r3, [r7, #14]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d195      	bne.n	80104de <ff_wtoupper+0x1a>
 80105b2:	8a3b      	ldrh	r3, [r7, #16]
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	4413      	add	r3, r2
 80105ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80105bc:	e78f      	b.n	80104de <ff_wtoupper+0x1a>
			break;
 80105be:	bf00      	nop
	}

	return chr;
 80105c0:	88fb      	ldrh	r3, [r7, #6]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	371c      	adds	r7, #28
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	080122cc 	.word	0x080122cc
 80105d4:	080124c0 	.word	0x080124c0

080105d8 <__assert_func>:
 80105d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105da:	4614      	mov	r4, r2
 80105dc:	461a      	mov	r2, r3
 80105de:	4b09      	ldr	r3, [pc, #36]	; (8010604 <__assert_func+0x2c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4605      	mov	r5, r0
 80105e4:	68d8      	ldr	r0, [r3, #12]
 80105e6:	b14c      	cbz	r4, 80105fc <__assert_func+0x24>
 80105e8:	4b07      	ldr	r3, [pc, #28]	; (8010608 <__assert_func+0x30>)
 80105ea:	9100      	str	r1, [sp, #0]
 80105ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105f0:	4906      	ldr	r1, [pc, #24]	; (801060c <__assert_func+0x34>)
 80105f2:	462b      	mov	r3, r5
 80105f4:	f000 f814 	bl	8010620 <fiprintf>
 80105f8:	f000 fd8c 	bl	8011114 <abort>
 80105fc:	4b04      	ldr	r3, [pc, #16]	; (8010610 <__assert_func+0x38>)
 80105fe:	461c      	mov	r4, r3
 8010600:	e7f3      	b.n	80105ea <__assert_func+0x12>
 8010602:	bf00      	nop
 8010604:	200000b0 	.word	0x200000b0
 8010608:	0801257c 	.word	0x0801257c
 801060c:	08012589 	.word	0x08012589
 8010610:	080125b7 	.word	0x080125b7

08010614 <__errno>:
 8010614:	4b01      	ldr	r3, [pc, #4]	; (801061c <__errno+0x8>)
 8010616:	6818      	ldr	r0, [r3, #0]
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	200000b0 	.word	0x200000b0

08010620 <fiprintf>:
 8010620:	b40e      	push	{r1, r2, r3}
 8010622:	b503      	push	{r0, r1, lr}
 8010624:	4601      	mov	r1, r0
 8010626:	ab03      	add	r3, sp, #12
 8010628:	4805      	ldr	r0, [pc, #20]	; (8010640 <fiprintf+0x20>)
 801062a:	f853 2b04 	ldr.w	r2, [r3], #4
 801062e:	6800      	ldr	r0, [r0, #0]
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	f000 f94d 	bl	80108d0 <_vfiprintf_r>
 8010636:	b002      	add	sp, #8
 8010638:	f85d eb04 	ldr.w	lr, [sp], #4
 801063c:	b003      	add	sp, #12
 801063e:	4770      	bx	lr
 8010640:	200000b0 	.word	0x200000b0

08010644 <__libc_init_array>:
 8010644:	b570      	push	{r4, r5, r6, lr}
 8010646:	4d0d      	ldr	r5, [pc, #52]	; (801067c <__libc_init_array+0x38>)
 8010648:	4c0d      	ldr	r4, [pc, #52]	; (8010680 <__libc_init_array+0x3c>)
 801064a:	1b64      	subs	r4, r4, r5
 801064c:	10a4      	asrs	r4, r4, #2
 801064e:	2600      	movs	r6, #0
 8010650:	42a6      	cmp	r6, r4
 8010652:	d109      	bne.n	8010668 <__libc_init_array+0x24>
 8010654:	4d0b      	ldr	r5, [pc, #44]	; (8010684 <__libc_init_array+0x40>)
 8010656:	4c0c      	ldr	r4, [pc, #48]	; (8010688 <__libc_init_array+0x44>)
 8010658:	f001 f880 	bl	801175c <_init>
 801065c:	1b64      	subs	r4, r4, r5
 801065e:	10a4      	asrs	r4, r4, #2
 8010660:	2600      	movs	r6, #0
 8010662:	42a6      	cmp	r6, r4
 8010664:	d105      	bne.n	8010672 <__libc_init_array+0x2e>
 8010666:	bd70      	pop	{r4, r5, r6, pc}
 8010668:	f855 3b04 	ldr.w	r3, [r5], #4
 801066c:	4798      	blx	r3
 801066e:	3601      	adds	r6, #1
 8010670:	e7ee      	b.n	8010650 <__libc_init_array+0xc>
 8010672:	f855 3b04 	ldr.w	r3, [r5], #4
 8010676:	4798      	blx	r3
 8010678:	3601      	adds	r6, #1
 801067a:	e7f2      	b.n	8010662 <__libc_init_array+0x1e>
 801067c:	08012658 	.word	0x08012658
 8010680:	08012658 	.word	0x08012658
 8010684:	08012658 	.word	0x08012658
 8010688:	0801265c 	.word	0x0801265c

0801068c <malloc>:
 801068c:	4b02      	ldr	r3, [pc, #8]	; (8010698 <malloc+0xc>)
 801068e:	4601      	mov	r1, r0
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	f000 b87f 	b.w	8010794 <_malloc_r>
 8010696:	bf00      	nop
 8010698:	200000b0 	.word	0x200000b0

0801069c <free>:
 801069c:	4b02      	ldr	r3, [pc, #8]	; (80106a8 <free+0xc>)
 801069e:	4601      	mov	r1, r0
 80106a0:	6818      	ldr	r0, [r3, #0]
 80106a2:	f000 b80b 	b.w	80106bc <_free_r>
 80106a6:	bf00      	nop
 80106a8:	200000b0 	.word	0x200000b0

080106ac <memset>:
 80106ac:	4402      	add	r2, r0
 80106ae:	4603      	mov	r3, r0
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d100      	bne.n	80106b6 <memset+0xa>
 80106b4:	4770      	bx	lr
 80106b6:	f803 1b01 	strb.w	r1, [r3], #1
 80106ba:	e7f9      	b.n	80106b0 <memset+0x4>

080106bc <_free_r>:
 80106bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106be:	2900      	cmp	r1, #0
 80106c0:	d044      	beq.n	801074c <_free_r+0x90>
 80106c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106c6:	9001      	str	r0, [sp, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f1a1 0404 	sub.w	r4, r1, #4
 80106ce:	bfb8      	it	lt
 80106d0:	18e4      	addlt	r4, r4, r3
 80106d2:	f000 ff47 	bl	8011564 <__malloc_lock>
 80106d6:	4a1e      	ldr	r2, [pc, #120]	; (8010750 <_free_r+0x94>)
 80106d8:	9801      	ldr	r0, [sp, #4]
 80106da:	6813      	ldr	r3, [r2, #0]
 80106dc:	b933      	cbnz	r3, 80106ec <_free_r+0x30>
 80106de:	6063      	str	r3, [r4, #4]
 80106e0:	6014      	str	r4, [r2, #0]
 80106e2:	b003      	add	sp, #12
 80106e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106e8:	f000 bf42 	b.w	8011570 <__malloc_unlock>
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	d908      	bls.n	8010702 <_free_r+0x46>
 80106f0:	6825      	ldr	r5, [r4, #0]
 80106f2:	1961      	adds	r1, r4, r5
 80106f4:	428b      	cmp	r3, r1
 80106f6:	bf01      	itttt	eq
 80106f8:	6819      	ldreq	r1, [r3, #0]
 80106fa:	685b      	ldreq	r3, [r3, #4]
 80106fc:	1949      	addeq	r1, r1, r5
 80106fe:	6021      	streq	r1, [r4, #0]
 8010700:	e7ed      	b.n	80106de <_free_r+0x22>
 8010702:	461a      	mov	r2, r3
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	b10b      	cbz	r3, 801070c <_free_r+0x50>
 8010708:	42a3      	cmp	r3, r4
 801070a:	d9fa      	bls.n	8010702 <_free_r+0x46>
 801070c:	6811      	ldr	r1, [r2, #0]
 801070e:	1855      	adds	r5, r2, r1
 8010710:	42a5      	cmp	r5, r4
 8010712:	d10b      	bne.n	801072c <_free_r+0x70>
 8010714:	6824      	ldr	r4, [r4, #0]
 8010716:	4421      	add	r1, r4
 8010718:	1854      	adds	r4, r2, r1
 801071a:	42a3      	cmp	r3, r4
 801071c:	6011      	str	r1, [r2, #0]
 801071e:	d1e0      	bne.n	80106e2 <_free_r+0x26>
 8010720:	681c      	ldr	r4, [r3, #0]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	6053      	str	r3, [r2, #4]
 8010726:	4421      	add	r1, r4
 8010728:	6011      	str	r1, [r2, #0]
 801072a:	e7da      	b.n	80106e2 <_free_r+0x26>
 801072c:	d902      	bls.n	8010734 <_free_r+0x78>
 801072e:	230c      	movs	r3, #12
 8010730:	6003      	str	r3, [r0, #0]
 8010732:	e7d6      	b.n	80106e2 <_free_r+0x26>
 8010734:	6825      	ldr	r5, [r4, #0]
 8010736:	1961      	adds	r1, r4, r5
 8010738:	428b      	cmp	r3, r1
 801073a:	bf04      	itt	eq
 801073c:	6819      	ldreq	r1, [r3, #0]
 801073e:	685b      	ldreq	r3, [r3, #4]
 8010740:	6063      	str	r3, [r4, #4]
 8010742:	bf04      	itt	eq
 8010744:	1949      	addeq	r1, r1, r5
 8010746:	6021      	streq	r1, [r4, #0]
 8010748:	6054      	str	r4, [r2, #4]
 801074a:	e7ca      	b.n	80106e2 <_free_r+0x26>
 801074c:	b003      	add	sp, #12
 801074e:	bd30      	pop	{r4, r5, pc}
 8010750:	2001fc20 	.word	0x2001fc20

08010754 <sbrk_aligned>:
 8010754:	b570      	push	{r4, r5, r6, lr}
 8010756:	4e0e      	ldr	r6, [pc, #56]	; (8010790 <sbrk_aligned+0x3c>)
 8010758:	460c      	mov	r4, r1
 801075a:	6831      	ldr	r1, [r6, #0]
 801075c:	4605      	mov	r5, r0
 801075e:	b911      	cbnz	r1, 8010766 <sbrk_aligned+0x12>
 8010760:	f000 fc08 	bl	8010f74 <_sbrk_r>
 8010764:	6030      	str	r0, [r6, #0]
 8010766:	4621      	mov	r1, r4
 8010768:	4628      	mov	r0, r5
 801076a:	f000 fc03 	bl	8010f74 <_sbrk_r>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	d00a      	beq.n	8010788 <sbrk_aligned+0x34>
 8010772:	1cc4      	adds	r4, r0, #3
 8010774:	f024 0403 	bic.w	r4, r4, #3
 8010778:	42a0      	cmp	r0, r4
 801077a:	d007      	beq.n	801078c <sbrk_aligned+0x38>
 801077c:	1a21      	subs	r1, r4, r0
 801077e:	4628      	mov	r0, r5
 8010780:	f000 fbf8 	bl	8010f74 <_sbrk_r>
 8010784:	3001      	adds	r0, #1
 8010786:	d101      	bne.n	801078c <sbrk_aligned+0x38>
 8010788:	f04f 34ff 	mov.w	r4, #4294967295
 801078c:	4620      	mov	r0, r4
 801078e:	bd70      	pop	{r4, r5, r6, pc}
 8010790:	2001fc24 	.word	0x2001fc24

08010794 <_malloc_r>:
 8010794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010798:	1ccd      	adds	r5, r1, #3
 801079a:	f025 0503 	bic.w	r5, r5, #3
 801079e:	3508      	adds	r5, #8
 80107a0:	2d0c      	cmp	r5, #12
 80107a2:	bf38      	it	cc
 80107a4:	250c      	movcc	r5, #12
 80107a6:	2d00      	cmp	r5, #0
 80107a8:	4607      	mov	r7, r0
 80107aa:	db01      	blt.n	80107b0 <_malloc_r+0x1c>
 80107ac:	42a9      	cmp	r1, r5
 80107ae:	d905      	bls.n	80107bc <_malloc_r+0x28>
 80107b0:	230c      	movs	r3, #12
 80107b2:	603b      	str	r3, [r7, #0]
 80107b4:	2600      	movs	r6, #0
 80107b6:	4630      	mov	r0, r6
 80107b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107bc:	4e2e      	ldr	r6, [pc, #184]	; (8010878 <_malloc_r+0xe4>)
 80107be:	f000 fed1 	bl	8011564 <__malloc_lock>
 80107c2:	6833      	ldr	r3, [r6, #0]
 80107c4:	461c      	mov	r4, r3
 80107c6:	bb34      	cbnz	r4, 8010816 <_malloc_r+0x82>
 80107c8:	4629      	mov	r1, r5
 80107ca:	4638      	mov	r0, r7
 80107cc:	f7ff ffc2 	bl	8010754 <sbrk_aligned>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	4604      	mov	r4, r0
 80107d4:	d14d      	bne.n	8010872 <_malloc_r+0xde>
 80107d6:	6834      	ldr	r4, [r6, #0]
 80107d8:	4626      	mov	r6, r4
 80107da:	2e00      	cmp	r6, #0
 80107dc:	d140      	bne.n	8010860 <_malloc_r+0xcc>
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	4631      	mov	r1, r6
 80107e2:	4638      	mov	r0, r7
 80107e4:	eb04 0803 	add.w	r8, r4, r3
 80107e8:	f000 fbc4 	bl	8010f74 <_sbrk_r>
 80107ec:	4580      	cmp	r8, r0
 80107ee:	d13a      	bne.n	8010866 <_malloc_r+0xd2>
 80107f0:	6821      	ldr	r1, [r4, #0]
 80107f2:	3503      	adds	r5, #3
 80107f4:	1a6d      	subs	r5, r5, r1
 80107f6:	f025 0503 	bic.w	r5, r5, #3
 80107fa:	3508      	adds	r5, #8
 80107fc:	2d0c      	cmp	r5, #12
 80107fe:	bf38      	it	cc
 8010800:	250c      	movcc	r5, #12
 8010802:	4629      	mov	r1, r5
 8010804:	4638      	mov	r0, r7
 8010806:	f7ff ffa5 	bl	8010754 <sbrk_aligned>
 801080a:	3001      	adds	r0, #1
 801080c:	d02b      	beq.n	8010866 <_malloc_r+0xd2>
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	442b      	add	r3, r5
 8010812:	6023      	str	r3, [r4, #0]
 8010814:	e00e      	b.n	8010834 <_malloc_r+0xa0>
 8010816:	6822      	ldr	r2, [r4, #0]
 8010818:	1b52      	subs	r2, r2, r5
 801081a:	d41e      	bmi.n	801085a <_malloc_r+0xc6>
 801081c:	2a0b      	cmp	r2, #11
 801081e:	d916      	bls.n	801084e <_malloc_r+0xba>
 8010820:	1961      	adds	r1, r4, r5
 8010822:	42a3      	cmp	r3, r4
 8010824:	6025      	str	r5, [r4, #0]
 8010826:	bf18      	it	ne
 8010828:	6059      	strne	r1, [r3, #4]
 801082a:	6863      	ldr	r3, [r4, #4]
 801082c:	bf08      	it	eq
 801082e:	6031      	streq	r1, [r6, #0]
 8010830:	5162      	str	r2, [r4, r5]
 8010832:	604b      	str	r3, [r1, #4]
 8010834:	4638      	mov	r0, r7
 8010836:	f104 060b 	add.w	r6, r4, #11
 801083a:	f000 fe99 	bl	8011570 <__malloc_unlock>
 801083e:	f026 0607 	bic.w	r6, r6, #7
 8010842:	1d23      	adds	r3, r4, #4
 8010844:	1af2      	subs	r2, r6, r3
 8010846:	d0b6      	beq.n	80107b6 <_malloc_r+0x22>
 8010848:	1b9b      	subs	r3, r3, r6
 801084a:	50a3      	str	r3, [r4, r2]
 801084c:	e7b3      	b.n	80107b6 <_malloc_r+0x22>
 801084e:	6862      	ldr	r2, [r4, #4]
 8010850:	42a3      	cmp	r3, r4
 8010852:	bf0c      	ite	eq
 8010854:	6032      	streq	r2, [r6, #0]
 8010856:	605a      	strne	r2, [r3, #4]
 8010858:	e7ec      	b.n	8010834 <_malloc_r+0xa0>
 801085a:	4623      	mov	r3, r4
 801085c:	6864      	ldr	r4, [r4, #4]
 801085e:	e7b2      	b.n	80107c6 <_malloc_r+0x32>
 8010860:	4634      	mov	r4, r6
 8010862:	6876      	ldr	r6, [r6, #4]
 8010864:	e7b9      	b.n	80107da <_malloc_r+0x46>
 8010866:	230c      	movs	r3, #12
 8010868:	603b      	str	r3, [r7, #0]
 801086a:	4638      	mov	r0, r7
 801086c:	f000 fe80 	bl	8011570 <__malloc_unlock>
 8010870:	e7a1      	b.n	80107b6 <_malloc_r+0x22>
 8010872:	6025      	str	r5, [r4, #0]
 8010874:	e7de      	b.n	8010834 <_malloc_r+0xa0>
 8010876:	bf00      	nop
 8010878:	2001fc20 	.word	0x2001fc20

0801087c <__sfputc_r>:
 801087c:	6893      	ldr	r3, [r2, #8]
 801087e:	3b01      	subs	r3, #1
 8010880:	2b00      	cmp	r3, #0
 8010882:	b410      	push	{r4}
 8010884:	6093      	str	r3, [r2, #8]
 8010886:	da08      	bge.n	801089a <__sfputc_r+0x1e>
 8010888:	6994      	ldr	r4, [r2, #24]
 801088a:	42a3      	cmp	r3, r4
 801088c:	db01      	blt.n	8010892 <__sfputc_r+0x16>
 801088e:	290a      	cmp	r1, #10
 8010890:	d103      	bne.n	801089a <__sfputc_r+0x1e>
 8010892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010896:	f000 bb7d 	b.w	8010f94 <__swbuf_r>
 801089a:	6813      	ldr	r3, [r2, #0]
 801089c:	1c58      	adds	r0, r3, #1
 801089e:	6010      	str	r0, [r2, #0]
 80108a0:	7019      	strb	r1, [r3, #0]
 80108a2:	4608      	mov	r0, r1
 80108a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <__sfputs_r>:
 80108aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ac:	4606      	mov	r6, r0
 80108ae:	460f      	mov	r7, r1
 80108b0:	4614      	mov	r4, r2
 80108b2:	18d5      	adds	r5, r2, r3
 80108b4:	42ac      	cmp	r4, r5
 80108b6:	d101      	bne.n	80108bc <__sfputs_r+0x12>
 80108b8:	2000      	movs	r0, #0
 80108ba:	e007      	b.n	80108cc <__sfputs_r+0x22>
 80108bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c0:	463a      	mov	r2, r7
 80108c2:	4630      	mov	r0, r6
 80108c4:	f7ff ffda 	bl	801087c <__sfputc_r>
 80108c8:	1c43      	adds	r3, r0, #1
 80108ca:	d1f3      	bne.n	80108b4 <__sfputs_r+0xa>
 80108cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108d0 <_vfiprintf_r>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	460d      	mov	r5, r1
 80108d6:	b09d      	sub	sp, #116	; 0x74
 80108d8:	4614      	mov	r4, r2
 80108da:	4698      	mov	r8, r3
 80108dc:	4606      	mov	r6, r0
 80108de:	b118      	cbz	r0, 80108e8 <_vfiprintf_r+0x18>
 80108e0:	6983      	ldr	r3, [r0, #24]
 80108e2:	b90b      	cbnz	r3, 80108e8 <_vfiprintf_r+0x18>
 80108e4:	f000 fd38 	bl	8011358 <__sinit>
 80108e8:	4b89      	ldr	r3, [pc, #548]	; (8010b10 <_vfiprintf_r+0x240>)
 80108ea:	429d      	cmp	r5, r3
 80108ec:	d11b      	bne.n	8010926 <_vfiprintf_r+0x56>
 80108ee:	6875      	ldr	r5, [r6, #4]
 80108f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108f2:	07d9      	lsls	r1, r3, #31
 80108f4:	d405      	bmi.n	8010902 <_vfiprintf_r+0x32>
 80108f6:	89ab      	ldrh	r3, [r5, #12]
 80108f8:	059a      	lsls	r2, r3, #22
 80108fa:	d402      	bmi.n	8010902 <_vfiprintf_r+0x32>
 80108fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108fe:	f000 fdc9 	bl	8011494 <__retarget_lock_acquire_recursive>
 8010902:	89ab      	ldrh	r3, [r5, #12]
 8010904:	071b      	lsls	r3, r3, #28
 8010906:	d501      	bpl.n	801090c <_vfiprintf_r+0x3c>
 8010908:	692b      	ldr	r3, [r5, #16]
 801090a:	b9eb      	cbnz	r3, 8010948 <_vfiprintf_r+0x78>
 801090c:	4629      	mov	r1, r5
 801090e:	4630      	mov	r0, r6
 8010910:	f000 fb92 	bl	8011038 <__swsetup_r>
 8010914:	b1c0      	cbz	r0, 8010948 <_vfiprintf_r+0x78>
 8010916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010918:	07dc      	lsls	r4, r3, #31
 801091a:	d50e      	bpl.n	801093a <_vfiprintf_r+0x6a>
 801091c:	f04f 30ff 	mov.w	r0, #4294967295
 8010920:	b01d      	add	sp, #116	; 0x74
 8010922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010926:	4b7b      	ldr	r3, [pc, #492]	; (8010b14 <_vfiprintf_r+0x244>)
 8010928:	429d      	cmp	r5, r3
 801092a:	d101      	bne.n	8010930 <_vfiprintf_r+0x60>
 801092c:	68b5      	ldr	r5, [r6, #8]
 801092e:	e7df      	b.n	80108f0 <_vfiprintf_r+0x20>
 8010930:	4b79      	ldr	r3, [pc, #484]	; (8010b18 <_vfiprintf_r+0x248>)
 8010932:	429d      	cmp	r5, r3
 8010934:	bf08      	it	eq
 8010936:	68f5      	ldreq	r5, [r6, #12]
 8010938:	e7da      	b.n	80108f0 <_vfiprintf_r+0x20>
 801093a:	89ab      	ldrh	r3, [r5, #12]
 801093c:	0598      	lsls	r0, r3, #22
 801093e:	d4ed      	bmi.n	801091c <_vfiprintf_r+0x4c>
 8010940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010942:	f000 fda8 	bl	8011496 <__retarget_lock_release_recursive>
 8010946:	e7e9      	b.n	801091c <_vfiprintf_r+0x4c>
 8010948:	2300      	movs	r3, #0
 801094a:	9309      	str	r3, [sp, #36]	; 0x24
 801094c:	2320      	movs	r3, #32
 801094e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010952:	f8cd 800c 	str.w	r8, [sp, #12]
 8010956:	2330      	movs	r3, #48	; 0x30
 8010958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010b1c <_vfiprintf_r+0x24c>
 801095c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010960:	f04f 0901 	mov.w	r9, #1
 8010964:	4623      	mov	r3, r4
 8010966:	469a      	mov	sl, r3
 8010968:	f813 2b01 	ldrb.w	r2, [r3], #1
 801096c:	b10a      	cbz	r2, 8010972 <_vfiprintf_r+0xa2>
 801096e:	2a25      	cmp	r2, #37	; 0x25
 8010970:	d1f9      	bne.n	8010966 <_vfiprintf_r+0x96>
 8010972:	ebba 0b04 	subs.w	fp, sl, r4
 8010976:	d00b      	beq.n	8010990 <_vfiprintf_r+0xc0>
 8010978:	465b      	mov	r3, fp
 801097a:	4622      	mov	r2, r4
 801097c:	4629      	mov	r1, r5
 801097e:	4630      	mov	r0, r6
 8010980:	f7ff ff93 	bl	80108aa <__sfputs_r>
 8010984:	3001      	adds	r0, #1
 8010986:	f000 80aa 	beq.w	8010ade <_vfiprintf_r+0x20e>
 801098a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801098c:	445a      	add	r2, fp
 801098e:	9209      	str	r2, [sp, #36]	; 0x24
 8010990:	f89a 3000 	ldrb.w	r3, [sl]
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 80a2 	beq.w	8010ade <_vfiprintf_r+0x20e>
 801099a:	2300      	movs	r3, #0
 801099c:	f04f 32ff 	mov.w	r2, #4294967295
 80109a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109a4:	f10a 0a01 	add.w	sl, sl, #1
 80109a8:	9304      	str	r3, [sp, #16]
 80109aa:	9307      	str	r3, [sp, #28]
 80109ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109b0:	931a      	str	r3, [sp, #104]	; 0x68
 80109b2:	4654      	mov	r4, sl
 80109b4:	2205      	movs	r2, #5
 80109b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ba:	4858      	ldr	r0, [pc, #352]	; (8010b1c <_vfiprintf_r+0x24c>)
 80109bc:	f7ef fc18 	bl	80001f0 <memchr>
 80109c0:	9a04      	ldr	r2, [sp, #16]
 80109c2:	b9d8      	cbnz	r0, 80109fc <_vfiprintf_r+0x12c>
 80109c4:	06d1      	lsls	r1, r2, #27
 80109c6:	bf44      	itt	mi
 80109c8:	2320      	movmi	r3, #32
 80109ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109ce:	0713      	lsls	r3, r2, #28
 80109d0:	bf44      	itt	mi
 80109d2:	232b      	movmi	r3, #43	; 0x2b
 80109d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109d8:	f89a 3000 	ldrb.w	r3, [sl]
 80109dc:	2b2a      	cmp	r3, #42	; 0x2a
 80109de:	d015      	beq.n	8010a0c <_vfiprintf_r+0x13c>
 80109e0:	9a07      	ldr	r2, [sp, #28]
 80109e2:	4654      	mov	r4, sl
 80109e4:	2000      	movs	r0, #0
 80109e6:	f04f 0c0a 	mov.w	ip, #10
 80109ea:	4621      	mov	r1, r4
 80109ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109f0:	3b30      	subs	r3, #48	; 0x30
 80109f2:	2b09      	cmp	r3, #9
 80109f4:	d94e      	bls.n	8010a94 <_vfiprintf_r+0x1c4>
 80109f6:	b1b0      	cbz	r0, 8010a26 <_vfiprintf_r+0x156>
 80109f8:	9207      	str	r2, [sp, #28]
 80109fa:	e014      	b.n	8010a26 <_vfiprintf_r+0x156>
 80109fc:	eba0 0308 	sub.w	r3, r0, r8
 8010a00:	fa09 f303 	lsl.w	r3, r9, r3
 8010a04:	4313      	orrs	r3, r2
 8010a06:	9304      	str	r3, [sp, #16]
 8010a08:	46a2      	mov	sl, r4
 8010a0a:	e7d2      	b.n	80109b2 <_vfiprintf_r+0xe2>
 8010a0c:	9b03      	ldr	r3, [sp, #12]
 8010a0e:	1d19      	adds	r1, r3, #4
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	9103      	str	r1, [sp, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	bfbb      	ittet	lt
 8010a18:	425b      	neglt	r3, r3
 8010a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8010a1e:	9307      	strge	r3, [sp, #28]
 8010a20:	9307      	strlt	r3, [sp, #28]
 8010a22:	bfb8      	it	lt
 8010a24:	9204      	strlt	r2, [sp, #16]
 8010a26:	7823      	ldrb	r3, [r4, #0]
 8010a28:	2b2e      	cmp	r3, #46	; 0x2e
 8010a2a:	d10c      	bne.n	8010a46 <_vfiprintf_r+0x176>
 8010a2c:	7863      	ldrb	r3, [r4, #1]
 8010a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8010a30:	d135      	bne.n	8010a9e <_vfiprintf_r+0x1ce>
 8010a32:	9b03      	ldr	r3, [sp, #12]
 8010a34:	1d1a      	adds	r2, r3, #4
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	9203      	str	r2, [sp, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	bfb8      	it	lt
 8010a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a42:	3402      	adds	r4, #2
 8010a44:	9305      	str	r3, [sp, #20]
 8010a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010b2c <_vfiprintf_r+0x25c>
 8010a4a:	7821      	ldrb	r1, [r4, #0]
 8010a4c:	2203      	movs	r2, #3
 8010a4e:	4650      	mov	r0, sl
 8010a50:	f7ef fbce 	bl	80001f0 <memchr>
 8010a54:	b140      	cbz	r0, 8010a68 <_vfiprintf_r+0x198>
 8010a56:	2340      	movs	r3, #64	; 0x40
 8010a58:	eba0 000a 	sub.w	r0, r0, sl
 8010a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8010a60:	9b04      	ldr	r3, [sp, #16]
 8010a62:	4303      	orrs	r3, r0
 8010a64:	3401      	adds	r4, #1
 8010a66:	9304      	str	r3, [sp, #16]
 8010a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a6c:	482c      	ldr	r0, [pc, #176]	; (8010b20 <_vfiprintf_r+0x250>)
 8010a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a72:	2206      	movs	r2, #6
 8010a74:	f7ef fbbc 	bl	80001f0 <memchr>
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d03f      	beq.n	8010afc <_vfiprintf_r+0x22c>
 8010a7c:	4b29      	ldr	r3, [pc, #164]	; (8010b24 <_vfiprintf_r+0x254>)
 8010a7e:	bb1b      	cbnz	r3, 8010ac8 <_vfiprintf_r+0x1f8>
 8010a80:	9b03      	ldr	r3, [sp, #12]
 8010a82:	3307      	adds	r3, #7
 8010a84:	f023 0307 	bic.w	r3, r3, #7
 8010a88:	3308      	adds	r3, #8
 8010a8a:	9303      	str	r3, [sp, #12]
 8010a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a8e:	443b      	add	r3, r7
 8010a90:	9309      	str	r3, [sp, #36]	; 0x24
 8010a92:	e767      	b.n	8010964 <_vfiprintf_r+0x94>
 8010a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a98:	460c      	mov	r4, r1
 8010a9a:	2001      	movs	r0, #1
 8010a9c:	e7a5      	b.n	80109ea <_vfiprintf_r+0x11a>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	3401      	adds	r4, #1
 8010aa2:	9305      	str	r3, [sp, #20]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f04f 0c0a 	mov.w	ip, #10
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ab0:	3a30      	subs	r2, #48	; 0x30
 8010ab2:	2a09      	cmp	r2, #9
 8010ab4:	d903      	bls.n	8010abe <_vfiprintf_r+0x1ee>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d0c5      	beq.n	8010a46 <_vfiprintf_r+0x176>
 8010aba:	9105      	str	r1, [sp, #20]
 8010abc:	e7c3      	b.n	8010a46 <_vfiprintf_r+0x176>
 8010abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e7f0      	b.n	8010aaa <_vfiprintf_r+0x1da>
 8010ac8:	ab03      	add	r3, sp, #12
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	462a      	mov	r2, r5
 8010ace:	4b16      	ldr	r3, [pc, #88]	; (8010b28 <_vfiprintf_r+0x258>)
 8010ad0:	a904      	add	r1, sp, #16
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f3af 8000 	nop.w
 8010ad8:	4607      	mov	r7, r0
 8010ada:	1c78      	adds	r0, r7, #1
 8010adc:	d1d6      	bne.n	8010a8c <_vfiprintf_r+0x1bc>
 8010ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ae0:	07d9      	lsls	r1, r3, #31
 8010ae2:	d405      	bmi.n	8010af0 <_vfiprintf_r+0x220>
 8010ae4:	89ab      	ldrh	r3, [r5, #12]
 8010ae6:	059a      	lsls	r2, r3, #22
 8010ae8:	d402      	bmi.n	8010af0 <_vfiprintf_r+0x220>
 8010aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010aec:	f000 fcd3 	bl	8011496 <__retarget_lock_release_recursive>
 8010af0:	89ab      	ldrh	r3, [r5, #12]
 8010af2:	065b      	lsls	r3, r3, #25
 8010af4:	f53f af12 	bmi.w	801091c <_vfiprintf_r+0x4c>
 8010af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010afa:	e711      	b.n	8010920 <_vfiprintf_r+0x50>
 8010afc:	ab03      	add	r3, sp, #12
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	462a      	mov	r2, r5
 8010b02:	4b09      	ldr	r3, [pc, #36]	; (8010b28 <_vfiprintf_r+0x258>)
 8010b04:	a904      	add	r1, sp, #16
 8010b06:	4630      	mov	r0, r6
 8010b08:	f000 f880 	bl	8010c0c <_printf_i>
 8010b0c:	e7e4      	b.n	8010ad8 <_vfiprintf_r+0x208>
 8010b0e:	bf00      	nop
 8010b10:	08012610 	.word	0x08012610
 8010b14:	08012630 	.word	0x08012630
 8010b18:	080125f0 	.word	0x080125f0
 8010b1c:	080125bc 	.word	0x080125bc
 8010b20:	080125c6 	.word	0x080125c6
 8010b24:	00000000 	.word	0x00000000
 8010b28:	080108ab 	.word	0x080108ab
 8010b2c:	080125c2 	.word	0x080125c2

08010b30 <_printf_common>:
 8010b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b34:	4616      	mov	r6, r2
 8010b36:	4699      	mov	r9, r3
 8010b38:	688a      	ldr	r2, [r1, #8]
 8010b3a:	690b      	ldr	r3, [r1, #16]
 8010b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b40:	4293      	cmp	r3, r2
 8010b42:	bfb8      	it	lt
 8010b44:	4613      	movlt	r3, r2
 8010b46:	6033      	str	r3, [r6, #0]
 8010b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b4c:	4607      	mov	r7, r0
 8010b4e:	460c      	mov	r4, r1
 8010b50:	b10a      	cbz	r2, 8010b56 <_printf_common+0x26>
 8010b52:	3301      	adds	r3, #1
 8010b54:	6033      	str	r3, [r6, #0]
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	0699      	lsls	r1, r3, #26
 8010b5a:	bf42      	ittt	mi
 8010b5c:	6833      	ldrmi	r3, [r6, #0]
 8010b5e:	3302      	addmi	r3, #2
 8010b60:	6033      	strmi	r3, [r6, #0]
 8010b62:	6825      	ldr	r5, [r4, #0]
 8010b64:	f015 0506 	ands.w	r5, r5, #6
 8010b68:	d106      	bne.n	8010b78 <_printf_common+0x48>
 8010b6a:	f104 0a19 	add.w	sl, r4, #25
 8010b6e:	68e3      	ldr	r3, [r4, #12]
 8010b70:	6832      	ldr	r2, [r6, #0]
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	42ab      	cmp	r3, r5
 8010b76:	dc26      	bgt.n	8010bc6 <_printf_common+0x96>
 8010b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010b7c:	1e13      	subs	r3, r2, #0
 8010b7e:	6822      	ldr	r2, [r4, #0]
 8010b80:	bf18      	it	ne
 8010b82:	2301      	movne	r3, #1
 8010b84:	0692      	lsls	r2, r2, #26
 8010b86:	d42b      	bmi.n	8010be0 <_printf_common+0xb0>
 8010b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b8c:	4649      	mov	r1, r9
 8010b8e:	4638      	mov	r0, r7
 8010b90:	47c0      	blx	r8
 8010b92:	3001      	adds	r0, #1
 8010b94:	d01e      	beq.n	8010bd4 <_printf_common+0xa4>
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	68e5      	ldr	r5, [r4, #12]
 8010b9a:	6832      	ldr	r2, [r6, #0]
 8010b9c:	f003 0306 	and.w	r3, r3, #6
 8010ba0:	2b04      	cmp	r3, #4
 8010ba2:	bf08      	it	eq
 8010ba4:	1aad      	subeq	r5, r5, r2
 8010ba6:	68a3      	ldr	r3, [r4, #8]
 8010ba8:	6922      	ldr	r2, [r4, #16]
 8010baa:	bf0c      	ite	eq
 8010bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bb0:	2500      	movne	r5, #0
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	bfc4      	itt	gt
 8010bb6:	1a9b      	subgt	r3, r3, r2
 8010bb8:	18ed      	addgt	r5, r5, r3
 8010bba:	2600      	movs	r6, #0
 8010bbc:	341a      	adds	r4, #26
 8010bbe:	42b5      	cmp	r5, r6
 8010bc0:	d11a      	bne.n	8010bf8 <_printf_common+0xc8>
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	e008      	b.n	8010bd8 <_printf_common+0xa8>
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	4652      	mov	r2, sl
 8010bca:	4649      	mov	r1, r9
 8010bcc:	4638      	mov	r0, r7
 8010bce:	47c0      	blx	r8
 8010bd0:	3001      	adds	r0, #1
 8010bd2:	d103      	bne.n	8010bdc <_printf_common+0xac>
 8010bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bdc:	3501      	adds	r5, #1
 8010bde:	e7c6      	b.n	8010b6e <_printf_common+0x3e>
 8010be0:	18e1      	adds	r1, r4, r3
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	2030      	movs	r0, #48	; 0x30
 8010be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010bea:	4422      	add	r2, r4
 8010bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010bf4:	3302      	adds	r3, #2
 8010bf6:	e7c7      	b.n	8010b88 <_printf_common+0x58>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	4622      	mov	r2, r4
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	4638      	mov	r0, r7
 8010c00:	47c0      	blx	r8
 8010c02:	3001      	adds	r0, #1
 8010c04:	d0e6      	beq.n	8010bd4 <_printf_common+0xa4>
 8010c06:	3601      	adds	r6, #1
 8010c08:	e7d9      	b.n	8010bbe <_printf_common+0x8e>
	...

08010c0c <_printf_i>:
 8010c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c10:	7e0f      	ldrb	r7, [r1, #24]
 8010c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c14:	2f78      	cmp	r7, #120	; 0x78
 8010c16:	4691      	mov	r9, r2
 8010c18:	4680      	mov	r8, r0
 8010c1a:	460c      	mov	r4, r1
 8010c1c:	469a      	mov	sl, r3
 8010c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010c22:	d807      	bhi.n	8010c34 <_printf_i+0x28>
 8010c24:	2f62      	cmp	r7, #98	; 0x62
 8010c26:	d80a      	bhi.n	8010c3e <_printf_i+0x32>
 8010c28:	2f00      	cmp	r7, #0
 8010c2a:	f000 80d8 	beq.w	8010dde <_printf_i+0x1d2>
 8010c2e:	2f58      	cmp	r7, #88	; 0x58
 8010c30:	f000 80a3 	beq.w	8010d7a <_printf_i+0x16e>
 8010c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010c3c:	e03a      	b.n	8010cb4 <_printf_i+0xa8>
 8010c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010c42:	2b15      	cmp	r3, #21
 8010c44:	d8f6      	bhi.n	8010c34 <_printf_i+0x28>
 8010c46:	a101      	add	r1, pc, #4	; (adr r1, 8010c4c <_printf_i+0x40>)
 8010c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c4c:	08010ca5 	.word	0x08010ca5
 8010c50:	08010cb9 	.word	0x08010cb9
 8010c54:	08010c35 	.word	0x08010c35
 8010c58:	08010c35 	.word	0x08010c35
 8010c5c:	08010c35 	.word	0x08010c35
 8010c60:	08010c35 	.word	0x08010c35
 8010c64:	08010cb9 	.word	0x08010cb9
 8010c68:	08010c35 	.word	0x08010c35
 8010c6c:	08010c35 	.word	0x08010c35
 8010c70:	08010c35 	.word	0x08010c35
 8010c74:	08010c35 	.word	0x08010c35
 8010c78:	08010dc5 	.word	0x08010dc5
 8010c7c:	08010ce9 	.word	0x08010ce9
 8010c80:	08010da7 	.word	0x08010da7
 8010c84:	08010c35 	.word	0x08010c35
 8010c88:	08010c35 	.word	0x08010c35
 8010c8c:	08010de7 	.word	0x08010de7
 8010c90:	08010c35 	.word	0x08010c35
 8010c94:	08010ce9 	.word	0x08010ce9
 8010c98:	08010c35 	.word	0x08010c35
 8010c9c:	08010c35 	.word	0x08010c35
 8010ca0:	08010daf 	.word	0x08010daf
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	1d1a      	adds	r2, r3, #4
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	602a      	str	r2, [r5, #0]
 8010cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	e0a3      	b.n	8010e00 <_printf_i+0x1f4>
 8010cb8:	6820      	ldr	r0, [r4, #0]
 8010cba:	6829      	ldr	r1, [r5, #0]
 8010cbc:	0606      	lsls	r6, r0, #24
 8010cbe:	f101 0304 	add.w	r3, r1, #4
 8010cc2:	d50a      	bpl.n	8010cda <_printf_i+0xce>
 8010cc4:	680e      	ldr	r6, [r1, #0]
 8010cc6:	602b      	str	r3, [r5, #0]
 8010cc8:	2e00      	cmp	r6, #0
 8010cca:	da03      	bge.n	8010cd4 <_printf_i+0xc8>
 8010ccc:	232d      	movs	r3, #45	; 0x2d
 8010cce:	4276      	negs	r6, r6
 8010cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cd4:	485e      	ldr	r0, [pc, #376]	; (8010e50 <_printf_i+0x244>)
 8010cd6:	230a      	movs	r3, #10
 8010cd8:	e019      	b.n	8010d0e <_printf_i+0x102>
 8010cda:	680e      	ldr	r6, [r1, #0]
 8010cdc:	602b      	str	r3, [r5, #0]
 8010cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ce2:	bf18      	it	ne
 8010ce4:	b236      	sxthne	r6, r6
 8010ce6:	e7ef      	b.n	8010cc8 <_printf_i+0xbc>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	6820      	ldr	r0, [r4, #0]
 8010cec:	1d19      	adds	r1, r3, #4
 8010cee:	6029      	str	r1, [r5, #0]
 8010cf0:	0601      	lsls	r1, r0, #24
 8010cf2:	d501      	bpl.n	8010cf8 <_printf_i+0xec>
 8010cf4:	681e      	ldr	r6, [r3, #0]
 8010cf6:	e002      	b.n	8010cfe <_printf_i+0xf2>
 8010cf8:	0646      	lsls	r6, r0, #25
 8010cfa:	d5fb      	bpl.n	8010cf4 <_printf_i+0xe8>
 8010cfc:	881e      	ldrh	r6, [r3, #0]
 8010cfe:	4854      	ldr	r0, [pc, #336]	; (8010e50 <_printf_i+0x244>)
 8010d00:	2f6f      	cmp	r7, #111	; 0x6f
 8010d02:	bf0c      	ite	eq
 8010d04:	2308      	moveq	r3, #8
 8010d06:	230a      	movne	r3, #10
 8010d08:	2100      	movs	r1, #0
 8010d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d0e:	6865      	ldr	r5, [r4, #4]
 8010d10:	60a5      	str	r5, [r4, #8]
 8010d12:	2d00      	cmp	r5, #0
 8010d14:	bfa2      	ittt	ge
 8010d16:	6821      	ldrge	r1, [r4, #0]
 8010d18:	f021 0104 	bicge.w	r1, r1, #4
 8010d1c:	6021      	strge	r1, [r4, #0]
 8010d1e:	b90e      	cbnz	r6, 8010d24 <_printf_i+0x118>
 8010d20:	2d00      	cmp	r5, #0
 8010d22:	d04d      	beq.n	8010dc0 <_printf_i+0x1b4>
 8010d24:	4615      	mov	r5, r2
 8010d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8010d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8010d2e:	5dc7      	ldrb	r7, [r0, r7]
 8010d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010d34:	4637      	mov	r7, r6
 8010d36:	42bb      	cmp	r3, r7
 8010d38:	460e      	mov	r6, r1
 8010d3a:	d9f4      	bls.n	8010d26 <_printf_i+0x11a>
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d10b      	bne.n	8010d58 <_printf_i+0x14c>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	07de      	lsls	r6, r3, #31
 8010d44:	d508      	bpl.n	8010d58 <_printf_i+0x14c>
 8010d46:	6923      	ldr	r3, [r4, #16]
 8010d48:	6861      	ldr	r1, [r4, #4]
 8010d4a:	4299      	cmp	r1, r3
 8010d4c:	bfde      	ittt	le
 8010d4e:	2330      	movle	r3, #48	; 0x30
 8010d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d58:	1b52      	subs	r2, r2, r5
 8010d5a:	6122      	str	r2, [r4, #16]
 8010d5c:	f8cd a000 	str.w	sl, [sp]
 8010d60:	464b      	mov	r3, r9
 8010d62:	aa03      	add	r2, sp, #12
 8010d64:	4621      	mov	r1, r4
 8010d66:	4640      	mov	r0, r8
 8010d68:	f7ff fee2 	bl	8010b30 <_printf_common>
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	d14c      	bne.n	8010e0a <_printf_i+0x1fe>
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	b004      	add	sp, #16
 8010d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d7a:	4835      	ldr	r0, [pc, #212]	; (8010e50 <_printf_i+0x244>)
 8010d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010d80:	6829      	ldr	r1, [r5, #0]
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8010d88:	6029      	str	r1, [r5, #0]
 8010d8a:	061d      	lsls	r5, r3, #24
 8010d8c:	d514      	bpl.n	8010db8 <_printf_i+0x1ac>
 8010d8e:	07df      	lsls	r7, r3, #31
 8010d90:	bf44      	itt	mi
 8010d92:	f043 0320 	orrmi.w	r3, r3, #32
 8010d96:	6023      	strmi	r3, [r4, #0]
 8010d98:	b91e      	cbnz	r6, 8010da2 <_printf_i+0x196>
 8010d9a:	6823      	ldr	r3, [r4, #0]
 8010d9c:	f023 0320 	bic.w	r3, r3, #32
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	2310      	movs	r3, #16
 8010da4:	e7b0      	b.n	8010d08 <_printf_i+0xfc>
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	f043 0320 	orr.w	r3, r3, #32
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	2378      	movs	r3, #120	; 0x78
 8010db0:	4828      	ldr	r0, [pc, #160]	; (8010e54 <_printf_i+0x248>)
 8010db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010db6:	e7e3      	b.n	8010d80 <_printf_i+0x174>
 8010db8:	0659      	lsls	r1, r3, #25
 8010dba:	bf48      	it	mi
 8010dbc:	b2b6      	uxthmi	r6, r6
 8010dbe:	e7e6      	b.n	8010d8e <_printf_i+0x182>
 8010dc0:	4615      	mov	r5, r2
 8010dc2:	e7bb      	b.n	8010d3c <_printf_i+0x130>
 8010dc4:	682b      	ldr	r3, [r5, #0]
 8010dc6:	6826      	ldr	r6, [r4, #0]
 8010dc8:	6961      	ldr	r1, [r4, #20]
 8010dca:	1d18      	adds	r0, r3, #4
 8010dcc:	6028      	str	r0, [r5, #0]
 8010dce:	0635      	lsls	r5, r6, #24
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	d501      	bpl.n	8010dd8 <_printf_i+0x1cc>
 8010dd4:	6019      	str	r1, [r3, #0]
 8010dd6:	e002      	b.n	8010dde <_printf_i+0x1d2>
 8010dd8:	0670      	lsls	r0, r6, #25
 8010dda:	d5fb      	bpl.n	8010dd4 <_printf_i+0x1c8>
 8010ddc:	8019      	strh	r1, [r3, #0]
 8010dde:	2300      	movs	r3, #0
 8010de0:	6123      	str	r3, [r4, #16]
 8010de2:	4615      	mov	r5, r2
 8010de4:	e7ba      	b.n	8010d5c <_printf_i+0x150>
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	1d1a      	adds	r2, r3, #4
 8010dea:	602a      	str	r2, [r5, #0]
 8010dec:	681d      	ldr	r5, [r3, #0]
 8010dee:	6862      	ldr	r2, [r4, #4]
 8010df0:	2100      	movs	r1, #0
 8010df2:	4628      	mov	r0, r5
 8010df4:	f7ef f9fc 	bl	80001f0 <memchr>
 8010df8:	b108      	cbz	r0, 8010dfe <_printf_i+0x1f2>
 8010dfa:	1b40      	subs	r0, r0, r5
 8010dfc:	6060      	str	r0, [r4, #4]
 8010dfe:	6863      	ldr	r3, [r4, #4]
 8010e00:	6123      	str	r3, [r4, #16]
 8010e02:	2300      	movs	r3, #0
 8010e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e08:	e7a8      	b.n	8010d5c <_printf_i+0x150>
 8010e0a:	6923      	ldr	r3, [r4, #16]
 8010e0c:	462a      	mov	r2, r5
 8010e0e:	4649      	mov	r1, r9
 8010e10:	4640      	mov	r0, r8
 8010e12:	47d0      	blx	sl
 8010e14:	3001      	adds	r0, #1
 8010e16:	d0ab      	beq.n	8010d70 <_printf_i+0x164>
 8010e18:	6823      	ldr	r3, [r4, #0]
 8010e1a:	079b      	lsls	r3, r3, #30
 8010e1c:	d413      	bmi.n	8010e46 <_printf_i+0x23a>
 8010e1e:	68e0      	ldr	r0, [r4, #12]
 8010e20:	9b03      	ldr	r3, [sp, #12]
 8010e22:	4298      	cmp	r0, r3
 8010e24:	bfb8      	it	lt
 8010e26:	4618      	movlt	r0, r3
 8010e28:	e7a4      	b.n	8010d74 <_printf_i+0x168>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	4649      	mov	r1, r9
 8010e30:	4640      	mov	r0, r8
 8010e32:	47d0      	blx	sl
 8010e34:	3001      	adds	r0, #1
 8010e36:	d09b      	beq.n	8010d70 <_printf_i+0x164>
 8010e38:	3501      	adds	r5, #1
 8010e3a:	68e3      	ldr	r3, [r4, #12]
 8010e3c:	9903      	ldr	r1, [sp, #12]
 8010e3e:	1a5b      	subs	r3, r3, r1
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	dcf2      	bgt.n	8010e2a <_printf_i+0x21e>
 8010e44:	e7eb      	b.n	8010e1e <_printf_i+0x212>
 8010e46:	2500      	movs	r5, #0
 8010e48:	f104 0619 	add.w	r6, r4, #25
 8010e4c:	e7f5      	b.n	8010e3a <_printf_i+0x22e>
 8010e4e:	bf00      	nop
 8010e50:	080125cd 	.word	0x080125cd
 8010e54:	080125de 	.word	0x080125de

08010e58 <iprintf>:
 8010e58:	b40f      	push	{r0, r1, r2, r3}
 8010e5a:	4b0a      	ldr	r3, [pc, #40]	; (8010e84 <iprintf+0x2c>)
 8010e5c:	b513      	push	{r0, r1, r4, lr}
 8010e5e:	681c      	ldr	r4, [r3, #0]
 8010e60:	b124      	cbz	r4, 8010e6c <iprintf+0x14>
 8010e62:	69a3      	ldr	r3, [r4, #24]
 8010e64:	b913      	cbnz	r3, 8010e6c <iprintf+0x14>
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 fa76 	bl	8011358 <__sinit>
 8010e6c:	ab05      	add	r3, sp, #20
 8010e6e:	9a04      	ldr	r2, [sp, #16]
 8010e70:	68a1      	ldr	r1, [r4, #8]
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	4620      	mov	r0, r4
 8010e76:	f7ff fd2b 	bl	80108d0 <_vfiprintf_r>
 8010e7a:	b002      	add	sp, #8
 8010e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e80:	b004      	add	sp, #16
 8010e82:	4770      	bx	lr
 8010e84:	200000b0 	.word	0x200000b0

08010e88 <_puts_r>:
 8010e88:	b570      	push	{r4, r5, r6, lr}
 8010e8a:	460e      	mov	r6, r1
 8010e8c:	4605      	mov	r5, r0
 8010e8e:	b118      	cbz	r0, 8010e98 <_puts_r+0x10>
 8010e90:	6983      	ldr	r3, [r0, #24]
 8010e92:	b90b      	cbnz	r3, 8010e98 <_puts_r+0x10>
 8010e94:	f000 fa60 	bl	8011358 <__sinit>
 8010e98:	69ab      	ldr	r3, [r5, #24]
 8010e9a:	68ac      	ldr	r4, [r5, #8]
 8010e9c:	b913      	cbnz	r3, 8010ea4 <_puts_r+0x1c>
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f000 fa5a 	bl	8011358 <__sinit>
 8010ea4:	4b2c      	ldr	r3, [pc, #176]	; (8010f58 <_puts_r+0xd0>)
 8010ea6:	429c      	cmp	r4, r3
 8010ea8:	d120      	bne.n	8010eec <_puts_r+0x64>
 8010eaa:	686c      	ldr	r4, [r5, #4]
 8010eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eae:	07db      	lsls	r3, r3, #31
 8010eb0:	d405      	bmi.n	8010ebe <_puts_r+0x36>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	0598      	lsls	r0, r3, #22
 8010eb6:	d402      	bmi.n	8010ebe <_puts_r+0x36>
 8010eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eba:	f000 faeb 	bl	8011494 <__retarget_lock_acquire_recursive>
 8010ebe:	89a3      	ldrh	r3, [r4, #12]
 8010ec0:	0719      	lsls	r1, r3, #28
 8010ec2:	d51d      	bpl.n	8010f00 <_puts_r+0x78>
 8010ec4:	6923      	ldr	r3, [r4, #16]
 8010ec6:	b1db      	cbz	r3, 8010f00 <_puts_r+0x78>
 8010ec8:	3e01      	subs	r6, #1
 8010eca:	68a3      	ldr	r3, [r4, #8]
 8010ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	60a3      	str	r3, [r4, #8]
 8010ed4:	bb39      	cbnz	r1, 8010f26 <_puts_r+0x9e>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	da38      	bge.n	8010f4c <_puts_r+0xc4>
 8010eda:	4622      	mov	r2, r4
 8010edc:	210a      	movs	r1, #10
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f000 f858 	bl	8010f94 <__swbuf_r>
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	d011      	beq.n	8010f0c <_puts_r+0x84>
 8010ee8:	250a      	movs	r5, #10
 8010eea:	e011      	b.n	8010f10 <_puts_r+0x88>
 8010eec:	4b1b      	ldr	r3, [pc, #108]	; (8010f5c <_puts_r+0xd4>)
 8010eee:	429c      	cmp	r4, r3
 8010ef0:	d101      	bne.n	8010ef6 <_puts_r+0x6e>
 8010ef2:	68ac      	ldr	r4, [r5, #8]
 8010ef4:	e7da      	b.n	8010eac <_puts_r+0x24>
 8010ef6:	4b1a      	ldr	r3, [pc, #104]	; (8010f60 <_puts_r+0xd8>)
 8010ef8:	429c      	cmp	r4, r3
 8010efa:	bf08      	it	eq
 8010efc:	68ec      	ldreq	r4, [r5, #12]
 8010efe:	e7d5      	b.n	8010eac <_puts_r+0x24>
 8010f00:	4621      	mov	r1, r4
 8010f02:	4628      	mov	r0, r5
 8010f04:	f000 f898 	bl	8011038 <__swsetup_r>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0dd      	beq.n	8010ec8 <_puts_r+0x40>
 8010f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8010f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f12:	07da      	lsls	r2, r3, #31
 8010f14:	d405      	bmi.n	8010f22 <_puts_r+0x9a>
 8010f16:	89a3      	ldrh	r3, [r4, #12]
 8010f18:	059b      	lsls	r3, r3, #22
 8010f1a:	d402      	bmi.n	8010f22 <_puts_r+0x9a>
 8010f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f1e:	f000 faba 	bl	8011496 <__retarget_lock_release_recursive>
 8010f22:	4628      	mov	r0, r5
 8010f24:	bd70      	pop	{r4, r5, r6, pc}
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	da04      	bge.n	8010f34 <_puts_r+0xac>
 8010f2a:	69a2      	ldr	r2, [r4, #24]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	dc06      	bgt.n	8010f3e <_puts_r+0xb6>
 8010f30:	290a      	cmp	r1, #10
 8010f32:	d004      	beq.n	8010f3e <_puts_r+0xb6>
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	1c5a      	adds	r2, r3, #1
 8010f38:	6022      	str	r2, [r4, #0]
 8010f3a:	7019      	strb	r1, [r3, #0]
 8010f3c:	e7c5      	b.n	8010eca <_puts_r+0x42>
 8010f3e:	4622      	mov	r2, r4
 8010f40:	4628      	mov	r0, r5
 8010f42:	f000 f827 	bl	8010f94 <__swbuf_r>
 8010f46:	3001      	adds	r0, #1
 8010f48:	d1bf      	bne.n	8010eca <_puts_r+0x42>
 8010f4a:	e7df      	b.n	8010f0c <_puts_r+0x84>
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	250a      	movs	r5, #10
 8010f50:	1c5a      	adds	r2, r3, #1
 8010f52:	6022      	str	r2, [r4, #0]
 8010f54:	701d      	strb	r5, [r3, #0]
 8010f56:	e7db      	b.n	8010f10 <_puts_r+0x88>
 8010f58:	08012610 	.word	0x08012610
 8010f5c:	08012630 	.word	0x08012630
 8010f60:	080125f0 	.word	0x080125f0

08010f64 <puts>:
 8010f64:	4b02      	ldr	r3, [pc, #8]	; (8010f70 <puts+0xc>)
 8010f66:	4601      	mov	r1, r0
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	f7ff bf8d 	b.w	8010e88 <_puts_r>
 8010f6e:	bf00      	nop
 8010f70:	200000b0 	.word	0x200000b0

08010f74 <_sbrk_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	4d06      	ldr	r5, [pc, #24]	; (8010f90 <_sbrk_r+0x1c>)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	4608      	mov	r0, r1
 8010f7e:	602b      	str	r3, [r5, #0]
 8010f80:	f7f3 fd2e 	bl	80049e0 <_sbrk>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <_sbrk_r+0x1a>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	b103      	cbz	r3, 8010f8e <_sbrk_r+0x1a>
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	2001fc2c 	.word	0x2001fc2c

08010f94 <__swbuf_r>:
 8010f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f96:	460e      	mov	r6, r1
 8010f98:	4614      	mov	r4, r2
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	b118      	cbz	r0, 8010fa6 <__swbuf_r+0x12>
 8010f9e:	6983      	ldr	r3, [r0, #24]
 8010fa0:	b90b      	cbnz	r3, 8010fa6 <__swbuf_r+0x12>
 8010fa2:	f000 f9d9 	bl	8011358 <__sinit>
 8010fa6:	4b21      	ldr	r3, [pc, #132]	; (801102c <__swbuf_r+0x98>)
 8010fa8:	429c      	cmp	r4, r3
 8010faa:	d12b      	bne.n	8011004 <__swbuf_r+0x70>
 8010fac:	686c      	ldr	r4, [r5, #4]
 8010fae:	69a3      	ldr	r3, [r4, #24]
 8010fb0:	60a3      	str	r3, [r4, #8]
 8010fb2:	89a3      	ldrh	r3, [r4, #12]
 8010fb4:	071a      	lsls	r2, r3, #28
 8010fb6:	d52f      	bpl.n	8011018 <__swbuf_r+0x84>
 8010fb8:	6923      	ldr	r3, [r4, #16]
 8010fba:	b36b      	cbz	r3, 8011018 <__swbuf_r+0x84>
 8010fbc:	6923      	ldr	r3, [r4, #16]
 8010fbe:	6820      	ldr	r0, [r4, #0]
 8010fc0:	1ac0      	subs	r0, r0, r3
 8010fc2:	6963      	ldr	r3, [r4, #20]
 8010fc4:	b2f6      	uxtb	r6, r6
 8010fc6:	4283      	cmp	r3, r0
 8010fc8:	4637      	mov	r7, r6
 8010fca:	dc04      	bgt.n	8010fd6 <__swbuf_r+0x42>
 8010fcc:	4621      	mov	r1, r4
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f000 f92e 	bl	8011230 <_fflush_r>
 8010fd4:	bb30      	cbnz	r0, 8011024 <__swbuf_r+0x90>
 8010fd6:	68a3      	ldr	r3, [r4, #8]
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	60a3      	str	r3, [r4, #8]
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	1c5a      	adds	r2, r3, #1
 8010fe0:	6022      	str	r2, [r4, #0]
 8010fe2:	701e      	strb	r6, [r3, #0]
 8010fe4:	6963      	ldr	r3, [r4, #20]
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	4283      	cmp	r3, r0
 8010fea:	d004      	beq.n	8010ff6 <__swbuf_r+0x62>
 8010fec:	89a3      	ldrh	r3, [r4, #12]
 8010fee:	07db      	lsls	r3, r3, #31
 8010ff0:	d506      	bpl.n	8011000 <__swbuf_r+0x6c>
 8010ff2:	2e0a      	cmp	r6, #10
 8010ff4:	d104      	bne.n	8011000 <__swbuf_r+0x6c>
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	f000 f919 	bl	8011230 <_fflush_r>
 8010ffe:	b988      	cbnz	r0, 8011024 <__swbuf_r+0x90>
 8011000:	4638      	mov	r0, r7
 8011002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011004:	4b0a      	ldr	r3, [pc, #40]	; (8011030 <__swbuf_r+0x9c>)
 8011006:	429c      	cmp	r4, r3
 8011008:	d101      	bne.n	801100e <__swbuf_r+0x7a>
 801100a:	68ac      	ldr	r4, [r5, #8]
 801100c:	e7cf      	b.n	8010fae <__swbuf_r+0x1a>
 801100e:	4b09      	ldr	r3, [pc, #36]	; (8011034 <__swbuf_r+0xa0>)
 8011010:	429c      	cmp	r4, r3
 8011012:	bf08      	it	eq
 8011014:	68ec      	ldreq	r4, [r5, #12]
 8011016:	e7ca      	b.n	8010fae <__swbuf_r+0x1a>
 8011018:	4621      	mov	r1, r4
 801101a:	4628      	mov	r0, r5
 801101c:	f000 f80c 	bl	8011038 <__swsetup_r>
 8011020:	2800      	cmp	r0, #0
 8011022:	d0cb      	beq.n	8010fbc <__swbuf_r+0x28>
 8011024:	f04f 37ff 	mov.w	r7, #4294967295
 8011028:	e7ea      	b.n	8011000 <__swbuf_r+0x6c>
 801102a:	bf00      	nop
 801102c:	08012610 	.word	0x08012610
 8011030:	08012630 	.word	0x08012630
 8011034:	080125f0 	.word	0x080125f0

08011038 <__swsetup_r>:
 8011038:	4b32      	ldr	r3, [pc, #200]	; (8011104 <__swsetup_r+0xcc>)
 801103a:	b570      	push	{r4, r5, r6, lr}
 801103c:	681d      	ldr	r5, [r3, #0]
 801103e:	4606      	mov	r6, r0
 8011040:	460c      	mov	r4, r1
 8011042:	b125      	cbz	r5, 801104e <__swsetup_r+0x16>
 8011044:	69ab      	ldr	r3, [r5, #24]
 8011046:	b913      	cbnz	r3, 801104e <__swsetup_r+0x16>
 8011048:	4628      	mov	r0, r5
 801104a:	f000 f985 	bl	8011358 <__sinit>
 801104e:	4b2e      	ldr	r3, [pc, #184]	; (8011108 <__swsetup_r+0xd0>)
 8011050:	429c      	cmp	r4, r3
 8011052:	d10f      	bne.n	8011074 <__swsetup_r+0x3c>
 8011054:	686c      	ldr	r4, [r5, #4]
 8011056:	89a3      	ldrh	r3, [r4, #12]
 8011058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801105c:	0719      	lsls	r1, r3, #28
 801105e:	d42c      	bmi.n	80110ba <__swsetup_r+0x82>
 8011060:	06dd      	lsls	r5, r3, #27
 8011062:	d411      	bmi.n	8011088 <__swsetup_r+0x50>
 8011064:	2309      	movs	r3, #9
 8011066:	6033      	str	r3, [r6, #0]
 8011068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	f04f 30ff 	mov.w	r0, #4294967295
 8011072:	e03e      	b.n	80110f2 <__swsetup_r+0xba>
 8011074:	4b25      	ldr	r3, [pc, #148]	; (801110c <__swsetup_r+0xd4>)
 8011076:	429c      	cmp	r4, r3
 8011078:	d101      	bne.n	801107e <__swsetup_r+0x46>
 801107a:	68ac      	ldr	r4, [r5, #8]
 801107c:	e7eb      	b.n	8011056 <__swsetup_r+0x1e>
 801107e:	4b24      	ldr	r3, [pc, #144]	; (8011110 <__swsetup_r+0xd8>)
 8011080:	429c      	cmp	r4, r3
 8011082:	bf08      	it	eq
 8011084:	68ec      	ldreq	r4, [r5, #12]
 8011086:	e7e6      	b.n	8011056 <__swsetup_r+0x1e>
 8011088:	0758      	lsls	r0, r3, #29
 801108a:	d512      	bpl.n	80110b2 <__swsetup_r+0x7a>
 801108c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801108e:	b141      	cbz	r1, 80110a2 <__swsetup_r+0x6a>
 8011090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011094:	4299      	cmp	r1, r3
 8011096:	d002      	beq.n	801109e <__swsetup_r+0x66>
 8011098:	4630      	mov	r0, r6
 801109a:	f7ff fb0f 	bl	80106bc <_free_r>
 801109e:	2300      	movs	r3, #0
 80110a0:	6363      	str	r3, [r4, #52]	; 0x34
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	2300      	movs	r3, #0
 80110ac:	6063      	str	r3, [r4, #4]
 80110ae:	6923      	ldr	r3, [r4, #16]
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f043 0308 	orr.w	r3, r3, #8
 80110b8:	81a3      	strh	r3, [r4, #12]
 80110ba:	6923      	ldr	r3, [r4, #16]
 80110bc:	b94b      	cbnz	r3, 80110d2 <__swsetup_r+0x9a>
 80110be:	89a3      	ldrh	r3, [r4, #12]
 80110c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110c8:	d003      	beq.n	80110d2 <__swsetup_r+0x9a>
 80110ca:	4621      	mov	r1, r4
 80110cc:	4630      	mov	r0, r6
 80110ce:	f000 fa09 	bl	80114e4 <__smakebuf_r>
 80110d2:	89a0      	ldrh	r0, [r4, #12]
 80110d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110d8:	f010 0301 	ands.w	r3, r0, #1
 80110dc:	d00a      	beq.n	80110f4 <__swsetup_r+0xbc>
 80110de:	2300      	movs	r3, #0
 80110e0:	60a3      	str	r3, [r4, #8]
 80110e2:	6963      	ldr	r3, [r4, #20]
 80110e4:	425b      	negs	r3, r3
 80110e6:	61a3      	str	r3, [r4, #24]
 80110e8:	6923      	ldr	r3, [r4, #16]
 80110ea:	b943      	cbnz	r3, 80110fe <__swsetup_r+0xc6>
 80110ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110f0:	d1ba      	bne.n	8011068 <__swsetup_r+0x30>
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	0781      	lsls	r1, r0, #30
 80110f6:	bf58      	it	pl
 80110f8:	6963      	ldrpl	r3, [r4, #20]
 80110fa:	60a3      	str	r3, [r4, #8]
 80110fc:	e7f4      	b.n	80110e8 <__swsetup_r+0xb0>
 80110fe:	2000      	movs	r0, #0
 8011100:	e7f7      	b.n	80110f2 <__swsetup_r+0xba>
 8011102:	bf00      	nop
 8011104:	200000b0 	.word	0x200000b0
 8011108:	08012610 	.word	0x08012610
 801110c:	08012630 	.word	0x08012630
 8011110:	080125f0 	.word	0x080125f0

08011114 <abort>:
 8011114:	b508      	push	{r3, lr}
 8011116:	2006      	movs	r0, #6
 8011118:	f000 fa58 	bl	80115cc <raise>
 801111c:	2001      	movs	r0, #1
 801111e:	f7f3 fc03 	bl	8004928 <_exit>
	...

08011124 <__sflush_r>:
 8011124:	898a      	ldrh	r2, [r1, #12]
 8011126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801112a:	4605      	mov	r5, r0
 801112c:	0710      	lsls	r0, r2, #28
 801112e:	460c      	mov	r4, r1
 8011130:	d458      	bmi.n	80111e4 <__sflush_r+0xc0>
 8011132:	684b      	ldr	r3, [r1, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	dc05      	bgt.n	8011144 <__sflush_r+0x20>
 8011138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801113a:	2b00      	cmp	r3, #0
 801113c:	dc02      	bgt.n	8011144 <__sflush_r+0x20>
 801113e:	2000      	movs	r0, #0
 8011140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011146:	2e00      	cmp	r6, #0
 8011148:	d0f9      	beq.n	801113e <__sflush_r+0x1a>
 801114a:	2300      	movs	r3, #0
 801114c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011150:	682f      	ldr	r7, [r5, #0]
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	d032      	beq.n	80111bc <__sflush_r+0x98>
 8011156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	075a      	lsls	r2, r3, #29
 801115c:	d505      	bpl.n	801116a <__sflush_r+0x46>
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	1ac0      	subs	r0, r0, r3
 8011162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011164:	b10b      	cbz	r3, 801116a <__sflush_r+0x46>
 8011166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011168:	1ac0      	subs	r0, r0, r3
 801116a:	2300      	movs	r3, #0
 801116c:	4602      	mov	r2, r0
 801116e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011170:	6a21      	ldr	r1, [r4, #32]
 8011172:	4628      	mov	r0, r5
 8011174:	47b0      	blx	r6
 8011176:	1c43      	adds	r3, r0, #1
 8011178:	89a3      	ldrh	r3, [r4, #12]
 801117a:	d106      	bne.n	801118a <__sflush_r+0x66>
 801117c:	6829      	ldr	r1, [r5, #0]
 801117e:	291d      	cmp	r1, #29
 8011180:	d82c      	bhi.n	80111dc <__sflush_r+0xb8>
 8011182:	4a2a      	ldr	r2, [pc, #168]	; (801122c <__sflush_r+0x108>)
 8011184:	40ca      	lsrs	r2, r1
 8011186:	07d6      	lsls	r6, r2, #31
 8011188:	d528      	bpl.n	80111dc <__sflush_r+0xb8>
 801118a:	2200      	movs	r2, #0
 801118c:	6062      	str	r2, [r4, #4]
 801118e:	04d9      	lsls	r1, r3, #19
 8011190:	6922      	ldr	r2, [r4, #16]
 8011192:	6022      	str	r2, [r4, #0]
 8011194:	d504      	bpl.n	80111a0 <__sflush_r+0x7c>
 8011196:	1c42      	adds	r2, r0, #1
 8011198:	d101      	bne.n	801119e <__sflush_r+0x7a>
 801119a:	682b      	ldr	r3, [r5, #0]
 801119c:	b903      	cbnz	r3, 80111a0 <__sflush_r+0x7c>
 801119e:	6560      	str	r0, [r4, #84]	; 0x54
 80111a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111a2:	602f      	str	r7, [r5, #0]
 80111a4:	2900      	cmp	r1, #0
 80111a6:	d0ca      	beq.n	801113e <__sflush_r+0x1a>
 80111a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111ac:	4299      	cmp	r1, r3
 80111ae:	d002      	beq.n	80111b6 <__sflush_r+0x92>
 80111b0:	4628      	mov	r0, r5
 80111b2:	f7ff fa83 	bl	80106bc <_free_r>
 80111b6:	2000      	movs	r0, #0
 80111b8:	6360      	str	r0, [r4, #52]	; 0x34
 80111ba:	e7c1      	b.n	8011140 <__sflush_r+0x1c>
 80111bc:	6a21      	ldr	r1, [r4, #32]
 80111be:	2301      	movs	r3, #1
 80111c0:	4628      	mov	r0, r5
 80111c2:	47b0      	blx	r6
 80111c4:	1c41      	adds	r1, r0, #1
 80111c6:	d1c7      	bne.n	8011158 <__sflush_r+0x34>
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d0c4      	beq.n	8011158 <__sflush_r+0x34>
 80111ce:	2b1d      	cmp	r3, #29
 80111d0:	d001      	beq.n	80111d6 <__sflush_r+0xb2>
 80111d2:	2b16      	cmp	r3, #22
 80111d4:	d101      	bne.n	80111da <__sflush_r+0xb6>
 80111d6:	602f      	str	r7, [r5, #0]
 80111d8:	e7b1      	b.n	801113e <__sflush_r+0x1a>
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	e7ad      	b.n	8011140 <__sflush_r+0x1c>
 80111e4:	690f      	ldr	r7, [r1, #16]
 80111e6:	2f00      	cmp	r7, #0
 80111e8:	d0a9      	beq.n	801113e <__sflush_r+0x1a>
 80111ea:	0793      	lsls	r3, r2, #30
 80111ec:	680e      	ldr	r6, [r1, #0]
 80111ee:	bf08      	it	eq
 80111f0:	694b      	ldreq	r3, [r1, #20]
 80111f2:	600f      	str	r7, [r1, #0]
 80111f4:	bf18      	it	ne
 80111f6:	2300      	movne	r3, #0
 80111f8:	eba6 0807 	sub.w	r8, r6, r7
 80111fc:	608b      	str	r3, [r1, #8]
 80111fe:	f1b8 0f00 	cmp.w	r8, #0
 8011202:	dd9c      	ble.n	801113e <__sflush_r+0x1a>
 8011204:	6a21      	ldr	r1, [r4, #32]
 8011206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011208:	4643      	mov	r3, r8
 801120a:	463a      	mov	r2, r7
 801120c:	4628      	mov	r0, r5
 801120e:	47b0      	blx	r6
 8011210:	2800      	cmp	r0, #0
 8011212:	dc06      	bgt.n	8011222 <__sflush_r+0xfe>
 8011214:	89a3      	ldrh	r3, [r4, #12]
 8011216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801121a:	81a3      	strh	r3, [r4, #12]
 801121c:	f04f 30ff 	mov.w	r0, #4294967295
 8011220:	e78e      	b.n	8011140 <__sflush_r+0x1c>
 8011222:	4407      	add	r7, r0
 8011224:	eba8 0800 	sub.w	r8, r8, r0
 8011228:	e7e9      	b.n	80111fe <__sflush_r+0xda>
 801122a:	bf00      	nop
 801122c:	20400001 	.word	0x20400001

08011230 <_fflush_r>:
 8011230:	b538      	push	{r3, r4, r5, lr}
 8011232:	690b      	ldr	r3, [r1, #16]
 8011234:	4605      	mov	r5, r0
 8011236:	460c      	mov	r4, r1
 8011238:	b913      	cbnz	r3, 8011240 <_fflush_r+0x10>
 801123a:	2500      	movs	r5, #0
 801123c:	4628      	mov	r0, r5
 801123e:	bd38      	pop	{r3, r4, r5, pc}
 8011240:	b118      	cbz	r0, 801124a <_fflush_r+0x1a>
 8011242:	6983      	ldr	r3, [r0, #24]
 8011244:	b90b      	cbnz	r3, 801124a <_fflush_r+0x1a>
 8011246:	f000 f887 	bl	8011358 <__sinit>
 801124a:	4b14      	ldr	r3, [pc, #80]	; (801129c <_fflush_r+0x6c>)
 801124c:	429c      	cmp	r4, r3
 801124e:	d11b      	bne.n	8011288 <_fflush_r+0x58>
 8011250:	686c      	ldr	r4, [r5, #4]
 8011252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d0ef      	beq.n	801123a <_fflush_r+0xa>
 801125a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801125c:	07d0      	lsls	r0, r2, #31
 801125e:	d404      	bmi.n	801126a <_fflush_r+0x3a>
 8011260:	0599      	lsls	r1, r3, #22
 8011262:	d402      	bmi.n	801126a <_fflush_r+0x3a>
 8011264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011266:	f000 f915 	bl	8011494 <__retarget_lock_acquire_recursive>
 801126a:	4628      	mov	r0, r5
 801126c:	4621      	mov	r1, r4
 801126e:	f7ff ff59 	bl	8011124 <__sflush_r>
 8011272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011274:	07da      	lsls	r2, r3, #31
 8011276:	4605      	mov	r5, r0
 8011278:	d4e0      	bmi.n	801123c <_fflush_r+0xc>
 801127a:	89a3      	ldrh	r3, [r4, #12]
 801127c:	059b      	lsls	r3, r3, #22
 801127e:	d4dd      	bmi.n	801123c <_fflush_r+0xc>
 8011280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011282:	f000 f908 	bl	8011496 <__retarget_lock_release_recursive>
 8011286:	e7d9      	b.n	801123c <_fflush_r+0xc>
 8011288:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <_fflush_r+0x70>)
 801128a:	429c      	cmp	r4, r3
 801128c:	d101      	bne.n	8011292 <_fflush_r+0x62>
 801128e:	68ac      	ldr	r4, [r5, #8]
 8011290:	e7df      	b.n	8011252 <_fflush_r+0x22>
 8011292:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <_fflush_r+0x74>)
 8011294:	429c      	cmp	r4, r3
 8011296:	bf08      	it	eq
 8011298:	68ec      	ldreq	r4, [r5, #12]
 801129a:	e7da      	b.n	8011252 <_fflush_r+0x22>
 801129c:	08012610 	.word	0x08012610
 80112a0:	08012630 	.word	0x08012630
 80112a4:	080125f0 	.word	0x080125f0

080112a8 <std>:
 80112a8:	2300      	movs	r3, #0
 80112aa:	b510      	push	{r4, lr}
 80112ac:	4604      	mov	r4, r0
 80112ae:	e9c0 3300 	strd	r3, r3, [r0]
 80112b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112b6:	6083      	str	r3, [r0, #8]
 80112b8:	8181      	strh	r1, [r0, #12]
 80112ba:	6643      	str	r3, [r0, #100]	; 0x64
 80112bc:	81c2      	strh	r2, [r0, #14]
 80112be:	6183      	str	r3, [r0, #24]
 80112c0:	4619      	mov	r1, r3
 80112c2:	2208      	movs	r2, #8
 80112c4:	305c      	adds	r0, #92	; 0x5c
 80112c6:	f7ff f9f1 	bl	80106ac <memset>
 80112ca:	4b05      	ldr	r3, [pc, #20]	; (80112e0 <std+0x38>)
 80112cc:	6263      	str	r3, [r4, #36]	; 0x24
 80112ce:	4b05      	ldr	r3, [pc, #20]	; (80112e4 <std+0x3c>)
 80112d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80112d2:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <std+0x40>)
 80112d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112d6:	4b05      	ldr	r3, [pc, #20]	; (80112ec <std+0x44>)
 80112d8:	6224      	str	r4, [r4, #32]
 80112da:	6323      	str	r3, [r4, #48]	; 0x30
 80112dc:	bd10      	pop	{r4, pc}
 80112de:	bf00      	nop
 80112e0:	08011605 	.word	0x08011605
 80112e4:	08011627 	.word	0x08011627
 80112e8:	0801165f 	.word	0x0801165f
 80112ec:	08011683 	.word	0x08011683

080112f0 <_cleanup_r>:
 80112f0:	4901      	ldr	r1, [pc, #4]	; (80112f8 <_cleanup_r+0x8>)
 80112f2:	f000 b8af 	b.w	8011454 <_fwalk_reent>
 80112f6:	bf00      	nop
 80112f8:	08011231 	.word	0x08011231

080112fc <__sfmoreglue>:
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	2268      	movs	r2, #104	; 0x68
 8011300:	1e4d      	subs	r5, r1, #1
 8011302:	4355      	muls	r5, r2
 8011304:	460e      	mov	r6, r1
 8011306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801130a:	f7ff fa43 	bl	8010794 <_malloc_r>
 801130e:	4604      	mov	r4, r0
 8011310:	b140      	cbz	r0, 8011324 <__sfmoreglue+0x28>
 8011312:	2100      	movs	r1, #0
 8011314:	e9c0 1600 	strd	r1, r6, [r0]
 8011318:	300c      	adds	r0, #12
 801131a:	60a0      	str	r0, [r4, #8]
 801131c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011320:	f7ff f9c4 	bl	80106ac <memset>
 8011324:	4620      	mov	r0, r4
 8011326:	bd70      	pop	{r4, r5, r6, pc}

08011328 <__sfp_lock_acquire>:
 8011328:	4801      	ldr	r0, [pc, #4]	; (8011330 <__sfp_lock_acquire+0x8>)
 801132a:	f000 b8b3 	b.w	8011494 <__retarget_lock_acquire_recursive>
 801132e:	bf00      	nop
 8011330:	2001fc29 	.word	0x2001fc29

08011334 <__sfp_lock_release>:
 8011334:	4801      	ldr	r0, [pc, #4]	; (801133c <__sfp_lock_release+0x8>)
 8011336:	f000 b8ae 	b.w	8011496 <__retarget_lock_release_recursive>
 801133a:	bf00      	nop
 801133c:	2001fc29 	.word	0x2001fc29

08011340 <__sinit_lock_acquire>:
 8011340:	4801      	ldr	r0, [pc, #4]	; (8011348 <__sinit_lock_acquire+0x8>)
 8011342:	f000 b8a7 	b.w	8011494 <__retarget_lock_acquire_recursive>
 8011346:	bf00      	nop
 8011348:	2001fc2a 	.word	0x2001fc2a

0801134c <__sinit_lock_release>:
 801134c:	4801      	ldr	r0, [pc, #4]	; (8011354 <__sinit_lock_release+0x8>)
 801134e:	f000 b8a2 	b.w	8011496 <__retarget_lock_release_recursive>
 8011352:	bf00      	nop
 8011354:	2001fc2a 	.word	0x2001fc2a

08011358 <__sinit>:
 8011358:	b510      	push	{r4, lr}
 801135a:	4604      	mov	r4, r0
 801135c:	f7ff fff0 	bl	8011340 <__sinit_lock_acquire>
 8011360:	69a3      	ldr	r3, [r4, #24]
 8011362:	b11b      	cbz	r3, 801136c <__sinit+0x14>
 8011364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011368:	f7ff bff0 	b.w	801134c <__sinit_lock_release>
 801136c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011370:	6523      	str	r3, [r4, #80]	; 0x50
 8011372:	4b13      	ldr	r3, [pc, #76]	; (80113c0 <__sinit+0x68>)
 8011374:	4a13      	ldr	r2, [pc, #76]	; (80113c4 <__sinit+0x6c>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	62a2      	str	r2, [r4, #40]	; 0x28
 801137a:	42a3      	cmp	r3, r4
 801137c:	bf04      	itt	eq
 801137e:	2301      	moveq	r3, #1
 8011380:	61a3      	streq	r3, [r4, #24]
 8011382:	4620      	mov	r0, r4
 8011384:	f000 f820 	bl	80113c8 <__sfp>
 8011388:	6060      	str	r0, [r4, #4]
 801138a:	4620      	mov	r0, r4
 801138c:	f000 f81c 	bl	80113c8 <__sfp>
 8011390:	60a0      	str	r0, [r4, #8]
 8011392:	4620      	mov	r0, r4
 8011394:	f000 f818 	bl	80113c8 <__sfp>
 8011398:	2200      	movs	r2, #0
 801139a:	60e0      	str	r0, [r4, #12]
 801139c:	2104      	movs	r1, #4
 801139e:	6860      	ldr	r0, [r4, #4]
 80113a0:	f7ff ff82 	bl	80112a8 <std>
 80113a4:	68a0      	ldr	r0, [r4, #8]
 80113a6:	2201      	movs	r2, #1
 80113a8:	2109      	movs	r1, #9
 80113aa:	f7ff ff7d 	bl	80112a8 <std>
 80113ae:	68e0      	ldr	r0, [r4, #12]
 80113b0:	2202      	movs	r2, #2
 80113b2:	2112      	movs	r1, #18
 80113b4:	f7ff ff78 	bl	80112a8 <std>
 80113b8:	2301      	movs	r3, #1
 80113ba:	61a3      	str	r3, [r4, #24]
 80113bc:	e7d2      	b.n	8011364 <__sinit+0xc>
 80113be:	bf00      	nop
 80113c0:	080125b8 	.word	0x080125b8
 80113c4:	080112f1 	.word	0x080112f1

080113c8 <__sfp>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	4607      	mov	r7, r0
 80113cc:	f7ff ffac 	bl	8011328 <__sfp_lock_acquire>
 80113d0:	4b1e      	ldr	r3, [pc, #120]	; (801144c <__sfp+0x84>)
 80113d2:	681e      	ldr	r6, [r3, #0]
 80113d4:	69b3      	ldr	r3, [r6, #24]
 80113d6:	b913      	cbnz	r3, 80113de <__sfp+0x16>
 80113d8:	4630      	mov	r0, r6
 80113da:	f7ff ffbd 	bl	8011358 <__sinit>
 80113de:	3648      	adds	r6, #72	; 0x48
 80113e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	d503      	bpl.n	80113f0 <__sfp+0x28>
 80113e8:	6833      	ldr	r3, [r6, #0]
 80113ea:	b30b      	cbz	r3, 8011430 <__sfp+0x68>
 80113ec:	6836      	ldr	r6, [r6, #0]
 80113ee:	e7f7      	b.n	80113e0 <__sfp+0x18>
 80113f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113f4:	b9d5      	cbnz	r5, 801142c <__sfp+0x64>
 80113f6:	4b16      	ldr	r3, [pc, #88]	; (8011450 <__sfp+0x88>)
 80113f8:	60e3      	str	r3, [r4, #12]
 80113fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113fe:	6665      	str	r5, [r4, #100]	; 0x64
 8011400:	f000 f847 	bl	8011492 <__retarget_lock_init_recursive>
 8011404:	f7ff ff96 	bl	8011334 <__sfp_lock_release>
 8011408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801140c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011410:	6025      	str	r5, [r4, #0]
 8011412:	61a5      	str	r5, [r4, #24]
 8011414:	2208      	movs	r2, #8
 8011416:	4629      	mov	r1, r5
 8011418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801141c:	f7ff f946 	bl	80106ac <memset>
 8011420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011428:	4620      	mov	r0, r4
 801142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801142c:	3468      	adds	r4, #104	; 0x68
 801142e:	e7d9      	b.n	80113e4 <__sfp+0x1c>
 8011430:	2104      	movs	r1, #4
 8011432:	4638      	mov	r0, r7
 8011434:	f7ff ff62 	bl	80112fc <__sfmoreglue>
 8011438:	4604      	mov	r4, r0
 801143a:	6030      	str	r0, [r6, #0]
 801143c:	2800      	cmp	r0, #0
 801143e:	d1d5      	bne.n	80113ec <__sfp+0x24>
 8011440:	f7ff ff78 	bl	8011334 <__sfp_lock_release>
 8011444:	230c      	movs	r3, #12
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	e7ee      	b.n	8011428 <__sfp+0x60>
 801144a:	bf00      	nop
 801144c:	080125b8 	.word	0x080125b8
 8011450:	ffff0001 	.word	0xffff0001

08011454 <_fwalk_reent>:
 8011454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011458:	4606      	mov	r6, r0
 801145a:	4688      	mov	r8, r1
 801145c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011460:	2700      	movs	r7, #0
 8011462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011466:	f1b9 0901 	subs.w	r9, r9, #1
 801146a:	d505      	bpl.n	8011478 <_fwalk_reent+0x24>
 801146c:	6824      	ldr	r4, [r4, #0]
 801146e:	2c00      	cmp	r4, #0
 8011470:	d1f7      	bne.n	8011462 <_fwalk_reent+0xe>
 8011472:	4638      	mov	r0, r7
 8011474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011478:	89ab      	ldrh	r3, [r5, #12]
 801147a:	2b01      	cmp	r3, #1
 801147c:	d907      	bls.n	801148e <_fwalk_reent+0x3a>
 801147e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011482:	3301      	adds	r3, #1
 8011484:	d003      	beq.n	801148e <_fwalk_reent+0x3a>
 8011486:	4629      	mov	r1, r5
 8011488:	4630      	mov	r0, r6
 801148a:	47c0      	blx	r8
 801148c:	4307      	orrs	r7, r0
 801148e:	3568      	adds	r5, #104	; 0x68
 8011490:	e7e9      	b.n	8011466 <_fwalk_reent+0x12>

08011492 <__retarget_lock_init_recursive>:
 8011492:	4770      	bx	lr

08011494 <__retarget_lock_acquire_recursive>:
 8011494:	4770      	bx	lr

08011496 <__retarget_lock_release_recursive>:
 8011496:	4770      	bx	lr

08011498 <__swhatbuf_r>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	460e      	mov	r6, r1
 801149c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114a0:	2900      	cmp	r1, #0
 80114a2:	b096      	sub	sp, #88	; 0x58
 80114a4:	4614      	mov	r4, r2
 80114a6:	461d      	mov	r5, r3
 80114a8:	da08      	bge.n	80114bc <__swhatbuf_r+0x24>
 80114aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	602a      	str	r2, [r5, #0]
 80114b2:	061a      	lsls	r2, r3, #24
 80114b4:	d410      	bmi.n	80114d8 <__swhatbuf_r+0x40>
 80114b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ba:	e00e      	b.n	80114da <__swhatbuf_r+0x42>
 80114bc:	466a      	mov	r2, sp
 80114be:	f000 f907 	bl	80116d0 <_fstat_r>
 80114c2:	2800      	cmp	r0, #0
 80114c4:	dbf1      	blt.n	80114aa <__swhatbuf_r+0x12>
 80114c6:	9a01      	ldr	r2, [sp, #4]
 80114c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114d0:	425a      	negs	r2, r3
 80114d2:	415a      	adcs	r2, r3
 80114d4:	602a      	str	r2, [r5, #0]
 80114d6:	e7ee      	b.n	80114b6 <__swhatbuf_r+0x1e>
 80114d8:	2340      	movs	r3, #64	; 0x40
 80114da:	2000      	movs	r0, #0
 80114dc:	6023      	str	r3, [r4, #0]
 80114de:	b016      	add	sp, #88	; 0x58
 80114e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080114e4 <__smakebuf_r>:
 80114e4:	898b      	ldrh	r3, [r1, #12]
 80114e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114e8:	079d      	lsls	r5, r3, #30
 80114ea:	4606      	mov	r6, r0
 80114ec:	460c      	mov	r4, r1
 80114ee:	d507      	bpl.n	8011500 <__smakebuf_r+0x1c>
 80114f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114f4:	6023      	str	r3, [r4, #0]
 80114f6:	6123      	str	r3, [r4, #16]
 80114f8:	2301      	movs	r3, #1
 80114fa:	6163      	str	r3, [r4, #20]
 80114fc:	b002      	add	sp, #8
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	ab01      	add	r3, sp, #4
 8011502:	466a      	mov	r2, sp
 8011504:	f7ff ffc8 	bl	8011498 <__swhatbuf_r>
 8011508:	9900      	ldr	r1, [sp, #0]
 801150a:	4605      	mov	r5, r0
 801150c:	4630      	mov	r0, r6
 801150e:	f7ff f941 	bl	8010794 <_malloc_r>
 8011512:	b948      	cbnz	r0, 8011528 <__smakebuf_r+0x44>
 8011514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011518:	059a      	lsls	r2, r3, #22
 801151a:	d4ef      	bmi.n	80114fc <__smakebuf_r+0x18>
 801151c:	f023 0303 	bic.w	r3, r3, #3
 8011520:	f043 0302 	orr.w	r3, r3, #2
 8011524:	81a3      	strh	r3, [r4, #12]
 8011526:	e7e3      	b.n	80114f0 <__smakebuf_r+0xc>
 8011528:	4b0d      	ldr	r3, [pc, #52]	; (8011560 <__smakebuf_r+0x7c>)
 801152a:	62b3      	str	r3, [r6, #40]	; 0x28
 801152c:	89a3      	ldrh	r3, [r4, #12]
 801152e:	6020      	str	r0, [r4, #0]
 8011530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011534:	81a3      	strh	r3, [r4, #12]
 8011536:	9b00      	ldr	r3, [sp, #0]
 8011538:	6163      	str	r3, [r4, #20]
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	6120      	str	r0, [r4, #16]
 801153e:	b15b      	cbz	r3, 8011558 <__smakebuf_r+0x74>
 8011540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011544:	4630      	mov	r0, r6
 8011546:	f000 f8d5 	bl	80116f4 <_isatty_r>
 801154a:	b128      	cbz	r0, 8011558 <__smakebuf_r+0x74>
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	f023 0303 	bic.w	r3, r3, #3
 8011552:	f043 0301 	orr.w	r3, r3, #1
 8011556:	81a3      	strh	r3, [r4, #12]
 8011558:	89a0      	ldrh	r0, [r4, #12]
 801155a:	4305      	orrs	r5, r0
 801155c:	81a5      	strh	r5, [r4, #12]
 801155e:	e7cd      	b.n	80114fc <__smakebuf_r+0x18>
 8011560:	080112f1 	.word	0x080112f1

08011564 <__malloc_lock>:
 8011564:	4801      	ldr	r0, [pc, #4]	; (801156c <__malloc_lock+0x8>)
 8011566:	f7ff bf95 	b.w	8011494 <__retarget_lock_acquire_recursive>
 801156a:	bf00      	nop
 801156c:	2001fc28 	.word	0x2001fc28

08011570 <__malloc_unlock>:
 8011570:	4801      	ldr	r0, [pc, #4]	; (8011578 <__malloc_unlock+0x8>)
 8011572:	f7ff bf90 	b.w	8011496 <__retarget_lock_release_recursive>
 8011576:	bf00      	nop
 8011578:	2001fc28 	.word	0x2001fc28

0801157c <_raise_r>:
 801157c:	291f      	cmp	r1, #31
 801157e:	b538      	push	{r3, r4, r5, lr}
 8011580:	4604      	mov	r4, r0
 8011582:	460d      	mov	r5, r1
 8011584:	d904      	bls.n	8011590 <_raise_r+0x14>
 8011586:	2316      	movs	r3, #22
 8011588:	6003      	str	r3, [r0, #0]
 801158a:	f04f 30ff 	mov.w	r0, #4294967295
 801158e:	bd38      	pop	{r3, r4, r5, pc}
 8011590:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011592:	b112      	cbz	r2, 801159a <_raise_r+0x1e>
 8011594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011598:	b94b      	cbnz	r3, 80115ae <_raise_r+0x32>
 801159a:	4620      	mov	r0, r4
 801159c:	f000 f830 	bl	8011600 <_getpid_r>
 80115a0:	462a      	mov	r2, r5
 80115a2:	4601      	mov	r1, r0
 80115a4:	4620      	mov	r0, r4
 80115a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115aa:	f000 b817 	b.w	80115dc <_kill_r>
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d00a      	beq.n	80115c8 <_raise_r+0x4c>
 80115b2:	1c59      	adds	r1, r3, #1
 80115b4:	d103      	bne.n	80115be <_raise_r+0x42>
 80115b6:	2316      	movs	r3, #22
 80115b8:	6003      	str	r3, [r0, #0]
 80115ba:	2001      	movs	r0, #1
 80115bc:	e7e7      	b.n	801158e <_raise_r+0x12>
 80115be:	2400      	movs	r4, #0
 80115c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115c4:	4628      	mov	r0, r5
 80115c6:	4798      	blx	r3
 80115c8:	2000      	movs	r0, #0
 80115ca:	e7e0      	b.n	801158e <_raise_r+0x12>

080115cc <raise>:
 80115cc:	4b02      	ldr	r3, [pc, #8]	; (80115d8 <raise+0xc>)
 80115ce:	4601      	mov	r1, r0
 80115d0:	6818      	ldr	r0, [r3, #0]
 80115d2:	f7ff bfd3 	b.w	801157c <_raise_r>
 80115d6:	bf00      	nop
 80115d8:	200000b0 	.word	0x200000b0

080115dc <_kill_r>:
 80115dc:	b538      	push	{r3, r4, r5, lr}
 80115de:	4d07      	ldr	r5, [pc, #28]	; (80115fc <_kill_r+0x20>)
 80115e0:	2300      	movs	r3, #0
 80115e2:	4604      	mov	r4, r0
 80115e4:	4608      	mov	r0, r1
 80115e6:	4611      	mov	r1, r2
 80115e8:	602b      	str	r3, [r5, #0]
 80115ea:	f7f3 f98d 	bl	8004908 <_kill>
 80115ee:	1c43      	adds	r3, r0, #1
 80115f0:	d102      	bne.n	80115f8 <_kill_r+0x1c>
 80115f2:	682b      	ldr	r3, [r5, #0]
 80115f4:	b103      	cbz	r3, 80115f8 <_kill_r+0x1c>
 80115f6:	6023      	str	r3, [r4, #0]
 80115f8:	bd38      	pop	{r3, r4, r5, pc}
 80115fa:	bf00      	nop
 80115fc:	2001fc2c 	.word	0x2001fc2c

08011600 <_getpid_r>:
 8011600:	f7f3 b97a 	b.w	80048f8 <_getpid>

08011604 <__sread>:
 8011604:	b510      	push	{r4, lr}
 8011606:	460c      	mov	r4, r1
 8011608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801160c:	f000 f894 	bl	8011738 <_read_r>
 8011610:	2800      	cmp	r0, #0
 8011612:	bfab      	itete	ge
 8011614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011616:	89a3      	ldrhlt	r3, [r4, #12]
 8011618:	181b      	addge	r3, r3, r0
 801161a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801161e:	bfac      	ite	ge
 8011620:	6563      	strge	r3, [r4, #84]	; 0x54
 8011622:	81a3      	strhlt	r3, [r4, #12]
 8011624:	bd10      	pop	{r4, pc}

08011626 <__swrite>:
 8011626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801162a:	461f      	mov	r7, r3
 801162c:	898b      	ldrh	r3, [r1, #12]
 801162e:	05db      	lsls	r3, r3, #23
 8011630:	4605      	mov	r5, r0
 8011632:	460c      	mov	r4, r1
 8011634:	4616      	mov	r6, r2
 8011636:	d505      	bpl.n	8011644 <__swrite+0x1e>
 8011638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801163c:	2302      	movs	r3, #2
 801163e:	2200      	movs	r2, #0
 8011640:	f000 f868 	bl	8011714 <_lseek_r>
 8011644:	89a3      	ldrh	r3, [r4, #12]
 8011646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801164a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801164e:	81a3      	strh	r3, [r4, #12]
 8011650:	4632      	mov	r2, r6
 8011652:	463b      	mov	r3, r7
 8011654:	4628      	mov	r0, r5
 8011656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801165a:	f000 b817 	b.w	801168c <_write_r>

0801165e <__sseek>:
 801165e:	b510      	push	{r4, lr}
 8011660:	460c      	mov	r4, r1
 8011662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011666:	f000 f855 	bl	8011714 <_lseek_r>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	89a3      	ldrh	r3, [r4, #12]
 801166e:	bf15      	itete	ne
 8011670:	6560      	strne	r0, [r4, #84]	; 0x54
 8011672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801167a:	81a3      	strheq	r3, [r4, #12]
 801167c:	bf18      	it	ne
 801167e:	81a3      	strhne	r3, [r4, #12]
 8011680:	bd10      	pop	{r4, pc}

08011682 <__sclose>:
 8011682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011686:	f000 b813 	b.w	80116b0 <_close_r>
	...

0801168c <_write_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d07      	ldr	r5, [pc, #28]	; (80116ac <_write_r+0x20>)
 8011690:	4604      	mov	r4, r0
 8011692:	4608      	mov	r0, r1
 8011694:	4611      	mov	r1, r2
 8011696:	2200      	movs	r2, #0
 8011698:	602a      	str	r2, [r5, #0]
 801169a:	461a      	mov	r2, r3
 801169c:	f7f1 f894 	bl	80027c8 <_write>
 80116a0:	1c43      	adds	r3, r0, #1
 80116a2:	d102      	bne.n	80116aa <_write_r+0x1e>
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	b103      	cbz	r3, 80116aa <_write_r+0x1e>
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	bd38      	pop	{r3, r4, r5, pc}
 80116ac:	2001fc2c 	.word	0x2001fc2c

080116b0 <_close_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4d06      	ldr	r5, [pc, #24]	; (80116cc <_close_r+0x1c>)
 80116b4:	2300      	movs	r3, #0
 80116b6:	4604      	mov	r4, r0
 80116b8:	4608      	mov	r0, r1
 80116ba:	602b      	str	r3, [r5, #0]
 80116bc:	f7f3 f95b 	bl	8004976 <_close>
 80116c0:	1c43      	adds	r3, r0, #1
 80116c2:	d102      	bne.n	80116ca <_close_r+0x1a>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	b103      	cbz	r3, 80116ca <_close_r+0x1a>
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
 80116cc:	2001fc2c 	.word	0x2001fc2c

080116d0 <_fstat_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4d07      	ldr	r5, [pc, #28]	; (80116f0 <_fstat_r+0x20>)
 80116d4:	2300      	movs	r3, #0
 80116d6:	4604      	mov	r4, r0
 80116d8:	4608      	mov	r0, r1
 80116da:	4611      	mov	r1, r2
 80116dc:	602b      	str	r3, [r5, #0]
 80116de:	f7f3 f956 	bl	800498e <_fstat>
 80116e2:	1c43      	adds	r3, r0, #1
 80116e4:	d102      	bne.n	80116ec <_fstat_r+0x1c>
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	b103      	cbz	r3, 80116ec <_fstat_r+0x1c>
 80116ea:	6023      	str	r3, [r4, #0]
 80116ec:	bd38      	pop	{r3, r4, r5, pc}
 80116ee:	bf00      	nop
 80116f0:	2001fc2c 	.word	0x2001fc2c

080116f4 <_isatty_r>:
 80116f4:	b538      	push	{r3, r4, r5, lr}
 80116f6:	4d06      	ldr	r5, [pc, #24]	; (8011710 <_isatty_r+0x1c>)
 80116f8:	2300      	movs	r3, #0
 80116fa:	4604      	mov	r4, r0
 80116fc:	4608      	mov	r0, r1
 80116fe:	602b      	str	r3, [r5, #0]
 8011700:	f7f3 f955 	bl	80049ae <_isatty>
 8011704:	1c43      	adds	r3, r0, #1
 8011706:	d102      	bne.n	801170e <_isatty_r+0x1a>
 8011708:	682b      	ldr	r3, [r5, #0]
 801170a:	b103      	cbz	r3, 801170e <_isatty_r+0x1a>
 801170c:	6023      	str	r3, [r4, #0]
 801170e:	bd38      	pop	{r3, r4, r5, pc}
 8011710:	2001fc2c 	.word	0x2001fc2c

08011714 <_lseek_r>:
 8011714:	b538      	push	{r3, r4, r5, lr}
 8011716:	4d07      	ldr	r5, [pc, #28]	; (8011734 <_lseek_r+0x20>)
 8011718:	4604      	mov	r4, r0
 801171a:	4608      	mov	r0, r1
 801171c:	4611      	mov	r1, r2
 801171e:	2200      	movs	r2, #0
 8011720:	602a      	str	r2, [r5, #0]
 8011722:	461a      	mov	r2, r3
 8011724:	f7f3 f94e 	bl	80049c4 <_lseek>
 8011728:	1c43      	adds	r3, r0, #1
 801172a:	d102      	bne.n	8011732 <_lseek_r+0x1e>
 801172c:	682b      	ldr	r3, [r5, #0]
 801172e:	b103      	cbz	r3, 8011732 <_lseek_r+0x1e>
 8011730:	6023      	str	r3, [r4, #0]
 8011732:	bd38      	pop	{r3, r4, r5, pc}
 8011734:	2001fc2c 	.word	0x2001fc2c

08011738 <_read_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4d07      	ldr	r5, [pc, #28]	; (8011758 <_read_r+0x20>)
 801173c:	4604      	mov	r4, r0
 801173e:	4608      	mov	r0, r1
 8011740:	4611      	mov	r1, r2
 8011742:	2200      	movs	r2, #0
 8011744:	602a      	str	r2, [r5, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	f7f3 f8f8 	bl	800493c <_read>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d102      	bne.n	8011756 <_read_r+0x1e>
 8011750:	682b      	ldr	r3, [r5, #0]
 8011752:	b103      	cbz	r3, 8011756 <_read_r+0x1e>
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	bd38      	pop	{r3, r4, r5, pc}
 8011758:	2001fc2c 	.word	0x2001fc2c

0801175c <_init>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	bf00      	nop
 8011760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011762:	bc08      	pop	{r3}
 8011764:	469e      	mov	lr, r3
 8011766:	4770      	bx	lr

08011768 <_fini>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	bf00      	nop
 801176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801176e:	bc08      	pop	{r3}
 8011770:	469e      	mov	lr, r3
 8011772:	4770      	bx	lr
