
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f19c  20000094  08007abc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f230  08007abc  0002f230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c4  00000000  00000000  00030aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000340d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003deb  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010176  00000000  00000000  00038b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102671  00000000  00000000  00048c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  0014b34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007154 	.word	0x08007154

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08007154 	.word	0x08007154

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f005 fd19 	bl	8005fe0 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	0800716c 	.word	0x0800716c
 800060c:	080073f4 	.word	0x080073f4
 8000610:	08007170 	.word	0x08007170

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f005 fcd9 	bl	8005fe0 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800716c 	.word	0x0800716c
 8000658:	08007408 	.word	0x08007408
 800065c:	08007170 	.word	0x08007170

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f005 fcb3 	bl	8005fe0 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800716c 	.word	0x0800716c
 80006a4:	0800741c 	.word	0x0800741c
 80006a8:	08007170 	.word	0x08007170

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f005 fc89 	bl	8005fe0 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f005 fce0 	bl	8006094 <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f005 fc7b 	bl	8005fe0 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f005 fc66 	bl	8005fe0 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08007194 	.word	0x08007194
 8000724:	08007434 	.word	0x08007434
 8000728:	08007170 	.word	0x08007170
 800072c:	0800716c 	.word	0x0800716c
 8000730:	080071a4 	.word	0x080071a4

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f005 fc49 	bl	8005fe0 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800716c 	.word	0x0800716c
 800076c:	08007448 	.word	0x08007448
 8000770:	08007170 	.word	0x08007170

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f005 fc23 	bl	8005fe0 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080071c0 	.word	0x080071c0
 80007bc:	0800745c 	.word	0x0800745c
 80007c0:	08007170 	.word	0x08007170

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f005 fbf9 	bl	8005fe0 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080071d4 	.word	0x080071d4
 800082c:	0800746c 	.word	0x0800746c
 8000830:	08007170 	.word	0x08007170

08000834 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	b29a      	uxth	r2, r3
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <_write+0x24>)
 800084a:	f004 fb1f 	bl	8004e8c <HAL_UART_Transmit>
 800084e:	4603      	mov	r3, r0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000015c 	.word	0x2000015c

0800085c <print_startup_msg>:

static void print_startup_msg(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <print_startup_msg+0x2c>)
 8000862:	f006 f87b 	bl	800695c <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 8000866:	4909      	ldr	r1, [pc, #36]	; (800088c <print_startup_msg+0x30>)
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <print_startup_msg+0x34>)
 800086a:	f005 fff1 	bl	8006850 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 800086e:	4909      	ldr	r1, [pc, #36]	; (8000894 <print_startup_msg+0x38>)
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <print_startup_msg+0x3c>)
 8000872:	f005 ffed 	bl	8006850 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 8000876:	4909      	ldr	r1, [pc, #36]	; (800089c <print_startup_msg+0x40>)
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <print_startup_msg+0x44>)
 800087a:	f005 ffe9 	bl	8006850 <iprintf>
  printf("******************************************\r\n");
 800087e:	4802      	ldr	r0, [pc, #8]	; (8000888 <print_startup_msg+0x2c>)
 8000880:	f006 f86c 	bl	800695c <puts>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08007258 	.word	0x08007258
 800088c:	08007284 	.word	0x08007284
 8000890:	08007290 	.word	0x08007290
 8000894:	080072ac 	.word	0x080072ac
 8000898:	080072b0 	.word	0x080072b0
 800089c:	080072d0 	.word	0x080072d0
 80008a0:	080072dc 	.word	0x080072dc

080008a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 80008ae:	f001 fce1 	bl	8002274 <HAL_GetTick>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80008b6:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2bfa      	cmp	r3, #250	; 0xfa
 80008c4:	d90a      	bls.n	80008dc <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_GPIO_EXTI_Callback+0x48>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	88fa      	ldrh	r2, [r7, #6]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff50 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80008da:	6013      	str	r3, [r2, #0]
	}


}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000020c 	.word	0x2000020c
 80008e8:	20000210 	.word	0x20000210
 80008ec:	200001e0 	.word	0x200001e0

080008f0 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  None
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_DCMI_FrameEventCallback+0x44>)
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 ffa7 	bl	8006850 <iprintf>
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_DCMI_FrameEventCallback+0x48>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f005 ffa2 	bl	8006850 <iprintf>
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_DCMI_FrameEventCallback+0x44>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	4618      	mov	r0, r3
 8000912:	f005 ff9d 	bl	8006850 <iprintf>
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_DCMI_FrameEventCallback+0x4c>)
 8000918:	f006 f820 	bl	800695c <puts>
	//jpeg_dcmi_frame_callback(&hdma_dcmi);
    __HAL_DCMI_ENABLE_IT(hdcmi,DCMI_IT_FRAME);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0201 	orr.w	r2, r2, #1
 800092a:	60da      	str	r2, [r3, #12]
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000020 	.word	0x20000020
 800093c:	080072f4 	.word	0x080072f4

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f001 fc2d 	bl	80021a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f918 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 fa18 	bl	8000d80 <MX_GPIO_Init>
  MX_DCMI_Init();
 8000950:	f000 f99a 	bl	8000c88 <MX_DCMI_Init>
  MX_DMA_Init();
 8000954:	f000 f9fc 	bl	8000d50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000958:	f000 f9ca 	bl	8000cf0 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800095c:	f000 f967 	bl	8000c2e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8000960:	2114      	movs	r1, #20
 8000962:	4878      	ldr	r0, [pc, #480]	; (8000b44 <main+0x204>)
 8000964:	f7ff fea2 	bl	80006ac <ring_buffer_init>
 8000968:	4603      	mov	r3, r0
 800096a:	4a77      	ldr	r2, [pc, #476]	; (8000b48 <main+0x208>)
 800096c:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 800096e:	f7ff ff75 	bl	800085c <print_startup_msg>

  /*##-3- Camera Initialization ############################*/
	while(OV5640_Init())
 8000972:	e017      	b.n	80009a4 <main+0x64>
	{
		printf_dbg("OV5640 error, please check !\r\n");
 8000974:	4b75      	ldr	r3, [pc, #468]	; (8000b4c <main+0x20c>)
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	4618      	mov	r0, r3
 800097a:	f005 ff69 	bl	8006850 <iprintf>
 800097e:	4b74      	ldr	r3, [pc, #464]	; (8000b50 <main+0x210>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f005 ff64 	bl	8006850 <iprintf>
 8000988:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <main+0x20c>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4618      	mov	r0, r3
 800098e:	f005 ff5f 	bl	8006850 <iprintf>
 8000992:	4870      	ldr	r0, [pc, #448]	; (8000b54 <main+0x214>)
 8000994:	f005 ffe2 	bl	800695c <puts>
		   // BSP_LCD_Clear(LCD_COLOR_WHITE);
		   // HAL_Delay(200);
		   HAL_Delay(300);
 8000998:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099c:	f001 fc76 	bl	800228c <HAL_Delay>
		   Error_Handler();
 80009a0:	f000 fd34 	bl	800140c <Error_Handler>
	while(OV5640_Init())
 80009a4:	f000 fdb6 	bl	8001514 <OV5640_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1e2      	bne.n	8000974 <main+0x34>
	}
	printf_dbg("Camera was initialized!!\r\n");
 80009ae:	4b67      	ldr	r3, [pc, #412]	; (8000b4c <main+0x20c>)
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 ff4c 	bl	8006850 <iprintf>
 80009b8:	4b65      	ldr	r3, [pc, #404]	; (8000b50 <main+0x210>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 ff47 	bl	8006850 <iprintf>
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <main+0x20c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 ff42 	bl	8006850 <iprintf>
 80009cc:	4862      	ldr	r0, [pc, #392]	; (8000b58 <main+0x218>)
 80009ce:	f005 ffc5 	bl	800695c <puts>

	OV5640_RGB565_Mode();
 80009d2:	f000 fdf3 	bl	80015bc <OV5640_RGB565_Mode>
	OV5640_Light_Mode(0);	   //set auto
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fe14 	bl	8001604 <OV5640_Light_Mode>
	OV5640_Color_Saturation(3); //default
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 fe45 	bl	800166c <OV5640_Color_Saturation>
	OV5640_Brightness(4);	//default
 80009e2:	2004      	movs	r0, #4
 80009e4:	f000 fe92 	bl	800170c <OV5640_Brightness>
	OV5640_Contrast(3);     //default
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 fec9 	bl	8001780 <OV5640_Contrast>
	OV5640_Sharpness(33);	//set auto
 80009ee:	2021      	movs	r0, #33	; 0x21
 80009f0:	f000 ff22 	bl	8001838 <OV5640_Sharpness>

	rgb565_test();
 80009f4:	f000 ffc8 	bl	8001988 <rgb565_test>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 80009f8:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <main+0x208>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4957      	ldr	r1, [pc, #348]	; (8000b5c <main+0x21c>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fee0 	bl	80007c4 <ring_buffer_get>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8098 	beq.w	8000b3c <main+0x1fc>
	  {

		  switch (IRQ_event) {
 8000a0c:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <main+0x21c>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a14:	d07a      	beq.n	8000b0c <main+0x1cc>
 8000a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1a:	f300 8091 	bgt.w	8000b40 <main+0x200>
 8000a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a22:	d05b      	beq.n	8000adc <main+0x19c>
 8000a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a28:	f300 808a 	bgt.w	8000b40 <main+0x200>
 8000a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a30:	d03b      	beq.n	8000aaa <main+0x16a>
 8000a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a36:	f300 8083 	bgt.w	8000b40 <main+0x200>
 8000a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a3e:	d003      	beq.n	8000a48 <main+0x108>
 8000a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a44:	d019      	beq.n	8000a7a <main+0x13a>
				printf_dbg("JOY_SEL was pressed!\r\n");
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle

				break;
			default:
				break;
 8000a46:	e07b      	b.n	8000b40 <main+0x200>
				printf_dbg("JOY_UP was pressed!\r\n");
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <main+0x20c>)
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 feff 	bl	8006850 <iprintf>
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <main+0x210>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fefa 	bl	8006850 <iprintf>
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <main+0x20c>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 fef5 	bl	8006850 <iprintf>
 8000a66:	483e      	ldr	r0, [pc, #248]	; (8000b60 <main+0x220>)
 8000a68:	f005 ff78 	bl	800695c <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	483c      	ldr	r0, [pc, #240]	; (8000b64 <main+0x224>)
 8000a74:	f002 fdc2 	bl	80035fc <HAL_GPIO_WritePin>
				break;
 8000a78:	e063      	b.n	8000b42 <main+0x202>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <main+0x20c>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fee6 	bl	8006850 <iprintf>
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <main+0x210>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fee1 	bl	8006850 <iprintf>
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <main+0x20c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 fedc 	bl	8006850 <iprintf>
 8000a98:	4833      	ldr	r0, [pc, #204]	; (8000b68 <main+0x228>)
 8000a9a:	f005 ff5f 	bl	800695c <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_RESET);   // ON
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <main+0x22c>)
 8000aa4:	f002 fdaa 	bl	80035fc <HAL_GPIO_WritePin>
				break;
 8000aa8:	e04b      	b.n	8000b42 <main+0x202>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0x20c>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f005 fece 	bl	8006850 <iprintf>
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <main+0x210>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fec9 	bl	8006850 <iprintf>
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <main+0x20c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fec4 	bl	8006850 <iprintf>
 8000ac8:	4829      	ldr	r0, [pc, #164]	; (8000b70 <main+0x230>)
 8000aca:	f005 ff47 	bl	800695c <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	4823      	ldr	r0, [pc, #140]	; (8000b64 <main+0x224>)
 8000ad6:	f002 fd91 	bl	80035fc <HAL_GPIO_WritePin>
				break;
 8000ada:	e032      	b.n	8000b42 <main+0x202>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <main+0x20c>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f005 feb5 	bl	8006850 <iprintf>
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <main+0x210>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 feb0 	bl	8006850 <iprintf>
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <main+0x20c>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 feab 	bl	8006850 <iprintf>
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <main+0x234>)
 8000afc:	f005 ff2e 	bl	800695c <puts>
				HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_SET);    // 0FF
 8000b00:	2201      	movs	r2, #1
 8000b02:	2104      	movs	r1, #4
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <main+0x22c>)
 8000b06:	f002 fd79 	bl	80035fc <HAL_GPIO_WritePin>
				break;
 8000b0a:	e01a      	b.n	8000b42 <main+0x202>
				printf_dbg("JOY_SEL was pressed!\r\n");
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <main+0x20c>)
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fe9d 	bl	8006850 <iprintf>
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <main+0x210>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fe98 	bl	8006850 <iprintf>
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <main+0x20c>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 fe93 	bl	8006850 <iprintf>
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <main+0x238>)
 8000b2c:	f005 ff16 	bl	800695c <puts>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);   // Toogle
 8000b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <main+0x224>)
 8000b36:	f002 fd79 	bl	800362c <HAL_GPIO_TogglePin>
				break;
 8000b3a:	e002      	b.n	8000b42 <main+0x202>
		}

	  }
 8000b3c:	bf00      	nop
 8000b3e:	e75b      	b.n	80009f8 <main+0xb8>
				break;
 8000b40:	bf00      	nop
  {
 8000b42:	e759      	b.n	80009f8 <main+0xb8>
 8000b44:	200001e4 	.word	0x200001e4
 8000b48:	200001e0 	.word	0x200001e0
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000020 	.word	0x20000020
 8000b54:	08007314 	.word	0x08007314
 8000b58:	08007334 	.word	0x08007334
 8000b5c:	20000214 	.word	0x20000214
 8000b60:	08007350 	.word	0x08007350
 8000b64:	48000400 	.word	0x48000400
 8000b68:	08007368 	.word	0x08007368
 8000b6c:	48001c00 	.word	0x48001c00
 8000b70:	08007380 	.word	0x08007380
 8000b74:	08007398 	.word	0x08007398
 8000b78:	080073b0 	.word	0x080073b0

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b096      	sub	sp, #88	; 0x58
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2244      	movs	r2, #68	; 0x44
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f005 fa8a 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ba2:	f002 fd83 	bl	80036ac <HAL_PWREx_ControlVoltageScaling>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bac:	f000 fc2e 	bl	800140c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2322      	movs	r3, #34	; 0x22
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbe:	2340      	movs	r3, #64	; 0x40
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fdc8 	bl	8003778 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bee:	f000 fc0d 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f9ce 	bl	8003fac <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c16:	f000 fbf9 	bl	800140c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000c20:	2000      	movs	r0, #0
 8000c22:	f003 fac3 	bl	80041ac <HAL_RCC_MCOConfig>
}
 8000c26:	bf00      	nop
 8000c28:	3758      	adds	r7, #88	; 0x58
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2055      	movs	r0, #85	; 0x55
 8000c38:	f001 fc27 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000c3c:	2055      	movs	r0, #85	; 0x55
 8000c3e:	f001 fc40 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2044      	movs	r0, #68	; 0x44
 8000c48:	f001 fc1f 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8000c4c:	2044      	movs	r0, #68	; 0x44
 8000c4e:	f001 fc38 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f001 fc17 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f001 fc30 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2017      	movs	r0, #23
 8000c68:	f001 fc0f 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c6c:	2017      	movs	r0, #23
 8000c6e:	f001 fc28 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2026      	movs	r0, #38	; 0x26
 8000c78:	f001 fc07 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7c:	2026      	movs	r0, #38	; 0x26
 8000c7e:	f001 fc20 	bl	80024c2 <HAL_NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <MX_DCMI_Init+0x64>)
 8000c90:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_DCMI_Init+0x60>)
 8000cd6:	f001 fc0f 	bl	80024f8 <HAL_DCMI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 fb94 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000b0 	.word	0x200000b0
 8000cec:	50050000 	.word	0x50050000

08000cf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_USART2_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART2_UART_Init+0x58>)
 8000d34:	f004 f85c 	bl	8004df0 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 fb65 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000015c 	.word	0x2000015c
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_DMA_Init+0x2c>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <MX_DMA_Init+0x2c>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6493      	str	r3, [r2, #72]	; 0x48
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_DMA_Init+0x2c>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d96:	4bb1      	ldr	r3, [pc, #708]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4ab0      	ldr	r2, [pc, #704]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4bae      	ldr	r3, [pc, #696]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	4bab      	ldr	r3, [pc, #684]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4aaa      	ldr	r2, [pc, #680]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4ba8      	ldr	r3, [pc, #672]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc6:	4ba5      	ldr	r3, [pc, #660]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4aa4      	ldr	r2, [pc, #656]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4ba2      	ldr	r3, [pc, #648]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b9f      	ldr	r3, [pc, #636]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a9e      	ldr	r2, [pc, #632]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b9c      	ldr	r3, [pc, #624]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b99      	ldr	r3, [pc, #612]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a98      	ldr	r2, [pc, #608]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b96      	ldr	r3, [pc, #600]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0e:	4b93      	ldr	r3, [pc, #588]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a92      	ldr	r2, [pc, #584]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b90      	ldr	r3, [pc, #576]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000e26:	f002 fc97 	bl	8003758 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2a:	4b8c      	ldr	r3, [pc, #560]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a8b      	ldr	r2, [pc, #556]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b89      	ldr	r3, [pc, #548]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b86      	ldr	r3, [pc, #536]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a85      	ldr	r2, [pc, #532]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b83      	ldr	r3, [pc, #524]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5a:	4b80      	ldr	r3, [pc, #512]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a7f      	ldr	r2, [pc, #508]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b7d      	ldr	r3, [pc, #500]	; (800105c <MX_GPIO_Init+0x2dc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2114      	movs	r1, #20
 8000e76:	487a      	ldr	r0, [pc, #488]	; (8001060 <MX_GPIO_Init+0x2e0>)
 8000e78:	f002 fbc0 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4878      	ldr	r0, [pc, #480]	; (8001064 <MX_GPIO_Init+0x2e4>)
 8000e82:	f002 fbbb 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2143      	movs	r1, #67	; 0x43
 8000e8a:	4875      	ldr	r0, [pc, #468]	; (8001060 <MX_GPIO_Init+0x2e0>)
 8000e8c:	f002 fbb6 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	4874      	ldr	r0, [pc, #464]	; (8001068 <MX_GPIO_Init+0x2e8>)
 8000e96:	f002 fbb1 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ea0:	4872      	ldr	r0, [pc, #456]	; (800106c <MX_GPIO_Init+0x2ec>)
 8000ea2:	f002 fbab 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8000ea6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4869      	ldr	r0, [pc, #420]	; (8001064 <MX_GPIO_Init+0x2e4>)
 8000ebe:	f002 f9f3 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4861      	ldr	r0, [pc, #388]	; (8001060 <MX_GPIO_Init+0x2e0>)
 8000eda:	f002 f9e5 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D11_Pin D4_Pin
                           D10_Pin D9_Pin D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000ede:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	485d      	ldr	r0, [pc, #372]	; (8001070 <MX_GPIO_Init+0x2f0>)
 8000efc:	f002 f9d4 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000f00:	2330      	movs	r3, #48	; 0x30
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f10:	2305      	movs	r3, #5
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4854      	ldr	r0, [pc, #336]	; (800106c <MX_GPIO_Init+0x2ec>)
 8000f1c:	f002 f9c4 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8000f20:	f248 0320 	movw	r3, #32800	; 0x8020
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f32:	2305      	movs	r3, #5
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f002 f9b2 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000f44:	2301      	movs	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4842      	ldr	r0, [pc, #264]	; (8001064 <MX_GPIO_Init+0x2e4>)
 8000f5c:	f002 f9a4 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NE_Pin PSRAM_A11_Pin PSRAM_A10_Pin PSRAM_A15_Pin
                           PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A12_Pin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000f60:	f240 233f 	movw	r3, #575	; 0x23f
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f72:	230c      	movs	r3, #12
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	483d      	ldr	r0, [pc, #244]	; (8001074 <MX_GPIO_Init+0x2f4>)
 8000f7e:	f002 f993 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin OE_Pin D3_Pin WE_Pin
                           LCD_NE_Pin D1_Pin D0_Pin PSRAM_A17_Pin
                           PSRAM_A16_Pin PSRAM_A18_LCD_RS_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000f82:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f94:	230c      	movs	r3, #12
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4836      	ldr	r0, [pc, #216]	; (8001078 <MX_GPIO_Init+0x2f8>)
 8000fa0:	f002 f982 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fa4:	2340      	movs	r3, #64	; 0x40
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4829      	ldr	r0, [pc, #164]	; (8001064 <MX_GPIO_Init+0x2e4>)
 8000fc0:	f002 f972 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f002 f962 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8000fe4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <MX_GPIO_Init+0x2e0>)
 8001002:	f002 f951 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001006:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001018:	2304      	movs	r3, #4
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <MX_GPIO_Init+0x2ec>)
 8001024:	f002 f940 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001038:	2307      	movs	r3, #7
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_GPIO_Init+0x2ec>)
 8001044:	f002 f930 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001048:	235c      	movs	r3, #92	; 0x5c
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001058:	230d      	movs	r3, #13
 800105a:	e00f      	b.n	800107c <MX_GPIO_Init+0x2fc>
 800105c:	40021000 	.word	0x40021000
 8001060:	48001c00 	.word	0x48001c00
 8001064:	48002000 	.word	0x48002000
 8001068:	48000800 	.word	0x48000800
 800106c:	48000400 	.word	0x48000400
 8001070:	48001000 	.word	0x48001000
 8001074:	48001800 	.word	0x48001800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	48bf      	ldr	r0, [pc, #764]	; (8001384 <MX_GPIO_Init+0x604>)
 8001086:	f002 f90f 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800109c:	2302      	movs	r3, #2
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	48b8      	ldr	r0, [pc, #736]	; (8001388 <MX_GPIO_Init+0x608>)
 80010a8:	f002 f8fe 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80010ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010be:	2307      	movs	r3, #7
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	48b0      	ldr	r0, [pc, #704]	; (800138c <MX_GPIO_Init+0x60c>)
 80010ca:	f002 f8ed 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010ce:	2304      	movs	r3, #4
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010de:	230c      	movs	r3, #12
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	48a9      	ldr	r0, [pc, #676]	; (8001390 <MX_GPIO_Init+0x610>)
 80010ea:	f002 f8dd 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80010ee:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001100:	230c      	movs	r3, #12
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	48a2      	ldr	r0, [pc, #648]	; (8001394 <MX_GPIO_Init+0x614>)
 800110c:	f002 f8cc 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	489d      	ldr	r0, [pc, #628]	; (8001398 <MX_GPIO_Init+0x618>)
 8001124:	f002 f8c0 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8001128:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800113a:	230a      	movs	r3, #10
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f002 f8ae 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	488c      	ldr	r0, [pc, #560]	; (8001394 <MX_GPIO_Init+0x614>)
 8001164:	f002 f8a0 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001168:	2343      	movs	r3, #67	; 0x43
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	4886      	ldr	r0, [pc, #536]	; (8001398 <MX_GPIO_Init+0x618>)
 8001180:	f002 f892 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001184:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001196:	230c      	movs	r3, #12
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	487e      	ldr	r0, [pc, #504]	; (800139c <MX_GPIO_Init+0x61c>)
 80011a2:	f002 f881 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4875      	ldr	r0, [pc, #468]	; (8001394 <MX_GPIO_Init+0x614>)
 80011be:	f002 f873 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80011c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	486c      	ldr	r0, [pc, #432]	; (800138c <MX_GPIO_Init+0x60c>)
 80011da:	f002 f865 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f002 f853 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001202:	2384      	movs	r3, #132	; 0x84
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001212:	2306      	movs	r3, #6
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	485d      	ldr	r0, [pc, #372]	; (8001394 <MX_GPIO_Init+0x614>)
 800121e:	f002 f843 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001228:	230b      	movs	r3, #11
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4859      	ldr	r0, [pc, #356]	; (800139c <MX_GPIO_Init+0x61c>)
 8001238:	f002 f836 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 800123c:	231b      	movs	r3, #27
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001240:	230b      	movs	r3, #11
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4851      	ldr	r0, [pc, #324]	; (8001394 <MX_GPIO_Init+0x614>)
 8001250:	f002 f82a 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001254:	f640 0303 	movw	r3, #2051	; 0x803
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001266:	230a      	movs	r3, #10
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4845      	ldr	r0, [pc, #276]	; (8001388 <MX_GPIO_Init+0x608>)
 8001272:	f002 f819 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001276:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001288:	2308      	movs	r3, #8
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	483e      	ldr	r0, [pc, #248]	; (800138c <MX_GPIO_Init+0x60c>)
 8001294:	f002 f808 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001298:	2320      	movs	r3, #32
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	4839      	ldr	r0, [pc, #228]	; (8001394 <MX_GPIO_Init+0x614>)
 80012ae:	f001 fffb 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 80012b2:	2310      	movs	r3, #16
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012b6:	2311      	movs	r3, #17
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4833      	ldr	r0, [pc, #204]	; (8001398 <MX_GPIO_Init+0x618>)
 80012ca:	f001 ffed 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80012ce:	2312      	movs	r3, #18
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012d2:	230b      	movs	r3, #11
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f001 ffe0 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80012e8:	23c8      	movs	r3, #200	; 0xc8
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f8:	230a      	movs	r3, #10
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f001 ffcf 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800130a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001310:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001316:	2302      	movs	r3, #2
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_GPIO_Init+0x61c>)
 8001322:	f001 ffc1 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001338:	2305      	movs	r3, #5
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_GPIO_Init+0x608>)
 8001344:	f001 ffb0 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8001348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800134e:	2311      	movs	r3, #17
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2301      	movs	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <MX_GPIO_Init+0x608>)
 8001362:	f001 ffa1 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001366:	2304      	movs	r3, #4
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_GPIO_Init+0x608>)
 800137a:	f001 ff95 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	e00d      	b.n	80013a0 <MX_GPIO_Init+0x620>
 8001384:	48001000 	.word	0x48001000
 8001388:	48000400 	.word	0x48000400
 800138c:	48001800 	.word	0x48001800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48000800 	.word	0x48000800
 8001398:	48001c00 	.word	0x48001c00
 800139c:	48001400 	.word	0x48001400
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013ae:	230d      	movs	r3, #13
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_GPIO_Init+0x688>)
 80013ba:	f001 ff75 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013d0:	2306      	movs	r3, #6
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_GPIO_Init+0x688>)
 80013dc:	f001 ff64 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e6:	2311      	movs	r3, #17
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_GPIO_Init+0x688>)
 80013fa:	f001 ff55 	bl	80032a8 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3738      	adds	r7, #56	; 0x38
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	48000400 	.word	0x48000400

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <Error_Handler+0x30>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4618      	mov	r0, r3
 8001416:	f005 fa1b 	bl	8006850 <iprintf>
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <Error_Handler+0x34>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fa16 	bl	8006850 <iprintf>
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <Error_Handler+0x30>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fa11 	bl	8006850 <iprintf>
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <Error_Handler+0x38>)
 8001430:	f005 fa0e 	bl	8006850 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x2c>
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	20000020 	.word	0x20000020
 8001444:	080073c8 	.word	0x080073c8

08001448 <OV5640_WR_Reg>:
	{352, 288},	//CIF
	{640, 480},	//VGA
};

uint8_t OV5640_WR_Reg(uint16_t reg,uint8_t data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	717b      	strb	r3, [r7, #5]
	uint8_t res=0;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 800145c:	f000 fb0a 	bl	8001a74 <SCCB_Start>
	if(SCCB_WR_Byte(OV5640_ADDR))res=1;
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fb6f 	bl	8001b44 <SCCB_WR_Byte>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <OV5640_WR_Reg+0x28>
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg>>8))res=1;
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fb63 	bl	8001b44 <SCCB_WR_Byte>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <OV5640_WR_Reg+0x40>
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg))res=1;
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fb59 	bl	8001b44 <SCCB_WR_Byte>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <OV5640_WR_Reg+0x54>
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(data))res=1;
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fb50 	bl	8001b44 <SCCB_WR_Byte>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <OV5640_WR_Reg+0x66>
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 80014ae:	f000 fb03 	bl	8001ab8 <SCCB_Stop>
  	return	res;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <OV5640_RD_Reg>:


uint8_t OV5640_RD_Reg(uint16_t reg)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	uint8_t val=0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 80014ca:	f000 fad3 	bl	8001a74 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR);
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fb38 	bl	8001b44 <SCCB_WR_Byte>
   	SCCB_WR_Byte(reg>>8);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fb31 	bl	8001b44 <SCCB_WR_Byte>
  	SCCB_WR_Byte(reg);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb2c 	bl	8001b44 <SCCB_WR_Byte>
	SCCB_Stop();
 80014ec:	f000 fae4 	bl	8001ab8 <SCCB_Stop>

	SCCB_Start();
 80014f0:	f000 fac0 	bl	8001a74 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR|0X01);
 80014f4:	2079      	movs	r0, #121	; 0x79
 80014f6:	f000 fb25 	bl	8001b44 <SCCB_WR_Byte>
   	val=SCCB_RD_Byte();
 80014fa:	f000 fb77 	bl	8001bec <SCCB_RD_Byte>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 8001502:	f000 faf9 	bl	8001af8 <SCCB_No_Ack>
  	SCCB_Stop();
 8001506:	f000 fad7 	bl	8001ab8 <SCCB_Stop>
  	return val;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <OV5640_Init>:


uint8_t OV5640_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800151a:	2300      	movs	r3, #0
 800151c:	80fb      	strh	r3, [r7, #6]
	uint16_t reg;


	//OV5640_PWDN_Pin_RESET;		//POWER ON
	HAL_Delay(30);
 800151e:	201e      	movs	r0, #30
 8001520:	f000 feb4 	bl	800228c <HAL_Delay>

	reg=OV5640_RD_Reg(OV5640_CHIPIDH);
 8001524:	f243 000a 	movw	r0, #12298	; 0x300a
 8001528:	f7ff ffc8 	bl	80014bc <OV5640_RD_Reg>
 800152c:	4603      	mov	r3, r0
 800152e:	80bb      	strh	r3, [r7, #4]
	reg<<=8;
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	80bb      	strh	r3, [r7, #4]
	reg|=OV5640_RD_Reg(OV5640_CHIPIDL);
 8001536:	f243 000b 	movw	r0, #12299	; 0x300b
 800153a:	f7ff ffbf 	bl	80014bc <OV5640_RD_Reg>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	80bb      	strh	r3, [r7, #4]
	if(reg!=OV5640_ID)
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	f245 6240 	movw	r2, #22080	; 0x5640
 800154e:	4293      	cmp	r3, r2
 8001550:	d006      	beq.n	8001560 <OV5640_Init+0x4c>
	{
		printf("ID: %d \r\n",reg);
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <OV5640_Init+0xa0>)
 8001558:	f005 f97a 	bl	8006850 <iprintf>
		return 1;
 800155c:	2301      	movs	r3, #1
 800155e:	e024      	b.n	80015aa <OV5640_Init+0x96>
	}
	OV5640_WR_Reg(0x3103,0X11);	//system clock from pad, bit[1]
 8001560:	2111      	movs	r1, #17
 8001562:	f243 1003 	movw	r0, #12547	; 0x3103
 8001566:	f7ff ff6f 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0X3008,0X82);
 800156a:	2182      	movs	r1, #130	; 0x82
 800156c:	f243 0008 	movw	r0, #12296	; 0x3008
 8001570:	f7ff ff6a 	bl	8001448 <OV5640_WR_Reg>
	HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f000 fe89 	bl	800228c <HAL_Delay>

	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 800157a:	2300      	movs	r3, #0
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	e010      	b.n	80015a2 <OV5640_Init+0x8e>
	{
		OV5640_WR_Reg(ov5640_init_reg_tbl[i][0],ov5640_init_reg_tbl[i][1]);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <OV5640_Init+0xa4>)
 8001584:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	490b      	ldr	r1, [pc, #44]	; (80015b8 <OV5640_Init+0xa4>)
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff ff56 	bl	8001448 <OV5640_WR_Reg>
	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	3301      	adds	r3, #1
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	2bce      	cmp	r3, #206	; 0xce
 80015a6:	d9eb      	bls.n	8001580 <OV5640_Init+0x6c>
	}

	return 0x00; 	//ok
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	080073e8 	.word	0x080073e8
 80015b8:	08007530 	.word	0x08007530

080015bc <OV5640_RGB565_Mode>:
		OV5640_WR_Reg(OV5640_jpeg_reg_tbl[i][0],OV5640_jpeg_reg_tbl[i][1]);
	}
}

void OV5640_RGB565_Mode(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	80fb      	strh	r3, [r7, #6]
 80015ca:	e010      	b.n	80015ee <OV5640_RGB565_Mode+0x32>
	{
		OV5640_WR_Reg(ov5640_rgb565_reg_tbl[i][0],ov5640_rgb565_reg_tbl[i][1]);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <OV5640_RGB565_Mode+0x44>)
 80015d0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	490a      	ldr	r1, [pc, #40]	; (8001600 <OV5640_RGB565_Mode+0x44>)
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	885b      	ldrh	r3, [r3, #2]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f7ff ff30 	bl	8001448 <OV5640_WR_Reg>
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	3301      	adds	r3, #1
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	2b2c      	cmp	r3, #44	; 0x2c
 80015f2:	d9eb      	bls.n	80015cc <OV5640_RGB565_Mode+0x10>
	}
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800747c 	.word	0x0800747c

08001604 <OV5640_Light_Mode>:
//      1: sunny
//      2: office
//      3: cloudy
//      4: home
void OV5640_Light_Mode(uint8_t mode)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 800160e:	2103      	movs	r1, #3
 8001610:	f243 2012 	movw	r0, #12818	; 0x3212
 8001614:	f7ff ff18 	bl	8001448 <OV5640_WR_Reg>
	for(i=0;i<7;i++)OV5640_WR_Reg(0x3400+i,OV5640_LIGHTMODE_TBL[mode][i]);
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e013      	b.n	8001646 <OV5640_Light_Mode+0x42>
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	b29b      	uxth	r3, r3
 8001622:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8001626:	b298      	uxth	r0, r3
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	7bf9      	ldrb	r1, [r7, #15]
 800162c:	4c0e      	ldr	r4, [pc, #56]	; (8001668 <OV5640_Light_Mode+0x64>)
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	4423      	add	r3, r4
 8001636:	440b      	add	r3, r1
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff ff04 	bl	8001448 <OV5640_WR_Reg>
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d9e8      	bls.n	800161e <OV5640_Light_Mode+0x1a>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 800164c:	2113      	movs	r1, #19
 800164e:	f243 2012 	movw	r0, #12818	; 0x3212
 8001652:	f7ff fef9 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 8001656:	21a3      	movs	r1, #163	; 0xa3
 8001658:	f243 2012 	movw	r0, #12818	; 0x3212
 800165c:	f7ff fef4 	bl	8001448 <OV5640_WR_Reg>
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	0800786c 	.word	0x0800786c

0800166c <OV5640_Color_Saturation>:


// Color Saturation:
//   sat:  0 - 6
void OV5640_Color_Saturation(uint8_t sat)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8001676:	2103      	movs	r1, #3
 8001678:	f243 2012 	movw	r0, #12818	; 0x3212
 800167c:	f7ff fee4 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5381,0x1c);
 8001680:	211c      	movs	r1, #28
 8001682:	f245 3081 	movw	r0, #21377	; 0x5381
 8001686:	f7ff fedf 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5382,0x5a);
 800168a:	215a      	movs	r1, #90	; 0x5a
 800168c:	f245 3082 	movw	r0, #21378	; 0x5382
 8001690:	f7ff feda 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5383,0x06);
 8001694:	2106      	movs	r1, #6
 8001696:	f245 3083 	movw	r0, #21379	; 0x5383
 800169a:	f7ff fed5 	bl	8001448 <OV5640_WR_Reg>
	for(i=0;i<6;i++)  OV5640_WR_Reg(0x5384+i,OV5640_SATURATION_TBL[sat][i]);
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e015      	b.n	80016d0 <OV5640_Color_Saturation+0x64>
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 80016ac:	3304      	adds	r3, #4
 80016ae:	b298      	uxth	r0, r3
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	7bf9      	ldrb	r1, [r7, #15]
 80016b4:	4c14      	ldr	r4, [pc, #80]	; (8001708 <OV5640_Color_Saturation+0x9c>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4423      	add	r3, r4
 80016c0:	440b      	add	r3, r1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff febf 	bl	8001448 <OV5640_WR_Reg>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d9e6      	bls.n	80016a4 <OV5640_Color_Saturation+0x38>
	OV5640_WR_Reg(0x538b, 0x98);
 80016d6:	2198      	movs	r1, #152	; 0x98
 80016d8:	f245 308b 	movw	r0, #21387	; 0x538b
 80016dc:	f7ff feb4 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x538a, 0x01);
 80016e0:	2101      	movs	r1, #1
 80016e2:	f245 308a 	movw	r0, #21386	; 0x538a
 80016e6:	f7ff feaf 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0x13); //end group 3
 80016ea:	2113      	movs	r1, #19
 80016ec:	f243 2012 	movw	r0, #12818	; 0x3212
 80016f0:	f7ff feaa 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0xa3); //launch group 3
 80016f4:	21a3      	movs	r1, #163	; 0xa3
 80016f6:	f243 2012 	movw	r0, #12818	; 0x3212
 80016fa:	f7ff fea5 	bl	8001448 <OV5640_WR_Reg>
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}
 8001706:	bf00      	nop
 8001708:	08007890 	.word	0x08007890

0800170c <OV5640_Brightness>:

//Brightness
//     bright:  0 - 8
void OV5640_Brightness(uint8_t bright)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	uint8_t brtval;
	if(bright<4)brtval=4-bright;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d804      	bhi.n	8001726 <OV5640_Brightness+0x1a>
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f1c3 0304 	rsb	r3, r3, #4
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e002      	b.n	800172c <OV5640_Brightness+0x20>
	else brtval=bright-4;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	3b04      	subs	r3, #4
 800172a:	73fb      	strb	r3, [r7, #15]
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 800172c:	2103      	movs	r1, #3
 800172e:	f243 2012 	movw	r0, #12818	; 0x3212
 8001732:	f7ff fe89 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5587,brtval<<4);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	f245 5087 	movw	r0, #21895	; 0x5587
 8001742:	f7ff fe81 	bl	8001448 <OV5640_WR_Reg>
	if(bright<4)OV5640_WR_Reg(0x5588,0x09);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d805      	bhi.n	8001758 <OV5640_Brightness+0x4c>
 800174c:	2109      	movs	r1, #9
 800174e:	f245 5088 	movw	r0, #21896	; 0x5588
 8001752:	f7ff fe79 	bl	8001448 <OV5640_WR_Reg>
 8001756:	e004      	b.n	8001762 <OV5640_Brightness+0x56>
	else OV5640_WR_Reg(0x5588,0x01);
 8001758:	2101      	movs	r1, #1
 800175a:	f245 5088 	movw	r0, #21896	; 0x5588
 800175e:	f7ff fe73 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8001762:	2113      	movs	r1, #19
 8001764:	f243 2012 	movw	r0, #12818	; 0x3212
 8001768:	f7ff fe6e 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 800176c:	21a3      	movs	r1, #163	; 0xa3
 800176e:	f243 2012 	movw	r0, #12818	; 0x3212
 8001772:	f7ff fe69 	bl	8001448 <OV5640_WR_Reg>
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <OV5640_Contrast>:

//Contrast:
//     contrast:  0 - 6
void OV5640_Contrast(uint8_t contrast)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	uint8_t reg0val=0X00;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg1val=0X20;
 800178e:	2320      	movs	r3, #32
 8001790:	73bb      	strb	r3, [r7, #14]
	switch(contrast)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b06      	cmp	r3, #6
 8001796:	d82f      	bhi.n	80017f8 <OV5640_Contrast+0x78>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <OV5640_Contrast+0x20>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017bd 	.word	0x080017bd
 80017a4:	080017c7 	.word	0x080017c7
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	080017f9 	.word	0x080017f9
 80017b0:	080017db 	.word	0x080017db
 80017b4:	080017e5 	.word	0x080017e5
 80017b8:	080017ef 	.word	0x080017ef
	{
		case 0://-3
			reg1val=reg0val=0X14;
 80017bc:	2314      	movs	r3, #20
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	73bb      	strb	r3, [r7, #14]
			break;
 80017c4:	e018      	b.n	80017f8 <OV5640_Contrast+0x78>
		case 1://-2
			reg1val=reg0val=0X18;
 80017c6:	2318      	movs	r3, #24
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	73bb      	strb	r3, [r7, #14]
			break;
 80017ce:	e013      	b.n	80017f8 <OV5640_Contrast+0x78>
		case 2://-1
			reg1val=reg0val=0X1C;
 80017d0:	231c      	movs	r3, #28
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	73bb      	strb	r3, [r7, #14]
			break;
 80017d8:	e00e      	b.n	80017f8 <OV5640_Contrast+0x78>
		case 4://1
			reg0val=0X10;
 80017da:	2310      	movs	r3, #16
 80017dc:	73fb      	strb	r3, [r7, #15]
			reg1val=0X24;
 80017de:	2324      	movs	r3, #36	; 0x24
 80017e0:	73bb      	strb	r3, [r7, #14]
			break;
 80017e2:	e009      	b.n	80017f8 <OV5640_Contrast+0x78>
		case 5://2
			reg0val=0X18;
 80017e4:	2318      	movs	r3, #24
 80017e6:	73fb      	strb	r3, [r7, #15]
			reg1val=0X28;
 80017e8:	2328      	movs	r3, #40	; 0x28
 80017ea:	73bb      	strb	r3, [r7, #14]
			break;
 80017ec:	e004      	b.n	80017f8 <OV5640_Contrast+0x78>
		case 6://3
			reg0val=0X1C;
 80017ee:	231c      	movs	r3, #28
 80017f0:	73fb      	strb	r3, [r7, #15]
			reg1val=0X2C;
 80017f2:	232c      	movs	r3, #44	; 0x2c
 80017f4:	73bb      	strb	r3, [r7, #14]
			break;
 80017f6:	bf00      	nop
	}
	OV5640_WR_Reg(0x3212,0x03); //start group 3
 80017f8:	2103      	movs	r1, #3
 80017fa:	f243 2012 	movw	r0, #12818	; 0x3212
 80017fe:	f7ff fe23 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5585,reg0val);
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	4619      	mov	r1, r3
 8001806:	f245 5085 	movw	r0, #21893	; 0x5585
 800180a:	f7ff fe1d 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5586,reg1val);
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	4619      	mov	r1, r3
 8001812:	f245 5086 	movw	r0, #21894	; 0x5586
 8001816:	f7ff fe17 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 800181a:	2113      	movs	r1, #19
 800181c:	f243 2012 	movw	r0, #12818	; 0x3212
 8001820:	f7ff fe12 	bl	8001448 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 8001824:	21a3      	movs	r1, #163	; 0xa3
 8001826:	f243 2012 	movw	r0, #12818	; 0x3212
 800182a:	f7ff fe0d 	bl	8001448 <OV5640_WR_Reg>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop

08001838 <OV5640_Sharpness>:
// Sharpness:
//    sharp: 0 - 33   (0: close , 33: auto , other: Sharpness)

void OV5640_Sharpness(uint8_t sharp)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	if(sharp<33)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b20      	cmp	r3, #32
 8001846:	d80b      	bhi.n	8001860 <OV5640_Sharpness+0x28>
	{
		OV5640_WR_Reg(0x5308,0x65);
 8001848:	2165      	movs	r1, #101	; 0x65
 800184a:	f245 3008 	movw	r0, #21256	; 0x5308
 800184e:	f7ff fdfb 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,sharp);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4619      	mov	r1, r3
 8001856:	f245 3002 	movw	r0, #21250	; 0x5302
 800185a:	f7ff fdf5 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
		OV5640_WR_Reg(0x530b,0x04);
		OV5640_WR_Reg(0x530c,0x06);
	}

}
 800185e:	e02c      	b.n	80018ba <OV5640_Sharpness+0x82>
		OV5640_WR_Reg(0x5308,0x25);
 8001860:	2125      	movs	r1, #37	; 0x25
 8001862:	f245 3008 	movw	r0, #21256	; 0x5308
 8001866:	f7ff fdef 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5300,0x08);
 800186a:	2108      	movs	r1, #8
 800186c:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 8001870:	f7ff fdea 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5301,0x30);
 8001874:	2130      	movs	r1, #48	; 0x30
 8001876:	f245 3001 	movw	r0, #21249	; 0x5301
 800187a:	f7ff fde5 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,0x10);
 800187e:	2110      	movs	r1, #16
 8001880:	f245 3002 	movw	r0, #21250	; 0x5302
 8001884:	f7ff fde0 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5303,0x00);
 8001888:	2100      	movs	r1, #0
 800188a:	f245 3003 	movw	r0, #21251	; 0x5303
 800188e:	f7ff fddb 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5309,0x08);
 8001892:	2108      	movs	r1, #8
 8001894:	f245 3009 	movw	r0, #21257	; 0x5309
 8001898:	f7ff fdd6 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
 800189c:	2130      	movs	r1, #48	; 0x30
 800189e:	f245 300a 	movw	r0, #21258	; 0x530a
 80018a2:	f7ff fdd1 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530b,0x04);
 80018a6:	2104      	movs	r1, #4
 80018a8:	f245 300b 	movw	r0, #21259	; 0x530b
 80018ac:	f7ff fdcc 	bl	8001448 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530c,0x06);
 80018b0:	2106      	movs	r1, #6
 80018b2:	f245 300c 	movw	r0, #21260	; 0x530c
 80018b6:	f7ff fdc7 	bl	8001448 <OV5640_WR_Reg>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <OV5640_OutSize_Set>:
	else OV5640_WR_Reg(0X3019,0X00);
}

// set the output size
uint8_t OV5640_OutSize_Set(uint16_t offx,uint16_t offy,uint16_t width,uint16_t height)
{
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4604      	mov	r4, r0
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	4603      	mov	r3, r0
 80018d6:	80bb      	strh	r3, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	803b      	strh	r3, [r7, #0]
        OV5640_WR_Reg(0X3212,0X03);
 80018e0:	2103      	movs	r1, #3
 80018e2:	f243 2012 	movw	r0, #12818	; 0x3212
 80018e6:	f7ff fdaf 	bl	8001448 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3808,width>>8);
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4619      	mov	r1, r3
 80018f4:	f643 0008 	movw	r0, #14344	; 0x3808
 80018f8:	f7ff fda6 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3809,width&0xff);
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	f643 0009 	movw	r0, #14345	; 0x3809
 8001906:	f7ff fd9f 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380a,height>>8);
 800190a:	883b      	ldrh	r3, [r7, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	f643 000a 	movw	r0, #14346	; 0x380a
 8001918:	f7ff fd96 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380b,height&0xff);
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4619      	mov	r1, r3
 8001922:	f643 000b 	movw	r0, #14347	; 0x380b
 8001926:	f7ff fd8f 	bl	8001448 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3810,offx>>8);
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4619      	mov	r1, r3
 8001934:	f643 0010 	movw	r0, #14352	; 0x3810
 8001938:	f7ff fd86 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3811,offx&0xff);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	f643 0011 	movw	r0, #14353	; 0x3811
 8001946:	f7ff fd7f 	bl	8001448 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3812,offy>>8);
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	b29b      	uxth	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	f643 0012 	movw	r0, #14354	; 0x3812
 8001958:	f7ff fd76 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3813,offy&0xff);
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	f643 0013 	movw	r0, #14355	; 0x3813
 8001966:	f7ff fd6f 	bl	8001448 <OV5640_WR_Reg>

        OV5640_WR_Reg(0X3212,0X13);
 800196a:	2113      	movs	r1, #19
 800196c:	f243 2012 	movw	r0, #12818	; 0x3212
 8001970:	f7ff fd6a 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0X3212,0Xa3);
 8001974:	21a3      	movs	r1, #163	; 0xa3
 8001976:	f243 2012 	movw	r0, #12818	; 0x3212
 800197a:	f7ff fd65 	bl	8001448 <OV5640_WR_Reg>

        return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <rgb565_test>:
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4 );

}

void rgb565_test(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
        HAL_DCMI_Stop(&hdcmi);
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <rgb565_test+0xa4>)
 800198e:	f000 ff0b 	bl	80027a8 <HAL_DCMI_Stop>

        jpeg_mode = 0;
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <rgb565_test+0xa8>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]

				OV5640_RGB565_Mode();
 8001998:	f7ff fe10 	bl	80015bc <OV5640_RGB565_Mode>
        OV5640_OutSize_Set(0,0, XSIZE , YSIZE);
 800199c:	2378      	movs	r3, #120	; 0x78
 800199e:	22a0      	movs	r2, #160	; 0xa0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff ff8d 	bl	80018c2 <OV5640_OutSize_Set>
        /* Set image position */
        //ssd1289_SetCursor(0, 0);
        /* Prepare to write GRAM (0x22) */
        //LCD_IO_WriteReg(LCD_REG_34);

        OV5640_WR_Reg(0x3035,0X51); // slow down OV5640 clocks ,adapt to the refresh rate of the LCD
 80019a8:	2151      	movs	r1, #81	; 0x51
 80019aa:	f243 0035 	movw	r0, #12341	; 0x3035
 80019ae:	f7ff fd4b 	bl	8001448 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3036,0X88);
 80019b2:	2188      	movs	r1, #136	; 0x88
 80019b4:	f243 0036 	movw	r0, #12342	; 0x3036
 80019b8:	f7ff fd46 	bl	8001448 <OV5640_WR_Reg>

        /* DCMI DMA DeInit */
        HAL_DMA_DeInit(&hdma_dcmi);
 80019bc:	481d      	ldr	r0, [pc, #116]	; (8001a34 <rgb565_test+0xac>)
 80019be:	f001 fa23 	bl	8002e08 <HAL_DMA_DeInit>

        /* DCMI DMA Init */
        /* DCMI Init */
        hdma_dcmi.Instance = DMA2_Channel5;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <rgb565_test+0xac>)
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <rgb565_test+0xb0>)
 80019c6:	601a      	str	r2, [r3, #0]
        hdma_dcmi.Init.Request = DMA_REQUEST_4;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <rgb565_test+0xac>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	605a      	str	r2, [r3, #4]
        hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <rgb565_test+0xac>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
        hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <rgb565_test+0xac>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
        hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <rgb565_test+0xac>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	611a      	str	r2, [r3, #16]
        hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <rgb565_test+0xac>)
 80019e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e6:	615a      	str	r2, [r3, #20]
        hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <rgb565_test+0xac>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	619a      	str	r2, [r3, #24]
        hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <rgb565_test+0xac>)
 80019f2:	2220      	movs	r2, #32
 80019f4:	61da      	str	r2, [r3, #28]
        hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <rgb565_test+0xac>)
 80019f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fc:	621a      	str	r2, [r3, #32]

        if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <rgb565_test+0xac>)
 8001a00:	f001 f94a 	bl	8002c98 <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <rgb565_test+0x86>
        {
        	Error_Handler();
 8001a0a:	f7ff fcff 	bl	800140c <Error_Handler>
        }

        __HAL_LINKDMA(&hdcmi,DMA_Handle,hdma_dcmi);
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <rgb565_test+0xa4>)
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <rgb565_test+0xac>)
 8001a12:	651a      	str	r2, [r3, #80]	; 0x50
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <rgb565_test+0xac>)
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <rgb565_test+0xa4>)
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
        /* Start the Camera capture */
        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, 0x9600/4);
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <rgb565_test+0xb4>)
 8001a1c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a20:	2100      	movs	r1, #0
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <rgb565_test+0xa4>)
 8001a24:	f000 fdee 	bl	8002604 <HAL_DCMI_Start_DMA>
        //HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)LCD_GRAM_ADDRESS, 1);

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000b0 	.word	0x200000b0
 8001a30:	20000216 	.word	0x20000216
 8001a34:	20000114 	.word	0x20000114
 8001a38:	40020458 	.word	0x40020458
 8001a3c:	20000218 	.word	0x20000218

08001a40 <delay_6us>:



// Use for STM32F746IGT , HCLK = 200MHz
void delay_6us(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
        uint16_t  i;

        for(i=0;i < 250;i++);
 8001a46:	2300      	movs	r3, #0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	e002      	b.n	8001a52 <delay_6us+0x12>
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	80fb      	strh	r3, [r7, #6]
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2bf9      	cmp	r3, #249	; 0xf9
 8001a56:	d9f9      	bls.n	8001a4c <delay_6us+0xc>
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SCCB_Delay>:


void SCCB_Delay(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
	delay_6us();
 8001a6a:	f7ff ffe9 	bl	8001a40 <delay_6us>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <SCCB_Start>:

void SCCB_Start(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    OV5640_SIOD_H();
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <SCCB_Start+0x3c>)
 8001a80:	f001 fdbc 	bl	80035fc <HAL_GPIO_WritePin>
    OV5640_SIOC_H();
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <SCCB_Start+0x40>)
 8001a8a:	f001 fdb7 	bl	80035fc <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001a8e:	f7ff ffea 	bl	8001a66 <SCCB_Delay>
    OV5640_SIOD_L();
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <SCCB_Start+0x3c>)
 8001a9a:	f001 fdaf 	bl	80035fc <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001a9e:	f7ff ffe2 	bl	8001a66 <SCCB_Delay>
    OV5640_SIOC_L();
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <SCCB_Start+0x40>)
 8001aa8:	f001 fda8 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48001c00 	.word	0x48001c00

08001ab8 <SCCB_Stop>:

void SCCB_Stop(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    OV5640_SIOD_L();
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac2:	480b      	ldr	r0, [pc, #44]	; (8001af0 <SCCB_Stop+0x38>)
 8001ac4:	f001 fd9a 	bl	80035fc <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001ac8:	f7ff ffcd 	bl	8001a66 <SCCB_Delay>
    OV5640_SIOC_H();
 8001acc:	2201      	movs	r2, #1
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <SCCB_Stop+0x3c>)
 8001ad2:	f001 fd93 	bl	80035fc <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001ad6:	f7ff ffc6 	bl	8001a66 <SCCB_Delay>
    OV5640_SIOD_H();
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <SCCB_Stop+0x38>)
 8001ae2:	f001 fd8b 	bl	80035fc <HAL_GPIO_WritePin>
    SCCB_Delay();
 8001ae6:	f7ff ffbe 	bl	8001a66 <SCCB_Delay>
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	48000400 	.word	0x48000400
 8001af4:	48001c00 	.word	0x48001c00

08001af8 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	SCCB_Delay();
 8001afc:	f7ff ffb3 	bl	8001a66 <SCCB_Delay>
	OV5640_SIOD_H();
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <SCCB_No_Ack+0x44>)
 8001b08:	f001 fd78 	bl	80035fc <HAL_GPIO_WritePin>
	OV5640_SIOC_H();
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2110      	movs	r1, #16
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <SCCB_No_Ack+0x48>)
 8001b12:	f001 fd73 	bl	80035fc <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001b16:	f7ff ffa6 	bl	8001a66 <SCCB_Delay>
	OV5640_SIOC_L();
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4808      	ldr	r0, [pc, #32]	; (8001b40 <SCCB_No_Ack+0x48>)
 8001b20:	f001 fd6c 	bl	80035fc <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001b24:	f7ff ff9f 	bl	8001a66 <SCCB_Delay>
	OV5640_SIOD_L();
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <SCCB_No_Ack+0x44>)
 8001b30:	f001 fd64 	bl	80035fc <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001b34:	f7ff ff97 	bl	8001a66 <SCCB_Delay>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48001c00 	.word	0x48001c00

08001b44 <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e024      	b.n	8001b9e <SCCB_WR_Byte+0x5a>
	{
		if(dat&0x80)OV5640_SIOD_H();
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da06      	bge.n	8001b6a <SCCB_WR_Byte+0x26>
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b62:	4820      	ldr	r0, [pc, #128]	; (8001be4 <SCCB_WR_Byte+0xa0>)
 8001b64:	f001 fd4a 	bl	80035fc <HAL_GPIO_WritePin>
 8001b68:	e005      	b.n	8001b76 <SCCB_WR_Byte+0x32>
		else OV5640_SIOD_L();
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <SCCB_WR_Byte+0xa0>)
 8001b72:	f001 fd43 	bl	80035fc <HAL_GPIO_WritePin>
		dat<<=1;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 8001b7c:	f7ff ff73 	bl	8001a66 <SCCB_Delay>
		OV5640_SIOC_H();
 8001b80:	2201      	movs	r2, #1
 8001b82:	2110      	movs	r1, #16
 8001b84:	4818      	ldr	r0, [pc, #96]	; (8001be8 <SCCB_WR_Byte+0xa4>)
 8001b86:	f001 fd39 	bl	80035fc <HAL_GPIO_WritePin>
		SCCB_Delay();
 8001b8a:	f7ff ff6c 	bl	8001a66 <SCCB_Delay>
		OV5640_SIOC_L();
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2110      	movs	r1, #16
 8001b92:	4815      	ldr	r0, [pc, #84]	; (8001be8 <SCCB_WR_Byte+0xa4>)
 8001b94:	f001 fd32 	bl	80035fc <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d9d7      	bls.n	8001b54 <SCCB_WR_Byte+0x10>
	}
	SCCB_Delay();
 8001ba4:	f7ff ff5f 	bl	8001a66 <SCCB_Delay>
	OV5640_SIOC_H();
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <SCCB_WR_Byte+0xa4>)
 8001bae:	f001 fd25 	bl	80035fc <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001bb2:	f7ff ff58 	bl	8001a66 <SCCB_Delay>
	if(OV5640_SIOD_READ())res=1;
 8001bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <SCCB_WR_Byte+0xa0>)
 8001bbc:	f001 fd06 	bl	80035cc <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <SCCB_WR_Byte+0x88>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73bb      	strb	r3, [r7, #14]
 8001bca:	e001      	b.n	8001bd0 <SCCB_WR_Byte+0x8c>
	else res=0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73bb      	strb	r3, [r7, #14]
	OV5640_SIOC_L();
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <SCCB_WR_Byte+0xa4>)
 8001bd6:	f001 fd11 	bl	80035fc <HAL_GPIO_WritePin>
	return res;
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48001c00 	.word	0x48001c00

08001bec <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	for(j=8;j>0;j--)
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	71bb      	strb	r3, [r7, #6]
 8001bfa:	e01e      	b.n	8001c3a <SCCB_RD_Byte+0x4e>
	{
		SCCB_Delay();
 8001bfc:	f7ff ff33 	bl	8001a66 <SCCB_Delay>
		OV5640_SIOC_H();
 8001c00:	2201      	movs	r2, #1
 8001c02:	2110      	movs	r1, #16
 8001c04:	4811      	ldr	r0, [pc, #68]	; (8001c4c <SCCB_RD_Byte+0x60>)
 8001c06:	f001 fcf9 	bl	80035fc <HAL_GPIO_WritePin>
		temp=temp<<1;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	71fb      	strb	r3, [r7, #7]
		if(OV5640_SIOD_READ())temp++;
 8001c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c14:	480e      	ldr	r0, [pc, #56]	; (8001c50 <SCCB_RD_Byte+0x64>)
 8001c16:	f001 fcd9 	bl	80035cc <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <SCCB_RD_Byte+0x3a>
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 8001c26:	f7ff ff1e 	bl	8001a66 <SCCB_Delay>
		OV5640_SIOC_L();
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <SCCB_RD_Byte+0x60>)
 8001c30:	f001 fce4 	bl	80035fc <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1dd      	bne.n	8001bfc <SCCB_RD_Byte+0x10>
	}
	return temp;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	48001c00 	.word	0x48001c00
 8001c50:	48000400 	.word	0x48000400

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_MspInit+0x44>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_MspInit+0x44>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6613      	str	r3, [r2, #96]	; 0x60
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_MspInit+0x44>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_MspInit+0x44>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_MspInit+0x44>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_MspInit+0x44>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_DCMI_MspInit+0x148>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 808d 	bne.w	8001dda <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a3c      	ldr	r2, [pc, #240]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d08:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_DCMI_MspInit+0x14c>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001d20:	f645 7320 	movw	r3, #24352	; 0x5f20
 8001d24:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001d32:	230a      	movs	r3, #10
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	482b      	ldr	r0, [pc, #172]	; (8001dec <HAL_DCMI_MspInit+0x150>)
 8001d3e:	f001 fab3 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001d42:	23b0      	movs	r3, #176	; 0xb0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001d52:	230a      	movs	r3, #10
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4824      	ldr	r0, [pc, #144]	; (8001df0 <HAL_DCMI_MspInit+0x154>)
 8001d5e:	f001 faa3 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001d62:	2320      	movs	r3, #32
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001d72:	230a      	movs	r3, #10
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481d      	ldr	r0, [pc, #116]	; (8001df4 <HAL_DCMI_MspInit+0x158>)
 8001d7e:	f001 fa93 	bl	80032a8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_DCMI_MspInit+0x160>)
 8001d86:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001db2:	2220      	movs	r2, #32
 8001db4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001db8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001dbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001dc0:	f000 ff6a 	bl	8002c98 <HAL_DMA_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 8001dca:	f7ff fb1f 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_DCMI_MspInit+0x15c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	; 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	50050000 	.word	0x50050000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48001c00 	.word	0x48001c00
 8001df0:	48002000 	.word	0x48002000
 8001df4:	48001000 	.word	0x48001000
 8001df8:	20000114 	.word	0x20000114
 8001dfc:	4002046c 	.word	0x4002046c

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ae      	sub	sp, #184	; 0xb8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	228c      	movs	r2, #140	; 0x8c
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 f93f 	bl	80060a4 <memset>
  if(huart->Instance==USART2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_UART_MspInit+0xf4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d15c      	bne.n	8001eea <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fb0d 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e48:	f7ff fae0 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e56:	6593      	str	r3, [r2, #88]	; 0x58
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eac:	2307      	movs	r3, #7
 8001eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4810      	ldr	r0, [pc, #64]	; (8001efc <HAL_UART_MspInit+0xfc>)
 8001eba:	f001 f9f5 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f001 f9df 	bl	80032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	37b8      	adds	r7, #184	; 0xb8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40004400 	.word	0x40004400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000c00 	.word	0x48000c00

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 f97e 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8001f58:	2020      	movs	r0, #32
 8001f5a:	f001 fb81 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8001f5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f62:	f001 fb7d 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 8001f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f6a:	f001 fb79 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <USART2_IRQHandler+0x10>)
 8001f7a:	f003 f81b 	bl	8004fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000015c 	.word	0x2000015c

08001f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8001f8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f90:	f001 fb66 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8001f94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f98:	f001 fb62 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 8001f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fa0:	f001 fb5e 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8001fa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fa8:	f001 fb5a 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA2_Channel6_IRQHandler+0x10>)
 8001fb6:	f001 f898 	bl	80030ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000114 	.word	0x20000114

08001fc4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DCMI_IRQHandler+0x10>)
 8001fca:	f000 fc49 	bl	8002860 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200000b0 	.word	0x200000b0

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ff2:	f004 f813 	bl	800601c <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
	return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800201a:	e7fe      	b.n	800201a <_exit+0x12>

0800201c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
	}

return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
	return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207e:	605a      	str	r2, [r3, #4]
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_isatty>:

int _isatty(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	return 1;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
	return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f003 ff94 	bl	800601c <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20050000 	.word	0x20050000
 8002120:	00000400 	.word	0x00000400
 8002124:	2001f218 	.word	0x2001f218
 8002128:	2001f230 	.word	0x2001f230

0800212c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002154:	f7ff ffea 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <LoopForever+0x6>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	; (8002190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <LoopForever+0xe>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <LoopForever+0x16>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217e:	f003 ff65 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002182:	f7fe fbdd 	bl	8000940 <main>

08002186 <LoopForever>:

LoopForever:
    b LoopForever
 8002186:	e7fe      	b.n	8002186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002194:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 8002198:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800219c:	2001f230 	.word	0x2001f230

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>

080021a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f961 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f80e 	bl	80021d4 <HAL_InitTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	e001      	b.n	80021c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c4:	f7ff fd46 	bl	8001c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_InitTick+0x6c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_InitTick+0x70>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_InitTick+0x6c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f96d 	bl	80024de <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d809      	bhi.n	8002224 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f937 	bl	800248a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_InitTick+0x74>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e007      	b.n	8002234 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e004      	b.n	8002234 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e001      	b.n	8002234 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000002c 	.word	0x2000002c
 8002244:	20000024 	.word	0x20000024
 8002248:	20000028 	.word	0x20000028

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	2000002c 	.word	0x2000002c
 8002270:	2001f21c 	.word	0x2001f21c

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2001f21c 	.word	0x2001f21c

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff ffee 	bl	8002274 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffde 	bl	8002274 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000002c 	.word	0x2000002c

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff8e 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff29 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff3e 	bl	800231c <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff8e 	bl	80023c8 <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff31 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e075      	b.n	80025f6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fbbc 	bl	8001c9c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800253a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_DCMI_Init+0x108>)
 8002556:	400b      	ands	r3, r1
 8002558:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800256e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800257a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002586:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8002592:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800259e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d112      	bne.n	80025d6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7f1b      	ldrb	r3, [r3, #28]
 80025b4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7f5b      	ldrb	r3, [r3, #29]
 80025ba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80025bc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7f9b      	ldrb	r3, [r3, #30]
 80025c2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80025c4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7fdb      	ldrb	r3, [r3, #31]
 80025cc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80025d2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80025d4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 021f 	orr.w	r2, r2, #31
 80025e4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	ffe0f007 	.word	0xffe0f007

08002604 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_DCMI_Start_DMA+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e0b8      	b.n	8002792 <HAL_DCMI_Start_DMA+0x18e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263a:	f023 0302 	bic.w	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264a:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_DCMI_Start_DMA+0x198>)
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_DCMI_Start_DMA+0x19c>)
 800265a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002660:	2200      	movs	r2, #0
 8002662:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d21f      	bcs.n	80026ac <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3328      	adds	r3, #40	; 0x28
 800267c:	4619      	mov	r1, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	f000 fc53 	bl	8002f2c <HAL_DMA_Start_IT>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d075      	beq.n	8002778 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e072      	b.n	8002792 <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b0:	2220      	movs	r2, #32
 80026b2:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_DCMI_Start_DMA+0x1a0>)
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	f000 fa5f 	bl	8002b8c <DCMI_TransferSize>
 80026ce:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e053      	b.n	8002792 <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	005a      	lsls	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	085a      	lsrs	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	6979      	ldr	r1, [r7, #20]
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	441a      	add	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3328      	adds	r3, #40	; 0x28
 8002746:	4619      	mov	r1, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f000 fbed 	bl	8002f2c <HAL_DMA_Start_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00f      	beq.n	8002778 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00c      	b.n	8002792 <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	08002995 	.word	0x08002995
 80027a0:	08002b5d 	.word	0x08002b5d
 80027a4:	08002ac5 	.word	0x08002ac5

080027a8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_DCMI_Stop+0x1a>
 80027be:	2302      	movs	r3, #2
 80027c0:	e049      	b.n	8002856 <HAL_DCMI_Stop+0xae>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e2:	f7ff fd47 	bl	8002274 <HAL_GetTick>
 80027e6:	60b8      	str	r0, [r7, #8]

  /* Check if the DCMI capture is effectively disabled */
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 80027e8:	e010      	b.n	800280c <HAL_DCMI_Stop+0x64>
  {
    if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 80027ea:	f7ff fd43 	bl	8002274 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f8:	d908      	bls.n	800280c <HAL_DCMI_Stop+0x64>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	659a      	str	r2, [r3, #88]	; 0x58

      status = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	73fb      	strb	r3, [r7, #15]
      break;
 800280a:	e006      	b.n	800281a <HAL_DCMI_Stop+0x72>
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e7      	bne.n	80027ea <HAL_DCMI_Stop+0x42>
    }
  }

  /* Disable the DMA */
  if (HAL_DMA_Abort(hdcmi->DMA_Handle) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fbe4 	bl	8002fec <HAL_DMA_Abort>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_DCMI_Stop+0x8c>
  {
    DCMI_DMAError(hdcmi->DMA_Handle);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f994 	bl	8002b5c <DCMI_DMAError>
  }

  /* Disable DCMI IP */
  __HAL_DCMI_DISABLE(hdcmi);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002842:	601a      	str	r2, [r3, #0]

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2204      	movs	r2, #4
 8002880:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f043 0202 	orr.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_DCMI_IRQHandler+0xf4>)
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fbcd 	bl	8003068 <HAL_DMA_Abort_IT>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f93f 	bl	8002b5c <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f83b 	bl	800296c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f839 	bl	8002980 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d019      	beq.n	800294c <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d10b      	bne.n	800293e <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 021e 	bic.w	r2, r2, #30
 8002934:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd ffd2 	bl	80008f0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08002b5d 	.word	0x08002b5d

08002958 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_LineEventCallback() callback can be implemented in the user file.
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_VsyncEventCallback() callback can be implemented in the user file.
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d05c      	beq.n	8002a64 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10c      	bne.n	80029d0 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80029ce:	e075      	b.n	8002abc <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002a30:	6979      	ldr	r1, [r7, #20]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f000 fa79 	bl	8002f2c <HAL_DMA_Start_IT>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03d      	beq.n	8002abc <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8002a5c:	69f8      	ldr	r0, [r7, #28]
 8002a5e:	f7ff ff7b 	bl	8002958 <HAL_DCMI_ErrorCallback>
}
 8002a62:	e02b      	b.n	8002abc <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d124      	bne.n	8002abc <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01d      	beq.n	8002abc <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d10f      	bne.n	8002ab6 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 021e 	bic.w	r2, r2, #30
 8002aa4:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8002ab6:	69f8      	ldr	r0, [r7, #28]
 8002ab8:	f7fd ff1a 	bl	80008f0 <HAL_DCMI_FrameEventCallback>
}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03c      	beq.n	8002b54 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d036      	beq.n	8002b54 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	1ad2      	subs	r2, r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002b22:	68f9      	ldr	r1, [r7, #12]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f000 fa00 	bl	8002f2c <HAL_DMA_Start_IT>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff02 	bl	8002958 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff feea 	bl	8002958 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b096      	sub	sp, #88	; 0x58
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fa7d 	bl	80060a4 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8002baa:	2302      	movs	r3, #2
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 8002bae:	e02b      	b.n	8002c08 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <DCMI_TransferSize+0x108>)
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d328      	bcc.n	8002c10 <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 8002bbe:	e014      	b.n	8002bea <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3358      	adds	r3, #88	; 0x58
 8002bc6:	443b      	add	r3, r7
 8002bc8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3358      	adds	r3, #88	; 0x58
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <DCMI_TransferSize+0x108>)
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <DCMI_TransferSize+0x108>)
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bf8:	fb01 f202 	mul.w	r2, r1, r2
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0de      	beq.n	8002bc0 <DCMI_TransferSize+0x34>
    }
    j++;
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	3301      	adds	r3, #1
 8002c06:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d9d0      	bls.n	8002bb0 <DCMI_TransferSize+0x24>
 8002c0e:	e000      	b.n	8002c12 <DCMI_TransferSize+0x86>
      break;
 8002c10:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8002c18:	230f      	movs	r3, #15
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8002c1c:	e02c      	b.n	8002c78 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <DCMI_TransferSize+0x108>)
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d81d      	bhi.n	8002c70 <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 8002c34:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <DCMI_TransferSize+0x108>)
 8002c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3358      	adds	r3, #88	; 0x58
 8002c4a:	443b      	add	r3, r7
 8002c4c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3358      	adds	r3, #88	; 0x58
 8002c58:	443b      	add	r3, r7
 8002c5a:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3358      	adds	r3, #88	; 0x58
 8002c64:	443b      	add	r3, r7
 8002c66:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1d7      	bne.n	8002c1e <DCMI_TransferSize+0x92>
 8002c6e:	e000      	b.n	8002c72 <DCMI_TransferSize+0xe6>
        break;
 8002c70:	bf00      	nop
      }
    }
    j--;
 8002c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c74:	3b01      	subs	r3, #1
 8002c76:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8002c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <DCMI_TransferSize+0xfc>
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d9ea      	bls.n	8002c5e <DCMI_TransferSize+0xd2>
  }



  return output;
 8002c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3758      	adds	r7, #88	; 0x58
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	08007904 	.word	0x08007904

08002c98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e098      	b.n	8002ddc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_DMA_Init+0x150>)
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d80f      	bhi.n	8002cd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_DMA_Init+0x154>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <HAL_DMA_Init+0x158>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	009a      	lsls	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_DMA_Init+0x15c>)
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cd4:	e00e      	b.n	8002cf4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_DMA_Init+0x160>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_DMA_Init+0x158>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	009a      	lsls	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_DMA_Init+0x164>)
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4e:	d039      	beq.n	8002dc4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_DMA_Init+0x15c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d11a      	bne.n	8002d90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f003 031c 	and.w	r3, r3, #28
 8002d66:	210f      	movs	r1, #15
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4924      	ldr	r1, [pc, #144]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f003 031c 	and.w	r3, r3, #28
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	491d      	ldr	r1, [pc, #116]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
 8002d8e:	e019      	b.n	8002dc4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_DMA_Init+0x16c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f003 031c 	and.w	r3, r3, #28
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	4917      	ldr	r1, [pc, #92]	; (8002e04 <HAL_DMA_Init+0x16c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_DMA_Init+0x16c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 031c 	and.w	r3, r3, #28
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	4911      	ldr	r1, [pc, #68]	; (8002e04 <HAL_DMA_Init+0x16c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40020407 	.word	0x40020407
 8002dec:	bffdfff8 	.word	0xbffdfff8
 8002df0:	cccccccd 	.word	0xcccccccd
 8002df4:	40020000 	.word	0x40020000
 8002df8:	bffdfbf8 	.word	0xbffdfbf8
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	400200a8 	.word	0x400200a8
 8002e04:	400204a8 	.word	0x400204a8

08002e08 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e072      	b.n	8002f00 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_DMA_DeInit+0x104>)
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d80f      	bhi.n	8002e56 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_DMA_DeInit+0x108>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <HAL_DMA_DeInit+0x10c>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_DMA_DeInit+0x110>)
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
 8002e54:	e00e      	b.n	8002e74 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_DMA_DeInit+0x114>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_DMA_DeInit+0x10c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	009a      	lsls	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <HAL_DMA_DeInit+0x118>)
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f003 021c 	and.w	r2, r3, #28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_DMA_DeInit+0x110>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_DMA_DeInit+0x11c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 031c 	and.w	r3, r3, #28
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	491d      	ldr	r1, [pc, #116]	; (8002f24 <HAL_DMA_DeInit+0x11c>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e00c      	b.n	8002ed0 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_DMA_DeInit+0x120>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 031c 	and.w	r3, r3, #28
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4917      	ldr	r1, [pc, #92]	; (8002f28 <HAL_DMA_DeInit+0x120>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40020407 	.word	0x40020407
 8002f10:	bffdfff8 	.word	0xbffdfff8
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	bffdfbf8 	.word	0xbffdfbf8
 8002f20:	40020400 	.word	0x40020400
 8002f24:	400200a8 	.word	0x400200a8
 8002f28:	400204a8 	.word	0x400204a8

08002f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Start_IT+0x20>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e04b      	b.n	8002fe4 <HAL_DMA_Start_IT+0xb8>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d13a      	bne.n	8002fd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f95f 	bl	8003248 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 020e 	orr.w	r2, r2, #14
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 020a 	orr.w	r2, r2, #10
 8002fc2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e005      	b.n	8002fe2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d008      	beq.n	8003016 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 020e 	bic.w	r2, r2, #14
 8003024:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f003 021c 	and.w	r2, r3, #28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d005      	beq.n	800308c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e029      	b.n	80030e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f003 021c 	and.w	r2, r3, #28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
    }
  }
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f003 031c 	and.w	r3, r3, #28
 800310a:	2204      	movs	r2, #4
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d026      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7a>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d021      	beq.n	8003164 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0204 	bic.w	r2, r2, #4
 800313c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 021c 	and.w	r2, r3, #28
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2104      	movs	r1, #4
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	2b00      	cmp	r3, #0
 8003158:	d071      	beq.n	800323e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003162:	e06c      	b.n	800323e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f003 031c 	and.w	r3, r3, #28
 800316c:	2202      	movs	r2, #2
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02e      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xec>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d029      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020a 	bic.w	r2, r2, #10
 800319e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	f003 021c 	and.w	r2, r3, #28
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2102      	movs	r1, #2
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d038      	beq.n	800323e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031d4:	e033      	b.n	800323e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	f003 031c 	and.w	r3, r3, #28
 80031de:	2208      	movs	r2, #8
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d02a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d025      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f003 021c 	and.w	r2, r3, #28
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800323e:	bf00      	nop
 8003240:	bf00      	nop
}
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 021c 	and.w	r2, r3, #28
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d108      	bne.n	800328c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800328a:	e007      	b.n	800329c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b6:	e166      	b.n	8003586 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8158 	beq.w	8003580 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d005      	beq.n	80032e8 <HAL_GPIO_Init+0x40>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d130      	bne.n	800334a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800331e:	2201      	movs	r2, #1
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0201 	and.w	r2, r3, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b03      	cmp	r3, #3
 8003354:	d017      	beq.n	8003386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d123      	bne.n	80033da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80b2 	beq.w	8003580 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_GPIO_Init+0x2fc>)
 800341e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003420:	4a60      	ldr	r2, [pc, #384]	; (80035a4 <HAL_GPIO_Init+0x2fc>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6613      	str	r3, [r2, #96]	; 0x60
 8003428:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_GPIO_Init+0x2fc>)
 800342a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003434:	4a5c      	ldr	r2, [pc, #368]	; (80035a8 <HAL_GPIO_Init+0x300>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800345e:	d02b      	beq.n	80034b8 <HAL_GPIO_Init+0x210>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_GPIO_Init+0x304>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d025      	beq.n	80034b4 <HAL_GPIO_Init+0x20c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a51      	ldr	r2, [pc, #324]	; (80035b0 <HAL_GPIO_Init+0x308>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d01f      	beq.n	80034b0 <HAL_GPIO_Init+0x208>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a50      	ldr	r2, [pc, #320]	; (80035b4 <HAL_GPIO_Init+0x30c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d019      	beq.n	80034ac <HAL_GPIO_Init+0x204>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a4f      	ldr	r2, [pc, #316]	; (80035b8 <HAL_GPIO_Init+0x310>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_GPIO_Init+0x200>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_GPIO_Init+0x314>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00d      	beq.n	80034a4 <HAL_GPIO_Init+0x1fc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_GPIO_Init+0x318>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x1f8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_GPIO_Init+0x31c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_GPIO_Init+0x1f4>
 8003498:	2307      	movs	r3, #7
 800349a:	e00e      	b.n	80034ba <HAL_GPIO_Init+0x212>
 800349c:	2308      	movs	r3, #8
 800349e:	e00c      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034a0:	2306      	movs	r3, #6
 80034a2:	e00a      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034a4:	2305      	movs	r3, #5
 80034a6:	e008      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e006      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034ac:	2303      	movs	r3, #3
 80034ae:	e004      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_GPIO_Init+0x212>
 80034b8:	2300      	movs	r3, #0
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f002 0203 	and.w	r2, r2, #3
 80034c0:	0092      	lsls	r2, r2, #2
 80034c2:	4093      	lsls	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ca:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_GPIO_Init+0x300>)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3302      	adds	r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d8:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <HAL_GPIO_Init+0x320>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034fc:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_GPIO_Init+0x320>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_GPIO_Init+0x320>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003526:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <HAL_GPIO_Init+0x320>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800352c:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_GPIO_Init+0x320>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_GPIO_Init+0x320>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_GPIO_Init+0x320>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <HAL_GPIO_Init+0x320>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f ae91 	bne.w	80032b8 <HAL_GPIO_Init+0x10>
  }
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010000 	.word	0x40010000
 80035ac:	48000400 	.word	0x48000400
 80035b0:	48000800 	.word	0x48000800
 80035b4:	48000c00 	.word	0x48000c00
 80035b8:	48001000 	.word	0x48001000
 80035bc:	48001400 	.word	0x48001400
 80035c0:	48001800 	.word	0x48001800
 80035c4:	48001c00 	.word	0x48001c00
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e001      	b.n	80035ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003618:	e002      	b.n	8003620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4013      	ands	r3, r2
 8003644:	041a      	lsls	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43d9      	mvns	r1, r3
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	400b      	ands	r3, r1
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd f910 	bl	80008a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40007000 	.word	0x40007000

080036ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d130      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d038      	beq.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2232      	movs	r2, #50	; 0x32
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	3301      	adds	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f0:	e002      	b.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d102      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f2      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d110      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d007      	beq.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003734:	4a05      	ldr	r2, [pc, #20]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40007000 	.word	0x40007000
 8003750:	20000024 	.word	0x20000024
 8003754:	431bde83 	.word	0x431bde83

08003758 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_PWREx_EnableVddIO2+0x1c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003766:	6053      	str	r3, [r2, #4]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40007000 	.word	0x40007000

08003778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f000 bc08 	b.w	8003f9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378c:	4b96      	ldr	r3, [pc, #600]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003796:	4b94      	ldr	r3, [pc, #592]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80e4 	beq.w	8003976 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4c>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	f040 808b 	bne.w	80038d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 8087 	bne.w	80038d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_OscConfig+0x64>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e3df      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_RCC_OscConfig+0x7e>
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f4:	e005      	b.n	8003802 <HAL_RCC_OscConfig+0x8a>
 80037f6:	4b7c      	ldr	r3, [pc, #496]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80037f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003802:	4293      	cmp	r3, r2
 8003804:	d223      	bcs.n	800384e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fdc6 	bl	800439c <RCC_SetFlashLatencyFromMSIRange>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e3c0      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800381a:	4b73      	ldr	r3, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	496d      	ldr	r1, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	4968      	ldr	r1, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e025      	b.n	800389a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800384e:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4960      	ldr	r1, [pc, #384]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800386c:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	495b      	ldr	r1, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fd86 	bl	800439c <RCC_SetFlashLatencyFromMSIRange>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e380      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389a:	f000 fcbb 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4950      	ldr	r1, [pc, #320]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a4e      	ldr	r2, [pc, #312]	; (80039f0 <HAL_RCC_OscConfig+0x278>)
 80038b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ba:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc88 	bl	80021d4 <HAL_InitTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d052      	beq.n	8003974 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	e364      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d032      	beq.n	8003940 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fcc5 	bl	8002274 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ee:	f7fe fcc1 	bl	8002274 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e34d      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003900:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003912:	f043 0308 	orr.w	r3, r3, #8
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4930      	ldr	r1, [pc, #192]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	492b      	ldr	r1, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
 800393e:	e01a      	b.n	8003976 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003940:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800394c:	f7fe fc92 	bl	8002274 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003954:	f7fe fc8e 	bl	8002274 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e31a      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1dc>
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003974:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d073      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x21c>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d10e      	bne.n	80039ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d10b      	bne.n	80039ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d063      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15f      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e2f7      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b4:	d106      	bne.n	80039c4 <HAL_RCC_OscConfig+0x24c>
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e025      	b.n	8003a10 <HAL_RCC_OscConfig+0x298>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d114      	bne.n	80039f8 <HAL_RCC_OscConfig+0x280>
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a02      	ldr	r2, [pc, #8]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e013      	b.n	8003a10 <HAL_RCC_OscConfig+0x298>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	080078bc 	.word	0x080078bc
 80039f0:	20000024 	.word	0x20000024
 80039f4:	20000028 	.word	0x20000028
 80039f8:	4ba0      	ldr	r3, [pc, #640]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a9f      	ldr	r2, [pc, #636]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b9d      	ldr	r3, [pc, #628]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a9c      	ldr	r2, [pc, #624]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fc2c 	bl	8002274 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe fc28 	bl	8002274 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e2b4      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	4b92      	ldr	r3, [pc, #584]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2a8>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fc18 	bl	8002274 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fc14 	bl	8002274 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e2a0      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2d0>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d060      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x310>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d119      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d116      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x328>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e27d      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	4973      	ldr	r1, [pc, #460]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab4:	e040      	b.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d023      	beq.n	8003b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abe:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fbd3 	bl	8002274 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fbcf 	bl	8002274 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e25b      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae4:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b62      	ldr	r3, [pc, #392]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	495f      	ldr	r1, [pc, #380]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e018      	b.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b5d      	ldr	r3, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fbaf 	bl	8002274 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fbab 	bl	8002274 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e237      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b52:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fb8a 	bl	8002274 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fe fb86 	bl	8002274 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e212      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x3ec>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b86:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fe fb6d 	bl	8002274 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe fb69 	bl	8002274 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e1f5      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80a6 	beq.w	8003d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d118      	bne.n	8003c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c10:	f7fe fb30 	bl	8002274 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe fb2c 	bl	8002274 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1b8      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_RCC_OscConfig+0x508>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4d8>
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4e:	e029      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d115      	bne.n	8003c84 <HAL_RCC_OscConfig+0x50c>
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c78:	e014      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
 8003c84:	4b9d      	ldr	r3, [pc, #628]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a9c      	ldr	r2, [pc, #624]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c94:	4b99      	ldr	r3, [pc, #612]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fae2 	bl	8002274 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fade 	bl	8002274 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e168      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b8c      	ldr	r3, [pc, #560]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ed      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x53c>
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe facb 	bl	8002274 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fac7 	bl	8002274 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e151      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf8:	4b80      	ldr	r3, [pc, #512]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ed      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b7b      	ldr	r3, [pc, #492]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	4a7a      	ldr	r2, [pc, #488]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01c      	beq.n	8003d66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d2c:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d32:	4a72      	ldr	r2, [pc, #456]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fa9a 	bl	8002274 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d44:	f7fe fa96 	bl	8002274 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e122      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d56:	4b69      	ldr	r3, [pc, #420]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ef      	beq.n	8003d44 <HAL_RCC_OscConfig+0x5cc>
 8003d64:	e01b      	b.n	8003d9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d66:	4b65      	ldr	r3, [pc, #404]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6c:	4a63      	ldr	r2, [pc, #396]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fe fa7d 	bl	8002274 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d7e:	f7fe fa79 	bl	8002274 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e105      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d90:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ef      	bne.n	8003d7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80f9 	beq.w	8003f9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	f040 80cf 	bne.w	8003f50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003db2:	4b52      	ldr	r3, [pc, #328]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d12c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d123      	bne.n	8003e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d11b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d113      	bne.n	8003e20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	3b01      	subs	r3, #1
 8003e06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d071      	beq.n	8003f04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d068      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e26:	4b35      	ldr	r3, [pc, #212]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e32:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ac      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2d      	ldr	r2, [pc, #180]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e4e:	f7fe fa11 	bl	8002274 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fe fa0d 	bl	8002274 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e099      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_RCC_OscConfig+0x788>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e84:	3a01      	subs	r2, #1
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e8e:	0212      	lsls	r2, r2, #8
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0552      	lsls	r2, r2, #21
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ea2:	0852      	lsrs	r2, r2, #1
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	0652      	lsls	r2, r2, #25
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eae:	06d2      	lsls	r2, r2, #27
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	4912      	ldr	r1, [pc, #72]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed0:	f7fe f9d0 	bl	8002274 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe f9cc 	bl	8002274 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e058      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_RCC_OscConfig+0x784>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef6:	e050      	b.n	8003f9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e04f      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d144      	bne.n	8003f9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f28:	f7fe f9a4 	bl	8002274 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe f9a0 	bl	8002274 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e02c      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x7b8>
 8003f4e:	e024      	b.n	8003f9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d01f      	beq.n	8003f96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe f987 	bl	8002274 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe f983 	bl	8002274 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e00f      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	4905      	ldr	r1, [pc, #20]	; (8003fa4 <HAL_RCC_OscConfig+0x82c>)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x830>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	60cb      	str	r3, [r1, #12]
 8003f94:	e001      	b.n	8003f9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	feeefffc 	.word	0xfeeefffc

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0e7      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b75      	ldr	r3, [pc, #468]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d910      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b72      	ldr	r3, [pc, #456]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 0207 	bic.w	r2, r3, #7
 8003fd6:	4970      	ldr	r1, [pc, #448]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b6e      	ldr	r3, [pc, #440]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0cf      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004008:	429a      	cmp	r2, r3
 800400a:	d908      	bls.n	800401e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4960      	ldr	r1, [pc, #384]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04c      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	4b5a      	ldr	r3, [pc, #360]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d121      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0a6      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404a:	4b54      	ldr	r3, [pc, #336]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e09a      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004062:	4b4e      	ldr	r3, [pc, #312]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e08e      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004072:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e086      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b46      	ldr	r3, [pc, #280]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4943      	ldr	r1, [pc, #268]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004094:	f7fe f8ee 	bl	8002274 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fe f8ea 	bl	8002274 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e06e      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b3a      	ldr	r3, [pc, #232]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040dc:	429a      	cmp	r2, r3
 80040de:	d208      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b2e      	ldr	r3, [pc, #184]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	492b      	ldr	r1, [pc, #172]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d210      	bcs.n	8004122 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004100:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 0207 	bic.w	r2, r3, #7
 8004108:	4923      	ldr	r1, [pc, #140]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e036      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4918      	ldr	r1, [pc, #96]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4910      	ldr	r1, [pc, #64]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004160:	f000 f858 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	490b      	ldr	r1, [pc, #44]	; (80041a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1f8>)
 800417e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f825 	bl	80021d4 <HAL_InitTick>
 800418a:	4603      	mov	r3, r0
 800418c:	72fb      	strb	r3, [r7, #11]

  return status;
 800418e:	7afb      	ldrb	r3, [r7, #11]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40022000 	.word	0x40022000
 800419c:	40021000 	.word	0x40021000
 80041a0:	080078bc 	.word	0x080078bc
 80041a4:	20000024 	.word	0x20000024
 80041a8:	20000028 	.word	0x20000028

080041ac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_RCC_MCOConfig+0x64>)
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <HAL_RCC_MCOConfig+0x64>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_RCC_MCOConfig+0x64>)
 80041c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80041d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	2302      	movs	r3, #2
 80041d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041da:	2302      	movs	r3, #2
 80041dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80041e6:	f107 0314 	add.w	r3, r7, #20
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041f0:	f7ff f85a 	bl	80032a8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_MCOConfig+0x64>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	430b      	orrs	r3, r1
 8004202:	4903      	ldr	r1, [pc, #12]	; (8004210 <HAL_RCC_MCOConfig+0x64>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	; 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004222:	4b3e      	ldr	r3, [pc, #248]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x34>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d121      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d11e      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004248:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e005      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004284:	e00a      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d102      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e004      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d101      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_RCC_GetSysClockFreq+0x114>)
 800429a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d134      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0xa6>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d003      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0xac>
 80042b8:	e005      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 80042bc:	617b      	str	r3, [r7, #20]
      break;
 80042be:	e005      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_GetSysClockFreq+0x114>)
 80042c2:	617b      	str	r3, [r7, #20]
      break;
 80042c4:	e002      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	617b      	str	r3, [r7, #20]
      break;
 80042ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	3301      	adds	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	fb03 f202 	mul.w	r2, r3, r2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	0e5b      	lsrs	r3, r3, #25
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	3301      	adds	r3, #1
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800430c:	69bb      	ldr	r3, [r7, #24]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	080078d4 	.word	0x080078d4
 8004324:	00f42400 	.word	0x00f42400
 8004328:	007a1200 	.word	0x007a1200

0800432c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_RCC_GetHCLKFreq+0x14>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000024 	.word	0x20000024

08004344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004348:	f7ff fff0 	bl	800432c <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4904      	ldr	r1, [pc, #16]	; (800436c <HAL_RCC_GetPCLK1Freq+0x28>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	080078cc 	.word	0x080078cc

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004374:	f7ff ffda 	bl	800432c <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0adb      	lsrs	r3, r3, #11
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	080078cc 	.word	0x080078cc

0800439c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043b4:	f7ff f96c 	bl	8003690 <HAL_PWREx_GetVoltageRange>
 80043b8:	6178      	str	r0, [r7, #20]
 80043ba:	e014      	b.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	4a24      	ldr	r2, [pc, #144]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043d4:	f7ff f95c 	bl	8003690 <HAL_PWREx_GetVoltageRange>
 80043d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d10b      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d919      	bls.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2ba0      	cmp	r3, #160	; 0xa0
 80043f8:	d902      	bls.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043fa:	2302      	movs	r3, #2
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e013      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004400:	2301      	movs	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e010      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d902      	bls.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800440c:	2303      	movs	r3, #3
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e00a      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d102      	bne.n	800441e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004418:	2302      	movs	r3, #2
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	e004      	b.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d101      	bne.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004424:	2301      	movs	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 0207 	bic.w	r2, r3, #7
 8004430:	4909      	ldr	r1, [pc, #36]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	40022000 	.word	0x40022000

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004464:	2300      	movs	r3, #0
 8004466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004468:	2300      	movs	r3, #0
 800446a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004474:	2b00      	cmp	r3, #0
 8004476:	d041      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004480:	d02a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004486:	d824      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800448e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004492:	d81e      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800449c:	d010      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800449e:	e018      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a0:	4b86      	ldr	r3, [pc, #536]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a85      	ldr	r2, [pc, #532]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ac:	e015      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 facd 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044be:	e00c      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3320      	adds	r3, #32
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fbb6 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	74fb      	strb	r3, [r7, #19]
      break;
 80044d6:	e000      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e0:	4b76      	ldr	r3, [pc, #472]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ee:	4973      	ldr	r1, [pc, #460]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044f6:	e001      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d041      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004510:	d02a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004512:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004516:	d824      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800451c:	d008      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800451e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004522:	d81e      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800452c:	d010      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800452e:	e018      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004530:	4b62      	ldr	r3, [pc, #392]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a61      	ldr	r2, [pc, #388]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800453c:	e015      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fa85 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800454e:	e00c      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3320      	adds	r3, #32
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb6e 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	74fb      	strb	r3, [r7, #19]
      break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457e:	494f      	ldr	r1, [pc, #316]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004586:	e001      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a0 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045be:	6593      	str	r3, [r2, #88]	; 0x58
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045cc:	2301      	movs	r3, #1
 80045ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d0:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045dc:	f7fd fe4a 	bl	8002274 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e2:	e009      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd fe46 	bl	8002274 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d902      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	74fb      	strb	r3, [r7, #19]
        break;
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d15c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01f      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	d019      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004634:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a20      	ldr	r2, [pc, #128]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fe05 	bl	8002274 <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466c:	e00b      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd fe01 	bl	8002274 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d902      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	74fb      	strb	r3, [r7, #19]
            break;
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ec      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b2:	e009      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c8:	7c7b      	ldrb	r3, [r7, #17]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4ba6      	ldr	r3, [pc, #664]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	4aa5      	ldr	r2, [pc, #660]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e6:	4ba0      	ldr	r3, [pc, #640]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 0203 	bic.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	499c      	ldr	r1, [pc, #624]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004708:	4b97      	ldr	r3, [pc, #604]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 020c 	bic.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	4994      	ldr	r1, [pc, #592]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800472a:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	498b      	ldr	r1, [pc, #556]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4983      	ldr	r1, [pc, #524]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800476e:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	497a      	ldr	r1, [pc, #488]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004790:	4b75      	ldr	r3, [pc, #468]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	4972      	ldr	r1, [pc, #456]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	4969      	ldr	r1, [pc, #420]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e2:	4961      	ldr	r1, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	4958      	ldr	r1, [pc, #352]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	4950      	ldr	r1, [pc, #320]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800483a:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	4947      	ldr	r1, [pc, #284]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485c:	4b42      	ldr	r3, [pc, #264]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	493f      	ldr	r1, [pc, #252]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800487e:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4936      	ldr	r1, [pc, #216]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489e:	4b32      	ldr	r3, [pc, #200]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4a31      	ldr	r2, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a8:	60d3      	str	r3, [r2, #12]
 80048aa:	e011      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f8c9 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d028      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	491f      	ldr	r1, [pc, #124]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d106      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e011      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f89a 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004948:	4907      	ldr	r1, [pc, #28]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d108      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495a:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4a02      	ldr	r2, [pc, #8]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004964:	60d3      	str	r3, [r2, #12]
 8004966:	e013      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f869 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049aa:	4929      	ldr	r1, [pc, #164]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ba:	d10d      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f846 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	74bb      	strb	r3, [r7, #18]
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3320      	adds	r3, #32
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f925 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a18:	490d      	ldr	r1, [pc, #52]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	4904      	ldr	r1, [pc, #16]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a44:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000

08004a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a62:	4b74      	ldr	r3, [pc, #464]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a6e:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0203 	and.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d10d      	bne.n	8004a9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
       ||
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a86:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
       ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d047      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	e044      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d018      	beq.n	8004ada <RCCEx_PLLSAI1_Config+0x86>
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d825      	bhi.n	8004af8 <RCCEx_PLLSAI1_Config+0xa4>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d002      	beq.n	8004ab6 <RCCEx_PLLSAI1_Config+0x62>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d009      	beq.n	8004ac8 <RCCEx_PLLSAI1_Config+0x74>
 8004ab4:	e020      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ab6:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11d      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac6:	e01a      	b.n	8004afe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac8:	4b5a      	ldr	r3, [pc, #360]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad8:	e013      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ada:	4b56      	ldr	r3, [pc, #344]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ae6:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004af6:	e006      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      break;
 8004afc:	e004      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b0e:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	430b      	orrs	r3, r1
 8004b24:	4943      	ldr	r1, [pc, #268]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d17c      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b30:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a3f      	ldr	r2, [pc, #252]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fb9a 	bl	8002274 <HAL_GetTick>
 8004b40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b42:	e009      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b44:	f7fd fb96 	bl	8002274 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d902      	bls.n	8004b58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	73fb      	strb	r3, [r7, #15]
        break;
 8004b56:	e005      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ef      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d15f      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d110      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	06d2      	lsls	r2, r2, #27
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	492a      	ldr	r1, [pc, #168]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
 8004b90:	e027      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d112      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ba0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6912      	ldr	r2, [r2, #16]
 8004bae:	0852      	lsrs	r2, r2, #1
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0552      	lsls	r2, r2, #21
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	491f      	ldr	r1, [pc, #124]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
 8004bbc:	e011      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6892      	ldr	r2, [r2, #8]
 8004bce:	0211      	lsls	r1, r2, #8
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6952      	ldr	r2, [r2, #20]
 8004bd4:	0852      	lsrs	r2, r2, #1
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0652      	lsls	r2, r2, #25
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	4915      	ldr	r1, [pc, #84]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fd fb41 	bl	8002274 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf4:	e009      	b.n	8004c0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf6:	f7fd fb3d 	bl	8002274 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d902      	bls.n	8004c0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	73fb      	strb	r3, [r7, #15]
          break;
 8004c08:	e005      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ef      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000

08004c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c46:	4b69      	ldr	r3, [pc, #420]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c52:	4b66      	ldr	r3, [pc, #408]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0203 	and.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10d      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
       ||
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c6a:	4b60      	ldr	r3, [pc, #384]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
       ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d047      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e044      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d018      	beq.n	8004cbe <RCCEx_PLLSAI2_Config+0x86>
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d825      	bhi.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d002      	beq.n	8004c9a <RCCEx_PLLSAI2_Config+0x62>
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d009      	beq.n	8004cac <RCCEx_PLLSAI2_Config+0x74>
 8004c98:	e020      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c9a:	4b54      	ldr	r3, [pc, #336]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11d      	bne.n	8004ce2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004caa:	e01a      	b.n	8004ce2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cac:	4b4f      	ldr	r3, [pc, #316]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbc:	e013      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cca:	4b48      	ldr	r3, [pc, #288]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cda:	e006      	b.n	8004cea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e004      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	430b      	orrs	r3, r1
 8004d08:	4938      	ldr	r1, [pc, #224]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d166      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d14:	4b35      	ldr	r3, [pc, #212]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a34      	ldr	r2, [pc, #208]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fd faa8 	bl	8002274 <HAL_GetTick>
 8004d24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d26:	e009      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d28:	f7fd faa4 	bl	8002274 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
        break;
 8004d3a:	e005      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ef      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d149      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d110      	bne.n	8004d76 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6892      	ldr	r2, [r2, #8]
 8004d64:	0211      	lsls	r1, r2, #8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68d2      	ldr	r2, [r2, #12]
 8004d6a:	06d2      	lsls	r2, r2, #27
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	491f      	ldr	r1, [pc, #124]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	614b      	str	r3, [r1, #20]
 8004d74:	e011      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	0211      	lsls	r1, r2, #8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6912      	ldr	r2, [r2, #16]
 8004d8c:	0852      	lsrs	r2, r2, #1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0652      	lsls	r2, r2, #25
 8004d92:	430a      	orrs	r2, r1
 8004d94:	4915      	ldr	r1, [pc, #84]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fd fa65 	bl	8002274 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dac:	e009      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dae:	f7fd fa61 	bl	8002274 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d902      	bls.n	8004dc2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	73fb      	strb	r3, [r7, #15]
          break;
 8004dc0:	e005      	b.n	8004dce <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0ef      	beq.n	8004dae <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4903      	ldr	r1, [pc, #12]	; (8004dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000

08004df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e040      	b.n	8004e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fff4 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fbc2 	bl	80055b8 <UART_SetConfig>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e022      	b.n	8004e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fe6e 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fef5 	bl	8005c6c <UART_CheckIdleState>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 8082 	bne.w	8004faa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Transmit+0x26>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07a      	b.n	8004fac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit+0x38>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e073      	b.n	8004fac <HAL_UART_Transmit+0x120>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2221      	movs	r2, #33	; 0x21
 8004ed8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eda:	f7fd f9cb 	bl	8002274 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef8:	d108      	bne.n	8004f0c <HAL_UART_Transmit+0x80>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	e003      	b.n	8004f14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f1c:	e02d      	b.n	8004f7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fee8 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e039      	b.n	8004fac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	881a      	ldrh	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f4a:	b292      	uxth	r2, r2
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	3302      	adds	r3, #2
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	e008      	b.n	8004f68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cb      	bne.n	8004f1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2140      	movs	r1, #64	; 0x40
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 feb4 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e005      	b.n	8004fac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
  }
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b0ba      	sub	sp, #232	; 0xe8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004fde:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d115      	bne.n	800501c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 82a6 	beq.w	800555e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
      }
      return;
 800501a:	e2a0      	b.n	800555e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800501c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8117 	beq.w	8005254 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005036:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_UART_IRQHandler+0x298>)
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 810a 	beq.w	8005254 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d011      	beq.n	8005070 <HAL_UART_IRQHandler+0xbc>
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d011      	beq.n	80050a0 <HAL_UART_IRQHandler+0xec>
 800507c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2202      	movs	r2, #2
 800508e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d011      	beq.n	80050d0 <HAL_UART_IRQHandler+0x11c>
 80050ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2204      	movs	r2, #4
 80050be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c6:	f043 0202 	orr.w	r2, r3, #2
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d017      	beq.n	800510c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2208      	movs	r2, #8
 80050fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005102:	f043 0208 	orr.w	r2, r3, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <HAL_UART_IRQHandler+0x18a>
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 820c 	beq.w	8005562 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d005      	beq.n	8005196 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800518a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04f      	beq.n	8005236 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fe75 	bl	8005e86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d141      	bne.n	800522e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1d9      	bne.n	80051aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d013      	beq.n	8005226 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <HAL_UART_IRQHandler+0x29c>)
 8005204:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd ff2c 	bl	8003068 <HAL_DMA_Abort_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d017      	beq.n	8005246 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005220:	4610      	mov	r0, r2
 8005222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e00f      	b.n	8005246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9b0 	bl	800558c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	e00b      	b.n	8005246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9ac 	bl	800558c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	e007      	b.n	8005246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9a8 	bl	800558c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005244:	e18d      	b.n	8005562 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	bf00      	nop
    return;
 8005248:	e18b      	b.n	8005562 <HAL_UART_IRQHandler+0x5ae>
 800524a:	bf00      	nop
 800524c:	04000120 	.word	0x04000120
 8005250:	08005f4d 	.word	0x08005f4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	2b01      	cmp	r3, #1
 800525a:	f040 8146 	bne.w	80054ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 813f 	beq.w	80054ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8138 	beq.w	80054ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2210      	movs	r2, #16
 8005280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	f040 80b4 	bne.w	80053fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800529e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 815f 	beq.w	8005566 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b2:	429a      	cmp	r2, r3
 80052b4:	f080 8157 	bcs.w	8005566 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 8085 	bne.w	80053de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005302:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800530a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1da      	bne.n	80052d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800532e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3308      	adds	r3, #8
 800533e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800534a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e1      	bne.n	800531e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800536a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800537e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800538c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e3      	bne.n	800535a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e4      	bne.n	800539e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fd fe07 	bl	8002fec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8d4 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053f8:	e0b5      	b.n	8005566 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005406:	b29b      	uxth	r3, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80a7 	beq.w	800556a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800541c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80a2 	beq.w	800556a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800544e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e4      	bne.n	8005426 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	623b      	str	r3, [r7, #32]
   return(result);
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005480:	633a      	str	r2, [r7, #48]	; 0x30
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e3      	bne.n	800545c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0310 	bic.w	r3, r3, #16
 80054ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	617b      	str	r3, [r7, #20]
   return(result);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e4      	bne.n	80054a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f85c 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054e8:	e03f      	b.n	800556a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00e      	beq.n	8005514 <HAL_UART_IRQHandler+0x560>
 80054f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800550a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fd5d 	bl	8005fcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005512:	e02d      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01c      	beq.n	800556e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
    }
    return;
 800553c:	e017      	b.n	800556e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d012      	beq.n	8005570 <HAL_UART_IRQHandler+0x5bc>
 800554a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fd0e 	bl	8005f78 <UART_EndTransmit_IT>
    return;
 800555c:	e008      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
      return;
 800555e:	bf00      	nop
 8005560:	e006      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005562:	bf00      	nop
 8005564:	e004      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
      return;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_UART_IRQHandler+0x5bc>
    return;
 800556e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005570:	37e8      	adds	r7, #232	; 0xe8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4313      	orrs	r3, r2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4ba4      	ldr	r3, [pc, #656]	; (8005878 <UART_SetConfig+0x2c0>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a99      	ldr	r2, [pc, #612]	; (800587c <UART_SetConfig+0x2c4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	4313      	orrs	r3, r2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a90      	ldr	r2, [pc, #576]	; (8005880 <UART_SetConfig+0x2c8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d126      	bne.n	8005690 <UART_SetConfig+0xd8>
 8005642:	4b90      	ldr	r3, [pc, #576]	; (8005884 <UART_SetConfig+0x2cc>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d81b      	bhi.n	8005688 <UART_SetConfig+0xd0>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0xa0>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005669 	.word	0x08005669
 800565c:	08005679 	.word	0x08005679
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e116      	b.n	800589e <UART_SetConfig+0x2e6>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e112      	b.n	800589e <UART_SetConfig+0x2e6>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e10e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e10a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e106      	b.n	800589e <UART_SetConfig+0x2e6>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <UART_SetConfig+0x2d0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d138      	bne.n	800570c <UART_SetConfig+0x154>
 800569a:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <UART_SetConfig+0x2cc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d82d      	bhi.n	8005704 <UART_SetConfig+0x14c>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0xf8>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005705 	.word	0x08005705
 80056bc:	08005705 	.word	0x08005705
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	08005705 	.word	0x08005705
 80056c8:	08005705 	.word	0x08005705
 80056cc:	08005705 	.word	0x08005705
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005705 	.word	0x08005705
 80056dc:	08005705 	.word	0x08005705
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ea:	e0d8      	b.n	800589e <UART_SetConfig+0x2e6>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f2:	e0d4      	b.n	800589e <UART_SetConfig+0x2e6>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fa:	e0d0      	b.n	800589e <UART_SetConfig+0x2e6>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e0cc      	b.n	800589e <UART_SetConfig+0x2e6>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e0c8      	b.n	800589e <UART_SetConfig+0x2e6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a5e      	ldr	r2, [pc, #376]	; (800588c <UART_SetConfig+0x2d4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d125      	bne.n	8005762 <UART_SetConfig+0x1aa>
 8005716:	4b5b      	ldr	r3, [pc, #364]	; (8005884 <UART_SetConfig+0x2cc>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d016      	beq.n	8005752 <UART_SetConfig+0x19a>
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d818      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d00a      	beq.n	8005742 <UART_SetConfig+0x18a>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d814      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <UART_SetConfig+0x182>
 8005734:	2b10      	cmp	r3, #16
 8005736:	d008      	beq.n	800574a <UART_SetConfig+0x192>
 8005738:	e00f      	b.n	800575a <UART_SetConfig+0x1a2>
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005740:	e0ad      	b.n	800589e <UART_SetConfig+0x2e6>
 8005742:	2302      	movs	r3, #2
 8005744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005748:	e0a9      	b.n	800589e <UART_SetConfig+0x2e6>
 800574a:	2304      	movs	r3, #4
 800574c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005750:	e0a5      	b.n	800589e <UART_SetConfig+0x2e6>
 8005752:	2308      	movs	r3, #8
 8005754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005758:	e0a1      	b.n	800589e <UART_SetConfig+0x2e6>
 800575a:	2310      	movs	r3, #16
 800575c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005760:	e09d      	b.n	800589e <UART_SetConfig+0x2e6>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <UART_SetConfig+0x2d8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d125      	bne.n	80057b8 <UART_SetConfig+0x200>
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <UART_SetConfig+0x2cc>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005776:	2bc0      	cmp	r3, #192	; 0xc0
 8005778:	d016      	beq.n	80057a8 <UART_SetConfig+0x1f0>
 800577a:	2bc0      	cmp	r3, #192	; 0xc0
 800577c:	d818      	bhi.n	80057b0 <UART_SetConfig+0x1f8>
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d00a      	beq.n	8005798 <UART_SetConfig+0x1e0>
 8005782:	2b80      	cmp	r3, #128	; 0x80
 8005784:	d814      	bhi.n	80057b0 <UART_SetConfig+0x1f8>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <UART_SetConfig+0x1d8>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d008      	beq.n	80057a0 <UART_SetConfig+0x1e8>
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0x1f8>
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005796:	e082      	b.n	800589e <UART_SetConfig+0x2e6>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e07e      	b.n	800589e <UART_SetConfig+0x2e6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e07a      	b.n	800589e <UART_SetConfig+0x2e6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e076      	b.n	800589e <UART_SetConfig+0x2e6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e072      	b.n	800589e <UART_SetConfig+0x2e6>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a35      	ldr	r2, [pc, #212]	; (8005894 <UART_SetConfig+0x2dc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d12a      	bne.n	8005818 <UART_SetConfig+0x260>
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <UART_SetConfig+0x2cc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d0:	d01a      	beq.n	8005808 <UART_SetConfig+0x250>
 80057d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d6:	d81b      	bhi.n	8005810 <UART_SetConfig+0x258>
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d00c      	beq.n	80057f8 <UART_SetConfig+0x240>
 80057de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e2:	d815      	bhi.n	8005810 <UART_SetConfig+0x258>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <UART_SetConfig+0x238>
 80057e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ec:	d008      	beq.n	8005800 <UART_SetConfig+0x248>
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x258>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e052      	b.n	800589e <UART_SetConfig+0x2e6>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e04e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e04a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580e:	e046      	b.n	800589e <UART_SetConfig+0x2e6>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	e042      	b.n	800589e <UART_SetConfig+0x2e6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <UART_SetConfig+0x2c4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d13a      	bne.n	8005898 <UART_SetConfig+0x2e0>
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <UART_SetConfig+0x2cc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800582c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005830:	d01a      	beq.n	8005868 <UART_SetConfig+0x2b0>
 8005832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005836:	d81b      	bhi.n	8005870 <UART_SetConfig+0x2b8>
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d00c      	beq.n	8005858 <UART_SetConfig+0x2a0>
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d815      	bhi.n	8005870 <UART_SetConfig+0x2b8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <UART_SetConfig+0x298>
 8005848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0x2a8>
 800584e:	e00f      	b.n	8005870 <UART_SetConfig+0x2b8>
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e022      	b.n	800589e <UART_SetConfig+0x2e6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e01e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e01a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e016      	b.n	800589e <UART_SetConfig+0x2e6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e012      	b.n	800589e <UART_SetConfig+0x2e6>
 8005878:	efff69f3 	.word	0xefff69f3
 800587c:	40008000 	.word	0x40008000
 8005880:	40013800 	.word	0x40013800
 8005884:	40021000 	.word	0x40021000
 8005888:	40004400 	.word	0x40004400
 800588c:	40004800 	.word	0x40004800
 8005890:	40004c00 	.word	0x40004c00
 8005894:	40005000 	.word	0x40005000
 8005898:	2310      	movs	r3, #16
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a9f      	ldr	r2, [pc, #636]	; (8005b20 <UART_SetConfig+0x568>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d17a      	bne.n	800599e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d824      	bhi.n	80058fa <UART_SetConfig+0x342>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0x300>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058eb 	.word	0x080058eb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	080058fb 	.word	0x080058fb
 80058d8:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe fd32 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
        break;
 80058e2:	e010      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b8f      	ldr	r3, [pc, #572]	; (8005b24 <UART_SetConfig+0x56c>)
 80058e6:	61fb      	str	r3, [r7, #28]
        break;
 80058e8:	e00d      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fe fc93 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80058ee:	61f8      	str	r0, [r7, #28]
        break;
 80058f0:	e009      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	61fb      	str	r3, [r7, #28]
        break;
 80058f8:	e005      	b.n	8005906 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80fb 	beq.w	8005b04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	429a      	cmp	r2, r3
 800591c:	d305      	bcc.n	800592a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005930:	e0e8      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2200      	movs	r2, #0
 8005936:	461c      	mov	r4, r3
 8005938:	4615      	mov	r5, r2
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	022b      	lsls	r3, r5, #8
 8005944:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005948:	0222      	lsls	r2, r4, #8
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	6849      	ldr	r1, [r1, #4]
 800594e:	0849      	lsrs	r1, r1, #1
 8005950:	2000      	movs	r0, #0
 8005952:	4688      	mov	r8, r1
 8005954:	4681      	mov	r9, r0
 8005956:	eb12 0a08 	adds.w	sl, r2, r8
 800595a:	eb43 0b09 	adc.w	fp, r3, r9
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596c:	4650      	mov	r0, sl
 800596e:	4659      	mov	r1, fp
 8005970:	f7fa fc8e 	bl	8000290 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4613      	mov	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005982:	d308      	bcc.n	8005996 <UART_SetConfig+0x3de>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598a:	d204      	bcs.n	8005996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e0b6      	b.n	8005b04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800599c:	e0b2      	b.n	8005b04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d15e      	bne.n	8005a66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d828      	bhi.n	8005a02 <UART_SetConfig+0x44a>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x400>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	08005a03 	.word	0x08005a03
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	080059fb 	.word	0x080059fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fe fcb2 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e014      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fe fcc4 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 80059e8:	61f8      	str	r0, [r7, #28]
        break;
 80059ea:	e010      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ec:	4b4d      	ldr	r3, [pc, #308]	; (8005b24 <UART_SetConfig+0x56c>)
 80059ee:	61fb      	str	r3, [r7, #28]
        break;
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f2:	f7fe fc0f 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80059f6:	61f8      	str	r0, [r7, #28]
        break;
 80059f8:	e009      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fe:	61fb      	str	r3, [r7, #28]
        break;
 8005a00:	e005      	b.n	8005a0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d077      	beq.n	8005b04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005a      	lsls	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d916      	bls.n	8005a5e <UART_SetConfig+0x4a6>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d212      	bcs.n	8005a5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f023 030f 	bic.w	r3, r3, #15
 8005a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	8afa      	ldrh	r2, [r7, #22]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e052      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a64:	e04e      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d827      	bhi.n	8005abe <UART_SetConfig+0x506>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0x4bc>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	08005abf 	.word	0x08005abf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005abf 	.word	0x08005abf
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005abf 	.word	0x08005abf
 8005a94:	08005ab7 	.word	0x08005ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a98:	f7fe fc54 	bl	8004344 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	61f8      	str	r0, [r7, #28]
        break;
 8005a9e:	e014      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fe fc66 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	61f8      	str	r0, [r7, #28]
        break;
 8005aa6:	e010      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <UART_SetConfig+0x56c>)
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e00d      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aae:	f7fe fbb1 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8005ab2:	61f8      	str	r0, [r7, #28]
        break;
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aba:	61fb      	str	r3, [r7, #28]
        break;
 8005abc:	e005      	b.n	8005aca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085a      	lsrs	r2, r3, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d909      	bls.n	8005afe <UART_SetConfig+0x546>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af0:	d205      	bcs.n	8005afe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e002      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1e:	bf00      	nop
 8005b20:	40008000 	.word	0x40008000
 8005b24:	00f42400 	.word	0x00f42400

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c26:	d10a      	bne.n	8005c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fc fafa 	bl	8002274 <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10e      	bne.n	8005cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82d 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e023      	b.n	8005cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d10e      	bne.n	8005cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f817 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00d      	b.n	8005cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b09c      	sub	sp, #112	; 0x70
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	e0a5      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	f000 80a1 	beq.w	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fc faab 	bl	8002274 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d13e      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d44:	667b      	str	r3, [r7, #100]	; 0x64
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e6      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e067      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d04f      	beq.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d147      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e28:	623a      	str	r2, [r7, #32]
 8005e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e010      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4013      	ands	r3, r2
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f43f af4a 	beq.w	8005d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3770      	adds	r7, #112	; 0x70
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b095      	sub	sp, #84	; 0x54
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eac:	643b      	str	r3, [r7, #64]	; 0x40
 8005eae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e6      	bne.n	8005e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d118      	bne.n	8005f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	613b      	str	r3, [r7, #16]
   return(result);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f40:	bf00      	nop
 8005f42:	3754      	adds	r7, #84	; 0x54
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff fb0e 	bl	800558c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fada 	bl	8005578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <__assert_func>:
 8005fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <__assert_func+0x2c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4605      	mov	r5, r0
 8005fec:	68d8      	ldr	r0, [r3, #12]
 8005fee:	b14c      	cbz	r4, 8006004 <__assert_func+0x24>
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <__assert_func+0x30>)
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ff8:	4906      	ldr	r1, [pc, #24]	; (8006014 <__assert_func+0x34>)
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	f000 f814 	bl	8006028 <fiprintf>
 8006000:	f000 fd84 	bl	8006b0c <abort>
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <__assert_func+0x38>)
 8006006:	461c      	mov	r4, r3
 8006008:	e7f3      	b.n	8005ff2 <__assert_func+0x12>
 800600a:	bf00      	nop
 800600c:	20000030 	.word	0x20000030
 8006010:	08007944 	.word	0x08007944
 8006014:	08007951 	.word	0x08007951
 8006018:	0800797f 	.word	0x0800797f

0800601c <__errno>:
 800601c:	4b01      	ldr	r3, [pc, #4]	; (8006024 <__errno+0x8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000030 	.word	0x20000030

08006028 <fiprintf>:
 8006028:	b40e      	push	{r1, r2, r3}
 800602a:	b503      	push	{r0, r1, lr}
 800602c:	4601      	mov	r1, r0
 800602e:	ab03      	add	r3, sp, #12
 8006030:	4805      	ldr	r0, [pc, #20]	; (8006048 <fiprintf+0x20>)
 8006032:	f853 2b04 	ldr.w	r2, [r3], #4
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	f000 f945 	bl	80062c8 <_vfiprintf_r>
 800603e:	b002      	add	sp, #8
 8006040:	f85d eb04 	ldr.w	lr, [sp], #4
 8006044:	b003      	add	sp, #12
 8006046:	4770      	bx	lr
 8006048:	20000030 	.word	0x20000030

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f001 f878 	bl	8007154 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	08007a20 	.word	0x08007a20
 8006088:	08007a20 	.word	0x08007a20
 800608c:	08007a20 	.word	0x08007a20
 8006090:	08007a24 	.word	0x08007a24

08006094 <malloc>:
 8006094:	4b02      	ldr	r3, [pc, #8]	; (80060a0 <malloc+0xc>)
 8006096:	4601      	mov	r1, r0
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f000 b877 	b.w	800618c <_malloc_r>
 800609e:	bf00      	nop
 80060a0:	20000030 	.word	0x20000030

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <_free_r>:
 80060b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d044      	beq.n	8006144 <_free_r+0x90>
 80060ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060be:	9001      	str	r0, [sp, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f1a1 0404 	sub.w	r4, r1, #4
 80060c6:	bfb8      	it	lt
 80060c8:	18e4      	addlt	r4, r4, r3
 80060ca:	f000 ff47 	bl	8006f5c <__malloc_lock>
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <_free_r+0x94>)
 80060d0:	9801      	ldr	r0, [sp, #4]
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	b933      	cbnz	r3, 80060e4 <_free_r+0x30>
 80060d6:	6063      	str	r3, [r4, #4]
 80060d8:	6014      	str	r4, [r2, #0]
 80060da:	b003      	add	sp, #12
 80060dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e0:	f000 bf42 	b.w	8006f68 <__malloc_unlock>
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d908      	bls.n	80060fa <_free_r+0x46>
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf01      	itttt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	1949      	addeq	r1, r1, r5
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	e7ed      	b.n	80060d6 <_free_r+0x22>
 80060fa:	461a      	mov	r2, r3
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	b10b      	cbz	r3, 8006104 <_free_r+0x50>
 8006100:	42a3      	cmp	r3, r4
 8006102:	d9fa      	bls.n	80060fa <_free_r+0x46>
 8006104:	6811      	ldr	r1, [r2, #0]
 8006106:	1855      	adds	r5, r2, r1
 8006108:	42a5      	cmp	r5, r4
 800610a:	d10b      	bne.n	8006124 <_free_r+0x70>
 800610c:	6824      	ldr	r4, [r4, #0]
 800610e:	4421      	add	r1, r4
 8006110:	1854      	adds	r4, r2, r1
 8006112:	42a3      	cmp	r3, r4
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	d1e0      	bne.n	80060da <_free_r+0x26>
 8006118:	681c      	ldr	r4, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	6053      	str	r3, [r2, #4]
 800611e:	4421      	add	r1, r4
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	e7da      	b.n	80060da <_free_r+0x26>
 8006124:	d902      	bls.n	800612c <_free_r+0x78>
 8006126:	230c      	movs	r3, #12
 8006128:	6003      	str	r3, [r0, #0]
 800612a:	e7d6      	b.n	80060da <_free_r+0x26>
 800612c:	6825      	ldr	r5, [r4, #0]
 800612e:	1961      	adds	r1, r4, r5
 8006130:	428b      	cmp	r3, r1
 8006132:	bf04      	itt	eq
 8006134:	6819      	ldreq	r1, [r3, #0]
 8006136:	685b      	ldreq	r3, [r3, #4]
 8006138:	6063      	str	r3, [r4, #4]
 800613a:	bf04      	itt	eq
 800613c:	1949      	addeq	r1, r1, r5
 800613e:	6021      	streq	r1, [r4, #0]
 8006140:	6054      	str	r4, [r2, #4]
 8006142:	e7ca      	b.n	80060da <_free_r+0x26>
 8006144:	b003      	add	sp, #12
 8006146:	bd30      	pop	{r4, r5, pc}
 8006148:	2001f220 	.word	0x2001f220

0800614c <sbrk_aligned>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	4e0e      	ldr	r6, [pc, #56]	; (8006188 <sbrk_aligned+0x3c>)
 8006150:	460c      	mov	r4, r1
 8006152:	6831      	ldr	r1, [r6, #0]
 8006154:	4605      	mov	r5, r0
 8006156:	b911      	cbnz	r1, 800615e <sbrk_aligned+0x12>
 8006158:	f000 fc08 	bl	800696c <_sbrk_r>
 800615c:	6030      	str	r0, [r6, #0]
 800615e:	4621      	mov	r1, r4
 8006160:	4628      	mov	r0, r5
 8006162:	f000 fc03 	bl	800696c <_sbrk_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d00a      	beq.n	8006180 <sbrk_aligned+0x34>
 800616a:	1cc4      	adds	r4, r0, #3
 800616c:	f024 0403 	bic.w	r4, r4, #3
 8006170:	42a0      	cmp	r0, r4
 8006172:	d007      	beq.n	8006184 <sbrk_aligned+0x38>
 8006174:	1a21      	subs	r1, r4, r0
 8006176:	4628      	mov	r0, r5
 8006178:	f000 fbf8 	bl	800696c <_sbrk_r>
 800617c:	3001      	adds	r0, #1
 800617e:	d101      	bne.n	8006184 <sbrk_aligned+0x38>
 8006180:	f04f 34ff 	mov.w	r4, #4294967295
 8006184:	4620      	mov	r0, r4
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	2001f224 	.word	0x2001f224

0800618c <_malloc_r>:
 800618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	1ccd      	adds	r5, r1, #3
 8006192:	f025 0503 	bic.w	r5, r5, #3
 8006196:	3508      	adds	r5, #8
 8006198:	2d0c      	cmp	r5, #12
 800619a:	bf38      	it	cc
 800619c:	250c      	movcc	r5, #12
 800619e:	2d00      	cmp	r5, #0
 80061a0:	4607      	mov	r7, r0
 80061a2:	db01      	blt.n	80061a8 <_malloc_r+0x1c>
 80061a4:	42a9      	cmp	r1, r5
 80061a6:	d905      	bls.n	80061b4 <_malloc_r+0x28>
 80061a8:	230c      	movs	r3, #12
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	2600      	movs	r6, #0
 80061ae:	4630      	mov	r0, r6
 80061b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b4:	4e2e      	ldr	r6, [pc, #184]	; (8006270 <_malloc_r+0xe4>)
 80061b6:	f000 fed1 	bl	8006f5c <__malloc_lock>
 80061ba:	6833      	ldr	r3, [r6, #0]
 80061bc:	461c      	mov	r4, r3
 80061be:	bb34      	cbnz	r4, 800620e <_malloc_r+0x82>
 80061c0:	4629      	mov	r1, r5
 80061c2:	4638      	mov	r0, r7
 80061c4:	f7ff ffc2 	bl	800614c <sbrk_aligned>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	4604      	mov	r4, r0
 80061cc:	d14d      	bne.n	800626a <_malloc_r+0xde>
 80061ce:	6834      	ldr	r4, [r6, #0]
 80061d0:	4626      	mov	r6, r4
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d140      	bne.n	8006258 <_malloc_r+0xcc>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	4631      	mov	r1, r6
 80061da:	4638      	mov	r0, r7
 80061dc:	eb04 0803 	add.w	r8, r4, r3
 80061e0:	f000 fbc4 	bl	800696c <_sbrk_r>
 80061e4:	4580      	cmp	r8, r0
 80061e6:	d13a      	bne.n	800625e <_malloc_r+0xd2>
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	3503      	adds	r5, #3
 80061ec:	1a6d      	subs	r5, r5, r1
 80061ee:	f025 0503 	bic.w	r5, r5, #3
 80061f2:	3508      	adds	r5, #8
 80061f4:	2d0c      	cmp	r5, #12
 80061f6:	bf38      	it	cc
 80061f8:	250c      	movcc	r5, #12
 80061fa:	4629      	mov	r1, r5
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff ffa5 	bl	800614c <sbrk_aligned>
 8006202:	3001      	adds	r0, #1
 8006204:	d02b      	beq.n	800625e <_malloc_r+0xd2>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	442b      	add	r3, r5
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	e00e      	b.n	800622c <_malloc_r+0xa0>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	1b52      	subs	r2, r2, r5
 8006212:	d41e      	bmi.n	8006252 <_malloc_r+0xc6>
 8006214:	2a0b      	cmp	r2, #11
 8006216:	d916      	bls.n	8006246 <_malloc_r+0xba>
 8006218:	1961      	adds	r1, r4, r5
 800621a:	42a3      	cmp	r3, r4
 800621c:	6025      	str	r5, [r4, #0]
 800621e:	bf18      	it	ne
 8006220:	6059      	strne	r1, [r3, #4]
 8006222:	6863      	ldr	r3, [r4, #4]
 8006224:	bf08      	it	eq
 8006226:	6031      	streq	r1, [r6, #0]
 8006228:	5162      	str	r2, [r4, r5]
 800622a:	604b      	str	r3, [r1, #4]
 800622c:	4638      	mov	r0, r7
 800622e:	f104 060b 	add.w	r6, r4, #11
 8006232:	f000 fe99 	bl	8006f68 <__malloc_unlock>
 8006236:	f026 0607 	bic.w	r6, r6, #7
 800623a:	1d23      	adds	r3, r4, #4
 800623c:	1af2      	subs	r2, r6, r3
 800623e:	d0b6      	beq.n	80061ae <_malloc_r+0x22>
 8006240:	1b9b      	subs	r3, r3, r6
 8006242:	50a3      	str	r3, [r4, r2]
 8006244:	e7b3      	b.n	80061ae <_malloc_r+0x22>
 8006246:	6862      	ldr	r2, [r4, #4]
 8006248:	42a3      	cmp	r3, r4
 800624a:	bf0c      	ite	eq
 800624c:	6032      	streq	r2, [r6, #0]
 800624e:	605a      	strne	r2, [r3, #4]
 8006250:	e7ec      	b.n	800622c <_malloc_r+0xa0>
 8006252:	4623      	mov	r3, r4
 8006254:	6864      	ldr	r4, [r4, #4]
 8006256:	e7b2      	b.n	80061be <_malloc_r+0x32>
 8006258:	4634      	mov	r4, r6
 800625a:	6876      	ldr	r6, [r6, #4]
 800625c:	e7b9      	b.n	80061d2 <_malloc_r+0x46>
 800625e:	230c      	movs	r3, #12
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4638      	mov	r0, r7
 8006264:	f000 fe80 	bl	8006f68 <__malloc_unlock>
 8006268:	e7a1      	b.n	80061ae <_malloc_r+0x22>
 800626a:	6025      	str	r5, [r4, #0]
 800626c:	e7de      	b.n	800622c <_malloc_r+0xa0>
 800626e:	bf00      	nop
 8006270:	2001f220 	.word	0x2001f220

08006274 <__sfputc_r>:
 8006274:	6893      	ldr	r3, [r2, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	b410      	push	{r4}
 800627c:	6093      	str	r3, [r2, #8]
 800627e:	da08      	bge.n	8006292 <__sfputc_r+0x1e>
 8006280:	6994      	ldr	r4, [r2, #24]
 8006282:	42a3      	cmp	r3, r4
 8006284:	db01      	blt.n	800628a <__sfputc_r+0x16>
 8006286:	290a      	cmp	r1, #10
 8006288:	d103      	bne.n	8006292 <__sfputc_r+0x1e>
 800628a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628e:	f000 bb7d 	b.w	800698c <__swbuf_r>
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	1c58      	adds	r0, r3, #1
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	7019      	strb	r1, [r3, #0]
 800629a:	4608      	mov	r0, r1
 800629c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <__sfputs_r>:
 80062a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a4:	4606      	mov	r6, r0
 80062a6:	460f      	mov	r7, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	18d5      	adds	r5, r2, r3
 80062ac:	42ac      	cmp	r4, r5
 80062ae:	d101      	bne.n	80062b4 <__sfputs_r+0x12>
 80062b0:	2000      	movs	r0, #0
 80062b2:	e007      	b.n	80062c4 <__sfputs_r+0x22>
 80062b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b8:	463a      	mov	r2, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ffda 	bl	8006274 <__sfputc_r>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d1f3      	bne.n	80062ac <__sfputs_r+0xa>
 80062c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c8 <_vfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	460d      	mov	r5, r1
 80062ce:	b09d      	sub	sp, #116	; 0x74
 80062d0:	4614      	mov	r4, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	4606      	mov	r6, r0
 80062d6:	b118      	cbz	r0, 80062e0 <_vfiprintf_r+0x18>
 80062d8:	6983      	ldr	r3, [r0, #24]
 80062da:	b90b      	cbnz	r3, 80062e0 <_vfiprintf_r+0x18>
 80062dc:	f000 fd38 	bl	8006d50 <__sinit>
 80062e0:	4b89      	ldr	r3, [pc, #548]	; (8006508 <_vfiprintf_r+0x240>)
 80062e2:	429d      	cmp	r5, r3
 80062e4:	d11b      	bne.n	800631e <_vfiprintf_r+0x56>
 80062e6:	6875      	ldr	r5, [r6, #4]
 80062e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ea:	07d9      	lsls	r1, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_vfiprintf_r+0x32>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	059a      	lsls	r2, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_vfiprintf_r+0x32>
 80062f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062f6:	f000 fdc9 	bl	8006e8c <__retarget_lock_acquire_recursive>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	071b      	lsls	r3, r3, #28
 80062fe:	d501      	bpl.n	8006304 <_vfiprintf_r+0x3c>
 8006300:	692b      	ldr	r3, [r5, #16]
 8006302:	b9eb      	cbnz	r3, 8006340 <_vfiprintf_r+0x78>
 8006304:	4629      	mov	r1, r5
 8006306:	4630      	mov	r0, r6
 8006308:	f000 fb92 	bl	8006a30 <__swsetup_r>
 800630c:	b1c0      	cbz	r0, 8006340 <_vfiprintf_r+0x78>
 800630e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006310:	07dc      	lsls	r4, r3, #31
 8006312:	d50e      	bpl.n	8006332 <_vfiprintf_r+0x6a>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b01d      	add	sp, #116	; 0x74
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	4b7b      	ldr	r3, [pc, #492]	; (800650c <_vfiprintf_r+0x244>)
 8006320:	429d      	cmp	r5, r3
 8006322:	d101      	bne.n	8006328 <_vfiprintf_r+0x60>
 8006324:	68b5      	ldr	r5, [r6, #8]
 8006326:	e7df      	b.n	80062e8 <_vfiprintf_r+0x20>
 8006328:	4b79      	ldr	r3, [pc, #484]	; (8006510 <_vfiprintf_r+0x248>)
 800632a:	429d      	cmp	r5, r3
 800632c:	bf08      	it	eq
 800632e:	68f5      	ldreq	r5, [r6, #12]
 8006330:	e7da      	b.n	80062e8 <_vfiprintf_r+0x20>
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	0598      	lsls	r0, r3, #22
 8006336:	d4ed      	bmi.n	8006314 <_vfiprintf_r+0x4c>
 8006338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633a:	f000 fda8 	bl	8006e8e <__retarget_lock_release_recursive>
 800633e:	e7e9      	b.n	8006314 <_vfiprintf_r+0x4c>
 8006340:	2300      	movs	r3, #0
 8006342:	9309      	str	r3, [sp, #36]	; 0x24
 8006344:	2320      	movs	r3, #32
 8006346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800634a:	f8cd 800c 	str.w	r8, [sp, #12]
 800634e:	2330      	movs	r3, #48	; 0x30
 8006350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006514 <_vfiprintf_r+0x24c>
 8006354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006358:	f04f 0901 	mov.w	r9, #1
 800635c:	4623      	mov	r3, r4
 800635e:	469a      	mov	sl, r3
 8006360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006364:	b10a      	cbz	r2, 800636a <_vfiprintf_r+0xa2>
 8006366:	2a25      	cmp	r2, #37	; 0x25
 8006368:	d1f9      	bne.n	800635e <_vfiprintf_r+0x96>
 800636a:	ebba 0b04 	subs.w	fp, sl, r4
 800636e:	d00b      	beq.n	8006388 <_vfiprintf_r+0xc0>
 8006370:	465b      	mov	r3, fp
 8006372:	4622      	mov	r2, r4
 8006374:	4629      	mov	r1, r5
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff ff93 	bl	80062a2 <__sfputs_r>
 800637c:	3001      	adds	r0, #1
 800637e:	f000 80aa 	beq.w	80064d6 <_vfiprintf_r+0x20e>
 8006382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006384:	445a      	add	r2, fp
 8006386:	9209      	str	r2, [sp, #36]	; 0x24
 8006388:	f89a 3000 	ldrb.w	r3, [sl]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80a2 	beq.w	80064d6 <_vfiprintf_r+0x20e>
 8006392:	2300      	movs	r3, #0
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800639c:	f10a 0a01 	add.w	sl, sl, #1
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	9307      	str	r3, [sp, #28]
 80063a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a8:	931a      	str	r3, [sp, #104]	; 0x68
 80063aa:	4654      	mov	r4, sl
 80063ac:	2205      	movs	r2, #5
 80063ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b2:	4858      	ldr	r0, [pc, #352]	; (8006514 <_vfiprintf_r+0x24c>)
 80063b4:	f7f9 ff1c 	bl	80001f0 <memchr>
 80063b8:	9a04      	ldr	r2, [sp, #16]
 80063ba:	b9d8      	cbnz	r0, 80063f4 <_vfiprintf_r+0x12c>
 80063bc:	06d1      	lsls	r1, r2, #27
 80063be:	bf44      	itt	mi
 80063c0:	2320      	movmi	r3, #32
 80063c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c6:	0713      	lsls	r3, r2, #28
 80063c8:	bf44      	itt	mi
 80063ca:	232b      	movmi	r3, #43	; 0x2b
 80063cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d0:	f89a 3000 	ldrb.w	r3, [sl]
 80063d4:	2b2a      	cmp	r3, #42	; 0x2a
 80063d6:	d015      	beq.n	8006404 <_vfiprintf_r+0x13c>
 80063d8:	9a07      	ldr	r2, [sp, #28]
 80063da:	4654      	mov	r4, sl
 80063dc:	2000      	movs	r0, #0
 80063de:	f04f 0c0a 	mov.w	ip, #10
 80063e2:	4621      	mov	r1, r4
 80063e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e8:	3b30      	subs	r3, #48	; 0x30
 80063ea:	2b09      	cmp	r3, #9
 80063ec:	d94e      	bls.n	800648c <_vfiprintf_r+0x1c4>
 80063ee:	b1b0      	cbz	r0, 800641e <_vfiprintf_r+0x156>
 80063f0:	9207      	str	r2, [sp, #28]
 80063f2:	e014      	b.n	800641e <_vfiprintf_r+0x156>
 80063f4:	eba0 0308 	sub.w	r3, r0, r8
 80063f8:	fa09 f303 	lsl.w	r3, r9, r3
 80063fc:	4313      	orrs	r3, r2
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	46a2      	mov	sl, r4
 8006402:	e7d2      	b.n	80063aa <_vfiprintf_r+0xe2>
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	1d19      	adds	r1, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	9103      	str	r1, [sp, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfbb      	ittet	lt
 8006410:	425b      	neglt	r3, r3
 8006412:	f042 0202 	orrlt.w	r2, r2, #2
 8006416:	9307      	strge	r3, [sp, #28]
 8006418:	9307      	strlt	r3, [sp, #28]
 800641a:	bfb8      	it	lt
 800641c:	9204      	strlt	r2, [sp, #16]
 800641e:	7823      	ldrb	r3, [r4, #0]
 8006420:	2b2e      	cmp	r3, #46	; 0x2e
 8006422:	d10c      	bne.n	800643e <_vfiprintf_r+0x176>
 8006424:	7863      	ldrb	r3, [r4, #1]
 8006426:	2b2a      	cmp	r3, #42	; 0x2a
 8006428:	d135      	bne.n	8006496 <_vfiprintf_r+0x1ce>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	1d1a      	adds	r2, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	9203      	str	r2, [sp, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfb8      	it	lt
 8006436:	f04f 33ff 	movlt.w	r3, #4294967295
 800643a:	3402      	adds	r4, #2
 800643c:	9305      	str	r3, [sp, #20]
 800643e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006524 <_vfiprintf_r+0x25c>
 8006442:	7821      	ldrb	r1, [r4, #0]
 8006444:	2203      	movs	r2, #3
 8006446:	4650      	mov	r0, sl
 8006448:	f7f9 fed2 	bl	80001f0 <memchr>
 800644c:	b140      	cbz	r0, 8006460 <_vfiprintf_r+0x198>
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	eba0 000a 	sub.w	r0, r0, sl
 8006454:	fa03 f000 	lsl.w	r0, r3, r0
 8006458:	9b04      	ldr	r3, [sp, #16]
 800645a:	4303      	orrs	r3, r0
 800645c:	3401      	adds	r4, #1
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	482c      	ldr	r0, [pc, #176]	; (8006518 <_vfiprintf_r+0x250>)
 8006466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800646a:	2206      	movs	r2, #6
 800646c:	f7f9 fec0 	bl	80001f0 <memchr>
 8006470:	2800      	cmp	r0, #0
 8006472:	d03f      	beq.n	80064f4 <_vfiprintf_r+0x22c>
 8006474:	4b29      	ldr	r3, [pc, #164]	; (800651c <_vfiprintf_r+0x254>)
 8006476:	bb1b      	cbnz	r3, 80064c0 <_vfiprintf_r+0x1f8>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	3307      	adds	r3, #7
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	443b      	add	r3, r7
 8006488:	9309      	str	r3, [sp, #36]	; 0x24
 800648a:	e767      	b.n	800635c <_vfiprintf_r+0x94>
 800648c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006490:	460c      	mov	r4, r1
 8006492:	2001      	movs	r0, #1
 8006494:	e7a5      	b.n	80063e2 <_vfiprintf_r+0x11a>
 8006496:	2300      	movs	r3, #0
 8006498:	3401      	adds	r4, #1
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	4619      	mov	r1, r3
 800649e:	f04f 0c0a 	mov.w	ip, #10
 80064a2:	4620      	mov	r0, r4
 80064a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a8:	3a30      	subs	r2, #48	; 0x30
 80064aa:	2a09      	cmp	r2, #9
 80064ac:	d903      	bls.n	80064b6 <_vfiprintf_r+0x1ee>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0c5      	beq.n	800643e <_vfiprintf_r+0x176>
 80064b2:	9105      	str	r1, [sp, #20]
 80064b4:	e7c3      	b.n	800643e <_vfiprintf_r+0x176>
 80064b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ba:	4604      	mov	r4, r0
 80064bc:	2301      	movs	r3, #1
 80064be:	e7f0      	b.n	80064a2 <_vfiprintf_r+0x1da>
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4b16      	ldr	r3, [pc, #88]	; (8006520 <_vfiprintf_r+0x258>)
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	4630      	mov	r0, r6
 80064cc:	f3af 8000 	nop.w
 80064d0:	4607      	mov	r7, r0
 80064d2:	1c78      	adds	r0, r7, #1
 80064d4:	d1d6      	bne.n	8006484 <_vfiprintf_r+0x1bc>
 80064d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d8:	07d9      	lsls	r1, r3, #31
 80064da:	d405      	bmi.n	80064e8 <_vfiprintf_r+0x220>
 80064dc:	89ab      	ldrh	r3, [r5, #12]
 80064de:	059a      	lsls	r2, r3, #22
 80064e0:	d402      	bmi.n	80064e8 <_vfiprintf_r+0x220>
 80064e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064e4:	f000 fcd3 	bl	8006e8e <__retarget_lock_release_recursive>
 80064e8:	89ab      	ldrh	r3, [r5, #12]
 80064ea:	065b      	lsls	r3, r3, #25
 80064ec:	f53f af12 	bmi.w	8006314 <_vfiprintf_r+0x4c>
 80064f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f2:	e711      	b.n	8006318 <_vfiprintf_r+0x50>
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <_vfiprintf_r+0x258>)
 80064fc:	a904      	add	r1, sp, #16
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f880 	bl	8006604 <_printf_i>
 8006504:	e7e4      	b.n	80064d0 <_vfiprintf_r+0x208>
 8006506:	bf00      	nop
 8006508:	080079d8 	.word	0x080079d8
 800650c:	080079f8 	.word	0x080079f8
 8006510:	080079b8 	.word	0x080079b8
 8006514:	08007984 	.word	0x08007984
 8006518:	0800798e 	.word	0x0800798e
 800651c:	00000000 	.word	0x00000000
 8006520:	080062a3 	.word	0x080062a3
 8006524:	0800798a 	.word	0x0800798a

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4699      	mov	r9, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006544:	4607      	mov	r7, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc26      	bgt.n	80065be <_printf_common+0x96>
 8006570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006574:	1e13      	subs	r3, r2, #0
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42b      	bmi.n	80065d8 <_printf_common+0xb0>
 8006580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006584:	4649      	mov	r1, r9
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d01e      	beq.n	80065cc <_printf_common+0xa4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	68e5      	ldr	r5, [r4, #12]
 8006592:	6832      	ldr	r2, [r6, #0]
 8006594:	f003 0306 	and.w	r3, r3, #6
 8006598:	2b04      	cmp	r3, #4
 800659a:	bf08      	it	eq
 800659c:	1aad      	subeq	r5, r5, r2
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	6922      	ldr	r2, [r4, #16]
 80065a2:	bf0c      	ite	eq
 80065a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a8:	2500      	movne	r5, #0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bfc4      	itt	gt
 80065ae:	1a9b      	subgt	r3, r3, r2
 80065b0:	18ed      	addgt	r5, r5, r3
 80065b2:	2600      	movs	r6, #0
 80065b4:	341a      	adds	r4, #26
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d11a      	bne.n	80065f0 <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e008      	b.n	80065d0 <_printf_common+0xa8>
 80065be:	2301      	movs	r3, #1
 80065c0:	4652      	mov	r2, sl
 80065c2:	4649      	mov	r1, r9
 80065c4:	4638      	mov	r0, r7
 80065c6:	47c0      	blx	r8
 80065c8:	3001      	adds	r0, #1
 80065ca:	d103      	bne.n	80065d4 <_printf_common+0xac>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7c6      	b.n	8006566 <_printf_common+0x3e>
 80065d8:	18e1      	adds	r1, r4, r3
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	2030      	movs	r0, #48	; 0x30
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065e2:	4422      	add	r2, r4
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065ec:	3302      	adds	r3, #2
 80065ee:	e7c7      	b.n	8006580 <_printf_common+0x58>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4622      	mov	r2, r4
 80065f4:	4649      	mov	r1, r9
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c0      	blx	r8
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0e6      	beq.n	80065cc <_printf_common+0xa4>
 80065fe:	3601      	adds	r6, #1
 8006600:	e7d9      	b.n	80065b6 <_printf_common+0x8e>
	...

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800660c:	2f78      	cmp	r7, #120	; 0x78
 800660e:	4691      	mov	r9, r2
 8006610:	4680      	mov	r8, r0
 8006612:	460c      	mov	r4, r1
 8006614:	469a      	mov	sl, r3
 8006616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	; 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d8 	beq.w	80067d6 <_printf_i+0x1d2>
 8006626:	2f58      	cmp	r7, #88	; 0x58
 8006628:	f000 80a3 	beq.w	8006772 <_printf_i+0x16e>
 800662c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	; (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067bd 	.word	0x080067bd
 8006674:	080066e1 	.word	0x080066e1
 8006678:	0800679f 	.word	0x0800679f
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067df 	.word	0x080067df
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066e1 	.word	0x080066e1
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	080067a7 	.word	0x080067a7
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0a3      	b.n	80067f8 <_printf_i+0x1f4>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	6829      	ldr	r1, [r5, #0]
 80066b4:	0606      	lsls	r6, r0, #24
 80066b6:	f101 0304 	add.w	r3, r1, #4
 80066ba:	d50a      	bpl.n	80066d2 <_printf_i+0xce>
 80066bc:	680e      	ldr	r6, [r1, #0]
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	2e00      	cmp	r6, #0
 80066c2:	da03      	bge.n	80066cc <_printf_i+0xc8>
 80066c4:	232d      	movs	r3, #45	; 0x2d
 80066c6:	4276      	negs	r6, r6
 80066c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066cc:	485e      	ldr	r0, [pc, #376]	; (8006848 <_printf_i+0x244>)
 80066ce:	230a      	movs	r3, #10
 80066d0:	e019      	b.n	8006706 <_printf_i+0x102>
 80066d2:	680e      	ldr	r6, [r1, #0]
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066da:	bf18      	it	ne
 80066dc:	b236      	sxthne	r6, r6
 80066de:	e7ef      	b.n	80066c0 <_printf_i+0xbc>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	6820      	ldr	r0, [r4, #0]
 80066e4:	1d19      	adds	r1, r3, #4
 80066e6:	6029      	str	r1, [r5, #0]
 80066e8:	0601      	lsls	r1, r0, #24
 80066ea:	d501      	bpl.n	80066f0 <_printf_i+0xec>
 80066ec:	681e      	ldr	r6, [r3, #0]
 80066ee:	e002      	b.n	80066f6 <_printf_i+0xf2>
 80066f0:	0646      	lsls	r6, r0, #25
 80066f2:	d5fb      	bpl.n	80066ec <_printf_i+0xe8>
 80066f4:	881e      	ldrh	r6, [r3, #0]
 80066f6:	4854      	ldr	r0, [pc, #336]	; (8006848 <_printf_i+0x244>)
 80066f8:	2f6f      	cmp	r7, #111	; 0x6f
 80066fa:	bf0c      	ite	eq
 80066fc:	2308      	moveq	r3, #8
 80066fe:	230a      	movne	r3, #10
 8006700:	2100      	movs	r1, #0
 8006702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006706:	6865      	ldr	r5, [r4, #4]
 8006708:	60a5      	str	r5, [r4, #8]
 800670a:	2d00      	cmp	r5, #0
 800670c:	bfa2      	ittt	ge
 800670e:	6821      	ldrge	r1, [r4, #0]
 8006710:	f021 0104 	bicge.w	r1, r1, #4
 8006714:	6021      	strge	r1, [r4, #0]
 8006716:	b90e      	cbnz	r6, 800671c <_printf_i+0x118>
 8006718:	2d00      	cmp	r5, #0
 800671a:	d04d      	beq.n	80067b8 <_printf_i+0x1b4>
 800671c:	4615      	mov	r5, r2
 800671e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006722:	fb03 6711 	mls	r7, r3, r1, r6
 8006726:	5dc7      	ldrb	r7, [r0, r7]
 8006728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800672c:	4637      	mov	r7, r6
 800672e:	42bb      	cmp	r3, r7
 8006730:	460e      	mov	r6, r1
 8006732:	d9f4      	bls.n	800671e <_printf_i+0x11a>
 8006734:	2b08      	cmp	r3, #8
 8006736:	d10b      	bne.n	8006750 <_printf_i+0x14c>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	07de      	lsls	r6, r3, #31
 800673c:	d508      	bpl.n	8006750 <_printf_i+0x14c>
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	4299      	cmp	r1, r3
 8006744:	bfde      	ittt	le
 8006746:	2330      	movle	r3, #48	; 0x30
 8006748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800674c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006750:	1b52      	subs	r2, r2, r5
 8006752:	6122      	str	r2, [r4, #16]
 8006754:	f8cd a000 	str.w	sl, [sp]
 8006758:	464b      	mov	r3, r9
 800675a:	aa03      	add	r2, sp, #12
 800675c:	4621      	mov	r1, r4
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff fee2 	bl	8006528 <_printf_common>
 8006764:	3001      	adds	r0, #1
 8006766:	d14c      	bne.n	8006802 <_printf_i+0x1fe>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	b004      	add	sp, #16
 800676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006772:	4835      	ldr	r0, [pc, #212]	; (8006848 <_printf_i+0x244>)
 8006774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006778:	6829      	ldr	r1, [r5, #0]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006780:	6029      	str	r1, [r5, #0]
 8006782:	061d      	lsls	r5, r3, #24
 8006784:	d514      	bpl.n	80067b0 <_printf_i+0x1ac>
 8006786:	07df      	lsls	r7, r3, #31
 8006788:	bf44      	itt	mi
 800678a:	f043 0320 	orrmi.w	r3, r3, #32
 800678e:	6023      	strmi	r3, [r4, #0]
 8006790:	b91e      	cbnz	r6, 800679a <_printf_i+0x196>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	f023 0320 	bic.w	r3, r3, #32
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	2310      	movs	r3, #16
 800679c:	e7b0      	b.n	8006700 <_printf_i+0xfc>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f043 0320 	orr.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	2378      	movs	r3, #120	; 0x78
 80067a8:	4828      	ldr	r0, [pc, #160]	; (800684c <_printf_i+0x248>)
 80067aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ae:	e7e3      	b.n	8006778 <_printf_i+0x174>
 80067b0:	0659      	lsls	r1, r3, #25
 80067b2:	bf48      	it	mi
 80067b4:	b2b6      	uxthmi	r6, r6
 80067b6:	e7e6      	b.n	8006786 <_printf_i+0x182>
 80067b8:	4615      	mov	r5, r2
 80067ba:	e7bb      	b.n	8006734 <_printf_i+0x130>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	6826      	ldr	r6, [r4, #0]
 80067c0:	6961      	ldr	r1, [r4, #20]
 80067c2:	1d18      	adds	r0, r3, #4
 80067c4:	6028      	str	r0, [r5, #0]
 80067c6:	0635      	lsls	r5, r6, #24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	d501      	bpl.n	80067d0 <_printf_i+0x1cc>
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <_printf_i+0x1d2>
 80067d0:	0670      	lsls	r0, r6, #25
 80067d2:	d5fb      	bpl.n	80067cc <_printf_i+0x1c8>
 80067d4:	8019      	strh	r1, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	4615      	mov	r5, r2
 80067dc:	e7ba      	b.n	8006754 <_printf_i+0x150>
 80067de:	682b      	ldr	r3, [r5, #0]
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	602a      	str	r2, [r5, #0]
 80067e4:	681d      	ldr	r5, [r3, #0]
 80067e6:	6862      	ldr	r2, [r4, #4]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7f9 fd00 	bl	80001f0 <memchr>
 80067f0:	b108      	cbz	r0, 80067f6 <_printf_i+0x1f2>
 80067f2:	1b40      	subs	r0, r0, r5
 80067f4:	6060      	str	r0, [r4, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	2300      	movs	r3, #0
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006800:	e7a8      	b.n	8006754 <_printf_i+0x150>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	462a      	mov	r2, r5
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d0ab      	beq.n	8006768 <_printf_i+0x164>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	d413      	bmi.n	800683e <_printf_i+0x23a>
 8006816:	68e0      	ldr	r0, [r4, #12]
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	4298      	cmp	r0, r3
 800681c:	bfb8      	it	lt
 800681e:	4618      	movlt	r0, r3
 8006820:	e7a4      	b.n	800676c <_printf_i+0x168>
 8006822:	2301      	movs	r3, #1
 8006824:	4632      	mov	r2, r6
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d09b      	beq.n	8006768 <_printf_i+0x164>
 8006830:	3501      	adds	r5, #1
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	9903      	ldr	r1, [sp, #12]
 8006836:	1a5b      	subs	r3, r3, r1
 8006838:	42ab      	cmp	r3, r5
 800683a:	dcf2      	bgt.n	8006822 <_printf_i+0x21e>
 800683c:	e7eb      	b.n	8006816 <_printf_i+0x212>
 800683e:	2500      	movs	r5, #0
 8006840:	f104 0619 	add.w	r6, r4, #25
 8006844:	e7f5      	b.n	8006832 <_printf_i+0x22e>
 8006846:	bf00      	nop
 8006848:	08007995 	.word	0x08007995
 800684c:	080079a6 	.word	0x080079a6

08006850 <iprintf>:
 8006850:	b40f      	push	{r0, r1, r2, r3}
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <iprintf+0x2c>)
 8006854:	b513      	push	{r0, r1, r4, lr}
 8006856:	681c      	ldr	r4, [r3, #0]
 8006858:	b124      	cbz	r4, 8006864 <iprintf+0x14>
 800685a:	69a3      	ldr	r3, [r4, #24]
 800685c:	b913      	cbnz	r3, 8006864 <iprintf+0x14>
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fa76 	bl	8006d50 <__sinit>
 8006864:	ab05      	add	r3, sp, #20
 8006866:	9a04      	ldr	r2, [sp, #16]
 8006868:	68a1      	ldr	r1, [r4, #8]
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	4620      	mov	r0, r4
 800686e:	f7ff fd2b 	bl	80062c8 <_vfiprintf_r>
 8006872:	b002      	add	sp, #8
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	b004      	add	sp, #16
 800687a:	4770      	bx	lr
 800687c:	20000030 	.word	0x20000030

08006880 <_puts_r>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	460e      	mov	r6, r1
 8006884:	4605      	mov	r5, r0
 8006886:	b118      	cbz	r0, 8006890 <_puts_r+0x10>
 8006888:	6983      	ldr	r3, [r0, #24]
 800688a:	b90b      	cbnz	r3, 8006890 <_puts_r+0x10>
 800688c:	f000 fa60 	bl	8006d50 <__sinit>
 8006890:	69ab      	ldr	r3, [r5, #24]
 8006892:	68ac      	ldr	r4, [r5, #8]
 8006894:	b913      	cbnz	r3, 800689c <_puts_r+0x1c>
 8006896:	4628      	mov	r0, r5
 8006898:	f000 fa5a 	bl	8006d50 <__sinit>
 800689c:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <_puts_r+0xd0>)
 800689e:	429c      	cmp	r4, r3
 80068a0:	d120      	bne.n	80068e4 <_puts_r+0x64>
 80068a2:	686c      	ldr	r4, [r5, #4]
 80068a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d405      	bmi.n	80068b6 <_puts_r+0x36>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	0598      	lsls	r0, r3, #22
 80068ae:	d402      	bmi.n	80068b6 <_puts_r+0x36>
 80068b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068b2:	f000 faeb 	bl	8006e8c <__retarget_lock_acquire_recursive>
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	0719      	lsls	r1, r3, #28
 80068ba:	d51d      	bpl.n	80068f8 <_puts_r+0x78>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	b1db      	cbz	r3, 80068f8 <_puts_r+0x78>
 80068c0:	3e01      	subs	r6, #1
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068c8:	3b01      	subs	r3, #1
 80068ca:	60a3      	str	r3, [r4, #8]
 80068cc:	bb39      	cbnz	r1, 800691e <_puts_r+0x9e>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da38      	bge.n	8006944 <_puts_r+0xc4>
 80068d2:	4622      	mov	r2, r4
 80068d4:	210a      	movs	r1, #10
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f858 	bl	800698c <__swbuf_r>
 80068dc:	3001      	adds	r0, #1
 80068de:	d011      	beq.n	8006904 <_puts_r+0x84>
 80068e0:	250a      	movs	r5, #10
 80068e2:	e011      	b.n	8006908 <_puts_r+0x88>
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <_puts_r+0xd4>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d101      	bne.n	80068ee <_puts_r+0x6e>
 80068ea:	68ac      	ldr	r4, [r5, #8]
 80068ec:	e7da      	b.n	80068a4 <_puts_r+0x24>
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <_puts_r+0xd8>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	bf08      	it	eq
 80068f4:	68ec      	ldreq	r4, [r5, #12]
 80068f6:	e7d5      	b.n	80068a4 <_puts_r+0x24>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 f898 	bl	8006a30 <__swsetup_r>
 8006900:	2800      	cmp	r0, #0
 8006902:	d0dd      	beq.n	80068c0 <_puts_r+0x40>
 8006904:	f04f 35ff 	mov.w	r5, #4294967295
 8006908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800690a:	07da      	lsls	r2, r3, #31
 800690c:	d405      	bmi.n	800691a <_puts_r+0x9a>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	d402      	bmi.n	800691a <_puts_r+0x9a>
 8006914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006916:	f000 faba 	bl	8006e8e <__retarget_lock_release_recursive>
 800691a:	4628      	mov	r0, r5
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	2b00      	cmp	r3, #0
 8006920:	da04      	bge.n	800692c <_puts_r+0xac>
 8006922:	69a2      	ldr	r2, [r4, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	dc06      	bgt.n	8006936 <_puts_r+0xb6>
 8006928:	290a      	cmp	r1, #10
 800692a:	d004      	beq.n	8006936 <_puts_r+0xb6>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	6022      	str	r2, [r4, #0]
 8006932:	7019      	strb	r1, [r3, #0]
 8006934:	e7c5      	b.n	80068c2 <_puts_r+0x42>
 8006936:	4622      	mov	r2, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 f827 	bl	800698c <__swbuf_r>
 800693e:	3001      	adds	r0, #1
 8006940:	d1bf      	bne.n	80068c2 <_puts_r+0x42>
 8006942:	e7df      	b.n	8006904 <_puts_r+0x84>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	250a      	movs	r5, #10
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	701d      	strb	r5, [r3, #0]
 800694e:	e7db      	b.n	8006908 <_puts_r+0x88>
 8006950:	080079d8 	.word	0x080079d8
 8006954:	080079f8 	.word	0x080079f8
 8006958:	080079b8 	.word	0x080079b8

0800695c <puts>:
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <puts+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f7ff bf8d 	b.w	8006880 <_puts_r>
 8006966:	bf00      	nop
 8006968:	20000030 	.word	0x20000030

0800696c <_sbrk_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_sbrk_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7fb fba2 	bl	80020c0 <_sbrk>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_sbrk_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_sbrk_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	2001f22c 	.word	0x2001f22c

0800698c <__swbuf_r>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	460e      	mov	r6, r1
 8006990:	4614      	mov	r4, r2
 8006992:	4605      	mov	r5, r0
 8006994:	b118      	cbz	r0, 800699e <__swbuf_r+0x12>
 8006996:	6983      	ldr	r3, [r0, #24]
 8006998:	b90b      	cbnz	r3, 800699e <__swbuf_r+0x12>
 800699a:	f000 f9d9 	bl	8006d50 <__sinit>
 800699e:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <__swbuf_r+0x98>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	d12b      	bne.n	80069fc <__swbuf_r+0x70>
 80069a4:	686c      	ldr	r4, [r5, #4]
 80069a6:	69a3      	ldr	r3, [r4, #24]
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	071a      	lsls	r2, r3, #28
 80069ae:	d52f      	bpl.n	8006a10 <__swbuf_r+0x84>
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b36b      	cbz	r3, 8006a10 <__swbuf_r+0x84>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	1ac0      	subs	r0, r0, r3
 80069ba:	6963      	ldr	r3, [r4, #20]
 80069bc:	b2f6      	uxtb	r6, r6
 80069be:	4283      	cmp	r3, r0
 80069c0:	4637      	mov	r7, r6
 80069c2:	dc04      	bgt.n	80069ce <__swbuf_r+0x42>
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 f92e 	bl	8006c28 <_fflush_r>
 80069cc:	bb30      	cbnz	r0, 8006a1c <__swbuf_r+0x90>
 80069ce:	68a3      	ldr	r3, [r4, #8]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	60a3      	str	r3, [r4, #8]
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	6022      	str	r2, [r4, #0]
 80069da:	701e      	strb	r6, [r3, #0]
 80069dc:	6963      	ldr	r3, [r4, #20]
 80069de:	3001      	adds	r0, #1
 80069e0:	4283      	cmp	r3, r0
 80069e2:	d004      	beq.n	80069ee <__swbuf_r+0x62>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	07db      	lsls	r3, r3, #31
 80069e8:	d506      	bpl.n	80069f8 <__swbuf_r+0x6c>
 80069ea:	2e0a      	cmp	r6, #10
 80069ec:	d104      	bne.n	80069f8 <__swbuf_r+0x6c>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f919 	bl	8006c28 <_fflush_r>
 80069f6:	b988      	cbnz	r0, 8006a1c <__swbuf_r+0x90>
 80069f8:	4638      	mov	r0, r7
 80069fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <__swbuf_r+0x9c>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <__swbuf_r+0x7a>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7cf      	b.n	80069a6 <__swbuf_r+0x1a>
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <__swbuf_r+0xa0>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	bf08      	it	eq
 8006a0c:	68ec      	ldreq	r4, [r5, #12]
 8006a0e:	e7ca      	b.n	80069a6 <__swbuf_r+0x1a>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f80c 	bl	8006a30 <__swsetup_r>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d0cb      	beq.n	80069b4 <__swbuf_r+0x28>
 8006a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a20:	e7ea      	b.n	80069f8 <__swbuf_r+0x6c>
 8006a22:	bf00      	nop
 8006a24:	080079d8 	.word	0x080079d8
 8006a28:	080079f8 	.word	0x080079f8
 8006a2c:	080079b8 	.word	0x080079b8

08006a30 <__swsetup_r>:
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <__swsetup_r+0xcc>)
 8006a32:	b570      	push	{r4, r5, r6, lr}
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	4606      	mov	r6, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	b125      	cbz	r5, 8006a46 <__swsetup_r+0x16>
 8006a3c:	69ab      	ldr	r3, [r5, #24]
 8006a3e:	b913      	cbnz	r3, 8006a46 <__swsetup_r+0x16>
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 f985 	bl	8006d50 <__sinit>
 8006a46:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <__swsetup_r+0xd0>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d10f      	bne.n	8006a6c <__swsetup_r+0x3c>
 8006a4c:	686c      	ldr	r4, [r5, #4]
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a54:	0719      	lsls	r1, r3, #28
 8006a56:	d42c      	bmi.n	8006ab2 <__swsetup_r+0x82>
 8006a58:	06dd      	lsls	r5, r3, #27
 8006a5a:	d411      	bmi.n	8006a80 <__swsetup_r+0x50>
 8006a5c:	2309      	movs	r3, #9
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6a:	e03e      	b.n	8006aea <__swsetup_r+0xba>
 8006a6c:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <__swsetup_r+0xd4>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d101      	bne.n	8006a76 <__swsetup_r+0x46>
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	e7eb      	b.n	8006a4e <__swsetup_r+0x1e>
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <__swsetup_r+0xd8>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf08      	it	eq
 8006a7c:	68ec      	ldreq	r4, [r5, #12]
 8006a7e:	e7e6      	b.n	8006a4e <__swsetup_r+0x1e>
 8006a80:	0758      	lsls	r0, r3, #29
 8006a82:	d512      	bpl.n	8006aaa <__swsetup_r+0x7a>
 8006a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a86:	b141      	cbz	r1, 8006a9a <__swsetup_r+0x6a>
 8006a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <__swsetup_r+0x66>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff fb0f 	bl	80060b4 <_free_r>
 8006a96:	2300      	movs	r3, #0
 8006a98:	6363      	str	r3, [r4, #52]	; 0x34
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f043 0308 	orr.w	r3, r3, #8
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	b94b      	cbnz	r3, 8006aca <__swsetup_r+0x9a>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac0:	d003      	beq.n	8006aca <__swsetup_r+0x9a>
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 fa09 	bl	8006edc <__smakebuf_r>
 8006aca:	89a0      	ldrh	r0, [r4, #12]
 8006acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad0:	f010 0301 	ands.w	r3, r0, #1
 8006ad4:	d00a      	beq.n	8006aec <__swsetup_r+0xbc>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60a3      	str	r3, [r4, #8]
 8006ada:	6963      	ldr	r3, [r4, #20]
 8006adc:	425b      	negs	r3, r3
 8006ade:	61a3      	str	r3, [r4, #24]
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	b943      	cbnz	r3, 8006af6 <__swsetup_r+0xc6>
 8006ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ae8:	d1ba      	bne.n	8006a60 <__swsetup_r+0x30>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	0781      	lsls	r1, r0, #30
 8006aee:	bf58      	it	pl
 8006af0:	6963      	ldrpl	r3, [r4, #20]
 8006af2:	60a3      	str	r3, [r4, #8]
 8006af4:	e7f4      	b.n	8006ae0 <__swsetup_r+0xb0>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e7f7      	b.n	8006aea <__swsetup_r+0xba>
 8006afa:	bf00      	nop
 8006afc:	20000030 	.word	0x20000030
 8006b00:	080079d8 	.word	0x080079d8
 8006b04:	080079f8 	.word	0x080079f8
 8006b08:	080079b8 	.word	0x080079b8

08006b0c <abort>:
 8006b0c:	b508      	push	{r3, lr}
 8006b0e:	2006      	movs	r0, #6
 8006b10:	f000 fa58 	bl	8006fc4 <raise>
 8006b14:	2001      	movs	r0, #1
 8006b16:	f7fb fa77 	bl	8002008 <_exit>
	...

08006b1c <__sflush_r>:
 8006b1c:	898a      	ldrh	r2, [r1, #12]
 8006b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	4605      	mov	r5, r0
 8006b24:	0710      	lsls	r0, r2, #28
 8006b26:	460c      	mov	r4, r1
 8006b28:	d458      	bmi.n	8006bdc <__sflush_r+0xc0>
 8006b2a:	684b      	ldr	r3, [r1, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dc05      	bgt.n	8006b3c <__sflush_r+0x20>
 8006b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dc02      	bgt.n	8006b3c <__sflush_r+0x20>
 8006b36:	2000      	movs	r0, #0
 8006b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d0f9      	beq.n	8006b36 <__sflush_r+0x1a>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b48:	682f      	ldr	r7, [r5, #0]
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	d032      	beq.n	8006bb4 <__sflush_r+0x98>
 8006b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	075a      	lsls	r2, r3, #29
 8006b54:	d505      	bpl.n	8006b62 <__sflush_r+0x46>
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	1ac0      	subs	r0, r0, r3
 8006b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b5c:	b10b      	cbz	r3, 8006b62 <__sflush_r+0x46>
 8006b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	4602      	mov	r2, r0
 8006b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b68:	6a21      	ldr	r1, [r4, #32]
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b0      	blx	r6
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	d106      	bne.n	8006b82 <__sflush_r+0x66>
 8006b74:	6829      	ldr	r1, [r5, #0]
 8006b76:	291d      	cmp	r1, #29
 8006b78:	d82c      	bhi.n	8006bd4 <__sflush_r+0xb8>
 8006b7a:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <__sflush_r+0x108>)
 8006b7c:	40ca      	lsrs	r2, r1
 8006b7e:	07d6      	lsls	r6, r2, #31
 8006b80:	d528      	bpl.n	8006bd4 <__sflush_r+0xb8>
 8006b82:	2200      	movs	r2, #0
 8006b84:	6062      	str	r2, [r4, #4]
 8006b86:	04d9      	lsls	r1, r3, #19
 8006b88:	6922      	ldr	r2, [r4, #16]
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	d504      	bpl.n	8006b98 <__sflush_r+0x7c>
 8006b8e:	1c42      	adds	r2, r0, #1
 8006b90:	d101      	bne.n	8006b96 <__sflush_r+0x7a>
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	b903      	cbnz	r3, 8006b98 <__sflush_r+0x7c>
 8006b96:	6560      	str	r0, [r4, #84]	; 0x54
 8006b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	d0ca      	beq.n	8006b36 <__sflush_r+0x1a>
 8006ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	d002      	beq.n	8006bae <__sflush_r+0x92>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7ff fa83 	bl	80060b4 <_free_r>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8006bb2:	e7c1      	b.n	8006b38 <__sflush_r+0x1c>
 8006bb4:	6a21      	ldr	r1, [r4, #32]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b0      	blx	r6
 8006bbc:	1c41      	adds	r1, r0, #1
 8006bbe:	d1c7      	bne.n	8006b50 <__sflush_r+0x34>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0c4      	beq.n	8006b50 <__sflush_r+0x34>
 8006bc6:	2b1d      	cmp	r3, #29
 8006bc8:	d001      	beq.n	8006bce <__sflush_r+0xb2>
 8006bca:	2b16      	cmp	r3, #22
 8006bcc:	d101      	bne.n	8006bd2 <__sflush_r+0xb6>
 8006bce:	602f      	str	r7, [r5, #0]
 8006bd0:	e7b1      	b.n	8006b36 <__sflush_r+0x1a>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7ad      	b.n	8006b38 <__sflush_r+0x1c>
 8006bdc:	690f      	ldr	r7, [r1, #16]
 8006bde:	2f00      	cmp	r7, #0
 8006be0:	d0a9      	beq.n	8006b36 <__sflush_r+0x1a>
 8006be2:	0793      	lsls	r3, r2, #30
 8006be4:	680e      	ldr	r6, [r1, #0]
 8006be6:	bf08      	it	eq
 8006be8:	694b      	ldreq	r3, [r1, #20]
 8006bea:	600f      	str	r7, [r1, #0]
 8006bec:	bf18      	it	ne
 8006bee:	2300      	movne	r3, #0
 8006bf0:	eba6 0807 	sub.w	r8, r6, r7
 8006bf4:	608b      	str	r3, [r1, #8]
 8006bf6:	f1b8 0f00 	cmp.w	r8, #0
 8006bfa:	dd9c      	ble.n	8006b36 <__sflush_r+0x1a>
 8006bfc:	6a21      	ldr	r1, [r4, #32]
 8006bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c00:	4643      	mov	r3, r8
 8006c02:	463a      	mov	r2, r7
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b0      	blx	r6
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	dc06      	bgt.n	8006c1a <__sflush_r+0xfe>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e78e      	b.n	8006b38 <__sflush_r+0x1c>
 8006c1a:	4407      	add	r7, r0
 8006c1c:	eba8 0800 	sub.w	r8, r8, r0
 8006c20:	e7e9      	b.n	8006bf6 <__sflush_r+0xda>
 8006c22:	bf00      	nop
 8006c24:	20400001 	.word	0x20400001

08006c28 <_fflush_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	690b      	ldr	r3, [r1, #16]
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b913      	cbnz	r3, 8006c38 <_fflush_r+0x10>
 8006c32:	2500      	movs	r5, #0
 8006c34:	4628      	mov	r0, r5
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	b118      	cbz	r0, 8006c42 <_fflush_r+0x1a>
 8006c3a:	6983      	ldr	r3, [r0, #24]
 8006c3c:	b90b      	cbnz	r3, 8006c42 <_fflush_r+0x1a>
 8006c3e:	f000 f887 	bl	8006d50 <__sinit>
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <_fflush_r+0x6c>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	d11b      	bne.n	8006c80 <_fflush_r+0x58>
 8006c48:	686c      	ldr	r4, [r5, #4]
 8006c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ef      	beq.n	8006c32 <_fflush_r+0xa>
 8006c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c54:	07d0      	lsls	r0, r2, #31
 8006c56:	d404      	bmi.n	8006c62 <_fflush_r+0x3a>
 8006c58:	0599      	lsls	r1, r3, #22
 8006c5a:	d402      	bmi.n	8006c62 <_fflush_r+0x3a>
 8006c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c5e:	f000 f915 	bl	8006e8c <__retarget_lock_acquire_recursive>
 8006c62:	4628      	mov	r0, r5
 8006c64:	4621      	mov	r1, r4
 8006c66:	f7ff ff59 	bl	8006b1c <__sflush_r>
 8006c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c6c:	07da      	lsls	r2, r3, #31
 8006c6e:	4605      	mov	r5, r0
 8006c70:	d4e0      	bmi.n	8006c34 <_fflush_r+0xc>
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	059b      	lsls	r3, r3, #22
 8006c76:	d4dd      	bmi.n	8006c34 <_fflush_r+0xc>
 8006c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7a:	f000 f908 	bl	8006e8e <__retarget_lock_release_recursive>
 8006c7e:	e7d9      	b.n	8006c34 <_fflush_r+0xc>
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <_fflush_r+0x70>)
 8006c82:	429c      	cmp	r4, r3
 8006c84:	d101      	bne.n	8006c8a <_fflush_r+0x62>
 8006c86:	68ac      	ldr	r4, [r5, #8]
 8006c88:	e7df      	b.n	8006c4a <_fflush_r+0x22>
 8006c8a:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <_fflush_r+0x74>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	bf08      	it	eq
 8006c90:	68ec      	ldreq	r4, [r5, #12]
 8006c92:	e7da      	b.n	8006c4a <_fflush_r+0x22>
 8006c94:	080079d8 	.word	0x080079d8
 8006c98:	080079f8 	.word	0x080079f8
 8006c9c:	080079b8 	.word	0x080079b8

08006ca0 <std>:
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8006caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cae:	6083      	str	r3, [r0, #8]
 8006cb0:	8181      	strh	r1, [r0, #12]
 8006cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006cb4:	81c2      	strh	r2, [r0, #14]
 8006cb6:	6183      	str	r3, [r0, #24]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	2208      	movs	r2, #8
 8006cbc:	305c      	adds	r0, #92	; 0x5c
 8006cbe:	f7ff f9f1 	bl	80060a4 <memset>
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <std+0x38>)
 8006cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <std+0x3c>)
 8006cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <std+0x40>)
 8006ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <std+0x44>)
 8006cd0:	6224      	str	r4, [r4, #32]
 8006cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08006ffd 	.word	0x08006ffd
 8006cdc:	0800701f 	.word	0x0800701f
 8006ce0:	08007057 	.word	0x08007057
 8006ce4:	0800707b 	.word	0x0800707b

08006ce8 <_cleanup_r>:
 8006ce8:	4901      	ldr	r1, [pc, #4]	; (8006cf0 <_cleanup_r+0x8>)
 8006cea:	f000 b8af 	b.w	8006e4c <_fwalk_reent>
 8006cee:	bf00      	nop
 8006cf0:	08006c29 	.word	0x08006c29

08006cf4 <__sfmoreglue>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	2268      	movs	r2, #104	; 0x68
 8006cf8:	1e4d      	subs	r5, r1, #1
 8006cfa:	4355      	muls	r5, r2
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d02:	f7ff fa43 	bl	800618c <_malloc_r>
 8006d06:	4604      	mov	r4, r0
 8006d08:	b140      	cbz	r0, 8006d1c <__sfmoreglue+0x28>
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d10:	300c      	adds	r0, #12
 8006d12:	60a0      	str	r0, [r4, #8]
 8006d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d18:	f7ff f9c4 	bl	80060a4 <memset>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}

08006d20 <__sfp_lock_acquire>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sfp_lock_acquire+0x8>)
 8006d22:	f000 b8b3 	b.w	8006e8c <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	2001f229 	.word	0x2001f229

08006d2c <__sfp_lock_release>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sfp_lock_release+0x8>)
 8006d2e:	f000 b8ae 	b.w	8006e8e <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	2001f229 	.word	0x2001f229

08006d38 <__sinit_lock_acquire>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__sinit_lock_acquire+0x8>)
 8006d3a:	f000 b8a7 	b.w	8006e8c <__retarget_lock_acquire_recursive>
 8006d3e:	bf00      	nop
 8006d40:	2001f22a 	.word	0x2001f22a

08006d44 <__sinit_lock_release>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__sinit_lock_release+0x8>)
 8006d46:	f000 b8a2 	b.w	8006e8e <__retarget_lock_release_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	2001f22a 	.word	0x2001f22a

08006d50 <__sinit>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	f7ff fff0 	bl	8006d38 <__sinit_lock_acquire>
 8006d58:	69a3      	ldr	r3, [r4, #24]
 8006d5a:	b11b      	cbz	r3, 8006d64 <__sinit+0x14>
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	f7ff bff0 	b.w	8006d44 <__sinit_lock_release>
 8006d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d68:	6523      	str	r3, [r4, #80]	; 0x50
 8006d6a:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <__sinit+0x68>)
 8006d6c:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <__sinit+0x6c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	bf04      	itt	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	61a3      	streq	r3, [r4, #24]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 f820 	bl	8006dc0 <__sfp>
 8006d80:	6060      	str	r0, [r4, #4]
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f81c 	bl	8006dc0 <__sfp>
 8006d88:	60a0      	str	r0, [r4, #8]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f818 	bl	8006dc0 <__sfp>
 8006d90:	2200      	movs	r2, #0
 8006d92:	60e0      	str	r0, [r4, #12]
 8006d94:	2104      	movs	r1, #4
 8006d96:	6860      	ldr	r0, [r4, #4]
 8006d98:	f7ff ff82 	bl	8006ca0 <std>
 8006d9c:	68a0      	ldr	r0, [r4, #8]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	2109      	movs	r1, #9
 8006da2:	f7ff ff7d 	bl	8006ca0 <std>
 8006da6:	68e0      	ldr	r0, [r4, #12]
 8006da8:	2202      	movs	r2, #2
 8006daa:	2112      	movs	r1, #18
 8006dac:	f7ff ff78 	bl	8006ca0 <std>
 8006db0:	2301      	movs	r3, #1
 8006db2:	61a3      	str	r3, [r4, #24]
 8006db4:	e7d2      	b.n	8006d5c <__sinit+0xc>
 8006db6:	bf00      	nop
 8006db8:	08007980 	.word	0x08007980
 8006dbc:	08006ce9 	.word	0x08006ce9

08006dc0 <__sfp>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	f7ff ffac 	bl	8006d20 <__sfp_lock_acquire>
 8006dc8:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <__sfp+0x84>)
 8006dca:	681e      	ldr	r6, [r3, #0]
 8006dcc:	69b3      	ldr	r3, [r6, #24]
 8006dce:	b913      	cbnz	r3, 8006dd6 <__sfp+0x16>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff ffbd 	bl	8006d50 <__sinit>
 8006dd6:	3648      	adds	r6, #72	; 0x48
 8006dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	d503      	bpl.n	8006de8 <__sfp+0x28>
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	b30b      	cbz	r3, 8006e28 <__sfp+0x68>
 8006de4:	6836      	ldr	r6, [r6, #0]
 8006de6:	e7f7      	b.n	8006dd8 <__sfp+0x18>
 8006de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dec:	b9d5      	cbnz	r5, 8006e24 <__sfp+0x64>
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <__sfp+0x88>)
 8006df0:	60e3      	str	r3, [r4, #12]
 8006df2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006df6:	6665      	str	r5, [r4, #100]	; 0x64
 8006df8:	f000 f847 	bl	8006e8a <__retarget_lock_init_recursive>
 8006dfc:	f7ff ff96 	bl	8006d2c <__sfp_lock_release>
 8006e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	61a5      	str	r5, [r4, #24]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e14:	f7ff f946 	bl	80060a4 <memset>
 8006e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e20:	4620      	mov	r0, r4
 8006e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e24:	3468      	adds	r4, #104	; 0x68
 8006e26:	e7d9      	b.n	8006ddc <__sfp+0x1c>
 8006e28:	2104      	movs	r1, #4
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f7ff ff62 	bl	8006cf4 <__sfmoreglue>
 8006e30:	4604      	mov	r4, r0
 8006e32:	6030      	str	r0, [r6, #0]
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d1d5      	bne.n	8006de4 <__sfp+0x24>
 8006e38:	f7ff ff78 	bl	8006d2c <__sfp_lock_release>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	e7ee      	b.n	8006e20 <__sfp+0x60>
 8006e42:	bf00      	nop
 8006e44:	08007980 	.word	0x08007980
 8006e48:	ffff0001 	.word	0xffff0001

08006e4c <_fwalk_reent>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	4606      	mov	r6, r0
 8006e52:	4688      	mov	r8, r1
 8006e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e58:	2700      	movs	r7, #0
 8006e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e62:	d505      	bpl.n	8006e70 <_fwalk_reent+0x24>
 8006e64:	6824      	ldr	r4, [r4, #0]
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d1f7      	bne.n	8006e5a <_fwalk_reent+0xe>
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e70:	89ab      	ldrh	r3, [r5, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d907      	bls.n	8006e86 <_fwalk_reent+0x3a>
 8006e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	d003      	beq.n	8006e86 <_fwalk_reent+0x3a>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	47c0      	blx	r8
 8006e84:	4307      	orrs	r7, r0
 8006e86:	3568      	adds	r5, #104	; 0x68
 8006e88:	e7e9      	b.n	8006e5e <_fwalk_reent+0x12>

08006e8a <__retarget_lock_init_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <__retarget_lock_acquire_recursive>:
 8006e8c:	4770      	bx	lr

08006e8e <__retarget_lock_release_recursive>:
 8006e8e:	4770      	bx	lr

08006e90 <__swhatbuf_r>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	460e      	mov	r6, r1
 8006e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	b096      	sub	sp, #88	; 0x58
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	da08      	bge.n	8006eb4 <__swhatbuf_r+0x24>
 8006ea2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	061a      	lsls	r2, r3, #24
 8006eac:	d410      	bmi.n	8006ed0 <__swhatbuf_r+0x40>
 8006eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb2:	e00e      	b.n	8006ed2 <__swhatbuf_r+0x42>
 8006eb4:	466a      	mov	r2, sp
 8006eb6:	f000 f907 	bl	80070c8 <_fstat_r>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	dbf1      	blt.n	8006ea2 <__swhatbuf_r+0x12>
 8006ebe:	9a01      	ldr	r2, [sp, #4]
 8006ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ec8:	425a      	negs	r2, r3
 8006eca:	415a      	adcs	r2, r3
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	e7ee      	b.n	8006eae <__swhatbuf_r+0x1e>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	b016      	add	sp, #88	; 0x58
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006edc <__smakebuf_r>:
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee0:	079d      	lsls	r5, r3, #30
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	d507      	bpl.n	8006ef8 <__smakebuf_r+0x1c>
 8006ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	6123      	str	r3, [r4, #16]
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	6163      	str	r3, [r4, #20]
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	ab01      	add	r3, sp, #4
 8006efa:	466a      	mov	r2, sp
 8006efc:	f7ff ffc8 	bl	8006e90 <__swhatbuf_r>
 8006f00:	9900      	ldr	r1, [sp, #0]
 8006f02:	4605      	mov	r5, r0
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff f941 	bl	800618c <_malloc_r>
 8006f0a:	b948      	cbnz	r0, 8006f20 <__smakebuf_r+0x44>
 8006f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f10:	059a      	lsls	r2, r3, #22
 8006f12:	d4ef      	bmi.n	8006ef4 <__smakebuf_r+0x18>
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	f043 0302 	orr.w	r3, r3, #2
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	e7e3      	b.n	8006ee8 <__smakebuf_r+0xc>
 8006f20:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <__smakebuf_r+0x7c>)
 8006f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	6020      	str	r0, [r4, #0]
 8006f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	9b00      	ldr	r3, [sp, #0]
 8006f30:	6163      	str	r3, [r4, #20]
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	6120      	str	r0, [r4, #16]
 8006f36:	b15b      	cbz	r3, 8006f50 <__smakebuf_r+0x74>
 8006f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 f8d5 	bl	80070ec <_isatty_r>
 8006f42:	b128      	cbz	r0, 8006f50 <__smakebuf_r+0x74>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	89a0      	ldrh	r0, [r4, #12]
 8006f52:	4305      	orrs	r5, r0
 8006f54:	81a5      	strh	r5, [r4, #12]
 8006f56:	e7cd      	b.n	8006ef4 <__smakebuf_r+0x18>
 8006f58:	08006ce9 	.word	0x08006ce9

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f7ff bf95 	b.w	8006e8c <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	2001f228 	.word	0x2001f228

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f7ff bf90 	b.w	8006e8e <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	2001f228 	.word	0x2001f228

08006f74 <_raise_r>:
 8006f74:	291f      	cmp	r1, #31
 8006f76:	b538      	push	{r3, r4, r5, lr}
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	d904      	bls.n	8006f88 <_raise_r+0x14>
 8006f7e:	2316      	movs	r3, #22
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f8a:	b112      	cbz	r2, 8006f92 <_raise_r+0x1e>
 8006f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f90:	b94b      	cbnz	r3, 8006fa6 <_raise_r+0x32>
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f830 	bl	8006ff8 <_getpid_r>
 8006f98:	462a      	mov	r2, r5
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa2:	f000 b817 	b.w	8006fd4 <_kill_r>
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d00a      	beq.n	8006fc0 <_raise_r+0x4c>
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	d103      	bne.n	8006fb6 <_raise_r+0x42>
 8006fae:	2316      	movs	r3, #22
 8006fb0:	6003      	str	r3, [r0, #0]
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	e7e7      	b.n	8006f86 <_raise_r+0x12>
 8006fb6:	2400      	movs	r4, #0
 8006fb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	4798      	blx	r3
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e7e0      	b.n	8006f86 <_raise_r+0x12>

08006fc4 <raise>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <raise+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f7ff bfd3 	b.w	8006f74 <_raise_r>
 8006fce:	bf00      	nop
 8006fd0:	20000030 	.word	0x20000030

08006fd4 <_kill_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d07      	ldr	r5, [pc, #28]	; (8006ff4 <_kill_r+0x20>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	f7fb f801 	bl	8001fe8 <_kill>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d102      	bne.n	8006ff0 <_kill_r+0x1c>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	b103      	cbz	r3, 8006ff0 <_kill_r+0x1c>
 8006fee:	6023      	str	r3, [r4, #0]
 8006ff0:	bd38      	pop	{r3, r4, r5, pc}
 8006ff2:	bf00      	nop
 8006ff4:	2001f22c 	.word	0x2001f22c

08006ff8 <_getpid_r>:
 8006ff8:	f7fa bfee 	b.w	8001fd8 <_getpid>

08006ffc <__sread>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007004:	f000 f894 	bl	8007130 <_read_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	bfab      	itete	ge
 800700c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800700e:	89a3      	ldrhlt	r3, [r4, #12]
 8007010:	181b      	addge	r3, r3, r0
 8007012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007016:	bfac      	ite	ge
 8007018:	6563      	strge	r3, [r4, #84]	; 0x54
 800701a:	81a3      	strhlt	r3, [r4, #12]
 800701c:	bd10      	pop	{r4, pc}

0800701e <__swrite>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	461f      	mov	r7, r3
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4616      	mov	r6, r2
 800702e:	d505      	bpl.n	800703c <__swrite+0x1e>
 8007030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007034:	2302      	movs	r3, #2
 8007036:	2200      	movs	r2, #0
 8007038:	f000 f868 	bl	800710c <_lseek_r>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	4628      	mov	r0, r5
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	f000 b817 	b.w	8007084 <_write_r>

08007056 <__sseek>:
 8007056:	b510      	push	{r4, lr}
 8007058:	460c      	mov	r4, r1
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 f855 	bl	800710c <_lseek_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	bf15      	itete	ne
 8007068:	6560      	strne	r0, [r4, #84]	; 0x54
 800706a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800706e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007072:	81a3      	strheq	r3, [r4, #12]
 8007074:	bf18      	it	ne
 8007076:	81a3      	strhne	r3, [r4, #12]
 8007078:	bd10      	pop	{r4, pc}

0800707a <__sclose>:
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 b813 	b.w	80070a8 <_close_r>
	...

08007084 <_write_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	; (80070a4 <_write_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7f9 fbce 	bl	8000834 <_write>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_write_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_write_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2001f22c 	.word	0x2001f22c

080070a8 <_close_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	; (80070c4 <_close_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fa ffcf 	bl	8002056 <_close>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_close_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_close_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	2001f22c 	.word	0x2001f22c

080070c8 <_fstat_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_fstat_r+0x20>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	f7fa ffca 	bl	800206e <_fstat>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d102      	bne.n	80070e4 <_fstat_r+0x1c>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b103      	cbz	r3, 80070e4 <_fstat_r+0x1c>
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	2001f22c 	.word	0x2001f22c

080070ec <_isatty_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d06      	ldr	r5, [pc, #24]	; (8007108 <_isatty_r+0x1c>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7fa ffc9 	bl	800208e <_isatty>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_isatty_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_isatty_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	2001f22c 	.word	0x2001f22c

0800710c <_lseek_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_lseek_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fa ffc2 	bl	80020a4 <_lseek>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_lseek_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_lseek_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	2001f22c 	.word	0x2001f22c

08007130 <_read_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d07      	ldr	r5, [pc, #28]	; (8007150 <_read_r+0x20>)
 8007134:	4604      	mov	r4, r0
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	2200      	movs	r2, #0
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fa ff6c 	bl	800201c <_read>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_read_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_read_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	2001f22c 	.word	0x2001f22c

08007154 <_init>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr

08007160 <_fini>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr
