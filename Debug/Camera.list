
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e44  08012c04  08012c04  00022c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a48  08015a48  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  08015a48  08015a48  00025a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a50  08015a50  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a50  08015a50  00025a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a54  08015a54  00025a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08015a58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cd38  20000164  08015bbc  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ce9c  08015bbc  0003ce9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284e2  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000554e  00000000  00000000  00058676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  0005dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f28  00000000  00000000  0005fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031787  00000000  00000000  00061c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002692f  00000000  00000000  000933f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115599  00000000  00000000  000b9d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cf2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009470  00000000  00000000  001cf310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012bec 	.word	0x08012bec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	08012bec 	.word	0x08012bec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f011 fa4f 	bl	8011a4c <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08012c04 	.word	0x08012c04
 800060c:	08012fc4 	.word	0x08012fc4
 8000610:	08012c08 	.word	0x08012c08

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f011 fa0f 	bl	8011a4c <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08012c04 	.word	0x08012c04
 8000658:	08012fd8 	.word	0x08012fd8
 800065c:	08012c08 	.word	0x08012c08

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f011 f9e9 	bl	8011a4c <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08012c04 	.word	0x08012c04
 80006a4:	08012fec 	.word	0x08012fec
 80006a8:	08012c08 	.word	0x08012c08

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f011 f9bf 	bl	8011a4c <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f011 fa16 	bl	8011b00 <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f011 f9b1 	bl	8011a4c <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f011 f99c 	bl	8011a4c <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08012c2c 	.word	0x08012c2c
 8000724:	08013004 	.word	0x08013004
 8000728:	08012c08 	.word	0x08012c08
 800072c:	08012c04 	.word	0x08012c04
 8000730:	08012c3c 	.word	0x08012c3c

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f011 f97f 	bl	8011a4c <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08012c04 	.word	0x08012c04
 800076c:	08013018 	.word	0x08013018
 8000770:	08012c08 	.word	0x08012c08

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f011 f959 	bl	8011a4c <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08012c58 	.word	0x08012c58
 80007bc:	0801302c 	.word	0x0801302c
 80007c0:	08012c08 	.word	0x08012c08

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f011 f92f 	bl	8011a4c <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08012c6c 	.word	0x08012c6c
 800082c:	0801303c 	.word	0x0801303c
 8000830:	08012c08 	.word	0x08012c08

08000834 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd1 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d10e      	bne.n	800086e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ffc9 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d806      	bhi.n	800086e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <mfxstm32l152_Init+0x58>)
 8000868:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800086a:	f001 fecb 	bl	8002604 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8db 	bl	8000a2e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8fc 	bl	8000a7a <mfxstm32l152_SetIrqOutPinType>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000180 	.word	0x20000180

08000890 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffc3 	bl	8001828 <mfxstm32l152_ReleaseInstance>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d001      	beq.n	80008b0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80008ac:	f001 feba 	bl	8002624 <MFX_IO_DeInit>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ff4d 	bl	8002768 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 ff8c 	bl	80027ec <MFX_IO_Delay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ff3b 	bl	8002768 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80008f2:	f001 ff01 	bl	80026f8 <MFX_IO_EnableWakeupPin>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff6c 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d101      	bne.n	800091e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800091a:	f001 feed 	bl	80026f8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800091e:	f001 ff0f 	bl	8002740 <MFX_IO_Wakeup>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 ff59 	bl	80027ec <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800093a:	f001 fe63 	bl	8002604 <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 ff24 	bl	8002790 <MFX_IO_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	b29b      	uxth	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2142      	movs	r1, #66	; 0x42
 8000970:	4618      	mov	r0, r3
 8000972:	f001 ff0d 	bl	8002790 <MFX_IO_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2142      	movs	r1, #66	; 0x42
 8000988:	4618      	mov	r0, r3
 800098a:	f001 feed 	bl	8002768 <MFX_IO_Write>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2142      	movs	r1, #66	; 0x42
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 feee 	bl	8002790 <MFX_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80009b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2142      	movs	r1, #66	; 0x42
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fec9 	bl	8002768 <MFX_IO_Write>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2108      	movs	r1, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fecc 	bl	8002790 <MFX_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2144      	movs	r1, #68	; 0x44
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fea1 	bl	8002768 <MFX_IO_Write>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2141      	movs	r1, #65	; 0x41
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fea2 	bl	8002790 <MFX_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2141      	movs	r1, #65	; 0x41
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fe7e 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 febd 	bl	80027ec <MFX_IO_Delay>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	460a      	mov	r2, r1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2141      	movs	r1, #65	; 0x41
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fe7c 	bl	8002790 <MFX_IO_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2141      	movs	r1, #65	; 0x41
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe58 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 fe97 	bl	80027ec <MFX_IO_Delay>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fe5a 	bl	8002790 <MFX_IO_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d304      	bcc.n	8000afa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e003      	b.n	8000b02 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fe2d 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fe6c 	bl	80027ec <MFX_IO_Delay>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	f200 82d4 	bhi.w	80010e0 <mfxstm32l152_IO_Config+0x5c4>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <mfxstm32l152_IO_Config+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000c61 	.word	0x08000c61
 8000b48:	08000d21 	.word	0x08000d21
 8000b4c:	08000e11 	.word	0x08000e11
 8000b50:	08000f01 	.word	0x08000f01
 8000b54:	08000ff1 	.word	0x08000ff1
 8000b58:	08000ba1 	.word	0x08000ba1
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000c31 	.word	0x08000c31
 8000b68:	080010e1 	.word	0x080010e1
 8000b6c:	08000cf1 	.word	0x08000cf1
 8000b70:	08000cc1 	.word	0x08000cc1
 8000b74:	080010e1 	.word	0x080010e1
 8000b78:	08000c91 	.word	0x08000c91
 8000b7c:	08000c61 	.word	0x08000c61
 8000b80:	08000d71 	.word	0x08000d71
 8000b84:	08000dc1 	.word	0x08000dc1
 8000b88:	08000e61 	.word	0x08000e61
 8000b8c:	08000eb1 	.word	0x08000eb1
 8000b90:	08000f51 	.word	0x08000f51
 8000b94:	08000fa1 	.word	0x08000fa1
 8000b98:	08001041 	.word	0x08001041
 8000b9c:	08001091 	.word	0x08001091
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fb67 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2200      	movs	r2, #0
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa9d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f000 fe57 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2168      	movs	r1, #104	; 0x68
 8000bca:	f000 fe51 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bce:	e28a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb4f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa85 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	2300      	movs	r3, #0
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	f000 fe3f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	2168      	movs	r1, #104	; 0x68
 8000bfa:	f000 fe39 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bfe:	e272      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb37 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa6d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	f000 fe27 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	2301      	movs	r3, #1
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	2168      	movs	r1, #104	; 0x68
 8000c2a:	f000 fe21 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c2e:	e25a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fb1f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa55 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	f000 fe0f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c52:	88f8      	ldrh	r0, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	f000 fe09 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c5e:	e242      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb07 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa3d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f000 fdf7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c82:	88f8      	ldrh	r0, [r7, #6]
 8000c84:	2300      	movs	r3, #0
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	2168      	movs	r1, #104	; 0x68
 8000c8a:	f000 fdf1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c8e:	e22a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 faef 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa25 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f000 fddf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2168      	movs	r1, #104	; 0x68
 8000cba:	f000 fdd9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cbe:	e212      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fad7 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa0d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f000 fdc7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	2168      	movs	r1, #104	; 0x68
 8000cea:	f000 fdc1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cee:	e1fa      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fabf 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9f5 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	f000 fdaf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	2301      	movs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	2168      	movs	r1, #104	; 0x68
 8000d1a:	f000 fda9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000d1e:	e1e2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa7a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9de 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	2300      	movs	r3, #0
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f000 fd98 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	2301      	movs	r3, #1
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	2168      	movs	r1, #104	; 0x68
 8000d48:	f000 fd92 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9de 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ed 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d6e:	e1ba      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa52 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9b6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	f000 fd70 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	2168      	movs	r1, #104	; 0x68
 8000d98:	f000 fd6a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f9b6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2201      	movs	r2, #1
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9c5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa4d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000dbe:	e192      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa2a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f98e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd4:	88f8      	ldrh	r0, [r7, #6]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	f000 fd48 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	2300      	movs	r3, #0
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2168      	movs	r1, #104	; 0x68
 8000de8:	f000 fd42 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f98e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f99d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa25 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e0e:	e16a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa02 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f966 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	2300      	movs	r3, #0
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2164      	movs	r1, #100	; 0x64
 8000e2c:	f000 fd20 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e30:	88f8      	ldrh	r0, [r7, #6]
 8000e32:	2301      	movs	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	2168      	movs	r1, #104	; 0x68
 8000e38:	f000 fd1a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f966 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f975 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f9fd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e5e:	e142      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9da 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e74:	88f8      	ldrh	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2164      	movs	r1, #100	; 0x64
 8000e7c:	f000 fcf8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	2301      	movs	r3, #1
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	2168      	movs	r1, #104	; 0x68
 8000e88:	f000 fcf2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f94d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9d5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000eae:	e11a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f916 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	f000 fcd0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	2168      	movs	r1, #104	; 0x68
 8000ed8:	f000 fcca 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f916 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2200      	movs	r2, #0
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f925 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9ad 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000efe:	e0f2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f8ee 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2164      	movs	r1, #100	; 0x64
 8000f1c:	f000 fca8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	2301      	movs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	2168      	movs	r1, #104	; 0x68
 8000f28:	f000 fca2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ee 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8fd 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f985 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f4e:	e0ca      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f962 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8c6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	2301      	movs	r3, #1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	f000 fc80 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	2301      	movs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	2168      	movs	r1, #104	; 0x68
 8000f78:	f000 fc7a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8c6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8d5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f95d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f9e:	e0a2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2200      	movs	r2, #0
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f000 fc58 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	2168      	movs	r1, #104	; 0x68
 8000fc8:	f000 fc52 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f89e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8ad 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f935 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000fee:	e07a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f912 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f876 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	f000 fc30 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	2301      	movs	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	2168      	movs	r1, #104	; 0x68
 8001018:	f000 fc2a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f876 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f885 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f90d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800103e:	e052      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8ea 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f84e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	2301      	movs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	f000 fc08 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001060:	88f8      	ldrh	r0, [r7, #6]
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	2168      	movs	r1, #104	; 0x68
 8001068:	f000 fc02 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f84e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f85d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8e5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800108e:	e02a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8c2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f826 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	2301      	movs	r3, #1
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	f000 fbe0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010b0:	88f8      	ldrh	r0, [r7, #6]
 80010b2:	2300      	movs	r3, #0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	2168      	movs	r1, #104	; 0x68
 80010b8:	f000 fbda 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	2200      	movs	r2, #0
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f826 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f835 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8bd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 80010de:	e002      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	bf00      	nop
  }

  return error_code;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4613      	mov	r3, r2
 80010fe:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	f000 fbb2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	214c      	movs	r1, #76	; 0x4c
 800112c:	f000 fba0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f001 fb5b 	bl	80027ec <MFX_IO_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	f000 fb8b 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fb46 	bl	80027ec <MFX_IO_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	2301      	movs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	216c      	movs	r1, #108	; 0x6c
 8001186:	f000 fb73 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800118a:	e005      	b.n	8001198 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800118c:	88f8      	ldrh	r0, [r7, #6]
 800118e:	2301      	movs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	f000 fb6c 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	2110      	movs	r1, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fae3 	bl	8002790 <MFX_IO_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2111      	movs	r1, #17
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fad7 	bl	8002790 <MFX_IO_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2112      	movs	r1, #18
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 facb 	bl	8002790 <MFX_IO_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4013      	ands	r3, r2
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001226:	f001 fa39 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb92 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fba3 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2148      	movs	r1, #72	; 0x48
 800126c:	f000 fb00 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	2300      	movs	r3, #0
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2148      	movs	r1, #72	; 0x48
 800128c:	f000 faf0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	210c      	movs	r1, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fa67 	bl	8002790 <MFX_IO_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	210d      	movs	r1, #13
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fa59 	bl	8002790 <MFX_IO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	210e      	movs	r1, #14
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fa4d 	bl	8002790 <MFX_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4013      	ands	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2154      	movs	r1, #84	; 0x54
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fa10 	bl	8002768 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2155      	movs	r1, #85	; 0x55
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fa07 	bl	8002768 <MFX_IO_Write>
  }
  if (pin_16_23)
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2156      	movs	r1, #86	; 0x56
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f9fe 	bl	8002768 <MFX_IO_Write>
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fa00 	bl	8002790 <MFX_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f9de 	bl	8002768 <MFX_IO_Write>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f9d8 	bl	8002790 <MFX_IO_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f001 f9b1 	bl	8002768 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001406:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030e 	and.w	r3, r3, #14
 8001412:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f98c 	bl	8002768 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800145a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800145c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001466:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2181      	movs	r1, #129	; 0x81
 8001478:	4618      	mov	r0, r3
 800147a:	f001 f975 	bl	8002768 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800147e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2182      	movs	r1, #130	; 0x82
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f969 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	2183      	movs	r1, #131	; 0x83
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f95f 	bl	8002768 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80014aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	2184      	movs	r1, #132	; 0x84
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f953 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	2185      	movs	r1, #133	; 0x85
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f949 	bl	8002768 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80014d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2186      	movs	r1, #134	; 0x86
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f93d 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80014ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2187      	movs	r1, #135	; 0x87
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f933 	bl	8002768 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	2188      	movs	r1, #136	; 0x88
 8001514:	4618      	mov	r0, r3
 8001516:	f001 f927 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2189      	movs	r1, #137	; 0x89
 8001528:	4618      	mov	r0, r3
 800152a:	f001 f91d 	bl	8002768 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800152e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	218a      	movs	r1, #138	; 0x8a
 8001540:	4618      	mov	r0, r3
 8001542:	f001 f911 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001548:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	218b      	movs	r1, #139	; 0x8b
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f907 	bl	8002768 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800155a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800155c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	2190      	movs	r1, #144	; 0x90
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f8fd 	bl	8002768 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800156e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001570:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	2191      	movs	r1, #145	; 0x91
 800157c:	4618      	mov	r0, r3
 800157e:	f001 f8f3 	bl	8002768 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	2192      	movs	r1, #146	; 0x92
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f8e9 	bl	8002768 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001598:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2193      	movs	r1, #147	; 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f8df 	bl	8002768 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80015aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 f8d5 	bl	8002768 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	218c      	movs	r1, #140	; 0x8c
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 f8c9 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	218d      	movs	r1, #141	; 0x8d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 f8bf 	bl	8002768 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	218e      	movs	r1, #142	; 0x8e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 f8b3 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	218f      	movs	r1, #143	; 0x8f
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f8a9 	bl	8002768 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001616:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800161a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	2196      	movs	r1, #150	; 0x96
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f89e 	bl	8002768 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800162c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001636:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001638:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	2197      	movs	r1, #151	; 0x97
 8001654:	4618      	mov	r0, r3
 8001656:	f001 f887 	bl	8002768 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	2198      	movs	r1, #152	; 0x98
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f87c 	bl	8002768 <MFX_IO_Write>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2303      	movs	r3, #3
 8001696:	2114      	movs	r1, #20
 8001698:	f001 f88e 	bl	80027b8 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016c2:	f000 ffeb 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f944 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f98f 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f96b 	bl	80009de <mfxstm32l152_GlobalITStatus>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f938 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	4618      	mov	r0, r3
 8001742:	f001 f825 	bl	8002790 <MFX_IO_Read>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f814 	bl	8002790 <MFX_IO_Read>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800177c:	f000 ff8e 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f932 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f90e 	bl	80009de <mfxstm32l152_GlobalITStatus>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8db 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e00b      	b.n	8001810 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mfxstm32l152_GetInstance+0x3c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9f0      	bls.n	80017f8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001816:	23ff      	movs	r3, #255	; 0xff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000180 	.word	0x20000180

08001828 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00f      	b.n	8001858 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d105      	bne.n	8001852 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800184a:	2100      	movs	r1, #0
 800184c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d9ec      	bls.n	8001838 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000180 	.word	0x20000180

08001870 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	717b      	strb	r3, [r7, #5]
 8001882:	4613      	mov	r3, r2
 8001884:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80018a0:	797a      	ldrb	r2, [r7, #5]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 ff72 	bl	8002790 <MFX_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e008      	b.n	80018d2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80018c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 ff45 	bl	8002768 <MFX_IO_Write>
  }

  if (pin_8_15)
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 ff4e 	bl	8002790 <MFX_IO_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	4313      	orrs	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e008      	b.n	800191a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	3301      	adds	r3, #1
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 ff1f 	bl	8002768 <MFX_IO_Write>
  }

  if (pin_16_23)
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3302      	adds	r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 ff28 	bl	8002790 <MFX_IO_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e008      	b.n	8001966 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	b25a      	sxtb	r2, r3
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4013      	ands	r3, r2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	3302      	adds	r3, #2
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fef9 	bl	8002768 <MFX_IO_Write>
  }
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001984:	f001 f83a 	bl	80029fc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2010      	movs	r0, #16
 800198e:	f000 f9e4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001992:	200a      	movs	r0, #10
 8001994:	f001 f859 	bl	8002a4a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f9dc 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019a2:	20c8      	movs	r0, #200	; 0xc8
 80019a4:	f001 f851 	bl	8002a4a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2011      	movs	r0, #17
 80019ae:	f000 f9d4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019b2:	2078      	movs	r0, #120	; 0x78
 80019b4:	f001 f849 	bl	8002a4a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019b8:	2300      	movs	r3, #0
 80019ba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80019bc:	463b      	mov	r3, r7
 80019be:	2201      	movs	r2, #1
 80019c0:	4619      	mov	r1, r3
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f000 f9c9 	bl	8001d5a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80019c8:	2305      	movs	r3, #5
 80019ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80019cc:	463b      	mov	r3, r7
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	203a      	movs	r0, #58	; 0x3a
 80019d4:	f000 f9c1 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2021      	movs	r0, #33	; 0x21
 80019de:	f000 f9bc 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80019ee:	23ef      	movs	r3, #239	; 0xef
 80019f0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80019f2:	463b      	mov	r3, r7
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	202a      	movs	r0, #42	; 0x2a
 80019fa:	f000 f9ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a0a:	23ef      	movs	r3, #239	; 0xef
 8001a0c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2204      	movs	r2, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	202b      	movs	r0, #43	; 0x2b
 8001a16:	f000 f9a0 	bl	8001d5a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a26:	2333      	movs	r3, #51	; 0x33
 8001a28:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a2a:	2333      	movs	r3, #51	; 0x33
 8001a2c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2205      	movs	r2, #5
 8001a32:	4619      	mov	r1, r3
 8001a34:	20b2      	movs	r0, #178	; 0xb2
 8001a36:	f000 f990 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a3a:	2335      	movs	r3, #53	; 0x35
 8001a3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2201      	movs	r2, #1
 8001a42:	4619      	mov	r1, r3
 8001a44:	20b7      	movs	r0, #183	; 0xb7
 8001a46:	f000 f988 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	20bb      	movs	r0, #187	; 0xbb
 8001a56:	f000 f980 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001a5a:	232c      	movs	r3, #44	; 0x2c
 8001a5c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	f000 f978 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001a6e:	23c3      	movs	r3, #195	; 0xc3
 8001a70:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001a72:	463b      	mov	r3, r7
 8001a74:	2202      	movs	r2, #2
 8001a76:	4619      	mov	r1, r3
 8001a78:	20c2      	movs	r0, #194	; 0xc2
 8001a7a:	f000 f96e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001a7e:	2320      	movs	r3, #32
 8001a80:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001a82:	463b      	mov	r3, r7
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	20c4      	movs	r0, #196	; 0xc4
 8001a8a:	f000 f966 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001a8e:	230f      	movs	r3, #15
 8001a90:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001a92:	463b      	mov	r3, r7
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	20c6      	movs	r0, #198	; 0xc6
 8001a9a:	f000 f95e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001a9e:	23a4      	movs	r3, #164	; 0xa4
 8001aa0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001aa2:	23a1      	movs	r3, #161	; 0xa1
 8001aa4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	20d0      	movs	r0, #208	; 0xd0
 8001aae:	f000 f954 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ab2:	23d0      	movs	r3, #208	; 0xd0
 8001ab4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001aba:	2311      	movs	r3, #17
 8001abc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ac6:	2315      	movs	r3, #21
 8001ac8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001aca:	2339      	movs	r3, #57	; 0x39
 8001acc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001ace:	2333      	movs	r3, #51	; 0x33
 8001ad0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001ad2:	2350      	movs	r3, #80	; 0x50
 8001ad4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001ad6:	2336      	movs	r3, #54	; 0x36
 8001ad8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001ada:	2313      	movs	r3, #19
 8001adc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001ade:	2314      	movs	r3, #20
 8001ae0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001ae2:	2329      	movs	r3, #41	; 0x29
 8001ae4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001ae6:	232d      	movs	r3, #45	; 0x2d
 8001ae8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001aea:	463b      	mov	r3, r7
 8001aec:	220e      	movs	r2, #14
 8001aee:	4619      	mov	r1, r3
 8001af0:	20e0      	movs	r0, #224	; 0xe0
 8001af2:	f000 f932 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001af6:	23d0      	movs	r3, #208	; 0xd0
 8001af8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001afa:	2308      	movs	r3, #8
 8001afc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001afe:	2310      	movs	r3, #16
 8001b00:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b02:	2308      	movs	r3, #8
 8001b04:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b06:	2306      	movs	r3, #6
 8001b08:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b0e:	2339      	movs	r3, #57	; 0x39
 8001b10:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b12:	2344      	movs	r3, #68	; 0x44
 8001b14:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b16:	2351      	movs	r3, #81	; 0x51
 8001b18:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b1a:	230b      	movs	r3, #11
 8001b1c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b1e:	2316      	movs	r3, #22
 8001b20:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b22:	2314      	movs	r3, #20
 8001b24:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b26:	232f      	movs	r3, #47	; 0x2f
 8001b28:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b2a:	2331      	movs	r3, #49	; 0x31
 8001b2c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b2e:	463b      	mov	r3, r7
 8001b30:	220e      	movs	r2, #14
 8001b32:	4619      	mov	r1, r3
 8001b34:	20e1      	movs	r0, #225	; 0xe1
 8001b36:	f000 f910 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b3a:	f000 f847 	bl	8001bcc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b3e:	2300      	movs	r3, #0
 8001b40:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b42:	463b      	mov	r3, r7
 8001b44:	2201      	movs	r2, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	2035      	movs	r0, #53	; 0x35
 8001b4a:	f000 f906 	bl	8001d5a <ST7789H2_WriteReg>

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001b64:	2300      	movs	r3, #0
 8001b66:	723b      	strb	r3, [r7, #8]
 8001b68:	e025      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d120      	bne.n	8001bb2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001b7c:	23f0      	movs	r3, #240	; 0xf0
 8001b7e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001b84:	2300      	movs	r3, #0
 8001b86:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2033      	movs	r0, #51	; 0x33
 8001b92:	f000 f8e2 	bl	8001d5a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001b9a:	2350      	movs	r3, #80	; 0x50
 8001b9c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2037      	movs	r0, #55	; 0x37
 8001ba8:	f000 f8d7 	bl	8001d5a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	723b      	strb	r3, [r7, #8]
 8001bb0:	e001      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bb2:	2360      	movs	r3, #96	; 0x60
 8001bb4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2036      	movs	r0, #54	; 0x36
 8001bc0:	f000 f8cb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2029      	movs	r0, #41	; 0x29
 8001bd6:	f000 f8c0 	bl	8001d5a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2011      	movs	r0, #17
 8001be0:	f000 f8bb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001bee:	23fe      	movs	r3, #254	; 0xfe
 8001bf0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	20bd      	movs	r0, #189	; 0xbd
 8001bfa:	f000 f8ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 f8a9 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 ff1e 	bl	8002a4a <LCD_IO_Delay>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c1a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c2a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c3a:	f000 fedf 	bl	80029fc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f000 f8ae 	bl	8001da0 <ST7789H2_ReadReg>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b11      	subs	r3, #17
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	202a      	movs	r0, #42	; 0x2a
 8001c7e:	f000 f86c 	bl	8001d5a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b11      	subs	r3, #17
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	202b      	movs	r0, #43	; 0x2b
 8001ca4:	f000 f859 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	80bb      	strh	r3, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cc2:	88ba      	ldrh	r2, [r7, #4]
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffbf 	bl	8001c4c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	f000 f841 	bl	8001d5a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fe94 	bl	8002a08 <LCD_IO_WriteData>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cf8:	88ba      	ldrh	r2, [r7, #4]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffa4 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d04:	88ba      	ldrh	r2, [r7, #4]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9c0 	bl	8002090 <ST7789H2_ReadPixel_rgb888>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	733a      	strb	r2, [r7, #12]
 8001d16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d1a:	737a      	strb	r2, [r7, #13]
 8001d1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d20:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	02db      	lsls	r3, r3, #11
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7d7b      	ldrb	r3, [r7, #21]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d50:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	6039      	str	r1, [r7, #0]
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fe58 	bl	8002a22 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e00a      	b.n	8001d8e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fe40 	bl	8002a08 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3f0      	bcc.n	8001d78 <ST7789H2_WriteReg+0x1e>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fe38 	bl	8002a22 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001db2:	f000 fe43 	bl	8002a3c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001db6:	f000 fe41 	bl	8002a3c <LCD_IO_ReadData>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2db      	uxtb	r3, r3
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001dc8:	b490      	push	{r4, r7}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2bef      	cmp	r3, #239	; 0xef
 8001dea:	d803      	bhi.n	8001df4 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	8013      	strh	r3, [r2, #0]
 8001df2:	e002      	b.n	8001dfa <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	2bef      	cmp	r3, #239	; 0xef
 8001dfe:	d803      	bhi.n	8001e08 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	8013      	strh	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4413      	add	r3, r2
 8001e14:	2bf0      	cmp	r3, #240	; 0xf0
 8001e16:	dc08      	bgt.n	8001e2a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e2c:	22ef      	movs	r2, #239	; 0xef
 8001e2e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e30:	883a      	ldrh	r2, [r7, #0]
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2bf0      	cmp	r3, #240	; 0xf0
 8001e38:	dc08      	bgt.n	8001e4c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e48:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e4a:	e002      	b.n	8001e52 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e4e:	22ef      	movs	r2, #239	; 0xef
 8001e50:	801a      	strh	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc90      	pop	{r4, r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000184 	.word	0x20000184
 8001e60:	20000186 	.word	0x20000186
 8001e64:	200000b0 	.word	0x200000b0
 8001e68:	200000b2 	.word	0x200000b2

08001e6c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80bb      	strh	r3, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]
 8001e86:	4613      	mov	r3, r2
 8001e88:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fedb 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff ff5d 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	81fb      	strh	r3, [r7, #14]
 8001ea4:	e006      	b.n	8001eb4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fdad 	bl	8002a08 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	81fb      	strh	r3, [r7, #14]
 8001eb4:	89fa      	ldrh	r2, [r7, #14]
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3f4      	bcc.n	8001ea6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}

08001ec6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4608      	mov	r0, r1
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80bb      	strh	r3, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	88bb      	ldrh	r3, [r7, #4]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff feae 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	202c      	movs	r0, #44	; 0x2c
 8001ef6:	f7ff ff30 	bl	8001d5a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	e00b      	b.n	8001f18 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	4413      	add	r3, r2
 8001f06:	b299      	uxth	r1, r3
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fecf 	bl	8001cb0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	3301      	adds	r3, #1
 8001f16:	81fb      	strh	r3, [r7, #14]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	883b      	ldrh	r3, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3ef      	bcc.n	8001f00 <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
	...

08001f2c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	603a      	str	r2, [r7, #0]
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <ST7789H2_DrawBitmap+0xe0>)
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <ST7789H2_DrawBitmap+0xe4>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <ST7789H2_DrawBitmap+0xe8>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <ST7789H2_DrawBitmap+0xec>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3304      	adds	r3, #4
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	330a      	adds	r3, #10
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	461a      	mov	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4413      	add	r3, r2
 8001fb0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	89bb      	ldrh	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e01d      	b.n	8001ff8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe3f 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	89fa      	ldrh	r2, [r7, #14]
 8001fe6:	88f8      	ldrh	r0, [r7, #6]
 8001fe8:	f000 f89c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8dd      	bhi.n	8001fbc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200000b0 	.word	0x200000b0
 8002010:	20000184 	.word	0x20000184
 8002014:	200000b2 	.word	0x200000b2
 8002018:	20000186 	.word	0x20000186

0800201c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	4603      	mov	r3, r0
 8002030:	80bb      	strh	r3, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e019      	b.n	8002078 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdfd 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b299      	uxth	r1, r3
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	88f8      	ldrh	r0, [r7, #6]
 8002068:	f000 f85c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3301      	adds	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	88ba      	ldrh	r2, [r7, #4]
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4293      	cmp	r3, r2
 8002084:	d3de      	bcc.n	8002044 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fdd0 	bl	8001c4c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	202e      	movs	r0, #46	; 0x2e
 80020b2:	f7ff fe52 	bl	8001d5a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020b6:	f000 fcc1 	bl	8002a3c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020ba:	f000 fcbf 	bl	8002a3c <LCD_IO_ReadData>
 80020be:	4603      	mov	r3, r0
 80020c0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80020c2:	f000 fcbb 	bl	8002a3c <LCD_IO_ReadData>
 80020c6:	4603      	mov	r3, r0
 80020c8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	121b      	asrs	r3, r3, #8
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f023 0303 	bic.w	r3, r3, #3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	121b      	asrs	r3, r3, #8
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4611      	mov	r1, r2
 80020fe:	8019      	strh	r1, [r3, #0]
 8002100:	3302      	adds	r3, #2
 8002102:	0c12      	lsrs	r2, r2, #16
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	7c3a      	ldrb	r2, [r7, #16]
 800210a:	f362 0307 	bfi	r3, r2, #0, #8
 800210e:	7c7a      	ldrb	r2, [r7, #17]
 8002110:	f362 230f 	bfi	r3, r2, #8, #8
 8002114:	7cba      	ldrb	r2, [r7, #18]
 8002116:	f362 4317 	bfi	r3, r2, #16, #8
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4603      	mov	r3, r0
 800212e:	81fb      	strh	r3, [r7, #14]
 8002130:	460b      	mov	r3, r1
 8002132:	81bb      	strh	r3, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	202c      	movs	r0, #44	; 0x2c
 8002146:	f7ff fe08 	bl	8001d5a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	e029      	b.n	80021a4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <ST7789H2_DrawRGBHLine+0x98>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4293      	cmp	r3, r2
 800215a:	d320      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <ST7789H2_DrawRGBHLine+0x9c>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	89ba      	ldrh	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d31b      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <ST7789H2_DrawRGBHLine+0xa0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4293      	cmp	r3, r2
 8002170:	d815      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <ST7789H2_DrawRGBHLine+0xa4>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	89ba      	ldrh	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d810      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 800217c:	897a      	ldrh	r2, [r7, #10]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	441a      	add	r2, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	429a      	cmp	r2, r3
 8002186:	d007      	beq.n	8002198 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc38 	bl	8002a08 <LCD_IO_WriteData>
      }      
      i++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	897a      	ldrh	r2, [r7, #10]
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3ce      	bcc.n	8002150 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000184 	.word	0x20000184
 80021c0:	20000186 	.word	0x20000186
 80021c4:	200000b0 	.word	0x200000b0
 80021c8:	200000b2 	.word	0x200000b2

080021cc <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  while (1);
 80021d0:	e7fe      	b.n	80021d0 <BSP_ErrorHandler+0x4>
	...

080021d4 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <BSP_LED_On+0x3c>)
 80021e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <BSP_LED_On+0x40>)
 80021f2:	f005 f99d 	bl	8007530 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80021f6:	e007      	b.n	8002208 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <BSP_LED_On+0x3c>)
 80021fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fe72 	bl	8002eec <BSP_IO_WritePin>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	0801304c 	.word	0x0801304c
 8002214:	48000400 	.word	0x48000400

08002218 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d109      	bne.n	800223c <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <BSP_LED_Off+0x3c>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	2201      	movs	r2, #1
 8002232:	4619      	mov	r1, r3
 8002234:	4808      	ldr	r0, [pc, #32]	; (8002258 <BSP_LED_Off+0x40>)
 8002236:	f005 f97b 	bl	8007530 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800223a:	e007      	b.n	800224c <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <BSP_LED_Off+0x3c>)
 8002240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fe50 	bl	8002eec <BSP_IO_WritePin>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0801304c 	.word	0x0801304c
 8002258:	48000400 	.word	0x48000400

0800225c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8002260:	4812      	ldr	r0, [pc, #72]	; (80022ac <I2C2_Init+0x50>)
 8002262:	f005 fd9c 	bl	8007d9e <HAL_I2C_GetState>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11d      	bne.n	80022a8 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <I2C2_Init+0x50>)
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <I2C2_Init+0x54>)
 8002270:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <I2C2_Init+0x50>)
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <I2C2_Init+0x58>)
 8002276:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <I2C2_Init+0x50>)
 800227a:	2270      	movs	r2, #112	; 0x70
 800227c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <I2C2_Init+0x50>)
 8002280:	2201      	movs	r2, #1
 8002282:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <I2C2_Init+0x50>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <I2C2_Init+0x50>)
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <I2C2_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <I2C2_Init+0x50>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <I2C2_Init+0x50>)
 800229e:	f000 f80b 	bl	80022b8 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <I2C2_Init+0x50>)
 80022a4:	f005 f974 	bl	8007590 <HAL_I2C_Init>
  }
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000188 	.word	0x20000188
 80022b0:	40005800 	.word	0x40005800
 80022b4:	40403e5d 	.word	0x40403e5d

080022b8 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0ae      	sub	sp, #184	; 0xb8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <I2C2_MspInit+0xec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d168      	bne.n	800239c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80022ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 fefb 	bl	80090d4 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800230e:	2310      	movs	r3, #16
 8002310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8002314:	2312      	movs	r3, #18
 8002316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8002326:	2304      	movs	r3, #4
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800232c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002330:	4619      	mov	r1, r3
 8002332:	481e      	ldr	r0, [pc, #120]	; (80023ac <I2C2_MspInit+0xf4>)
 8002334:	f004 fe78 	bl	8007028 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8002338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800233c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8002340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002344:	4619      	mov	r1, r3
 8002346:	481a      	ldr	r0, [pc, #104]	; (80023b0 <I2C2_MspInit+0xf8>)
 8002348:	f004 fe6e 	bl	8007028 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <I2C2_MspInit+0xf0>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <I2C2_MspInit+0xf0>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <I2C2_MspInit+0xf0>)
 800236a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002376:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800237a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2021      	movs	r0, #33	; 0x21
 8002382:	f003 fc5a 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002386:	2021      	movs	r0, #33	; 0x21
 8002388:	f003 fc73 	bl	8005c72 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2022      	movs	r0, #34	; 0x22
 8002392:	f003 fc52 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002396:	2022      	movs	r0, #34	; 0x22
 8002398:	f003 fc6b 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  }
}
 800239c:	bf00      	nop
 800239e:	37b8      	adds	r7, #184	; 0xb8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40005800 	.word	0x40005800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48001c00 	.word	0x48001c00
 80023b0:	48000400 	.word	0x48000400

080023b4 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <I2C2_DeInit+0x20>)
 80023ba:	f005 fcf0 	bl	8007d9e <HAL_I2C_GetState>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <I2C2_DeInit+0x20>)
 80023c6:	f005 f972 	bl	80076ae <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80023ca:	4802      	ldr	r0, [pc, #8]	; (80023d4 <I2C2_DeInit+0x20>)
 80023cc:	f000 f804 	bl	80023d8 <I2C2_MspDeInit>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000188 	.word	0x20000188

080023d8 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <I2C2_MspDeInit+0x8c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d138      	bne.n	800245c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800241a:	2110      	movs	r1, #16
 800241c:	4813      	ldr	r0, [pc, #76]	; (800246c <I2C2_MspDeInit+0x94>)
 800241e:	f004 ff95 	bl	800734c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8002422:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <I2C2_MspDeInit+0x98>)
 8002428:	f004 ff90 	bl	800734c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <I2C2_MspDeInit+0x90>)
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002436:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <I2C2_MspDeInit+0x90>)
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <I2C2_MspDeInit+0x90>)
 800243e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002442:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <I2C2_MspDeInit+0x90>)
 800244a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002450:	2021      	movs	r0, #33	; 0x21
 8002452:	f003 fc1c 	bl	8005c8e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002456:	2022      	movs	r0, #34	; 0x22
 8002458:	f003 fc19 	bl	8005c8e <HAL_NVIC_DisableIRQ>
  }
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40005800 	.word	0x40005800
 8002468:	40021000 	.word	0x40021000
 800246c:	48001c00 	.word	0x48001c00
 8002470:	48000400 	.word	0x48000400

08002474 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af04      	add	r7, sp, #16
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	4603      	mov	r3, r0
 8002488:	80bb      	strh	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002496:	b672      	cpsid	i
}
 8002498:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <I2C2_WriteData+0x5c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	8878      	ldrh	r0, [r7, #2]
 80024a0:	88ba      	ldrh	r2, [r7, #4]
 80024a2:	88f9      	ldrh	r1, [r7, #6]
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2301      	movs	r3, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	1c7b      	adds	r3, r7, #1
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4603      	mov	r3, r0
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <I2C2_WriteData+0x60>)
 80024b2:	f005 f93f 	bl	8007734 <HAL_I2C_Mem_Write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80024ba:	b662      	cpsie	i
}
 80024bc:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80024c4:	f000 f890 	bl	80025e8 <I2C2_Error>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	200000b4 	.word	0x200000b4
 80024d4:	20000188 	.word	0x20000188

080024d8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af04      	add	r7, sp, #16
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
 80024e2:	460b      	mov	r3, r1
 80024e4:	80bb      	strh	r3, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f2:	b672      	cpsid	i
}
 80024f4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <I2C2_ReadData+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	8878      	ldrh	r0, [r7, #2]
 80024fc:	88ba      	ldrh	r2, [r7, #4]
 80024fe:	88f9      	ldrh	r1, [r7, #6]
 8002500:	9302      	str	r3, [sp, #8]
 8002502:	2301      	movs	r3, #1
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	f107 030e 	add.w	r3, r7, #14
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	480b      	ldr	r0, [pc, #44]	; (800253c <I2C2_ReadData+0x64>)
 8002510:	f005 fa24 	bl	800795c <HAL_I2C_Mem_Read>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002518:	b662      	cpsie	i
}
 800251a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002522:	f000 f861 	bl	80025e8 <I2C2_Error>
    HAL_Delay(200);
 8002526:	20c8      	movs	r0, #200	; 0xc8
 8002528:	f003 fa64 	bl	80059f4 <HAL_Delay>
  }

  return value;
 800252c:	7bbb      	ldrb	r3, [r7, #14]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000b4 	.word	0x200000b4
 800253c:	20000188 	.word	0x20000188

08002540 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8002558:	88f9      	ldrh	r1, [r7, #6]
 800255a:	2332      	movs	r3, #50	; 0x32
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	480a      	ldr	r0, [pc, #40]	; (8002588 <I2C2_isDeviceReady+0x48>)
 8002560:	f005 fb16 	bl	8007b90 <HAL_I2C_IsDeviceReady>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002568:	b662      	cpsie	i
}
 800256a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002572:	f000 f839 	bl	80025e8 <I2C2_Error>
    HAL_Delay(200);
 8002576:	20c8      	movs	r0, #200	; 0xc8
 8002578:	f003 fa3c 	bl	80059f4 <HAL_Delay>
  }

  return value;
 800257c:	7bbb      	ldrb	r3, [r7, #14]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000188 	.word	0x20000188

0800258c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af04      	add	r7, sp, #16
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	4603      	mov	r3, r0
 8002596:	81fb      	strh	r3, [r7, #14]
 8002598:	460b      	mov	r3, r1
 800259a:	81bb      	strh	r3, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <I2C2_ReadBuffer+0x54>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8978      	ldrh	r0, [r7, #10]
 80025ae:	89ba      	ldrh	r2, [r7, #12]
 80025b0:	89f9      	ldrh	r1, [r7, #14]
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	8c3b      	ldrh	r3, [r7, #32]
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4603      	mov	r3, r0
 80025be:	4809      	ldr	r0, [pc, #36]	; (80025e4 <I2C2_ReadBuffer+0x58>)
 80025c0:	f005 f9cc 	bl	800795c <HAL_I2C_Mem_Read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80025c8:	b662      	cpsie	i
}
 80025ca:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80025d2:	f000 f809 	bl	80025e8 <I2C2_Error>
  }

  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000b4 	.word	0x200000b4
 80025e4:	20000188 	.word	0x20000188

080025e8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80025ec:	f7ff fdee 	bl	80021cc <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <I2C2_Error+0x18>)
 80025f2:	f005 f85c 	bl	80076ae <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80025f6:	f7ff fe31 	bl	800225c <I2C2_Init>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000188 	.word	0x20000188

08002604 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8002608:	f7ff fe28 	bl	800225c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800260c:	2104      	movs	r1, #4
 800260e:	2084      	movs	r0, #132	; 0x84
 8002610:	f7ff ff96 	bl	8002540 <I2C2_isDeviceReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800261a:	f7ff fdd7 	bl	80021cc <BSP_ErrorHandler>
  }
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MFX_IO_DeInit+0x6c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800264e:	2302      	movs	r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <MFX_IO_DeInit+0x70>)
 800265a:	f004 fce5 	bl	8007028 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800265e:	2017      	movs	r0, #23
 8002660:	f003 fb15 	bl	8005c8e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <MFX_IO_DeInit+0x6c>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800267c:	2120      	movs	r1, #32
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <MFX_IO_DeInit+0x74>)
 8002680:	f004 fe64 	bl	800734c <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002684:	f7ff fe96 	bl	80023b4 <I2C2_DeInit>
}
 8002688:	bf00      	nop
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	48001c00 	.word	0x48001c00
 8002698:	48000800 	.word	0x48000800

0800269c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 80026ba:	2320      	movs	r3, #32
 80026bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80026c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026ca:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4808      	ldr	r0, [pc, #32]	; (80026f4 <MFX_IO_ITConfig+0x58>)
 80026d2:	f004 fca9 	bl	8007028 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80026d6:	220f      	movs	r2, #15
 80026d8:	210f      	movs	r1, #15
 80026da:	2017      	movs	r0, #23
 80026dc:	f003 faad 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80026e0:	2017      	movs	r0, #23
 80026e2:	f003 fac6 	bl	8005c72 <HAL_NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000800 	.word	0x48000800

080026f8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	2302      	movs	r3, #2
 8002720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4804      	ldr	r0, [pc, #16]	; (800273c <MFX_IO_EnableWakeupPin+0x44>)
 800272c:	f004 fc7c 	bl	8007028 <HAL_GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	48001c00 	.word	0x48001c00

08002740 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <MFX_IO_Wakeup+0x24>)
 800274a:	f004 fef1 	bl	8007530 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f003 f950 	bl	80059f4 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <MFX_IO_Wakeup+0x24>)
 800275a:	f004 fee9 	bl	8007530 <HAL_GPIO_WritePin>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	48001c00 	.word	0x48001c00

08002768 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
 8002772:	460b      	mov	r3, r1
 8002774:	717b      	strb	r3, [r7, #5]
 8002776:	4613      	mov	r3, r2
 8002778:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800277a:	797b      	ldrb	r3, [r7, #5]
 800277c:	b299      	uxth	r1, r3
 800277e:	793b      	ldrb	r3, [r7, #4]
 8002780:	88f8      	ldrh	r0, [r7, #6]
 8002782:	2201      	movs	r2, #1
 8002784:	f7ff fe76 	bl	8002474 <I2C2_WriteData>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	4613      	mov	r3, r2
 800279e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80027a0:	797b      	ldrb	r3, [r7, #5]
 80027a2:	b299      	uxth	r1, r3
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe95 	bl	80024d8 <I2C2_ReadData>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60ba      	str	r2, [r7, #8]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	81fb      	strh	r3, [r7, #14]
 80027c6:	460b      	mov	r3, r1
 80027c8:	737b      	strb	r3, [r7, #13]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	b299      	uxth	r1, r3
 80027d2:	89f8      	ldrh	r0, [r7, #14]
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2201      	movs	r2, #1
 80027dc:	f7ff fed6 	bl	800258c <I2C2_ReadBuffer>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b29b      	uxth	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f003 f8fd 	bl	80059f4 <HAL_Delay>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	4a37      	ldr	r2, [pc, #220]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6513      	str	r3, [r2, #80]	; 0x50
 8002816:	4b35      	ldr	r3, [pc, #212]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002840:	f043 0310 	orr.w	r3, r3, #16
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800289a:	f005 fd99 	bl	80083d0 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 80028aa:	230c      	movs	r3, #12
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 80028ae:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80028b2:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <FMC_BANK1_MspInit+0xec>)
 80028bc:	f004 fbb4 	bl	8007028 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 80028c0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028c4:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <FMC_BANK1_MspInit+0xf0>)
 80028ce:	f004 fbab 	bl	8007028 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 80028d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	4804      	ldr	r0, [pc, #16]	; (80028f0 <FMC_BANK1_MspInit+0xec>)
 80028e0:	f004 fba2 	bl	8007028 <HAL_GPIO_Init>

}
 80028e4:	bf00      	nop
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000c00 	.word	0x48000c00
 80028f4:	48001000 	.word	0x48001000

080028f8 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0a4      	sub	sp, #144	; 0x90
 80028fc:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 80028fe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <FMC_BANK1_Init+0xa8>)
 8002906:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8002908:	2301      	movs	r3, #1
 800290a:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8002918:	2302      	movs	r3, #2
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800291c:	2302      	movs	r3, #2
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8002924:	2305      	movs	r3, #5
 8002926:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800292c:	2303      	movs	r3, #3
 800292e:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8002930:	2302      	movs	r3, #2
 8002932:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8002934:	2302      	movs	r3, #2
 8002936:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8002938:	2302      	movs	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8002940:	2300      	movs	r3, #0
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8002948:	2300      	movs	r3, #0
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800294c:	2310      	movs	r3, #16
 800294e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8002958:	2300      	movs	r3, #0
 800295a:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8002978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800297c:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800297e:	2300      	movs	r3, #0
 8002980:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8002982:	f7ff ff3f 	bl	8002804 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8002986:	463a      	mov	r2, r7
 8002988:	f107 0120 	add.w	r1, r7, #32
 800298c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f009 fc79 	bl	800c288 <HAL_SRAM_Init>

}
 8002996:	bf00      	nop
 8002998:	3790      	adds	r7, #144	; 0x90
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	a0000104 	.word	0xa0000104

080029a4 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <FMC_BANK1_WriteData+0x1c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	8013      	strh	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	60080000 	.word	0x60080000

080029c4 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 80029ce:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80029d2:	79fa      	ldrb	r2, [r7, #7]
 80029d4:	b292      	uxth	r2, r2
 80029d6:	801a      	strh	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <FMC_BANK1_ReadData+0x14>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	60080000 	.word	0x60080000

080029fc <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8002a00:	f7ff ff7a 	bl	80028f8 <FMC_BANK1_Init>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ffc5 	bl	80029a4 <FMC_BANK1_WriteData>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffc8 	bl	80029c4 <FMC_BANK1_WriteReg>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8002a40:	f7ff ffd0 	bl	80029e4 <FMC_BANK1_ReadData>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f002 ffce 	bl	80059f4 <HAL_Delay>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OV5640_IO_t              IOCtx;
	static OV5640_Object_t   OV5640Obj;

	/* Configure the audio driver */
	IOCtx.Address     = 0x78U; //# CAMERA_OV5640_ADDRESS
 8002a6e:	2378      	movs	r3, #120	; 0x78
 8002a70:	833b      	strh	r3, [r7, #24]
	IOCtx.Init        = I2C2_Init;
 8002a72:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <BSP_CAMERA_Init+0x164>)
 8002a74:	613b      	str	r3, [r7, #16]
	IOCtx.DeInit      = I2C2_DeInit;
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <BSP_CAMERA_Init+0x168>)
 8002a78:	617b      	str	r3, [r7, #20]

  /* Get the DCMI handle structure */
  phdcmi = &hdcmi;
 8002a7a:	4b54      	ldr	r3, [pc, #336]	; (8002bcc <BSP_CAMERA_Init+0x16c>)
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize the IO functionalities */
  BSP_IO_Init();
 8002a7e:	f000 f9d5 	bl	8002e2c <BSP_IO_Init>


  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	609a      	str	r2, [r3, #8]
  phdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
  phdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  phdcmi->Init.JPEGMode			= DCMI_JPEG_ENABLE;
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	621a      	str	r2, [r3, #32]
  phdcmi->Instance              = DCMI;
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	4a45      	ldr	r2, [pc, #276]	; (8002bd0 <BSP_CAMERA_Init+0x170>)
 8002abc:	601a      	str	r2, [r3, #0]

  /* Camera initialization */
  BSP_CAMERA_MspInit(&hdcmi, NULL);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4842      	ldr	r0, [pc, #264]	; (8002bcc <BSP_CAMERA_Init+0x16c>)
 8002ac2:	f000 f8a5 	bl	8002c10 <BSP_CAMERA_MspInit>

  uint32_t CameraId;
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4619      	mov	r1, r3
 8002acc:	4841      	ldr	r0, [pc, #260]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002ace:	f001 fd51 	bl	8004574 <OV5640_RegisterBusIO>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <BSP_CAMERA_Init+0x7e>
  {
	  printf("OV5640_RegisterBusIO ERROR!\r\n");
 8002ad8:	483f      	ldr	r0, [pc, #252]	; (8002bd8 <BSP_CAMERA_Init+0x178>)
 8002ada:	f00f fc8b 	bl	80123f4 <puts>
  }
  /* Read ID of Camera module via I2C */
  if (OV5640_ReadID(&OV5640Obj, &CameraId) == OV5640_ID)
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	483b      	ldr	r0, [pc, #236]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002ae6:	f002 f805 	bl	8004af4 <OV5640_ReadID>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f245 6240 	movw	r2, #22080	; 0x5640
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d15d      	bne.n	8002bb0 <BSP_CAMERA_Init+0x150>
  {
    /* Initialize the camera driver structure */
    //camera_drv = &ov5640_drv;
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <BSP_CAMERA_Init+0x17c>)
 8002af6:	2278      	movs	r2, #120	; 0x78
 8002af8:	601a      	str	r2, [r3, #0]
    /* DCMI Initialization */
    HAL_DCMI_Init(phdcmi);
 8002afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afc:	f003 f8e2 	bl	8005cc4 <HAL_DCMI_Init>
    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d12d      	bne.n	8002b62 <BSP_CAMERA_Init+0x102>
    {
      /* For 240x240 resolution, the OV9655 sensor is set to QVGA resolution
       * as OV9655 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      OV5640_Init(&OV5640Obj, RESOLUTION_R320x240, OV5640_RGB565);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4832      	ldr	r0, [pc, #200]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002b0c:	f001 fd58 	bl	80045c0 <OV5640_Init>


      HAL_DCMI_ConfigCROP(phdcmi,
 8002b10:	23ef      	movs	r3, #239	; 0xef
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f240 13df 	movw	r3, #479	; 0x1df
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2128      	movs	r1, #40	; 0x28
 8002b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b1e:	f003 fb1f 	bl	8006160 <HAL_DCMI_ConfigCrop>
                          40,                 /* Crop in the middle of the VGA picture */
                          0,                 /* Same height (same number of lines: no need to crop vertically) */
                          (240 * 2) - 1,     /* 2 pixels clock needed to capture one pixel */
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
 8002b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b24:	f003 fb88 	bl	8006238 <HAL_DCMI_EnableCrop>


      /* Set the RGB565 mode */
      MFX_IO_Write(CameraHwAddress, 0x12 /*OV9655_COM7*/, 0x63);
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <BSP_CAMERA_Init+0x17c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2263      	movs	r2, #99	; 0x63
 8002b30:	2112      	movs	r1, #18
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fe18 	bl	8002768 <MFX_IO_Write>
      MFX_IO_Write(CameraHwAddress, 0x40 /*OV9655_COM15*/, 0x10);
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <BSP_CAMERA_Init+0x17c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2210      	movs	r2, #16
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fe10 	bl	8002768 <MFX_IO_Write>
      /* Invert the HRef signal */
      MFX_IO_Write(CameraHwAddress, 0x15 /*OV9655_COM10*/, 0x08);
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <BSP_CAMERA_Init+0x17c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2208      	movs	r2, #8
 8002b50:	2115      	movs	r1, #21
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fe08 	bl	8002768 <MFX_IO_Write>
      HAL_Delay(500);
 8002b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b5c:	f002 ff4a 	bl	80059f4 <HAL_Delay>
 8002b60:	e00b      	b.n	8002b7a <BSP_CAMERA_Init+0x11a>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <BSP_CAMERA_Init+0x180>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <BSP_CAMERA_Init+0x17c>)
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4610      	mov	r0, r2
 8002b72:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 8002b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b76:	f003 fb35 	bl	80061e4 <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <BSP_CAMERA_Init+0x184>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6013      	str	r3, [r2, #0]

    OV5640_SetLightMode(&OV5640Obj, OV5640_LIGHT_AUTO);
 8002b80:	2100      	movs	r1, #0
 8002b82:	4814      	ldr	r0, [pc, #80]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002b84:	f001 ffe4 	bl	8004b50 <OV5640_SetLightMode>
    OV5640_SetSaturation(&OV5640Obj, 0);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002b8c:	f002 f930 	bl	8004df0 <OV5640_SetSaturation>
    OV5640_SetBrightness(&OV5640Obj, 0);
 8002b90:	2100      	movs	r1, #0
 8002b92:	4810      	ldr	r0, [pc, #64]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002b94:	f002 f8e4 	bl	8004d60 <OV5640_SetBrightness>
    OV5640_SetHueDegree(&OV5640Obj, 1);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	480e      	ldr	r0, [pc, #56]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002b9c:	f002 f96e 	bl	8004e7c <OV5640_SetHueDegree>

    OV5640_SetPixelFormat(&OV5640Obj, OV5640_RGB565);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <BSP_CAMERA_Init+0x174>)
 8002ba4:	f001 fd7c 	bl	80046a0 <OV5640_SetPixelFormat>



    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002bae:	e002      	b.n	8002bb6 <BSP_CAMERA_Init+0x156>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return status;
 8002bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800225d 	.word	0x0800225d
 8002bc8:	080023b5 	.word	0x080023b5
 8002bcc:	200002f8 	.word	0x200002f8
 8002bd0:	50050000 	.word	0x50050000
 8002bd4:	200001e8 	.word	0x200001e8
 8002bd8:	08012ca4 	.word	0x08012ca4
 8002bdc:	200001e4 	.word	0x200001e4
 8002be0:	200001dc 	.word	0x200001dc
 8002be4:	200001e0 	.word	0x200001e0

08002be8 <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Suspend(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Suspend the Camera Capture */
  HAL_DCMI_Suspend(&hdcmi);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <BSP_CAMERA_Suspend+0x10>)
 8002bee:	f003 f9c1 	bl	8005f74 <HAL_DCMI_Suspend>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200002f8 	.word	0x200002f8

08002bfc <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Resume(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Start the Camera Capture */
  HAL_DCMI_Resume(&hdcmi);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <BSP_CAMERA_Resume+0x10>)
 8002c02:	f003 fa04 	bl	800600e <HAL_DCMI_Resume>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200002f8 	.word	0x200002f8

08002c10 <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8002c1a:	4b64      	ldr	r3, [pc, #400]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	4a63      	ldr	r2, [pc, #396]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c32:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4a57      	ldr	r2, [pc, #348]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c56:	4b55      	ldr	r3, [pc, #340]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c62:	4b52      	ldr	r3, [pc, #328]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a51      	ldr	r2, [pc, #324]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	4a45      	ldr	r2, [pc, #276]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9e:	4b43      	ldr	r3, [pc, #268]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 8002caa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cae:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f006 f8b6 	bl	8008e24 <HAL_RCC_MCOConfig>
  __HAL_RCC_HSI48_ENABLE();
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <BSP_CAMERA_MspInit+0x19c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  HAL_Delay(10); // HSI48 should start in 10ms
 8002cc8:	200a      	movs	r0, #10
 8002cca:	f002 fe93 	bl	80059f4 <HAL_Delay>


  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_5;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002cde:	230a      	movs	r3, #10
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4831      	ldr	r0, [pc, #196]	; (8002db0 <BSP_CAMERA_MspInit+0x1a0>)
 8002cea:	f004 f99d 	bl	8007028 <HAL_GPIO_Init>


  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | \
 8002cee:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002d00:	230a      	movs	r3, #10
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482a      	ldr	r0, [pc, #168]	; (8002db4 <BSP_CAMERA_MspInit+0x1a4>)
 8002d0c:	f004 f98c 	bl	8007028 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8002d10:	23b0      	movs	r3, #176	; 0xb0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002d20:	230a      	movs	r3, #10
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4823      	ldr	r0, [pc, #140]	; (8002db8 <BSP_CAMERA_MspInit+0x1a8>)
 8002d2c:	f004 f97c 	bl	8007028 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d32:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <BSP_CAMERA_MspInit+0x1b0>)
 8002d34:	601a      	str	r2, [r3, #0]

  hdma_handler.Init.Request             = DMA_REQUEST_0;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d5c:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d60:	2220      	movs	r2, #32
 8002d62:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d70:	651a      	str	r2, [r3, #80]	; 0x50
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <BSP_CAMERA_MspInit+0x1ac>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6293      	str	r3, [r2, #40]	; 0x28

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	2055      	movs	r0, #85	; 0x55
 8002d7e:	f002 ff5c 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002d82:	2055      	movs	r0, #85	; 0x55
 8002d84:	f002 ff75 	bl	8005c72 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	2044      	movs	r0, #68	; 0x44
 8002d8e:	f002 ff54 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002d92:	2044      	movs	r0, #68	; 0x44
 8002d94:	f002 ff6d 	bl	8005c72 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fbf7 	bl	8006590 <HAL_DMA_Init>
}
 8002da2:	bf00      	nop
 8002da4:	3738      	adds	r7, #56	; 0x38
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	48001000 	.word	0x48001000
 8002db4:	48001c00 	.word	0x48001c00
 8002db8:	48002000 	.word	0x48002000
 8002dbc:	20000210 	.word	0x20000210
 8002dc0:	4002046c 	.word	0x4002046c

08002dc4 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8002dcc:	f000 f804 	bl	8002dd8 <BSP_CAMERA_LineEventCallback>
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8002dee:	f000 f804 	bl	8002dfa <BSP_CAMERA_VsyncEventCallback>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8002e10:	f000 f804 	bl	8002e1c <BSP_CAMERA_ErrorCallback>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <BSP_IO_Init+0x78>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d128      	bne.n	8002e94 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <BSP_IO_Init+0x7c>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2084      	movs	r0, #132	; 0x84
 8002e48:	4798      	blx	r3

    HAL_Delay(10);
 8002e4a:	200a      	movs	r0, #10
 8002e4c:	f002 fdd2 	bl	80059f4 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <BSP_IO_Init+0x80>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2084      	movs	r0, #132	; 0x84
 8002e56:	4798      	blx	r3
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	2b7b      	cmp	r3, #123	; 0x7b
 8002e60:	d002      	beq.n	8002e68 <BSP_IO_Init+0x3c>
 8002e62:	79bb      	ldrb	r3, [r7, #6]
 8002e64:	2b79      	cmp	r3, #121	; 0x79
 8002e66:	d117      	bne.n	8002e98 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <BSP_IO_Init+0x78>)
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <BSP_IO_Init+0x80>)
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <BSP_IO_Init+0x78>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00f      	beq.n	8002e98 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <BSP_IO_Init+0x78>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2084      	movs	r0, #132	; 0x84
 8002e80:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <BSP_IO_Init+0x78>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4909      	ldr	r1, [pc, #36]	; (8002eb0 <BSP_IO_Init+0x84>)
 8002e8a:	2084      	movs	r0, #132	; 0x84
 8002e8c:	4798      	blx	r3

        ret = IO_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	71fb      	strb	r3, [r7, #7]
 8002e92:	e001      	b.n	8002e98 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002e94:	2303      	movs	r3, #3
 8002e96:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8002e98:	79fb      	ldrb	r3, [r7, #7]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000258 	.word	0x20000258
 8002ea8:	2000002c 	.word	0x2000002c
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	000301ff 	.word	0x000301ff

08002eb4 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <BSP_IO_ConfigPin+0x30>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <BSP_IO_ConfigPin+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	2084      	movs	r0, #132	; 0x84
 8002ed8:	4798      	blx	r3

  return IO_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	000301ff 	.word	0x000301ff
 8002ee8:	20000258 	.word	0x20000258

08002eec <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <BSP_IO_WritePin+0x30>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <BSP_IO_WritePin+0x34>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	2084      	movs	r0, #132	; 0x84
 8002f10:	4798      	blx	r3

}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	000301ff 	.word	0x000301ff
 8002f20:	20000258 	.word	0x20000258

08002f24 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <BSP_IO_ReadPin+0x38>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <BSP_IO_ReadPin+0x3c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	2084      	movs	r0, #132	; 0x84
 8002f46:	4798      	blx	r3
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]


  return pin_state;
 8002f50:	68fb      	ldr	r3, [r7, #12]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	000301ff 	.word	0x000301ff
 8002f60:	20000258 	.word	0x20000258

08002f64 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f000 f803 	bl	8002f74 <BSP_LCD_InitEx>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <BSP_LCD_InitEx+0xd4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e054      	b.n	800303c <BSP_LCD_InitEx+0xc8>
  }
  else
  {
    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8002f92:	f000 f89f 	bl	80030d4 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2101      	movs	r1, #1
 8002f9a:	482c      	ldr	r0, [pc, #176]	; (800304c <BSP_LCD_InitEx+0xd8>)
 8002f9c:	f004 fac8 	bl	8007530 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <BSP_LCD_InitEx+0xdc>)
 8002fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fa6:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <BSP_LCD_InitEx+0xdc>)
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <BSP_LCD_InitEx+0xe0>)
 8002fac:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <BSP_LCD_InitEx+0xdc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <BSP_LCD_InitEx+0xe4>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <BSP_LCD_InitEx+0x5a>
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <BSP_LCD_InitEx+0xe8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d104      	bne.n	8002fce <BSP_LCD_InitEx+0x5a>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4825      	ldr	r0, [pc, #148]	; (8003060 <BSP_LCD_InitEx+0xec>)
 8002fca:	f004 fab1 	bl	8007530 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8002fce:	f000 f851 	bl	8003074 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <BSP_LCD_InitEx+0xf0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b85      	cmp	r3, #133	; 0x85
 8002fdc:	d12e      	bne.n	800303c <BSP_LCD_InitEx+0xc8>
    {
      LcdDrv = &ST7789H2_drv;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <BSP_LCD_InitEx+0xf4>)
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <BSP_LCD_InitEx+0xf0>)
 8002fe2:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <BSP_LCD_InitEx+0xf4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	202c      	movs	r0, #44	; 0x2c
 8002ff2:	f7fe feb2 	bl	8001d5a <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	e006      	b.n	800300a <BSP_LCD_InitEx+0x96>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8002ffc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003000:	f7ff fd02 	bl	8002a08 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8003010:	d3f4      	bcc.n	8002ffc <BSP_LCD_InitEx+0x88>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <BSP_LCD_InitEx+0xb2>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fe fd9c 	bl	8001b56 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <BSP_LCD_InitEx+0xf8>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e002      	b.n	800302c <BSP_LCD_InitEx+0xb8>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <BSP_LCD_InitEx+0xf8>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800302c:	4810      	ldr	r0, [pc, #64]	; (8003070 <BSP_LCD_InitEx+0xfc>)
 800302e:	f000 f841 	bl	80030b4 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <BSP_LCD_InitEx+0xd4>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000025c 	.word	0x2000025c
 800304c:	48001c00 	.word	0x48001c00
 8003050:	20000264 	.word	0x20000264
 8003054:	200000b8 	.word	0x200000b8
 8003058:	20000260 	.word	0x20000260
 800305c:	20000261 	.word	0x20000261
 8003060:	48002000 	.word	0x48002000
 8003064:	20000078 	.word	0x20000078
 8003068:	20000270 	.word	0x20000270
 800306c:	200000c8 	.word	0x200000c8
 8003070:	200000c0 	.word	0x200000c0

08003074 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8003078:	2100      	movs	r1, #0
 800307a:	2004      	movs	r0, #4
 800307c:	f7ff ff36 	bl	8002eec <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8003080:	2005      	movs	r0, #5
 8003082:	f002 fcb7 	bl	80059f4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8003086:	2101      	movs	r1, #1
 8003088:	2004      	movs	r0, #4
 800308a:	f7ff ff2f 	bl	8002eec <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800308e:	200a      	movs	r0, #10
 8003090:	f002 fcb0 	bl	80059f4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8003094:	2100      	movs	r1, #0
 8003096:	2004      	movs	r0, #4
 8003098:	f7ff ff28 	bl	8002eec <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800309c:	2014      	movs	r0, #20
 800309e:	f002 fca9 	bl	80059f4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 80030a2:	2101      	movs	r1, #1
 80030a4:	2004      	movs	r0, #4
 80030a6:	f7ff ff21 	bl	8002eec <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80030aa:	200a      	movs	r0, #10
 80030ac:	f002 fca2 	bl	80059f4 <HAL_Delay>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <BSP_LCD_SetFont+0x1c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6093      	str	r3, [r2, #8]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000264 	.word	0x20000264

080030d4 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <BSP_LCD_MspInit+0xac>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4a28      	ldr	r2, [pc, #160]	; (8003180 <BSP_LCD_MspInit+0xac>)
 80030e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <BSP_LCD_MspInit+0xac>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <BSP_LCD_MspInit+0xac>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <BSP_LCD_MspInit+0xac>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <BSP_LCD_MspInit+0xac>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <BSP_LCD_MspInit+0xac>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <BSP_LCD_MspInit+0xac>)
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <BSP_LCD_MspInit+0xac>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8003122:	f7ff fe83 	bl	8002e2c <BSP_IO_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800312c:	f7ff f84e 	bl	80021cc <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8003130:	2101      	movs	r1, #1
 8003132:	2004      	movs	r0, #4
 8003134:	f7ff febe 	bl	8002eb4 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003138:	2301      	movs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800313c:	2301      	movs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	4619      	mov	r1, r3
 8003152:	480c      	ldr	r0, [pc, #48]	; (8003184 <BSP_LCD_MspInit+0xb0>)
 8003154:	f003 ff68 	bl	8007028 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8003158:	2301      	movs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	4619      	mov	r1, r3
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <BSP_LCD_MspInit+0xb4>)
 8003174:	f003 ff58 	bl	8007028 <HAL_GPIO_Init>
}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	48002000 	.word	0x48002000
 8003188:	48001c00 	.word	0x48001c00

0800318c <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <BSP_SD_Init+0x8c>)
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <BSP_SD_Init+0x90>)
 800319a:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <BSP_SD_Init+0x8c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <BSP_SD_Init+0x8c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <BSP_SD_Init+0x8c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <BSP_SD_Init+0x8c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <BSP_SD_Init+0x8c>)
 80031b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ba:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <BSP_SD_Init+0x8c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 80031c2:	f000 f966 	bl	8003492 <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80031c6:	f000 f844 	bl	8003252 <BSP_SD_IsDetected>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80031d0:	2302      	movs	r3, #2
 80031d2:	e01c      	b.n	800320e <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80031d4:	2100      	movs	r1, #0
 80031d6:	4810      	ldr	r0, [pc, #64]	; (8003218 <BSP_SD_Init+0x8c>)
 80031d8:	f000 f8bc 	bl	8003354 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 80031dc:	480e      	ldr	r0, [pc, #56]	; (8003218 <BSP_SD_Init+0x8c>)
 80031de:	f007 fbf5 	bl	800a9cc <HAL_SD_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80031f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031f6:	4808      	ldr	r0, [pc, #32]	; (8003218 <BSP_SD_Init+0x8c>)
 80031f8:	f008 fb72 	bl	800b8e0 <HAL_SD_ConfigWideBusOperation>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	71fb      	strb	r3, [r7, #7]
 8003206:	e001      	b.n	800320c <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 800320c:	79fb      	ldrb	r3, [r7, #7]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000274 	.word	0x20000274
 800321c:	40012800 	.word	0x40012800

08003220 <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 8003224:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003228:	f7ff fe7c 	bl	8002f24 <BSP_IO_ReadPin>
 800322c:	4603      	mov	r3, r0
 800322e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003232:	d006      	beq.n	8003242 <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 8003234:	2110      	movs	r1, #16
 8003236:	f44f 7080 	mov.w	r0, #256	; 0x100
 800323a:	f7ff fe3b 	bl	8002eb4 <BSP_IO_ConfigPin>
 800323e:	4603      	mov	r3, r0
 8003240:	e005      	b.n	800324e <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 8003242:	2112      	movs	r1, #18
 8003244:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003248:	f7ff fe34 	bl	8002eb4 <BSP_IO_ConfigPin>
 800324c:	4603      	mov	r3, r0
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}

08003252 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003258:	2301      	movs	r3, #1
 800325a:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 800325c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003260:	f7ff fe60 	bl	8002f24 <BSP_IO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 800326a:	2300      	movs	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	b2db      	uxtb	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]

  sd_state =  HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <BSP_SD_ReadBlocks+0x3c>)
 800329a:	f007 fc6d 	bl	800ab78 <HAL_SD_ReadBlocks>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <BSP_SD_ReadBlocks+0x30>
  {
    return MSD_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <BSP_SD_ReadBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 80032ac:	2301      	movs	r3, #1
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000274 	.word	0x20000274

080032bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]

  sd_state = HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	4807      	ldr	r0, [pc, #28]	; (80032f8 <BSP_SD_WriteBlocks+0x3c>)
 80032da:	f007 fe2b 	bl	800af34 <HAL_SD_WriteBlocks>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <BSP_SD_WriteBlocks+0x30>
  {
    return MSD_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <BSP_SD_WriteBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 80032ec:	2301      	movs	r3, #1
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000274 	.word	0x20000274

080032fc <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 8003302:	480c      	ldr	r0, [pc, #48]	; (8003334 <BSP_SD_GetCardState+0x38>)
 8003304:	f008 fba8 	bl	800ba58 <HAL_SD_GetCardState>
 8003308:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d101      	bne.n	8003314 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8003310:	2300      	movs	r3, #0
 8003312:	e00b      	b.n	800332c <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d005      	beq.n	8003326 <BSP_SD_GetCardState+0x2a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b06      	cmp	r3, #6
 800331e:	d002      	beq.n	8003326 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d101      	bne.n	800332a <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000274 	.word	0x20000274

08003338 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4803      	ldr	r0, [pc, #12]	; (8003350 <BSP_SD_GetCardInfo+0x18>)
 8003344:	f008 faa0 	bl	800b888 <HAL_SD_GetCardInfo>
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000274 	.word	0x20000274

08003354 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0ae      	sub	sp, #184	; 0xb8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800335e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	4618      	mov	r0, r3
 8003374:	f006 f9aa 	bl	80096cc <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003378:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800337c:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800337e:	2318      	movs	r3, #24
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 8003382:	2304      	movs	r3, #4
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800338c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8003394:	f107 0318 	add.w	r3, r7, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f005 fe9b 	bl	80090d4 <HAL_RCCEx_PeriphCLKConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d000      	beq.n	80033a6 <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 80033a4:	e7fe      	b.n	80033a4 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <BSP_SD_MspInit+0x108>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	4a2c      	ldr	r2, [pc, #176]	; (800345c <BSP_SD_MspInit+0x108>)
 80033ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b0:	6613      	str	r3, [r2, #96]	; 0x60
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <BSP_SD_MspInit+0x108>)
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <BSP_SD_MspInit+0x108>)
 80033c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <BSP_SD_MspInit+0x108>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6493      	str	r3, [r2, #72]	; 0x48
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <BSP_SD_MspInit+0x108>)
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <BSP_SD_MspInit+0x108>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <BSP_SD_MspInit+0x108>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <BSP_SD_MspInit+0x108>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <BSP_SD_MspInit+0x108>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <BSP_SD_MspInit+0x108>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <BSP_SD_MspInit+0x108>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8003418:	230c      	movs	r3, #12
 800341a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800341e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8003426:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800342a:	4619      	mov	r1, r3
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <BSP_SD_MspInit+0x10c>)
 800342e:	f003 fdfb 	bl	8007028 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8003432:	2304      	movs	r3, #4
 8003434:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8003438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800343c:	4619      	mov	r1, r3
 800343e:	4809      	ldr	r0, [pc, #36]	; (8003464 <BSP_SD_MspInit+0x110>)
 8003440:	f003 fdf2 	bl	8007028 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	2031      	movs	r0, #49	; 0x31
 800344a:	f002 fbf6 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 800344e:	2031      	movs	r0, #49	; 0x31
 8003450:	f002 fc0f 	bl	8005c72 <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8003454:	bf00      	nop
 8003456:	37b8      	adds	r7, #184	; 0xb8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000
 8003460:	48000800 	.word	0x48000800
 8003464:	48000c00 	.word	0x48000c00

08003468 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0

}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0

}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 8003496:	f7ff fcc9 	bl	8002e2c <BSP_IO_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 80034a0:	f7fe fe94 	bl	80021cc <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 80034a4:	2108      	movs	r1, #8
 80034a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034aa:	f7ff fd03 	bl	8002eb4 <BSP_IO_ConfigPin>
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Error_Handler(void);

int _write(int file, char *ptr, int len) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	2364      	movs	r3, #100	; 0x64
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4803      	ldr	r0, [pc, #12]	; (80034d8 <_write+0x24>)
 80034ca:	f008 ff73 	bl	800c3b4 <HAL_UART_Transmit>
 80034ce:	4603      	mov	r3, r0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000480 	.word	0x20000480

080034dc <print_startup_msg>:

static void print_startup_msg(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <print_startup_msg+0x2c>)
 80034e2:	f00e ff87 	bl	80123f4 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 80034e6:	4909      	ldr	r1, [pc, #36]	; (800350c <print_startup_msg+0x30>)
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <print_startup_msg+0x34>)
 80034ea:	f00e fefd 	bl	80122e8 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 80034ee:	4909      	ldr	r1, [pc, #36]	; (8003514 <print_startup_msg+0x38>)
 80034f0:	4809      	ldr	r0, [pc, #36]	; (8003518 <print_startup_msg+0x3c>)
 80034f2:	f00e fef9 	bl	80122e8 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 80034f6:	4909      	ldr	r1, [pc, #36]	; (800351c <print_startup_msg+0x40>)
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <print_startup_msg+0x44>)
 80034fa:	f00e fef5 	bl	80122e8 <iprintf>
  printf("******************************************\r\n");
 80034fe:	4802      	ldr	r0, [pc, #8]	; (8003508 <print_startup_msg+0x2c>)
 8003500:	f00e ff78 	bl	80123f4 <puts>
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08012d10 	.word	0x08012d10
 800350c:	08012d3c 	.word	0x08012d3c
 8003510:	08012d48 	.word	0x08012d48
 8003514:	08012d64 	.word	0x08012d64
 8003518:	08012d68 	.word	0x08012d68
 800351c:	08012d88 	.word	0x08012d88
 8003520:	08012d94 	.word	0x08012d94

08003524 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 800352e:	f002 fa55 	bl	80059dc <HAL_GetTick>
 8003532:	4603      	mov	r3, r0
 8003534:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_GPIO_EXTI_Callback+0x40>)
 8003536:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_GPIO_EXTI_Callback+0x40>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_GPIO_EXTI_Callback+0x44>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2bfa      	cmp	r3, #250	; 0xfa
 8003544:	d90a      	bls.n	800355c <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_GPIO_EXTI_Callback+0x48>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f910 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_GPIO_EXTI_Callback+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <HAL_GPIO_EXTI_Callback+0x44>)
 800355a:	6013      	str	r3, [r2, #0]
	}

}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2001ce3c 	.word	0x2001ce3c
 8003568:	2001ce40 	.word	0x2001ce40
 800356c:	200005a8 	.word	0x200005a8

08003570 <LCD_ImagePreparation>:
  * @param  xSize: image width (in pixels)
  * @param  ySize: image height (in pixels)
  * @retval None
  */
static void LCD_ImagePreparation(uint16_t x0, uint16_t y0, uint16_t xSize, uint16_t ySize)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4604      	mov	r4, r0
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4623      	mov	r3, r4
 8003580:	80fb      	strh	r3, [r7, #6]
 8003582:	4603      	mov	r3, r0
 8003584:	80bb      	strh	r3, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	807b      	strh	r3, [r7, #2]
 800358a:	4613      	mov	r3, r2
 800358c:	803b      	strh	r3, [r7, #0]
  /* CASET: Column Address Set */
  LCD_IO_WriteReg(ST7789H2_CASET);
 800358e:	202a      	movs	r0, #42	; 0x2a
 8003590:	f7ff fa47 	bl	8002a22 <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7ff fa37 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0);
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fa33 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7ff fa30 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0 + xSize -1);
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	4413      	add	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fa27 	bl	8002a08 <LCD_IO_WriteData>
  /* RASET: Row Address Set */
  LCD_IO_WriteReg(ST7789H2_RASET);
 80035ba:	202b      	movs	r0, #43	; 0x2b
 80035bc:	f7ff fa31 	bl	8002a22 <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7ff fa21 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0);
 80035c6:	88bb      	ldrh	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa1d 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7ff fa1a 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0 + ySize -1);
 80035d4:	88ba      	ldrh	r2, [r7, #4]
 80035d6:	883b      	ldrh	r3, [r7, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fa11 	bl	8002a08 <LCD_IO_WriteData>

  /* Prepare to write to LCD RAM */
  LCD_IO_WriteReg(ST7789H2_WRITE_RAM);
 80035e6:	202c      	movs	r0, #44	; 0x2c
 80035e8:	f7ff fa1b 	bl	8002a22 <LCD_IO_WriteReg>
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}

080035f4 <LCD_Write>:
  * @param  DestAddress: LCD RAM address
  * @param  TransferSize: image size (in pixels)
  * @retval HAL status
  */
static HAL_StatusTypeDef LCD_Write(uint32_t OrigAddress, uint32_t DestAddress, uint32_t TransferSize)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Force 1 pixel per line and width in pixels x height in pixels   */
  /* as number of lines to align DMA2D transfer to LCD configuration */
  if (HAL_OK != HAL_DMA2D_Start_IT(&hdma2d, OrigAddress, DestAddress, 1, TransferSize))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2301      	movs	r3, #1
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4806      	ldr	r0, [pc, #24]	; (8003624 <LCD_Write+0x30>)
 800360c:	f003 fa8f 	bl	8006b2e <HAL_DMA2D_Start_IT>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <LCD_Write+0x26>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <LCD_Write+0x28>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200003a4 	.word	0x200003a4

08003628 <SD_Initialize>:
  * @brief  Initialize the SD card.
  * @param  None
  * @retval None
  */
static void SD_Initialize(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <SD_Initialize+0x88>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d13a      	bne.n	80036aa <SD_Initialize+0x82>
  {
    if (BSP_SD_Init() == MSD_OK)
 8003634:	f7ff fdaa 	bl	800318c <BSP_SD_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d117      	bne.n	800366e <SD_Initialize+0x46>
    {
      BSP_SD_ITConfig();
 800363e:	f7ff fdef 	bl	8003220 <BSP_SD_ITConfig>
      isInitialized = 1;
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <SD_Initialize+0x88>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
      printf_dbg("SD Initialize Okey!\r\n");
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <SD_Initialize+0x8c>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	4618      	mov	r0, r3
 800364e:	f00e fe4b 	bl	80122e8 <iprintf>
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <SD_Initialize+0x90>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f00e fe46 	bl	80122e8 <iprintf>
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <SD_Initialize+0x8c>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4618      	mov	r0, r3
 8003662:	f00e fe41 	bl	80122e8 <iprintf>
 8003666:	4815      	ldr	r0, [pc, #84]	; (80036bc <SD_Initialize+0x94>)
 8003668:	f00e fec4 	bl	80123f4 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 800366c:	e01d      	b.n	80036aa <SD_Initialize+0x82>
      BSP_LED_On(LED1);
 800366e:	2000      	movs	r0, #0
 8003670:	f7fe fdb0 	bl	80021d4 <BSP_LED_On>
      printf_dbg("SD Initialize ERROR!!\r\n");
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <SD_Initialize+0x8c>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4618      	mov	r0, r3
 800367a:	f00e fe35 	bl	80122e8 <iprintf>
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <SD_Initialize+0x90>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f00e fe30 	bl	80122e8 <iprintf>
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <SD_Initialize+0x8c>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4618      	mov	r0, r3
 800368e:	f00e fe2b 	bl	80122e8 <iprintf>
 8003692:	480b      	ldr	r0, [pc, #44]	; (80036c0 <SD_Initialize+0x98>)
 8003694:	f00e feae 	bl	80123f4 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8003698:	bf00      	nop
 800369a:	f7ff fdda 	bl	8003252 <BSP_SD_IsDetected>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d1fa      	bne.n	800369a <SD_Initialize+0x72>
      BSP_LED_Off(LED1);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fe fdb7 	bl	8002218 <BSP_LED_Off>
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2001cc38 	.word	0x2001cc38
 80036b4:	200000cc 	.word	0x200000cc
 80036b8:	200000ec 	.word	0x200000ec
 80036bc:	08012dac 	.word	0x08012dac
 80036c0:	08012dc4 	.word	0x08012dc4

080036c4 <HAL_DCMI_FrameEventCallback>:
  * @param  None
  * @retval None
  */

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	//printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
	LCD_ImagePreparation(0, 0, ST7789H2_LCD_PIXEL_WIDTH, ST7789H2_LCD_PIXEL_HEIGHT);
 80036cc:	23f0      	movs	r3, #240	; 0xf0
 80036ce:	22f0      	movs	r2, #240	; 0xf0
 80036d0:	2100      	movs	r1, #0
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7ff ff4c 	bl	8003570 <LCD_ImagePreparation>

	/* Write data (through DMA2D) */
	hal_status = LCD_Write((uint32_t) (&pBuffer), (uint32_t)&(LCD_ADDR->REG), ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT);
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_DCMI_FrameEventCallback+0x40>)
 80036da:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <HAL_DCMI_FrameEventCallback+0x44>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff87 	bl	80035f4 <LCD_Write>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_DCMI_FrameEventCallback+0x48>)
 80036ec:	701a      	strb	r2, [r3, #0]
	if(hal_status != HAL_OK)Error_Handler();
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_DCMI_FrameEventCallback+0x48>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_DCMI_FrameEventCallback+0x36>
 80036f6:	f000 ff1f 	bl	8004538 <Error_Handler>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200005d4 	.word	0x200005d4
 8003708:	60080000 	.word	0x60080000
 800370c:	200005a4 	.word	0x200005a4

08003710 <FS_FileOperations>:

static void FS_FileOperations(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0b2      	sub	sp, #200	; 0xc8
 8003714:	af02      	add	r7, sp, #8
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "stm32l496g_discovery : This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
 8003716:	4a6f      	ldr	r2, [pc, #444]	; (80038d4 <FS_FileOperations+0x1c4>)
 8003718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800371c:	4611      	mov	r1, r2
 800371e:	224e      	movs	r2, #78	; 0x4e
 8003720:	4618      	mov	r0, r3
 8003722:	f00e f9fd 	bl	8011b20 <memcpy>
  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8003726:	2200      	movs	r2, #0
 8003728:	496b      	ldr	r1, [pc, #428]	; (80038d8 <FS_FileOperations+0x1c8>)
 800372a:	486c      	ldr	r0, [pc, #432]	; (80038dc <FS_FileOperations+0x1cc>)
 800372c:	f00c feba 	bl	80104a4 <f_mount>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80c9 	bne.w	80038ca <FS_FileOperations+0x1ba>
  {
	printf_dbg("f_mount!\r\n");
 8003738:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <FS_FileOperations+0x1d0>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4618      	mov	r0, r3
 800373e:	f00e fdd3 	bl	80122e8 <iprintf>
 8003742:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <FS_FileOperations+0x1d4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f00e fdce 	bl	80122e8 <iprintf>
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <FS_FileOperations+0x1d0>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4618      	mov	r0, r3
 8003752:	f00e fdc9 	bl	80122e8 <iprintf>
 8003756:	4864      	ldr	r0, [pc, #400]	; (80038e8 <FS_FileOperations+0x1d8>)
 8003758:	f00e fe4c 	bl	80123f4 <puts>
#if 1
    if (isCreated == 0)
 800375c:	4b63      	ldr	r3, [pc, #396]	; (80038ec <FS_FileOperations+0x1dc>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d112      	bne.n	800378a <FS_FileOperations+0x7a>
    {
      res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 8003764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <FS_FileOperations+0x1e0>)
 800376c:	2200      	movs	r2, #0
 800376e:	2107      	movs	r1, #7
 8003770:	4859      	ldr	r0, [pc, #356]	; (80038d8 <FS_FileOperations+0x1c8>)
 8003772:	f00d fc07 	bl	8010f84 <f_mkfs>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if (res != FR_OK)
 800377c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <FS_FileOperations+0x7a>
      {
        Error_Handler();
 8003784:	f000 fed8 	bl	8004538 <Error_Handler>
        while(1);
 8003788:	e7fe      	b.n	8003788 <FS_FileOperations+0x78>
      }
    }
    isCreated = 1;
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <FS_FileOperations+0x1dc>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
#endif
    /* Create and Open a new text file object with write access */
    if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8003790:	220a      	movs	r2, #10
 8003792:	4958      	ldr	r1, [pc, #352]	; (80038f4 <FS_FileOperations+0x1e4>)
 8003794:	4858      	ldr	r0, [pc, #352]	; (80038f8 <FS_FileOperations+0x1e8>)
 8003796:	f00c fecb 	bl	8010530 <f_open>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	f040 8094 	bne.w	80038ca <FS_FileOperations+0x1ba>
    {
      printf_dbg("f_open!\r\n");
 80037a2:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <FS_FileOperations+0x1d0>)
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00e fd9e 	bl	80122e8 <iprintf>
 80037ac:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <FS_FileOperations+0x1d4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f00e fd99 	bl	80122e8 <iprintf>
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <FS_FileOperations+0x1d0>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f00e fd94 	bl	80122e8 <iprintf>
 80037c0:	484e      	ldr	r0, [pc, #312]	; (80038fc <FS_FileOperations+0x1ec>)
 80037c2:	f00e fe17 	bl	80123f4 <puts>
      /* Write data to the text file */
      res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 80037c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037ca:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80037ce:	224e      	movs	r2, #78	; 0x4e
 80037d0:	4849      	ldr	r0, [pc, #292]	; (80038f8 <FS_FileOperations+0x1e8>)
 80037d2:	f00d f9ba 	bl	8010b4a <f_write>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if((byteswritten > 0) && (res == FR_OK))
 80037dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d072      	beq.n	80038ca <FS_FileOperations+0x1ba>
 80037e4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d16e      	bne.n	80038ca <FS_FileOperations+0x1ba>
      {
        /* Close the open text file */
        f_close(&MyFile);
 80037ec:	4842      	ldr	r0, [pc, #264]	; (80038f8 <FS_FileOperations+0x1e8>)
 80037ee:	f00d fb9f 	bl	8010f30 <f_close>
        printf_dbg("f_close!\r\n");
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <FS_FileOperations+0x1d0>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f00e fd76 	bl	80122e8 <iprintf>
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <FS_FileOperations+0x1d4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f00e fd71 	bl	80122e8 <iprintf>
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <FS_FileOperations+0x1d0>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4618      	mov	r0, r3
 800380c:	f00e fd6c 	bl	80122e8 <iprintf>
 8003810:	483b      	ldr	r0, [pc, #236]	; (8003900 <FS_FileOperations+0x1f0>)
 8003812:	f00e fdef 	bl	80123f4 <puts>

        /* Open the text file object with read access */
        if(f_open(&MyFile, "STM32.TXT", FA_READ) == FR_OK)
 8003816:	2201      	movs	r2, #1
 8003818:	4936      	ldr	r1, [pc, #216]	; (80038f4 <FS_FileOperations+0x1e4>)
 800381a:	4837      	ldr	r0, [pc, #220]	; (80038f8 <FS_FileOperations+0x1e8>)
 800381c:	f00c fe88 	bl	8010530 <f_open>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d151      	bne.n	80038ca <FS_FileOperations+0x1ba>
        {
          printf_dbg("f_open!\r\n");
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <FS_FileOperations+0x1d0>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4618      	mov	r0, r3
 800382c:	f00e fd5c 	bl	80122e8 <iprintf>
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <FS_FileOperations+0x1d4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f00e fd57 	bl	80122e8 <iprintf>
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <FS_FileOperations+0x1d0>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4618      	mov	r0, r3
 8003840:	f00e fd52 	bl	80122e8 <iprintf>
 8003844:	482d      	ldr	r0, [pc, #180]	; (80038fc <FS_FileOperations+0x1ec>)
 8003846:	f00e fdd5 	bl	80123f4 <puts>
          /* Read data from the text file */
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 800384a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800384e:	4639      	mov	r1, r7
 8003850:	2264      	movs	r2, #100	; 0x64
 8003852:	4829      	ldr	r0, [pc, #164]	; (80038f8 <FS_FileOperations+0x1e8>)
 8003854:	f00d f83a 	bl	80108cc <f_read>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

          if((bytesread > 0) && (res == FR_OK))
 800385e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d031      	beq.n	80038ca <FS_FileOperations+0x1ba>
 8003866:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12d      	bne.n	80038ca <FS_FileOperations+0x1ba>
          {
            /* Close the open text file */
            f_close(&MyFile);
 800386e:	4822      	ldr	r0, [pc, #136]	; (80038f8 <FS_FileOperations+0x1e8>)
 8003870:	f00d fb5e 	bl	8010f30 <f_close>
		    printf_dbg("f_close!\r\n");
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <FS_FileOperations+0x1d0>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4618      	mov	r0, r3
 800387a:	f00e fd35 	bl	80122e8 <iprintf>
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <FS_FileOperations+0x1d4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f00e fd30 	bl	80122e8 <iprintf>
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <FS_FileOperations+0x1d0>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4618      	mov	r0, r3
 800388e:	f00e fd2b 	bl	80122e8 <iprintf>
 8003892:	481b      	ldr	r0, [pc, #108]	; (8003900 <FS_FileOperations+0x1f0>)
 8003894:	f00e fdae 	bl	80123f4 <puts>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 8003898:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800389c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d112      	bne.n	80038ca <FS_FileOperations+0x1ba>
            {
              /* Success of the demo: no error occurrence */
            	printf_dbg("Operation end!\r\n");
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <FS_FileOperations+0x1d0>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f00e fd1d 	bl	80122e8 <iprintf>
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <FS_FileOperations+0x1d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f00e fd18 	bl	80122e8 <iprintf>
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <FS_FileOperations+0x1d0>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4618      	mov	r0, r3
 80038be:	f00e fd13 	bl	80122e8 <iprintf>
 80038c2:	4810      	ldr	r0, [pc, #64]	; (8003904 <FS_FileOperations+0x1f4>)
 80038c4:	f00e fd96 	bl	80123f4 <puts>
 80038c8:	e001      	b.n	80038ce <FS_FileOperations+0x1be>
        }
      }
    }
  }
  /* Error */
  Error_Handler();
 80038ca:	f000 fe35 	bl	8004538 <Error_Handler>
}
 80038ce:	37c0      	adds	r7, #192	; 0xc0
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	08012e1c 	.word	0x08012e1c
 80038d8:	2001ce54 	.word	0x2001ce54
 80038dc:	2001c7d4 	.word	0x2001c7d4
 80038e0:	200000cc 	.word	0x200000cc
 80038e4:	200000ec 	.word	0x200000ec
 80038e8:	08012ddc 	.word	0x08012ddc
 80038ec:	2001cc39 	.word	0x2001cc39
 80038f0:	2001cc3c 	.word	0x2001cc3c
 80038f4:	08012de8 	.word	0x08012de8
 80038f8:	2001ca08 	.word	0x2001ca08
 80038fc:	08012df4 	.word	0x08012df4
 8003900:	08012e00 	.word	0x08012e00
 8003904:	08012e0c 	.word	0x08012e0c

08003908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800390e:	f001 fffc 	bl	800590a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003912:	f000 f963 	bl	8003bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003916:	f000 fb69 	bl	8003fec <MX_GPIO_Init>
  MX_DCMI_Init();
 800391a:	f000 f9dd 	bl	8003cd8 <MX_DCMI_Init>
  MX_DMA_Init();
 800391e:	f000 fa99 	bl	8003e54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003922:	f000 fa67 	bl	8003df4 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 8003926:	f000 fa0b 	bl	8003d40 <MX_DMA2D_Init>
  MX_FMC_Init();
 800392a:	f000 fab1 	bl	8003e90 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800392e:	f000 fa3f 	bl	8003db0 <MX_SDMMC1_SD_Init>
  //MX_FATFS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003932:	f000 f9ac 	bl	8003c8e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8003936:	2114      	movs	r1, #20
 8003938:	4894      	ldr	r0, [pc, #592]	; (8003b8c <main+0x284>)
 800393a:	f7fc feb7 	bl	80006ac <ring_buffer_init>
 800393e:	4603      	mov	r3, r0
 8003940:	4a93      	ldr	r2, [pc, #588]	; (8003b90 <main+0x288>)
 8003942:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 8003944:	f7ff fdca 	bl	80034dc <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 8003948:	f7ff fa70 	bl	8002e2c <BSP_IO_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  if(ret == IO_OK)  printf_dbg("Expander OK\r\n");
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d111      	bne.n	800397a <main+0x72>
 8003956:	4b8f      	ldr	r3, [pc, #572]	; (8003b94 <main+0x28c>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4618      	mov	r0, r3
 800395c:	f00e fcc4 	bl	80122e8 <iprintf>
 8003960:	4b8d      	ldr	r3, [pc, #564]	; (8003b98 <main+0x290>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f00e fcbf 	bl	80122e8 <iprintf>
 800396a:	4b8a      	ldr	r3, [pc, #552]	; (8003b94 <main+0x28c>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4618      	mov	r0, r3
 8003970:	f00e fcba 	bl	80122e8 <iprintf>
 8003974:	4889      	ldr	r0, [pc, #548]	; (8003b9c <main+0x294>)
 8003976:	f00e fd3d 	bl	80123f4 <puts>

  /* LCD initialization */
  ret =BSP_LCD_Init();
 800397a:	f7ff faf3 	bl	8002f64 <BSP_LCD_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  if(ret == LCD_OK) printf_dbg("LCD OK\r\n");
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <main+0xa4>
 8003988:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <main+0x28c>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4618      	mov	r0, r3
 800398e:	f00e fcab 	bl	80122e8 <iprintf>
 8003992:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <main+0x290>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f00e fca6 	bl	80122e8 <iprintf>
 800399c:	4b7d      	ldr	r3, [pc, #500]	; (8003b94 <main+0x28c>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00e fca1 	bl	80122e8 <iprintf>
 80039a6:	487e      	ldr	r0, [pc, #504]	; (8003ba0 <main+0x298>)
 80039a8:	f00e fd24 	bl	80123f4 <puts>

  BSP_CAMERA_Init(RESOLUTION_R320x240);
 80039ac:	2001      	movs	r0, #1
 80039ae:	f7ff f857 	bl	8002a60 <BSP_CAMERA_Init>
  if(ret == CAMERA_OK) printf_dbg("Camera OK\r\n");
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d111      	bne.n	80039dc <main+0xd4>
 80039b8:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <main+0x28c>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4618      	mov	r0, r3
 80039be:	f00e fc93 	bl	80122e8 <iprintf>
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <main+0x290>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00e fc8e 	bl	80122e8 <iprintf>
 80039cc:	4b71      	ldr	r3, [pc, #452]	; (8003b94 <main+0x28c>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00e fc89 	bl	80122e8 <iprintf>
 80039d6:	4873      	ldr	r0, [pc, #460]	; (8003ba4 <main+0x29c>)
 80039d8:	f00e fd0c 	bl	80123f4 <puts>

  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
  HAL_Delay(1000);
 80039dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e0:	f002 f808 	bl	80059f4 <HAL_Delay>

    /*##-4- Camera Continuous capture start in QVGA resolution ############################*/
    /* Disable unwanted HSYNC (IT_LINE)/VSYNC interrupts */
  __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 80039e4:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <main+0x2a0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <main+0x2a0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0218 	bic.w	r2, r2, #24
 80039f2:	60da      	str	r2, [r3, #12]

  hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,  (uint32_t)pBuffer , (ST7789H2_LCD_PIXEL_WIDTH*ST7789H2_LCD_PIXEL_HEIGHT)/2 );
 80039f4:	4a6d      	ldr	r2, [pc, #436]	; (8003bac <main+0x2a4>)
 80039f6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80039fa:	2100      	movs	r1, #0
 80039fc:	486a      	ldr	r0, [pc, #424]	; (8003ba8 <main+0x2a0>)
 80039fe:	f002 f9e7 	bl	8005dd0 <HAL_DCMI_Start_DMA>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <main+0x2a8>)
 8003a08:	701a      	strb	r2, [r3, #0]
  if(hal_status != HAL_OK)Error_Handler();
 8003a0a:	4b69      	ldr	r3, [pc, #420]	; (8003bb0 <main+0x2a8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <main+0x10e>
 8003a12:	f000 fd91 	bl	8004538 <Error_Handler>

    /* 1- Link the micro SD disk I/O driver */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003a16:	4967      	ldr	r1, [pc, #412]	; (8003bb4 <main+0x2ac>)
 8003a18:	4867      	ldr	r0, [pc, #412]	; (8003bb8 <main+0x2b0>)
 8003a1a:	f00d ff2b 	bl	8011874 <FATFS_LinkDriver>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <main+0x14e>
  {
	/*##-2- Init the SD Card #################################################*/

	SD_Initialize();
 8003a24:	f7ff fe00 	bl	8003628 <SD_Initialize>

	if(BSP_SD_IsDetected())
 8003a28:	f7ff fc13 	bl	8003252 <BSP_SD_IsDetected>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <main+0x14e>
	{
		//Appli_state = APPLICATION_RUNNING;
		printf_dbg("SD Card OK\r\n");
 8003a32:	4b58      	ldr	r3, [pc, #352]	; (8003b94 <main+0x28c>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00e fc56 	bl	80122e8 <iprintf>
 8003a3c:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <main+0x290>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00e fc51 	bl	80122e8 <iprintf>
 8003a46:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <main+0x28c>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f00e fc4c 	bl	80122e8 <iprintf>
 8003a50:	485a      	ldr	r0, [pc, #360]	; (8003bbc <main+0x2b4>)
 8003a52:	f00e fccf 	bl	80123f4 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 8003a56:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <main+0x288>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4959      	ldr	r1, [pc, #356]	; (8003bc0 <main+0x2b8>)
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc feb1 	bl	80007c4 <ring_buffer_get>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 808d 	beq.w	8003b84 <main+0x27c>
	  {

		  switch (IRQ_event) {
 8003a6a:	4b55      	ldr	r3, [pc, #340]	; (8003bc0 <main+0x2b8>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	d072      	beq.n	8003b5a <main+0x252>
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	f300 8086 	bgt.w	8003b88 <main+0x280>
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a80:	d056      	beq.n	8003b30 <main+0x228>
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a86:	dc7f      	bgt.n	8003b88 <main+0x280>
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d037      	beq.n	8003afe <main+0x1f6>
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	dc79      	bgt.n	8003b88 <main+0x280>
 8003a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a98:	d003      	beq.n	8003aa2 <main+0x19a>
 8003a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9e:	d019      	beq.n	8003ad4 <main+0x1cc>
			case GPIO_PIN_13:
				printf_dbg("JOY_SEL was pressed!\r\n");
				FS_FileOperations();
				break;
			default:
				break;
 8003aa0:	e072      	b.n	8003b88 <main+0x280>
				printf_dbg("JOY_UP was pressed!\r\n");
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <main+0x28c>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00e fc1e 	bl	80122e8 <iprintf>
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <main+0x290>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00e fc19 	bl	80122e8 <iprintf>
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <main+0x28c>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00e fc14 	bl	80122e8 <iprintf>
 8003ac0:	4840      	ldr	r0, [pc, #256]	; (8003bc4 <main+0x2bc>)
 8003ac2:	f00e fc97 	bl	80123f4 <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003acc:	483e      	ldr	r0, [pc, #248]	; (8003bc8 <main+0x2c0>)
 8003ace:	f003 fd2f 	bl	8007530 <HAL_GPIO_WritePin>
				break;
 8003ad2:	e05a      	b.n	8003b8a <main+0x282>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <main+0x28c>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f00e fc05 	bl	80122e8 <iprintf>
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <main+0x290>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f00e fc00 	bl	80122e8 <iprintf>
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <main+0x28c>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f00e fbfb 	bl	80122e8 <iprintf>
 8003af2:	4836      	ldr	r0, [pc, #216]	; (8003bcc <main+0x2c4>)
 8003af4:	f00e fc7e 	bl	80123f4 <puts>
				BSP_CAMERA_Suspend();
 8003af8:	f7ff f876 	bl	8002be8 <BSP_CAMERA_Suspend>
				break;
 8003afc:	e045      	b.n	8003b8a <main+0x282>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8003afe:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <main+0x28c>)
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00e fbf0 	bl	80122e8 <iprintf>
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <main+0x290>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f00e fbeb 	bl	80122e8 <iprintf>
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <main+0x28c>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00e fbe6 	bl	80122e8 <iprintf>
 8003b1c:	482c      	ldr	r0, [pc, #176]	; (8003bd0 <main+0x2c8>)
 8003b1e:	f00e fc69 	bl	80123f4 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8003b22:	2201      	movs	r2, #1
 8003b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b28:	4827      	ldr	r0, [pc, #156]	; (8003bc8 <main+0x2c0>)
 8003b2a:	f003 fd01 	bl	8007530 <HAL_GPIO_WritePin>
				break;
 8003b2e:	e02c      	b.n	8003b8a <main+0x282>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <main+0x28c>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f00e fbd7 	bl	80122e8 <iprintf>
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <main+0x290>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f00e fbd2 	bl	80122e8 <iprintf>
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <main+0x28c>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00e fbcd 	bl	80122e8 <iprintf>
 8003b4e:	4821      	ldr	r0, [pc, #132]	; (8003bd4 <main+0x2cc>)
 8003b50:	f00e fc50 	bl	80123f4 <puts>
				BSP_CAMERA_Resume();
 8003b54:	f7ff f852 	bl	8002bfc <BSP_CAMERA_Resume>
				break;
 8003b58:	e017      	b.n	8003b8a <main+0x282>
				printf_dbg("JOY_SEL was pressed!\r\n");
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <main+0x28c>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f00e fbc2 	bl	80122e8 <iprintf>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <main+0x290>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00e fbbd 	bl	80122e8 <iprintf>
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <main+0x28c>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f00e fbb8 	bl	80122e8 <iprintf>
 8003b78:	4817      	ldr	r0, [pc, #92]	; (8003bd8 <main+0x2d0>)
 8003b7a:	f00e fc3b 	bl	80123f4 <puts>
				FS_FileOperations();
 8003b7e:	f7ff fdc7 	bl	8003710 <FS_FileOperations>
				break;
 8003b82:	e002      	b.n	8003b8a <main+0x282>
		}

	  }
 8003b84:	bf00      	nop
 8003b86:	e766      	b.n	8003a56 <main+0x14e>
				break;
 8003b88:	bf00      	nop
  {
 8003b8a:	e764      	b.n	8003a56 <main+0x14e>
 8003b8c:	200005ac 	.word	0x200005ac
 8003b90:	200005a8 	.word	0x200005a8
 8003b94:	200000cc 	.word	0x200000cc
 8003b98:	200000ec 	.word	0x200000ec
 8003b9c:	08012e6c 	.word	0x08012e6c
 8003ba0:	08012e7c 	.word	0x08012e7c
 8003ba4:	08012e84 	.word	0x08012e84
 8003ba8:	200002f8 	.word	0x200002f8
 8003bac:	200005d4 	.word	0x200005d4
 8003bb0:	200005a4 	.word	0x200005a4
 8003bb4:	2001ce54 	.word	0x2001ce54
 8003bb8:	08015478 	.word	0x08015478
 8003bbc:	08012e90 	.word	0x08012e90
 8003bc0:	2001ce44 	.word	0x2001ce44
 8003bc4:	08012e9c 	.word	0x08012e9c
 8003bc8:	48000400 	.word	0x48000400
 8003bcc:	08012eb4 	.word	0x08012eb4
 8003bd0:	08012ecc 	.word	0x08012ecc
 8003bd4:	08012ee4 	.word	0x08012ee4
 8003bd8:	08012efc 	.word	0x08012efc

08003bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b096      	sub	sp, #88	; 0x58
 8003be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	2244      	movs	r2, #68	; 0x44
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f00d ffa6 	bl	8011b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
 8003bfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003bfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c02:	f004 fb8f 	bl	8008324 <HAL_PWREx_ControlVoltageScaling>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003c0c:	f000 fc94 	bl	8004538 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8003c10:	2322      	movs	r3, #34	; 0x22
 8003c12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c22:	2302      	movs	r3, #2
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c26:	2302      	movs	r3, #2
 8003c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003c2e:	230a      	movs	r3, #10
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c32:	2302      	movs	r3, #2
 8003c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c36:	2302      	movs	r3, #2
 8003c38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fbd4 	bl	80083f0 <HAL_RCC_OscConfig>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003c4e:	f000 fc73 	bl	8004538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c52:	230f      	movs	r3, #15
 8003c54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c56:	2303      	movs	r3, #3
 8003c58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c66:	463b      	mov	r3, r7
 8003c68:	2104      	movs	r1, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 ffda 	bl	8008c24 <HAL_RCC_ClockConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003c76:	f000 fc5f 	bl	8004538 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003c80:	2000      	movs	r0, #0
 8003c82:	f005 f8cf 	bl	8008e24 <HAL_RCC_MCOConfig>
}
 8003c86:	bf00      	nop
 8003c88:	3758      	adds	r7, #88	; 0x58
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	2055      	movs	r0, #85	; 0x55
 8003c98:	f001 ffcf 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003c9c:	2055      	movs	r0, #85	; 0x55
 8003c9e:	f001 ffe8 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2028      	movs	r0, #40	; 0x28
 8003ca8:	f001 ffc7 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cac:	2028      	movs	r0, #40	; 0x28
 8003cae:	f001 ffe0 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2017      	movs	r0, #23
 8003cb8:	f001 ffbf 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cbc:	2017      	movs	r0, #23
 8003cbe:	f001 ffd8 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2026      	movs	r0, #38	; 0x26
 8003cc8:	f001 ffb7 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ccc:	2026      	movs	r0, #38	; 0x26
 8003cce:	f001 ffd0 	bl	8005c72 <HAL_NVIC_EnableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <MX_DCMI_Init+0x64>)
 8003ce0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003cea:	2220      	movs	r2, #32
 8003cec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d08:	2208      	movs	r2, #8
 8003d0a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003d24:	4804      	ldr	r0, [pc, #16]	; (8003d38 <MX_DCMI_Init+0x60>)
 8003d26:	f001 ffcd 	bl	8005cc4 <HAL_DCMI_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8003d30:	f000 fc02 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200002f8 	.word	0x200002f8
 8003d3c:	50050000 	.word	0x50050000

08003d40 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <MX_DMA2D_Init+0x6c>)
 8003d48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d52:	2202      	movs	r2, #2
 8003d54:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d64:	2202      	movs	r2, #2
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003d80:	4809      	ldr	r0, [pc, #36]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d82:	f002 fe7b 	bl	8006a7c <HAL_DMA2D_Init>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8003d8c:	f000 fbd4 	bl	8004538 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003d90:	2101      	movs	r1, #1
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_DMA2D_Init+0x68>)
 8003d94:	f003 f80e 	bl	8006db4 <HAL_DMA2D_ConfigLayer>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8003d9e:	f000 fbcb 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200003a4 	.word	0x200003a4
 8003dac:	4002b000 	.word	0x4002b000

08003db0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <MX_SDMMC1_SD_Init+0x40>)
 8003db8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003dd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dd8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <MX_SDMMC1_SD_Init+0x3c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	200003fc 	.word	0x200003fc
 8003df0:	40012800 	.word	0x40012800

08003df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <MX_USART2_UART_Init+0x5c>)
 8003dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e36:	4805      	ldr	r0, [pc, #20]	; (8003e4c <MX_USART2_UART_Init+0x58>)
 8003e38:	f008 fa6e 	bl	800c318 <HAL_UART_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e42:	f000 fb79 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000480 	.word	0x20000480
 8003e50:	40004400 	.word	0x40004400

08003e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <MX_DMA_Init+0x38>)
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <MX_DMA_Init+0x38>)
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	6493      	str	r3, [r2, #72]	; 0x48
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <MX_DMA_Init+0x38>)
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	2044      	movs	r0, #68	; 0x44
 8003e78:	f001 fedf 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003e7c:	2044      	movs	r0, #68	; 0x44
 8003e7e:	f001 fef8 	bl	8005c72 <HAL_NVIC_EnableIRQ>

}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000

08003e90 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8003e96:	463b      	mov	r3, r7
 8003e98:	2220      	movs	r2, #32
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f00d fe4d 	bl	8011b3c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8003ea2:	4b4f      	ldr	r3, [pc, #316]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ea4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003ea8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003eaa:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003eac:	4a4d      	ldr	r2, [pc, #308]	; (8003fe4 <MX_FMC_Init+0x154>)
 8003eae:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003ebc:	4b48      	ldr	r3, [pc, #288]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003ec2:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003ece:	4b44      	ldr	r3, [pc, #272]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003eda:	4b41      	ldr	r3, [pc, #260]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003ee0:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003eec:	4b3c      	ldr	r3, [pc, #240]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003ef8:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003f0e:	230f      	movs	r3, #15
 8003f10:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003f12:	23ff      	movs	r3, #255	; 0xff
 8003f14:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003f16:	230f      	movs	r3, #15
 8003f18:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003f1e:	2311      	movs	r3, #17
 8003f20:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003f26:	463b      	mov	r3, r7
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	482c      	ldr	r0, [pc, #176]	; (8003fe0 <MX_FMC_Init+0x150>)
 8003f2e:	f008 f9ab 	bl	800c288 <HAL_SRAM_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8003f38:	f000 fafe 	bl	8004538 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f3e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003f42:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f46:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <MX_FMC_Init+0x154>)
 8003f48:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003f62:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003f68:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003fa8:	230f      	movs	r3, #15
 8003faa:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003fac:	23ff      	movs	r3, #255	; 0xff
 8003fae:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003fb8:	2311      	movs	r3, #17
 8003fba:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <MX_FMC_Init+0x158>)
 8003fc8:	f008 f95e 	bl	800c288 <HAL_SRAM_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 8003fd2:	f000 fab1 	bl	8004538 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003fd6:	bf00      	nop
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000504 	.word	0x20000504
 8003fe4:	a0000104 	.word	0xa0000104
 8003fe8:	20000554 	.word	0x20000554

08003fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004002:	4bb2      	ldr	r3, [pc, #712]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	4ab1      	ldr	r2, [pc, #708]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800400e:	4baf      	ldr	r3, [pc, #700]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800401a:	4bac      	ldr	r3, [pc, #688]	; (80042cc <MX_GPIO_Init+0x2e0>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	4aab      	ldr	r2, [pc, #684]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004026:	4ba9      	ldr	r3, [pc, #676]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004032:	4ba6      	ldr	r3, [pc, #664]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	4aa5      	ldr	r2, [pc, #660]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800403e:	4ba3      	ldr	r3, [pc, #652]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <MX_GPIO_Init+0x2e0>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	4a9f      	ldr	r2, [pc, #636]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004056:	4b9d      	ldr	r3, [pc, #628]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	4b9a      	ldr	r3, [pc, #616]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	4a99      	ldr	r2, [pc, #612]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406e:	4b97      	ldr	r3, [pc, #604]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800407a:	4b94      	ldr	r3, [pc, #592]	; (80042cc <MX_GPIO_Init+0x2e0>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4a93      	ldr	r2, [pc, #588]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004086:	4b91      	ldr	r3, [pc, #580]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8004092:	f004 f99d 	bl	80083d0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <MX_GPIO_Init+0x2e0>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4a8c      	ldr	r2, [pc, #560]	; (80042cc <MX_GPIO_Init+0x2e0>)
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a2:	4b8a      	ldr	r3, [pc, #552]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ae:	4b87      	ldr	r3, [pc, #540]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4a86      	ldr	r2, [pc, #536]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ba:	4b84      	ldr	r3, [pc, #528]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040c6:	4b81      	ldr	r3, [pc, #516]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	4a80      	ldr	r2, [pc, #512]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d2:	4b7e      	ldr	r3, [pc, #504]	; (80042cc <MX_GPIO_Init+0x2e0>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 80040de:	2201      	movs	r2, #1
 80040e0:	2114      	movs	r1, #20
 80040e2:	487b      	ldr	r0, [pc, #492]	; (80042d0 <MX_GPIO_Init+0x2e4>)
 80040e4:	f003 fa24 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2101      	movs	r1, #1
 80040ec:	4879      	ldr	r0, [pc, #484]	; (80042d4 <MX_GPIO_Init+0x2e8>)
 80040ee:	f003 fa1f 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2143      	movs	r1, #67	; 0x43
 80040f6:	4876      	ldr	r0, [pc, #472]	; (80042d0 <MX_GPIO_Init+0x2e4>)
 80040f8:	f003 fa1a 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80040fc:	2200      	movs	r2, #0
 80040fe:	2140      	movs	r1, #64	; 0x40
 8004100:	4875      	ldr	r0, [pc, #468]	; (80042d8 <MX_GPIO_Init+0x2ec>)
 8004102:	f003 fa15 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 8004106:	2201      	movs	r2, #1
 8004108:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800410c:	4873      	ldr	r0, [pc, #460]	; (80042dc <MX_GPIO_Init+0x2f0>)
 800410e:	f003 fa0f 	bl	8007530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8004112:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004118:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800411e:	2302      	movs	r3, #2
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004126:	4619      	mov	r1, r3
 8004128:	486a      	ldr	r0, [pc, #424]	; (80042d4 <MX_GPIO_Init+0x2e8>)
 800412a:	f002 ff7d 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 800412e:	2304      	movs	r3, #4
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004132:	2301      	movs	r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800413a:	2302      	movs	r3, #2
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 800413e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004142:	4619      	mov	r1, r3
 8004144:	4862      	ldr	r0, [pc, #392]	; (80042d0 <MX_GPIO_Init+0x2e4>)
 8004146:	f002 ff6f 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800414a:	2330      	movs	r3, #48	; 0x30
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800415a:	2305      	movs	r3, #5
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004162:	4619      	mov	r1, r3
 8004164:	485d      	ldr	r0, [pc, #372]	; (80042dc <MX_GPIO_Init+0x2f0>)
 8004166:	f002 ff5f 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800416a:	2301      	movs	r3, #1
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800417a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800417e:	4619      	mov	r1, r3
 8004180:	4854      	ldr	r0, [pc, #336]	; (80042d4 <MX_GPIO_Init+0x2e8>)
 8004182:	f002 ff51 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8004186:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800418c:	2312      	movs	r3, #18
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004190:	2301      	movs	r3, #1
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	2303      	movs	r3, #3
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004198:	2304      	movs	r3, #4
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a0:	4619      	mov	r1, r3
 80041a2:	484e      	ldr	r0, [pc, #312]	; (80042dc <MX_GPIO_Init+0x2f0>)
 80041a4:	f002 ff40 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80041a8:	2340      	movs	r3, #64	; 0x40
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ac:	2302      	movs	r3, #2
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041b8:	2307      	movs	r3, #7
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80041bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c0:	4619      	mov	r1, r3
 80041c2:	4846      	ldr	r0, [pc, #280]	; (80042dc <MX_GPIO_Init+0x2f0>)
 80041c4:	f002 ff30 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80041c8:	235c      	movs	r3, #92	; 0x5c
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	2300      	movs	r3, #0
 80041d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80041d8:	230d      	movs	r3, #13
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e0:	4619      	mov	r1, r3
 80041e2:	483f      	ldr	r0, [pc, #252]	; (80042e0 <MX_GPIO_Init+0x2f4>)
 80041e4:	f002 ff20 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80041e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f6:	2300      	movs	r3, #0
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041fa:	2302      	movs	r3, #2
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80041fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004202:	4619      	mov	r1, r3
 8004204:	4835      	ldr	r0, [pc, #212]	; (80042dc <MX_GPIO_Init+0x2f0>)
 8004206:	f002 ff0f 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 800420a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004218:	2303      	movs	r3, #3
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800421c:	2307      	movs	r3, #7
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004224:	4619      	mov	r1, r3
 8004226:	482f      	ldr	r0, [pc, #188]	; (80042e4 <MX_GPIO_Init+0x2f8>)
 8004228:	f002 fefe 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004230:	2300      	movs	r3, #0
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8004238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800423c:	4619      	mov	r1, r3
 800423e:	4824      	ldr	r0, [pc, #144]	; (80042d0 <MX_GPIO_Init+0x2e4>)
 8004240:	f002 fef2 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8004244:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004252:	2303      	movs	r3, #3
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004256:	230a      	movs	r3, #10
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425e:	4619      	mov	r1, r3
 8004260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004264:	f002 fee0 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8004268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800426e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004274:	2302      	movs	r3, #2
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8004278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800427c:	4619      	mov	r1, r3
 800427e:	4816      	ldr	r0, [pc, #88]	; (80042d8 <MX_GPIO_Init+0x2ec>)
 8004280:	f002 fed2 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8004284:	2343      	movs	r3, #67	; 0x43
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004288:	2301      	movs	r3, #1
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004290:	2300      	movs	r3, #0
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004298:	4619      	mov	r1, r3
 800429a:	480d      	ldr	r0, [pc, #52]	; (80042d0 <MX_GPIO_Init+0x2e4>)
 800429c:	f002 fec4 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a4:	2301      	movs	r3, #1
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80042b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b4:	4619      	mov	r1, r3
 80042b6:	4808      	ldr	r0, [pc, #32]	; (80042d8 <MX_GPIO_Init+0x2ec>)
 80042b8:	f002 feb6 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80042bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e00d      	b.n	80042e8 <MX_GPIO_Init+0x2fc>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	48001c00 	.word	0x48001c00
 80042d4:	48002000 	.word	0x48002000
 80042d8:	48000800 	.word	0x48000800
 80042dc:	48000400 	.word	0x48000400
 80042e0:	48001000 	.word	0x48001000
 80042e4:	48001800 	.word	0x48001800
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80042ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ee:	4619      	mov	r1, r3
 80042f0:	488c      	ldr	r0, [pc, #560]	; (8004524 <MX_GPIO_Init+0x538>)
 80042f2:	f002 fe99 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fc:	2302      	movs	r3, #2
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004304:	2300      	movs	r3, #0
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004310:	4619      	mov	r1, r3
 8004312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004316:	f002 fe87 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800431a:	2384      	movs	r3, #132	; 0x84
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800432a:	2306      	movs	r3, #6
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004332:	4619      	mov	r1, r3
 8004334:	487c      	ldr	r0, [pc, #496]	; (8004528 <MX_GPIO_Init+0x53c>)
 8004336:	f002 fe77 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 800433a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004340:	230b      	movs	r3, #11
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8004348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434c:	4619      	mov	r1, r3
 800434e:	4877      	ldr	r0, [pc, #476]	; (800452c <MX_GPIO_Init+0x540>)
 8004350:	f002 fe6a 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8004354:	231b      	movs	r3, #27
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004358:	230b      	movs	r3, #11
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004364:	4619      	mov	r1, r3
 8004366:	4870      	ldr	r0, [pc, #448]	; (8004528 <MX_GPIO_Init+0x53c>)
 8004368:	f002 fe5e 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800436c:	f640 0303 	movw	r3, #2051	; 0x803
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437a:	2303      	movs	r3, #3
 800437c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800437e:	230a      	movs	r3, #10
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004386:	4619      	mov	r1, r3
 8004388:	4869      	ldr	r0, [pc, #420]	; (8004530 <MX_GPIO_Init+0x544>)
 800438a:	f002 fe4d 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800438e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439c:	2303      	movs	r3, #3
 800439e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80043a0:	2308      	movs	r3, #8
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a8:	4619      	mov	r1, r3
 80043aa:	485e      	ldr	r0, [pc, #376]	; (8004524 <MX_GPIO_Init+0x538>)
 80043ac:	f002 fe3c 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80043b0:	2320      	movs	r3, #32
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80043be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c2:	4619      	mov	r1, r3
 80043c4:	4858      	ldr	r0, [pc, #352]	; (8004528 <MX_GPIO_Init+0x53c>)
 80043c6:	f002 fe2f 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 80043ca:	2320      	movs	r3, #32
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d6:	2303      	movs	r3, #3
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043da:	2305      	movs	r3, #5
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80043de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e2:	4619      	mov	r1, r3
 80043e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043e8:	f002 fe1e 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 80043ec:	2310      	movs	r3, #16
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043f0:	2311      	movs	r3, #17
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043f4:	2301      	movs	r3, #1
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f8:	2303      	movs	r3, #3
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 80043fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004400:	4619      	mov	r1, r3
 8004402:	484c      	ldr	r0, [pc, #304]	; (8004534 <MX_GPIO_Init+0x548>)
 8004404:	f002 fe10 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8004408:	2312      	movs	r3, #18
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800440c:	230b      	movs	r3, #11
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800441e:	f002 fe03 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8004422:	23c8      	movs	r3, #200	; 0xc8
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800442e:	2303      	movs	r3, #3
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004432:	230a      	movs	r3, #10
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004440:	f002 fdf2 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8004444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800444a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004450:	2302      	movs	r3, #2
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8004454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004458:	4619      	mov	r1, r3
 800445a:	4834      	ldr	r0, [pc, #208]	; (800452c <MX_GPIO_Init+0x540>)
 800445c:	f002 fde4 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8004460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	2303      	movs	r3, #3
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004472:	2305      	movs	r3, #5
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8004476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447a:	4619      	mov	r1, r3
 800447c:	482c      	ldr	r0, [pc, #176]	; (8004530 <MX_GPIO_Init+0x544>)
 800447e:	f002 fdd3 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8004482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004488:	2311      	movs	r3, #17
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004490:	2303      	movs	r3, #3
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	4619      	mov	r1, r3
 800449a:	4825      	ldr	r0, [pc, #148]	; (8004530 <MX_GPIO_Init+0x544>)
 800449c:	f002 fdc4 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 80044a0:	2304      	movs	r3, #4
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044a4:	2300      	movs	r3, #0
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 80044ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b0:	4619      	mov	r1, r3
 80044b2:	481f      	ldr	r0, [pc, #124]	; (8004530 <MX_GPIO_Init+0x544>)
 80044b4:	f002 fdb8 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c6:	2300      	movs	r3, #0
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80044ca:	230d      	movs	r3, #13
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d2:	4619      	mov	r1, r3
 80044d4:	4816      	ldr	r0, [pc, #88]	; (8004530 <MX_GPIO_Init+0x544>)
 80044d6:	f002 fda7 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80044da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	2302      	movs	r3, #2
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e8:	2300      	movs	r3, #0
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80044ec:	2306      	movs	r3, #6
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80044f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f4:	4619      	mov	r1, r3
 80044f6:	480e      	ldr	r0, [pc, #56]	; (8004530 <MX_GPIO_Init+0x544>)
 80044f8:	f002 fd96 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80044fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004502:	2311      	movs	r3, #17
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	2300      	movs	r3, #0
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800450e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	4806      	ldr	r0, [pc, #24]	; (8004530 <MX_GPIO_Init+0x544>)
 8004516:	f002 fd87 	bl	8007028 <HAL_GPIO_Init>

}
 800451a:	bf00      	nop
 800451c:	3738      	adds	r7, #56	; 0x38
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	48001800 	.word	0x48001800
 8004528:	48000800 	.word	0x48000800
 800452c:	48001400 	.word	0x48001400
 8004530:	48000400 	.word	0x48000400
 8004534:	48001c00 	.word	0x48001c00

08004538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <Error_Handler+0x30>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4618      	mov	r0, r3
 8004542:	f00d fed1 	bl	80122e8 <iprintf>
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <Error_Handler+0x34>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f00d fecc 	bl	80122e8 <iprintf>
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <Error_Handler+0x30>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4618      	mov	r0, r3
 8004556:	f00d fec7 	bl	80122e8 <iprintf>
 800455a:	4805      	ldr	r0, [pc, #20]	; (8004570 <Error_Handler+0x38>)
 800455c:	f00d fec4 	bl	80122e8 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8004560:	b672      	cpsid	i
}
 8004562:	bf00      	nop
  __disable_irq();
  while (1)
 8004564:	e7fe      	b.n	8004564 <Error_Handler+0x2c>
 8004566:	bf00      	nop
 8004568:	200000cc 	.word	0x200000cc
 800456c:	200000ec 	.word	0x200000ec
 8004570:	08012f14 	.word	0x08012f14

08004574 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]

  if (pObj == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <OV5640_RegisterBusIO+0x16>
  {
    return OV5640_ERROR;
 8004584:	f04f 33ff 	mov.w	r3, #4294967295
 8004588:	e016      	b.n	80045b8 <OV5640_RegisterBusIO+0x44>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	891a      	ldrh	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	811a      	strh	r2, [r3, #8]

    if (pObj->IO.Init != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <OV5640_RegisterBusIO+0x40>
    {
      pObj->IO.Init();
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4798      	blx	r3
      return OV5640_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e001      	b.n	80045b8 <OV5640_RegisterBusIO+0x44>
    }

  }

  return OV5640_ERROR;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };


  if (pObj->IsInitialized == 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d15a      	bne.n	8004690 <OV5640_Init+0xd0>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d80e      	bhi.n	80045fe <OV5640_Init+0x3e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00f      	beq.n	8004606 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d00c      	beq.n	8004606 <OV5640_Init+0x46>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d009      	beq.n	8004606 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b07      	cmp	r3, #7
 80045f6:	d006      	beq.n	8004606 <OV5640_Init+0x46>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d003      	beq.n	8004606 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e044      	b.n	8004690 <OV5640_Init+0xd0>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e014      	b.n	8004636 <OV5640_Init+0x76>
      {
        if (ret != OV5640_ERROR)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d00d      	beq.n	8004630 <OV5640_Init+0x70>
        {

          I2C2_WriteData(OV5640_ADDR, OV5640_Common[index][0], 2, (uint8_t)OV5640_Common[index][1]);
 8004614:	4a21      	ldr	r2, [pc, #132]	; (800469c <OV5640_Init+0xdc>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800461c:	4a1f      	ldr	r2, [pc, #124]	; (800469c <OV5640_Init+0xdc>)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	885b      	ldrh	r3, [r3, #2]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2202      	movs	r2, #2
 800462a:	2078      	movs	r0, #120	; 0x78
 800462c:	f7fd ff22 	bl	8002474 <I2C2_WriteData>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2bfd      	cmp	r3, #253	; 0xfd
 800463a:	d9e7      	bls.n	800460c <OV5640_Init+0x4c>

        }
      }

      if (ret == OV5640_OK)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d126      	bne.n	8004690 <OV5640_Init+0xd0>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f92d 	bl	80048a4 <OV5640_SetResolution>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <OV5640_Init+0x98>
        {
          ret = OV5640_ERROR;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e01b      	b.n	8004690 <OV5640_Init+0xd0>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f820 	bl	80046a0 <OV5640_SetPixelFormat>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e010      	b.n	8004690 <OV5640_Init+0xd0>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_LOW, OV5640_POLARITY_HREF_HIGH,
 800466e:	2300      	movs	r3, #0
 8004670:	2201      	movs	r2, #1
 8004672:	2100      	movs	r1, #0
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa01 	bl	8004a7c <OV5640_SetPolarities>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <OV5640_Init+0xc8>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e003      	b.n	8004690 <OV5640_Init+0xd0>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8004690:	693b      	ldr	r3, [r7, #16]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	08014f7c 	.word	0x08014f7c

080046a0 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <OV5640_SetPixelFormat+0x34>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d00c      	beq.n	80046d4 <OV5640_SetPixelFormat+0x34>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d009      	beq.n	80046d4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	d006      	beq.n	80046d4 <OV5640_SetPixelFormat+0x34>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d003      	beq.n	80046d4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e0d7      	b.n	8004884 <OV5640_SetPixelFormat+0x1e4>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d87f      	bhi.n	80047dc <OV5640_SetPixelFormat+0x13c>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <OV5640_SetPixelFormat+0x44>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004737 	.word	0x08004737
 80046e8:	08004705 	.word	0x08004705
 80046ec:	080047dd 	.word	0x080047dd
 80046f0:	080047dd 	.word	0x080047dd
 80046f4:	080047dd 	.word	0x080047dd
 80046f8:	080047dd 	.word	0x080047dd
 80046fc:	08004771 	.word	0x08004771
 8004700:	080047ab 	.word	0x080047ab
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e011      	b.n	800472e <OV5640_SetPixelFormat+0x8e>
        {

            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800470a:	4a61      	ldr	r2, [pc, #388]	; (8004890 <OV5640_SetPixelFormat+0x1f0>)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	885b      	ldrh	r3, [r3, #2]
 8004714:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_YUV422[index][0], 2, tmp);
 8004716:	4a5e      	ldr	r2, [pc, #376]	; (8004890 <OV5640_SetPixelFormat+0x1f0>)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2202      	movs	r2, #2
 8004722:	2078      	movs	r0, #120	; 0x78
 8004724:	f7fd fea6 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d9ea      	bls.n	800470a <OV5640_SetPixelFormat+0x6a>


        }
        break;
 8004734:	e06a      	b.n	800480c <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e015      	b.n	8004768 <OV5640_SetPixelFormat+0xc8>
        {
          if (ret != OV5640_ERROR)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d00e      	beq.n	8004762 <OV5640_SetPixelFormat+0xc2>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8004744:	4a53      	ldr	r2, [pc, #332]	; (8004894 <OV5640_SetPixelFormat+0x1f4>)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	885b      	ldrh	r3, [r3, #2]
 800474e:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB888[index][0], 2, tmp);
 8004750:	4a50      	ldr	r2, [pc, #320]	; (8004894 <OV5640_SetPixelFormat+0x1f4>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2202      	movs	r2, #2
 800475c:	2078      	movs	r0, #120	; 0x78
 800475e:	f7fd fe89 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3301      	adds	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d9e6      	bls.n	800473c <OV5640_SetPixelFormat+0x9c>
          }
        }
        break;
 800476e:	e04d      	b.n	800480c <OV5640_SetPixelFormat+0x16c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e015      	b.n	80047a2 <OV5640_SetPixelFormat+0x102>
        {
          if (ret != OV5640_ERROR)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d00e      	beq.n	800479c <OV5640_SetPixelFormat+0xfc>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800477e:	4a46      	ldr	r2, [pc, #280]	; (8004898 <OV5640_SetPixelFormat+0x1f8>)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	885b      	ldrh	r3, [r3, #2]
 8004788:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_Y8[index][0], 2, tmp);
 800478a:	4a43      	ldr	r2, [pc, #268]	; (8004898 <OV5640_SetPixelFormat+0x1f8>)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2202      	movs	r2, #2
 8004796:	2078      	movs	r0, #120	; 0x78
 8004798:	f7fd fe6c 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3301      	adds	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d9e6      	bls.n	8004776 <OV5640_SetPixelFormat+0xd6>
          }
        }
        break;
 80047a8:	e030      	b.n	800480c <OV5640_SetPixelFormat+0x16c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e011      	b.n	80047d4 <OV5640_SetPixelFormat+0x134>
        {
			tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80047b0:	4a3a      	ldr	r2, [pc, #232]	; (800489c <OV5640_SetPixelFormat+0x1fc>)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	885b      	ldrh	r3, [r3, #2]
 80047ba:	73fb      	strb	r3, [r7, #15]
			I2C2_WriteData(OV5640_ADDR, OV5640_PF_JPEG[index][0], 2, tmp);
 80047bc:	4a37      	ldr	r2, [pc, #220]	; (800489c <OV5640_SetPixelFormat+0x1fc>)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2202      	movs	r2, #2
 80047c8:	2078      	movs	r0, #120	; 0x78
 80047ca:	f7fd fe53 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d9ea      	bls.n	80047b0 <OV5640_SetPixelFormat+0x110>
        }
        break;
 80047da:	e017      	b.n	800480c <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e010      	b.n	8004804 <OV5640_SetPixelFormat+0x164>
        {

            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB565[index][0], 2, (uint8_t)OV5640_PF_RGB565[index][1]);
 80047e2:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <OV5640_SetPixelFormat+0x200>)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80047ea:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <OV5640_SetPixelFormat+0x200>)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	885b      	ldrh	r3, [r3, #2]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2202      	movs	r2, #2
 80047f8:	2078      	movs	r0, #120	; 0x78
 80047fa:	f7fd fe3b 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	3301      	adds	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d9eb      	bls.n	80047e2 <OV5640_SetPixelFormat+0x142>

        }
        break;
 800480a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b08      	cmp	r3, #8
 8004810:	d138      	bne.n	8004884 <OV5640_SetPixelFormat+0x1e4>
    {

    	tmp = I2C2_ReadData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2);
 8004812:	2202      	movs	r2, #2
 8004814:	f643 0121 	movw	r1, #14369	; 0x3821
 8004818:	2078      	movs	r0, #120	; 0x78
 800481a:	f7fd fe5d 	bl	80024d8 <I2C2_ReadData>
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
        tmp |= (1 << 5);
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	f043 0320 	orr.w	r3, r3, #32
 8004828:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2, tmp);
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2202      	movs	r2, #2
 800482e:	f643 0121 	movw	r1, #14369	; 0x3821
 8004832:	2078      	movs	r0, #120	; 0x78
 8004834:	f7fd fe1e 	bl	8002474 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2);
 8004838:	2202      	movs	r2, #2
 800483a:	f243 0102 	movw	r1, #12290	; 0x3002
 800483e:	2078      	movs	r0, #120	; 0x78
 8004840:	f7fd fe4a 	bl	80024d8 <I2C2_ReadData>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]
        tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	f023 031c 	bic.w	r3, r3, #28
 800484e:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2, tmp);
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2202      	movs	r2, #2
 8004854:	f243 0102 	movw	r1, #12290	; 0x3002
 8004858:	2078      	movs	r0, #120	; 0x78
 800485a:	f7fd fe0b 	bl	8002474 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2);
 800485e:	2202      	movs	r2, #2
 8004860:	f243 0106 	movw	r1, #12294	; 0x3006
 8004864:	2078      	movs	r0, #120	; 0x78
 8004866:	f7fd fe37 	bl	80024d8 <I2C2_ReadData>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
        tmp |= ((1 << 5) | (1 << 3));
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004874:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2, tmp);
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2202      	movs	r2, #2
 800487a:	f243 0106 	movw	r1, #12294	; 0x3006
 800487e:	2078      	movs	r0, #120	; 0x78
 8004880:	f7fd fdf8 	bl	8002474 <I2C2_WriteData>


      }

  }
  return 1;
 8004884:	2301      	movs	r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08015374 	.word	0x08015374
 8004894:	0801537c 	.word	0x0801537c
 8004898:	08015384 	.word	0x08015384
 800489c:	0801538c 	.word	0x0801538c
 80048a0:	08015394 	.word	0x08015394

080048a4 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d903      	bls.n	80048c0 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e0cd      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	f200 80c6 	bhi.w	8004a54 <OV5640_SetResolution+0x1b0>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <OV5640_SetResolution+0x2c>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048e5 	.word	0x080048e5
 80048d4:	08004933 	.word	0x08004933
 80048d8:	0800496b 	.word	0x0800496b
 80048dc:	080049b9 	.word	0x080049b9
 80048e0:	08004a07 	.word	0x08004a07
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e01f      	b.n	800492a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d018      	beq.n	8004924 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80048f2:	4a5d      	ldr	r2, [pc, #372]	; (8004a68 <OV5640_SetResolution+0x1c4>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	885b      	ldrh	r3, [r3, #2]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0018 	add.w	r0, r3, #24
 8004906:	4a58      	ldr	r2, [pc, #352]	; (8004a68 <OV5640_SetResolution+0x1c4>)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800490e:	f107 020f 	add.w	r2, r7, #15
 8004912:	2301      	movs	r3, #1
 8004914:	f000 fb1a 	bl	8004f4c <ov5640_write_reg>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	3301      	adds	r3, #1
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d9dc      	bls.n	80048ea <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8004930:	e094      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e014      	b.n	8004962 <OV5640_SetResolution+0xbe>
        {
          if (ret != OV5640_ERROR)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d00d      	beq.n	800495c <OV5640_SetResolution+0xb8>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_QVGA[index][0], 2, (uint8_t)OV5640_QVGA[index][1]);
 8004940:	4a4a      	ldr	r2, [pc, #296]	; (8004a6c <OV5640_SetResolution+0x1c8>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004948:	4a48      	ldr	r2, [pc, #288]	; (8004a6c <OV5640_SetResolution+0x1c8>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	885b      	ldrh	r3, [r3, #2]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2202      	movs	r2, #2
 8004956:	2078      	movs	r0, #120	; 0x78
 8004958:	f7fd fd8c 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3301      	adds	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d9e7      	bls.n	8004938 <OV5640_SetResolution+0x94>

          }
        }
        break;
 8004968:	e078      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e01f      	b.n	80049b0 <OV5640_SetResolution+0x10c>
        {
          if (ret != OV5640_ERROR)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d018      	beq.n	80049aa <OV5640_SetResolution+0x106>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8004978:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <OV5640_SetResolution+0x1cc>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	885b      	ldrh	r3, [r3, #2]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f103 0018 	add.w	r0, r3, #24
 800498c:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <OV5640_SetResolution+0x1cc>)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004994:	f107 020f 	add.w	r2, r7, #15
 8004998:	2301      	movs	r3, #1
 800499a:	f000 fad7 	bl	8004f4c <ov5640_write_reg>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <OV5640_SetResolution+0x106>
            {
              ret = OV5640_ERROR;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3301      	adds	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d9dc      	bls.n	8004970 <OV5640_SetResolution+0xcc>
            }
          }
        }
        break;
 80049b6:	e051      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e01f      	b.n	80049fe <OV5640_SetResolution+0x15a>
        {
          if (ret != OV5640_ERROR)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d018      	beq.n	80049f8 <OV5640_SetResolution+0x154>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <OV5640_SetResolution+0x1d0>)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	885b      	ldrh	r3, [r3, #2]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f103 0018 	add.w	r0, r3, #24
 80049da:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <OV5640_SetResolution+0x1d0>)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80049e2:	f107 020f 	add.w	r2, r7, #15
 80049e6:	2301      	movs	r3, #1
 80049e8:	f000 fab0 	bl	8004f4c <ov5640_write_reg>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <OV5640_SetResolution+0x154>
            {
              ret = OV5640_ERROR;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3301      	adds	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d9dc      	bls.n	80049be <OV5640_SetResolution+0x11a>
            }
          }
        }
        break;
 8004a04:	e02a      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e01f      	b.n	8004a4c <OV5640_SetResolution+0x1a8>
        {
          if (ret != OV5640_ERROR)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d018      	beq.n	8004a46 <OV5640_SetResolution+0x1a2>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <OV5640_SetResolution+0x1d4>)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	885b      	ldrh	r3, [r3, #2]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f103 0018 	add.w	r0, r3, #24
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <OV5640_SetResolution+0x1d4>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004a30:	f107 020f 	add.w	r2, r7, #15
 8004a34:	2301      	movs	r3, #1
 8004a36:	f000 fa89 	bl	8004f4c <ov5640_write_reg>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <OV5640_SetResolution+0x1a2>
            {
              ret = OV5640_ERROR;
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d9dc      	bls.n	8004a0c <OV5640_SetResolution+0x168>
            }
          }
        }
        break;
 8004a52:	e003      	b.n	8004a5c <OV5640_SetResolution+0x1b8>
      default:
        ret = OV5640_ERROR;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	617b      	str	r3, [r7, #20]
        break;
 8004a5a:	bf00      	nop
    }
  }

  return ret;
 8004a5c:	697b      	ldr	r3, [r7, #20]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	0801539c 	.word	0x0801539c
 8004a6c:	080153ac 	.word	0x080153ac
 8004a70:	080153bc 	.word	0x080153bc
 8004a74:	080153cc 	.word	0x080153cc
 8004a78:	080153dc 	.word	0x080153dc

08004a7c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <OV5640_SetPolarities+0x3c>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <OV5640_SetPolarities+0x24>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10b      	bne.n	8004ab8 <OV5640_SetPolarities+0x3c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <OV5640_SetPolarities+0x3c>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d006      	beq.n	8004ac0 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e014      	b.n	8004aea <OV5640_SetPolarities+0x6e>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	74fb      	strb	r3, [r7, #19]
    I2C2_WriteData(OV5640_ADDR, OV5640_POLARITY_CTRL, 2, tmp);
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f244 7140 	movw	r1, #18240	; 0x4740
 8004ae4:	2078      	movs	r0, #120	; 0x78
 8004ae6:	f7fd fcc5 	bl	8002474 <I2C2_WriteData>

  }

  return ret;
 8004aea:	697b      	ldr	r3, [r7, #20]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint16_t reg;

  /* Initialize I2C */
  pObj->IO.Init();
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4798      	blx	r3

  /* Prepare the camera to be configured */
  I2C2_WriteData(OV5640_ADDR, OV5640_SYSTEM_CTROL0, 2,0x80);
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	2202      	movs	r2, #2
 8004b08:	f243 0108 	movw	r1, #12296	; 0x3008
 8004b0c:	2078      	movs	r0, #120	; 0x78
 8004b0e:	f7fd fcb1 	bl	8002474 <I2C2_WriteData>
  HAL_Delay(500);
 8004b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b16:	f000 ff6d 	bl	80059f4 <HAL_Delay>

  reg = I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_HIGH_BYTE, 2);
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f243 010a 	movw	r1, #12298	; 0x300a
 8004b20:	2078      	movs	r0, #120	; 0x78
 8004b22:	f7fd fcd9 	bl	80024d8 <I2C2_ReadData>
 8004b26:	4603      	mov	r3, r0
 8004b28:	81fb      	strh	r3, [r7, #14]
  reg <<= 8;
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	81fb      	strh	r3, [r7, #14]
  reg |= I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_LOW_BYTE, 2);
 8004b30:	2202      	movs	r2, #2
 8004b32:	f243 010b 	movw	r1, #12299	; 0x300b
 8004b36:	2078      	movs	r0, #120	; 0x78
 8004b38:	f7fd fcce 	bl	80024d8 <I2C2_ReadData>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	81fb      	strh	r3, [r7, #14]

 return reg;
 8004b46:	89fb      	ldrh	r3, [r7, #14]

}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_MANUAL_CONTROL, 2, tmp);
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f243 4106 	movw	r1, #13318	; 0x3406
 8004b66:	2078      	movs	r0, #120	; 0x78
 8004b68:	f7fd fc84 	bl	8002474 <I2C2_WriteData>
  tmp = 0x46;
 8004b6c:	2346      	movs	r3, #70	; 0x46
 8004b6e:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL16, 2, tmp);
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f245 1190 	movw	r1, #20880	; 0x5190
 8004b78:	2078      	movs	r0, #120	; 0x78
 8004b7a:	f7fd fc7b 	bl	8002474 <I2C2_WriteData>
  tmp = 0xF8;
 8004b7e:	23f8      	movs	r3, #248	; 0xf8
 8004b80:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL17, 2, tmp);
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f245 1191 	movw	r1, #20881	; 0x5191
 8004b8a:	2078      	movs	r0, #120	; 0x78
 8004b8c:	f7fd fc72 	bl	8002474 <I2C2_WriteData>
  tmp = 0x04;
 8004b90:	2304      	movs	r3, #4
 8004b92:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL18, 2, tmp);
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f245 1192 	movw	r1, #20882	; 0x5192
 8004b9c:	2078      	movs	r0, #120	; 0x78
 8004b9e:	f7fd fc69 	bl	8002474 <I2C2_WriteData>


    switch (LightMode)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	f200 80b0 	bhi.w	8004d0c <OV5640_SetLightMode+0x1bc>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <OV5640_SetLightMode+0x64>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bd5 	.word	0x08004bd5
 8004bb8:	08004c23 	.word	0x08004c23
 8004bbc:	08004d0d 	.word	0x08004d0d
 8004bc0:	08004cbf 	.word	0x08004cbf
 8004bc4:	08004d0d 	.word	0x08004d0d
 8004bc8:	08004d0d 	.word	0x08004d0d
 8004bcc:	08004d0d 	.word	0x08004d0d
 8004bd0:	08004c71 	.word	0x08004c71
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e01f      	b.n	8004c1a <OV5640_SetLightMode+0xca>
        {
          if (ret != OV5640_ERROR)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d018      	beq.n	8004c14 <OV5640_SetLightMode+0xc4>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8004be2:	4a5a      	ldr	r2, [pc, #360]	; (8004d4c <OV5640_SetLightMode+0x1fc>)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	885b      	ldrh	r3, [r3, #2]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f103 0018 	add.w	r0, r3, #24
 8004bf6:	4a55      	ldr	r2, [pc, #340]	; (8004d4c <OV5640_SetLightMode+0x1fc>)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004bfe:	f107 020f 	add.w	r2, r7, #15
 8004c02:	2301      	movs	r3, #1
 8004c04:	f000 f9a2 	bl	8004f4c <ov5640_write_reg>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <OV5640_SetLightMode+0xc4>
            {
              ret = OV5640_ERROR;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c12:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3301      	adds	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d9dc      	bls.n	8004bda <OV5640_SetLightMode+0x8a>
            }
          }
        }
        break;
 8004c20:	e08e      	b.n	8004d40 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e01f      	b.n	8004c68 <OV5640_SetLightMode+0x118>
        {
          if (ret != OV5640_ERROR)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d018      	beq.n	8004c62 <OV5640_SetLightMode+0x112>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8004c30:	4a47      	ldr	r2, [pc, #284]	; (8004d50 <OV5640_SetLightMode+0x200>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	885b      	ldrh	r3, [r3, #2]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f103 0018 	add.w	r0, r3, #24
 8004c44:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <OV5640_SetLightMode+0x200>)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004c4c:	f107 020f 	add.w	r2, r7, #15
 8004c50:	2301      	movs	r3, #1
 8004c52:	f000 f97b 	bl	8004f4c <ov5640_write_reg>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <OV5640_SetLightMode+0x112>
            {
              ret = OV5640_ERROR;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3301      	adds	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d9dc      	bls.n	8004c28 <OV5640_SetLightMode+0xd8>
            }
          }
        }
        break;
 8004c6e:	e067      	b.n	8004d40 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e01f      	b.n	8004cb6 <OV5640_SetLightMode+0x166>
        {
          if (ret != OV5640_ERROR)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d018      	beq.n	8004cb0 <OV5640_SetLightMode+0x160>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8004c7e:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <OV5640_SetLightMode+0x204>)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	885b      	ldrh	r3, [r3, #2]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f103 0018 	add.w	r0, r3, #24
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <OV5640_SetLightMode+0x204>)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004c9a:	f107 020f 	add.w	r2, r7, #15
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f000 f954 	bl	8004f4c <ov5640_write_reg>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <OV5640_SetLightMode+0x160>
            {
              ret = OV5640_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d9dc      	bls.n	8004c76 <OV5640_SetLightMode+0x126>
            }
          }
        }
        break;
 8004cbc:	e040      	b.n	8004d40 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e01f      	b.n	8004d04 <OV5640_SetLightMode+0x1b4>
        {
          if (ret != OV5640_ERROR)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d018      	beq.n	8004cfe <OV5640_SetLightMode+0x1ae>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8004ccc:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <OV5640_SetLightMode+0x208>)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	885b      	ldrh	r3, [r3, #2]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f103 0018 	add.w	r0, r3, #24
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <OV5640_SetLightMode+0x208>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004ce8:	f107 020f 	add.w	r2, r7, #15
 8004cec:	2301      	movs	r3, #1
 8004cee:	f000 f92d 	bl	8004f4c <ov5640_write_reg>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <OV5640_SetLightMode+0x1ae>
            {
              ret = OV5640_ERROR;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d9dc      	bls.n	8004cc4 <OV5640_SetLightMode+0x174>
            }
          }
        }
        break;
 8004d0a:	e019      	b.n	8004d40 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e012      	b.n	8004d38 <OV5640_SetLightMode+0x1e8>
        {

            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <OV5640_SetLightMode+0x20c>)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	885b      	ldrh	r3, [r3, #2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	73fb      	strb	r3, [r7, #15]

            I2C2_WriteData(OV5640_ADDR, OV5640_LightModeAuto[index][0], 2, tmp);
 8004d20:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <OV5640_SetLightMode+0x20c>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	2078      	movs	r0, #120	; 0x78
 8004d2e:	f7fd fba1 	bl	8002474 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3301      	adds	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d9e9      	bls.n	8004d12 <OV5640_SetLightMode+0x1c2>

        }
        break;
 8004d3e:	bf00      	nop
    }

  return ret;
 8004d40:	697b      	ldr	r3, [r7, #20]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	080153ec 	.word	0x080153ec
 8004d50:	08015408 	.word	0x08015408
 8004d54:	08015424 	.word	0x08015424
 8004d58:	08015440 	.word	0x08015440
 8004d5c:	0801545c 	.word	0x0801545c

08004d60 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <OV5640_SetBrightness+0x8c>)
 8004d6c:	f107 030c 	add.w	r3, r7, #12
 8004d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d72:	c303      	stmia	r3!, {r0, r1}
 8004d74:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004d76:	23ff      	movs	r3, #255	; 0xff
 8004d78:	75fb      	strb	r3, [r7, #23]
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f245 0101 	movw	r1, #20481	; 0x5001
 8004d82:	2078      	movs	r0, #120	; 0x78
 8004d84:	f7fd fb76 	bl	8002474 <I2C2_WriteData>


	tmp = brightness_level[Level + 4];
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	3318      	adds	r3, #24
 8004d8e:	443b      	add	r3, r7
 8004d90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004d94:	75fb      	strb	r3, [r7, #23]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL7, 2, tmp);
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f245 5187 	movw	r1, #21895	; 0x5587
 8004d9e:	2078      	movs	r0, #120	; 0x78
 8004da0:	f7fd fb68 	bl	8002474 <I2C2_WriteData>


    tmp = 0x04;
 8004da4:	2304      	movs	r3, #4
 8004da6:	75fb      	strb	r3, [r7, #23]
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004db0:	2078      	movs	r0, #120	; 0x78
 8004db2:	f7fd fb5f 	bl	8002474 <I2C2_WriteData>


    if (Level < 0)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da09      	bge.n	8004dd0 <OV5640_SetBrightness+0x70>
    {
      tmp = 0x01;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f245 5188 	movw	r1, #21896	; 0x5588
 8004dc8:	2078      	movs	r0, #120	; 0x78
 8004dca:	f7fd fb53 	bl	8002474 <I2C2_WriteData>
 8004dce:	e008      	b.n	8004de2 <OV5640_SetBrightness+0x82>

    }
    else
    {
      tmp = 0x09;
 8004dd0:	2309      	movs	r3, #9
 8004dd2:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f245 5188 	movw	r1, #21896	; 0x5588
 8004ddc:	2078      	movs	r0, #120	; 0x78
 8004dde:	f7fd fb49 	bl	8002474 <I2C2_WriteData>
    }


  return 1;
 8004de2:	2301      	movs	r3, #1
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08012f34 	.word	0x08012f34

08004df0 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8004dfa:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <OV5640_SetSaturation+0x88>)
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e02:	c303      	stmia	r3!, {r0, r1}
 8004e04:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004e06:	23ff      	movs	r3, #255	; 0xff
 8004e08:	77fb      	strb	r3, [r7, #31]


	I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8004e0a:	7ffb      	ldrb	r3, [r7, #31]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f245 0101 	movw	r1, #20481	; 0x5001
 8004e12:	2078      	movs	r0, #120	; 0x78
 8004e14:	f7fd fb2e 	bl	8002474 <I2C2_WriteData>


	tmp = saturation_level[Level + 4];
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	3320      	adds	r3, #32
 8004e1e:	443b      	add	r3, r7
 8004e20:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004e24:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL3, 2, tmp);
 8004e26:	7ffb      	ldrb	r3, [r7, #31]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f245 5183 	movw	r1, #21891	; 0x5583
 8004e2e:	2078      	movs	r0, #120	; 0x78
 8004e30:	f7fd fb20 	bl	8002474 <I2C2_WriteData>


	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL4, 2, tmp);
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f245 5184 	movw	r1, #21892	; 0x5584
 8004e3c:	2078      	movs	r0, #120	; 0x78
 8004e3e:	f7fd fb19 	bl	8002474 <I2C2_WriteData>


	tmp = 0x02;
 8004e42:	2302      	movs	r3, #2
 8004e44:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004e4e:	2078      	movs	r0, #120	; 0x78
 8004e50:	f7fd fb10 	bl	8002474 <I2C2_WriteData>



	tmp = 0x41;
 8004e54:	2341      	movs	r3, #65	; 0x41
 8004e56:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f245 5188 	movw	r1, #21896	; 0x5588
 8004e60:	2078      	movs	r0, #120	; 0x78
 8004e62:	f7fd fb07 	bl	8002474 <I2C2_WriteData>




    ret = OV5640_ERROR;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	61bb      	str	r3, [r7, #24]


  return ret;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	08012f40 	.word	0x08012f40

08004e7c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8004e86:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <OV5640_SetHueDegree+0xc4>)
 8004e88:	f107 0320 	add.w	r3, r7, #32
 8004e8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <OV5640_SetHueDegree+0xc8>)
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <OV5640_SetHueDegree+0xcc>)
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8004eaa:	23ff      	movs	r3, #255	; 0xff
 8004eac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8004eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f245 0101 	movw	r1, #20481	; 0x5001
 8004eba:	2078      	movs	r0, #120	; 0x78
 8004ebc:	f7fd fada 	bl	8002474 <I2C2_WriteData>


    tmp = 0x01;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004ed0:	2078      	movs	r0, #120	; 0x78
 8004ed2:	f7fd facf 	bl	8002474 <I2C2_WriteData>


    tmp = hue_degree_ctrl1[Degree + 6];
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	3306      	adds	r3, #6
 8004eda:	3330      	adds	r3, #48	; 0x30
 8004edc:	443b      	add	r3, r7
 8004ede:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL1, 2, tmp);
 8004ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eea:	2202      	movs	r2, #2
 8004eec:	f245 5181 	movw	r1, #21889	; 0x5581
 8004ef0:	2078      	movs	r0, #120	; 0x78
 8004ef2:	f7fd fabf 	bl	8002474 <I2C2_WriteData>


    tmp = hue_degree_ctrl2[Degree + 6];
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3306      	adds	r3, #6
 8004efa:	3330      	adds	r3, #48	; 0x30
 8004efc:	443b      	add	r3, r7
 8004efe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL2, 2, tmp);
 8004f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f245 5182 	movw	r1, #21890	; 0x5582
 8004f10:	2078      	movs	r0, #120	; 0x78
 8004f12:	f7fd faaf 	bl	8002474 <I2C2_WriteData>


    tmp = hue_degree_ctrl8[Degree + 6];
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	3306      	adds	r3, #6
 8004f1a:	3330      	adds	r3, #48	; 0x30
 8004f1c:	443b      	add	r3, r7
 8004f1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f245 5188 	movw	r1, #21896	; 0x5588
 8004f30:	2078      	movs	r0, #120	; 0x78
 8004f32:	f7fd fa9f 	bl	8002474 <I2C2_WriteData>

  return 1;
 8004f36:	2301      	movs	r3, #1
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	08012f58 	.word	0x08012f58
 8004f44:	08012f64 	.word	0x08012f64
 8004f48:	08012f70 	.word	0x08012f70

08004f4c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681c      	ldr	r4, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6898      	ldr	r0, [r3, #8]
 8004f68:	893b      	ldrh	r3, [r7, #8]
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	47a0      	blx	r4
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd90      	pop	{r4, r7, pc}
	...

08004f7c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <SD_CheckStatus+0x38>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004f8c:	f7fe f9b6 	bl	80032fc <BSP_SD_GetCardState>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <SD_CheckStatus+0x38>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <SD_CheckStatus+0x38>)
 8004fa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004fa6:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <SD_CheckStatus+0x38>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	200000f0 	.word	0x200000f0

08004fb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffd9 	bl	8004f7c <SD_CheckStatus>
 8004fca:	4603      	mov	r3, r0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ffcb 	bl	8004f7c <SD_CheckStatus>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	68b8      	ldr	r0, [r7, #8]
 800500e:	f7fe f935 	bl	800327c <BSP_SD_ReadBlocks>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d107      	bne.n	8005028 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005018:	bf00      	nop
 800501a:	f7fe f96f 	bl	80032fc <BSP_SD_GetCardState>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1fa      	bne.n	800501a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7fe f934 	bl	80032bc <BSP_SD_WriteBlocks>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800505a:	bf00      	nop
 800505c:	f7fe f94e 	bl	80032fc <BSP_SD_GetCardState>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1fa      	bne.n	800505c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08c      	sub	sp, #48	; 0x30
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	603a      	str	r2, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	460b      	mov	r3, r1
 8005082:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <SD_ioctl+0xa8>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <SD_ioctl+0x28>
 8005098:	2303      	movs	r3, #3
 800509a:	e03b      	b.n	8005114 <SD_ioctl+0xa0>

  switch (cmd)
 800509c:	79bb      	ldrb	r3, [r7, #6]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d833      	bhi.n	800510a <SD_ioctl+0x96>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <SD_ioctl+0x34>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050c1 	.word	0x080050c1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050f3 	.word	0x080050f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050be:	e027      	b.n	8005110 <SD_ioctl+0x9c>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe f937 	bl	8003338 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050d6:	e01b      	b.n	8005110 <SD_ioctl+0x9c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80050d8:	f107 030c 	add.w	r3, r7, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe f92b 	bl	8003338 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050f0:	e00e      	b.n	8005110 <SD_ioctl+0x9c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80050f2:	f107 030c 	add.w	r3, r7, #12
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe f91e 	bl	8003338 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80050fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005108:	e002      	b.n	8005110 <SD_ioctl+0x9c>

  default:
    res = RES_PARERR;
 800510a:	2304      	movs	r3, #4
 800510c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005114:	4618      	mov	r0, r3
 8005116:	3730      	adds	r7, #48	; 0x30
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	200000f0 	.word	0x200000f0

08005120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_MspInit+0x44>)
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <HAL_MspInit+0x44>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	6613      	str	r3, [r2, #96]	; 0x60
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <HAL_MspInit+0x44>)
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_MspInit+0x44>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <HAL_MspInit+0x44>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	; 0x58
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_MspInit+0x44>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000

08005168 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	f107 031c 	add.w	r3, r7, #28
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <HAL_DCMI_MspInit+0x148>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f040 808d 	bne.w	80052a6 <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800518c:	4b49      	ldr	r3, [pc, #292]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 800518e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005190:	4a48      	ldr	r2, [pc, #288]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 8005192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005198:	4b46      	ldr	r3, [pc, #280]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80051a4:	4b43      	ldr	r3, [pc, #268]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a8:	4a42      	ldr	r2, [pc, #264]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80051bc:	4b3d      	ldr	r3, [pc, #244]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051c8:	4b3a      	ldr	r3, [pc, #232]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051d4:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	4a36      	ldr	r2, [pc, #216]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051da:	f043 0310 	orr.w	r3, r3, #16
 80051de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <HAL_DCMI_MspInit+0x14c>)
 80051e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80051ec:	f645 7320 	movw	r3, #24352	; 0x5f20
 80051f0:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f2:	2302      	movs	r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051fa:	2302      	movs	r3, #2
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80051fe:	230a      	movs	r3, #10
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005202:	f107 031c 	add.w	r3, r7, #28
 8005206:	4619      	mov	r1, r3
 8005208:	482b      	ldr	r0, [pc, #172]	; (80052b8 <HAL_DCMI_MspInit+0x150>)
 800520a:	f001 ff0d 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800520e:	23b0      	movs	r3, #176	; 0xb0
 8005210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	2302      	movs	r3, #2
 8005214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800521a:	2302      	movs	r3, #2
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800521e:	230a      	movs	r3, #10
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005222:	f107 031c 	add.w	r3, r7, #28
 8005226:	4619      	mov	r1, r3
 8005228:	4824      	ldr	r0, [pc, #144]	; (80052bc <HAL_DCMI_MspInit+0x154>)
 800522a:	f001 fefd 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800522e:	2320      	movs	r3, #32
 8005230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005232:	2302      	movs	r3, #2
 8005234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800523a:	2302      	movs	r3, #2
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800523e:	230a      	movs	r3, #10
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8005242:	f107 031c 	add.w	r3, r7, #28
 8005246:	4619      	mov	r1, r3
 8005248:	481d      	ldr	r0, [pc, #116]	; (80052c0 <HAL_DCMI_MspInit+0x158>)
 800524a:	f001 feed 	bl	8007028 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <HAL_DCMI_MspInit+0x160>)
 8005252:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 800525c:	2200      	movs	r2, #0
 800525e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005262:	2200      	movs	r2, #0
 8005264:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800526c:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 800526e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005272:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800527a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 800527e:	2220      	movs	r2, #32
 8005280:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 8005284:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005288:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800528a:	480e      	ldr	r0, [pc, #56]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 800528c:	f001 f980 	bl	8006590 <HAL_DMA_Init>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 8005296:	f7ff f94f 	bl	8004538 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 800529e:	651a      	str	r2, [r3, #80]	; 0x50
 80052a0:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <HAL_DCMI_MspInit+0x15c>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80052a6:	bf00      	nop
 80052a8:	3730      	adds	r7, #48	; 0x30
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	50050000 	.word	0x50050000
 80052b4:	40021000 	.word	0x40021000
 80052b8:	48001c00 	.word	0x48001c00
 80052bc:	48002000 	.word	0x48002000
 80052c0:	48001000 	.word	0x48001000
 80052c4:	2000035c 	.word	0x2000035c
 80052c8:	4002046c 	.word	0x4002046c

080052cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0d      	ldr	r2, [pc, #52]	; (8005310 <HAL_DMA2D_MspInit+0x44>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d113      	bne.n	8005306 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <HAL_DMA2D_MspInit+0x48>)
 80052e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e2:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <HAL_DMA2D_MspInit+0x48>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	6493      	str	r3, [r2, #72]	; 0x48
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_DMA2D_MspInit+0x48>)
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	205a      	movs	r0, #90	; 0x5a
 80052fc:	f000 fc9d 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005300:	205a      	movs	r0, #90	; 0x5a
 8005302:	f000 fcb6 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	4002b000 	.word	0x4002b000
 8005314:	40021000 	.word	0x40021000

08005318 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b0ae      	sub	sp, #184	; 0xb8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005330:	f107 0318 	add.w	r3, r7, #24
 8005334:	228c      	movs	r2, #140	; 0x8c
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f00c fbff 	bl	8011b3c <memset>
  if(hsd->Instance==SDMMC1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3f      	ldr	r2, [pc, #252]	; (8005440 <HAL_SD_MspInit+0x128>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d176      	bne.n	8005436 <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8005348:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800534c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800534e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8005356:	2302      	movs	r3, #2
 8005358:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800535e:	2308      	movs	r3, #8
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8005362:	2302      	movs	r3, #2
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8005366:	2304      	movs	r3, #4
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800536a:	2302      	movs	r3, #2
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800536e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005374:	f107 0318 	add.w	r3, r7, #24
 8005378:	4618      	mov	r0, r3
 800537a:	f003 feab 	bl	80090d4 <HAL_RCCEx_PeriphCLKConfig>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8005384:	f7ff f8d8 	bl	8004538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005388:	4b2e      	ldr	r3, [pc, #184]	; (8005444 <HAL_SD_MspInit+0x12c>)
 800538a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <HAL_SD_MspInit+0x12c>)
 800538e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005392:	6613      	str	r3, [r2, #96]	; 0x60
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_SD_MspInit+0x12c>)
 8005396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053a0:	4b28      	ldr	r3, [pc, #160]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	4a27      	ldr	r2, [pc, #156]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053b8:	4b22      	ldr	r3, [pc, #136]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053bc:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053c4:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <HAL_SD_MspInit+0x12c>)
 80053c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80053d0:	2304      	movs	r3, #4
 80053d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d6:	2302      	movs	r3, #2
 80053d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e2:	2303      	movs	r3, #3
 80053e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80053e8:	230c      	movs	r3, #12
 80053ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80053ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4814      	ldr	r0, [pc, #80]	; (8005448 <HAL_SD_MspInit+0x130>)
 80053f6:	f001 fe17 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80053fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005402:	2302      	movs	r3, #2
 8005404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540e:	2303      	movs	r3, #3
 8005410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005414:	230c      	movs	r3, #12
 8005416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800541a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800541e:	4619      	mov	r1, r3
 8005420:	480a      	ldr	r0, [pc, #40]	; (800544c <HAL_SD_MspInit+0x134>)
 8005422:	f001 fe01 	bl	8007028 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	2031      	movs	r0, #49	; 0x31
 800542c:	f000 fc05 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005430:	2031      	movs	r0, #49	; 0x31
 8005432:	f000 fc1e 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8005436:	bf00      	nop
 8005438:	37b8      	adds	r7, #184	; 0xb8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40012800 	.word	0x40012800
 8005444:	40021000 	.word	0x40021000
 8005448:	48000c00 	.word	0x48000c00
 800544c:	48000800 	.word	0x48000800

08005450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b0ae      	sub	sp, #184	; 0xb8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005458:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	228c      	movs	r2, #140	; 0x8c
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f00c fb63 	bl	8011b3c <memset>
  if(huart->Instance==USART2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a32      	ldr	r2, [pc, #200]	; (8005544 <HAL_UART_MspInit+0xf4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d15c      	bne.n	800553a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005480:	2302      	movs	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005484:	2300      	movs	r3, #0
 8005486:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005488:	f107 0318 	add.w	r3, r7, #24
 800548c:	4618      	mov	r0, r3
 800548e:	f003 fe21 	bl	80090d4 <HAL_RCCEx_PeriphCLKConfig>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005498:	f7ff f84e 	bl	8004538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800549c:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <HAL_UART_MspInit+0xf8>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
 80054a8:	4b27      	ldr	r3, [pc, #156]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054ba:	f043 0308 	orr.w	r3, r3, #8
 80054be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054c0:	4b21      	ldr	r3, [pc, #132]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_UART_MspInit+0xf8>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f6:	2303      	movs	r3, #3
 80054f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054fc:	2307      	movs	r3, #7
 80054fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8005502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005506:	4619      	mov	r1, r3
 8005508:	4810      	ldr	r0, [pc, #64]	; (800554c <HAL_UART_MspInit+0xfc>)
 800550a:	f001 fd8d 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800550e:	2304      	movs	r3, #4
 8005510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	2302      	movs	r3, #2
 8005516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005520:	2303      	movs	r3, #3
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005526:	2307      	movs	r3, #7
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800552c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005530:	4619      	mov	r1, r3
 8005532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005536:	f001 fd77 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800553a:	bf00      	nop
 800553c:	37b8      	adds	r7, #184	; 0xb8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40004400 	.word	0x40004400
 8005548:	40021000 	.word	0x40021000
 800554c:	48000c00 	.word	0x48000c00

08005550 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005564:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_FMC_MspInit+0xc4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d14f      	bne.n	800560c <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 800556c:	4b29      	ldr	r3, [pc, #164]	; (8005614 <HAL_FMC_MspInit+0xc4>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <HAL_FMC_MspInit+0xc8>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_FMC_MspInit+0xc8>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6513      	str	r3, [r2, #80]	; 0x50
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <HAL_FMC_MspInit+0xc8>)
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 800558a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800558e:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005598:	2303      	movs	r3, #3
 800559a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800559c:	230c      	movs	r3, #12
 800559e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	481d      	ldr	r0, [pc, #116]	; (800561c <HAL_FMC_MspInit+0xcc>)
 80055a6:	f001 fd3f 	bl	8007028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80055aa:	f240 233f 	movw	r3, #575	; 0x23f
 80055ae:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b0:	2302      	movs	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b8:	2303      	movs	r3, #3
 80055ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055bc:	230c      	movs	r3, #12
 80055be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4816      	ldr	r0, [pc, #88]	; (8005620 <HAL_FMC_MspInit+0xd0>)
 80055c6:	f001 fd2f 	bl	8007028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 80055ca:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 80055ce:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055dc:	230c      	movs	r3, #12
 80055de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	480f      	ldr	r0, [pc, #60]	; (8005624 <HAL_FMC_MspInit+0xd4>)
 80055e6:	f001 fd1f 	bl	8007028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80055ea:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80055ee:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	2302      	movs	r3, #2
 80055f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f8:	2303      	movs	r3, #3
 80055fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055fc:	230c      	movs	r3, #12
 80055fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4808      	ldr	r0, [pc, #32]	; (8005628 <HAL_FMC_MspInit+0xd8>)
 8005606:	f001 fd0f 	bl	8007028 <HAL_GPIO_Init>
 800560a:	e000      	b.n	800560e <HAL_FMC_MspInit+0xbe>
    return;
 800560c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	2001ce48 	.word	0x2001ce48
 8005618:	40021000 	.word	0x40021000
 800561c:	48001000 	.word	0x48001000
 8005620:	48001800 	.word	0x48001800
 8005624:	48000c00 	.word	0x48000c00
 8005628:	48001400 	.word	0x48001400

0800562c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005634:	f7ff ff8c 	bl	8005550 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <NMI_Handler+0x4>

08005646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <HardFault_Handler+0x4>

0800564c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <MemManage_Handler+0x4>

08005652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005656:	e7fe      	b.n	8005656 <BusFault_Handler+0x4>

08005658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800565c:	e7fe      	b.n	800565c <UsageFault_Handler+0x4>

0800565e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800568c:	f000 f992 	bl	80059b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}

08005694 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8005698:	2020      	movs	r0, #32
 800569a:	f001 ff61 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 800569e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056a2:	f001 ff5d 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 80056a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056aa:	f001 ff59 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80056b8:	4802      	ldr	r0, [pc, #8]	; (80056c4 <USART2_IRQHandler+0x10>)
 80056ba:	f006 ff0f 	bl	800c4dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000480 	.word	0x20000480

080056c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 80056cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056d0:	f001 ff46 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 80056d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056d8:	f001 ff42 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 80056dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056e0:	f001 ff3e 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80056e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056e8:	f001 ff3a 	bl	8007560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <SDMMC1_IRQHandler+0x10>)
 80056f6:	f005 fda3 	bl	800b240 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200003fc 	.word	0x200003fc

08005704 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <DMA2_Channel6_IRQHandler+0x10>)
 800570a:	f001 f8d8 	bl	80068be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	2000035c 	.word	0x2000035c

08005718 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <DCMI_IRQHandler+0x10>)
 800571e:	f000 fca3 	bl	8006068 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200002f8 	.word	0x200002f8

0800572c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005730:	4802      	ldr	r0, [pc, #8]	; (800573c <DMA2D_IRQHandler+0x10>)
 8005732:	f001 fa2f 	bl	8006b94 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200003a4 	.word	0x200003a4

08005740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	return 1;
 8005744:	2301      	movs	r3, #1
}
 8005746:	4618      	mov	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <_kill>:

int _kill(int pid, int sig)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800575a:	f00c f995 	bl	8011a88 <__errno>
 800575e:	4603      	mov	r3, r0
 8005760:	2216      	movs	r2, #22
 8005762:	601a      	str	r2, [r3, #0]
	return -1;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <_exit>:

void _exit (int status)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005778:	f04f 31ff 	mov.w	r1, #4294967295
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffe7 	bl	8005750 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005782:	e7fe      	b.n	8005782 <_exit+0x12>

08005784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e00a      	b.n	80057ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005796:	f3af 8000 	nop.w
 800579a:	4601      	mov	r1, r0
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	60ba      	str	r2, [r7, #8]
 80057a2:	b2ca      	uxtb	r2, r1
 80057a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	3301      	adds	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	dbf0      	blt.n	8005796 <_read+0x12>
	}

return len;
 80057b4:	687b      	ldr	r3, [r7, #4]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <_close>:
	}
	return len;
}

int _close(int file)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
	return -1;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057e6:	605a      	str	r2, [r3, #4]
	return 0;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <_isatty>:

int _isatty(int file)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
	return 1;
 80057fe:	2301      	movs	r3, #1
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
	return 0;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <_sbrk+0x5c>)
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <_sbrk+0x60>)
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800583c:	4b13      	ldr	r3, [pc, #76]	; (800588c <_sbrk+0x64>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005844:	4b11      	ldr	r3, [pc, #68]	; (800588c <_sbrk+0x64>)
 8005846:	4a12      	ldr	r2, [pc, #72]	; (8005890 <_sbrk+0x68>)
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <_sbrk+0x64>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d207      	bcs.n	8005868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005858:	f00c f916 	bl	8011a88 <__errno>
 800585c:	4603      	mov	r3, r0
 800585e:	220c      	movs	r2, #12
 8005860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	e009      	b.n	800587c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005868:	4b08      	ldr	r3, [pc, #32]	; (800588c <_sbrk+0x64>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <_sbrk+0x64>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	4a05      	ldr	r2, [pc, #20]	; (800588c <_sbrk+0x64>)
 8005878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20050000 	.word	0x20050000
 8005888:	00000400 	.word	0x00000400
 800588c:	2001ce4c 	.word	0x2001ce4c
 8005890:	2001cea0 	.word	0x2001cea0

08005894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <SystemInit+0x20>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	4a05      	ldr	r2, [pc, #20]	; (80058b4 <SystemInit+0x20>)
 80058a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000ed00 	.word	0xe000ed00

080058b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80058b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80058bc:	f7ff ffea 	bl	8005894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058c0:	480c      	ldr	r0, [pc, #48]	; (80058f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80058c2:	490d      	ldr	r1, [pc, #52]	; (80058f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058c4:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <LoopForever+0xe>)
  movs r3, #0
 80058c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058c8:	e002      	b.n	80058d0 <LoopCopyDataInit>

080058ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ce:	3304      	adds	r3, #4

080058d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058d4:	d3f9      	bcc.n	80058ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058d6:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058d8:	4c0a      	ldr	r4, [pc, #40]	; (8005904 <LoopForever+0x16>)
  movs r3, #0
 80058da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058dc:	e001      	b.n	80058e2 <LoopFillZerobss>

080058de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058e0:	3204      	adds	r2, #4

080058e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058e4:	d3fb      	bcc.n	80058de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058e6:	f00c f8e7 	bl	8011ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058ea:	f7fe f80d 	bl	8003908 <main>

080058ee <LoopForever>:

LoopForever:
    b LoopForever
 80058ee:	e7fe      	b.n	80058ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80058f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80058f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058f8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80058fc:	08015a58 	.word	0x08015a58
  ldr r2, =_sbss
 8005900:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8005904:	2001ce9c 	.word	0x2001ce9c

08005908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005908:	e7fe      	b.n	8005908 <ADC1_2_IRQHandler>

0800590a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005914:	2003      	movs	r0, #3
 8005916:	f000 f985 	bl	8005c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800591a:	2000      	movs	r0, #0
 800591c:	f000 f80e 	bl	800593c <HAL_InitTick>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	71fb      	strb	r3, [r7, #7]
 800592a:	e001      	b.n	8005930 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800592c:	f7ff fbf8 	bl	8005120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005930:	79fb      	ldrb	r3, [r7, #7]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_InitTick+0x6c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <HAL_InitTick+0x70>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <HAL_InitTick+0x6c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800595e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f99f 	bl	8005caa <HAL_SYSTICK_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d809      	bhi.n	800598c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005978:	2200      	movs	r2, #0
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	f000 f95b 	bl	8005c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005984:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <HAL_InitTick+0x74>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e007      	b.n	800599c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e004      	b.n	800599c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e001      	b.n	800599c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	200000fc 	.word	0x200000fc
 80059ac:	200000f4 	.word	0x200000f4
 80059b0:	200000f8 	.word	0x200000f8

080059b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_IncTick+0x20>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_IncTick+0x24>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <HAL_IncTick+0x24>)
 80059c6:	6013      	str	r3, [r2, #0]
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	200000fc 	.word	0x200000fc
 80059d8:	2001ce50 	.word	0x2001ce50

080059dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return uwTick;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <HAL_GetTick+0x14>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	2001ce50 	.word	0x2001ce50

080059f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059fc:	f7ff ffee 	bl	80059dc <HAL_GetTick>
 8005a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d005      	beq.n	8005a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_Delay+0x44>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a1a:	bf00      	nop
 8005a1c:	f7ff ffde 	bl	80059dc <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d8f7      	bhi.n	8005a1c <HAL_Delay+0x28>
  {
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	200000fc 	.word	0x200000fc

08005a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <__NVIC_SetPriorityGrouping+0x44>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a6e:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <__NVIC_SetPriorityGrouping+0x44>)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	60d3      	str	r3, [r2, #12]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <__NVIC_GetPriorityGrouping+0x18>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	f003 0307 	and.w	r3, r3, #7
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	db0b      	blt.n	8005aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	f003 021f 	and.w	r2, r3, #31
 8005ab8:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <__NVIC_EnableIRQ+0x38>)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	e000e100 	.word	0xe000e100

08005adc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	db12      	blt.n	8005b14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f003 021f 	and.w	r2, r3, #31
 8005af4:	490a      	ldr	r1, [pc, #40]	; (8005b20 <__NVIC_DisableIRQ+0x44>)
 8005af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2001      	movs	r0, #1
 8005afe:	fa00 f202 	lsl.w	r2, r0, r2
 8005b02:	3320      	adds	r3, #32
 8005b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b08:	f3bf 8f4f 	dsb	sy
}
 8005b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b0e:	f3bf 8f6f 	isb	sy
}
 8005b12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000e100 	.word	0xe000e100

08005b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	db0a      	blt.n	8005b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	490c      	ldr	r1, [pc, #48]	; (8005b70 <__NVIC_SetPriority+0x4c>)
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b4c:	e00a      	b.n	8005b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	4908      	ldr	r1, [pc, #32]	; (8005b74 <__NVIC_SetPriority+0x50>)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3b04      	subs	r3, #4
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	440b      	add	r3, r1
 8005b62:	761a      	strb	r2, [r3, #24]
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	e000e100 	.word	0xe000e100
 8005b74:	e000ed00 	.word	0xe000ed00

08005b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f1c3 0307 	rsb	r3, r3, #7
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf28      	it	cs
 8005b96:	2304      	movcs	r3, #4
 8005b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d902      	bls.n	8005ba8 <NVIC_EncodePriority+0x30>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3b03      	subs	r3, #3
 8005ba6:	e000      	b.n	8005baa <NVIC_EncodePriority+0x32>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	401a      	ands	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	43d9      	mvns	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd0:	4313      	orrs	r3, r2
         );
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3724      	adds	r7, #36	; 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf0:	d301      	bcc.n	8005bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e00f      	b.n	8005c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <SysTick_Config+0x40>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bfe:	210f      	movs	r1, #15
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	f7ff ff8e 	bl	8005b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <SysTick_Config+0x40>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <SysTick_Config+0x40>)
 8005c10:	2207      	movs	r2, #7
 8005c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	e000e010 	.word	0xe000e010

08005c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff05 	bl	8005a3c <__NVIC_SetPriorityGrouping>
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c4c:	f7ff ff1a 	bl	8005a84 <__NVIC_GetPriorityGrouping>
 8005c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7ff ff8e 	bl	8005b78 <NVIC_EncodePriority>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff5d 	bl	8005b24 <__NVIC_SetPriority>
}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	4603      	mov	r3, r0
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff0d 	bl	8005aa0 <__NVIC_EnableIRQ>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ff1d 	bl	8005adc <__NVIC_DisableIRQ>
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff94 	bl	8005be0 <SysTick_Config>
 8005cb8:	4603      	mov	r3, r0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e075      	b.n	8005dc2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fa3c 	bl	8005168 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d06:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6819      	ldr	r1, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <HAL_DCMI_Init+0x108>)
 8005d22:	400b      	ands	r3, r1
 8005d24:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d3a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d46:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d52:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d5e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d6a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d112      	bne.n	8005da2 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7f1b      	ldrb	r3, [r3, #28]
 8005d80:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7f5b      	ldrb	r3, [r3, #29]
 8005d86:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d88:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7f9b      	ldrb	r3, [r3, #30]
 8005d8e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7fdb      	ldrb	r3, [r3, #31]
 8005d98:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005d9e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005da0:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 021f 	orr.w	r2, r2, #31
 8005db0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	ffe0f007 	.word	0xffe0f007

08005dd0 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_DCMI_Start_DMA+0x1c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e0b8      	b.n	8005f5e <HAL_DCMI_Start_DMA+0x18e>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e06:	f023 0302 	bic.w	r3, r3, #2
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e16:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	4a52      	ldr	r2, [pc, #328]	; (8005f68 <HAL_DCMI_Start_DMA+0x198>)
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	4a51      	ldr	r2, [pc, #324]	; (8005f6c <HAL_DCMI_Start_DMA+0x19c>)
 8005e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e36:	d21f      	bcs.n	8005e78 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	4619      	mov	r1, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	f000 fc57 	bl	8006700 <HAL_DMA_Start_IT>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d075      	beq.n	8005f44 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e072      	b.n	8005f5e <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e84:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_DCMI_Start_DMA+0x1a0>)
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f000 faf5 	bl	8006484 <DCMI_TransferSize>
 8005e9a:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e053      	b.n	8005f5e <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	005a      	lsls	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	085a      	lsrs	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3328      	adds	r3, #40	; 0x28
 8005f12:	4619      	mov	r1, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f000 fbf1 	bl	8006700 <HAL_DMA_Start_IT>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00f      	beq.n	8005f44 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e00c      	b.n	8005f5e <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	0800628d 	.word	0x0800628d
 8005f6c:	08006455 	.word	0x08006455
 8005f70:	080063bd 	.word	0x080063bd

08005f74 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_DCMI_Suspend+0x16>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e03d      	b.n	8006006 <HAL_DCMI_Suspend+0x92>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d12e      	bne.n	8005ffc <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2205      	movs	r2, #5
 8005fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7ff fd11 	bl	80059dc <HAL_GetTick>
 8005fba:	60f8      	str	r0, [r7, #12]

    /* Check if the DCMI capture is effectively disabled */
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8005fbc:	e017      	b.n	8005fee <HAL_DCMI_Suspend+0x7a>
    {
      if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 8005fbe:	f7ff fd0d 	bl	80059dc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fcc:	d90f      	bls.n	8005fee <HAL_DCMI_Suspend+0x7a>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e00b      	b.n	8006006 <HAL_DCMI_Suspend+0x92>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e0      	bne.n	8005fbe <HAL_DCMI_Suspend+0x4a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_DCMI_Resume+0x16>
 8006020:	2302      	movs	r3, #2
 8006022:	e01a      	b.n	800605a <HAL_DCMI_Resume+0x4c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b05      	cmp	r3, #5
 8006036:	d10b      	bne.n	8006050 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2204      	movs	r2, #4
 8006088:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f043 0202 	orr.w	r2, r3, #2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d009      	beq.n	80060b4 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2202      	movs	r2, #2
 80060a6:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	f043 0201 	orr.w	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d014      	beq.n	80060e6 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	4a24      	ldr	r2, [pc, #144]	; (800615c <HAL_DCMI_IRQHandler+0xf4>)
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fbb3 	bl	800683c <HAL_DMA_Abort_IT>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f9b7 	bl	8006454 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2210      	movs	r2, #16
 80060f6:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fc fe63 	bl	8002dc4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2208      	movs	r2, #8
 800610e:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fc fe68 	bl	8002de6 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d10b      	bne.n	8006146 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 021e 	bic.w	r2, r2, #30
 800613c:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fd fab8 	bl	80036c4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08006455 	.word	0x08006455

08006160 <HAL_DCMI_ConfigCrop>:
  * @note For all the parameters, the actual value is the input data + 1 (e.g. YSize = 0x0 means 1 line,
  *       YSize = 0x1 means 2 lines, ...)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_DCMI_ConfigCrop+0x1c>
 8006178:	2302      	movs	r3, #2
 800617a:	e02a      	b.n	80061d2 <HAL_DCMI_ConfigCrop+0x72>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure CROP */
  MODIFY_REG(hdcmi->Instance->CWSIZER, (DCMI_CWSIZE_VLINE|DCMI_CWSIZE_CAPCNT), (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos)));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 21c0 	and.w	r1, r3, #3221274624	; 0xc000c000
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	041a      	lsls	r2, r3, #16
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(hdcmi->Instance->CWSTRTR, (DCMI_CWSTRT_VST|DCMI_CWSTRT_HOFFCNT), (X0 | (Y0 << DCMI_CWSTRT_VST_Pos)));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <HAL_DCMI_ConfigCrop+0x80>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	0411      	lsls	r1, r2, #16
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	4311      	orrs	r1, r2
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	430b      	orrs	r3, r1
 80061be:	6213      	str	r3, [r2, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000c000 	.word	0xe000c000

080061e4 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_DCMI_DisableCrop+0x16>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e018      	b.n	800622c <HAL_DCMI_DisableCrop+0x48>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0204 	bic.w	r2, r2, #4
 8006218:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_DCMI_EnableCrop+0x16>
 800624a:	2302      	movs	r3, #2
 800624c:	e018      	b.n	8006280 <HAL_DCMI_EnableCrop+0x48>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI Crop feature */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0204 	orr.w	r2, r2, #4
 800626c:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05c      	beq.n	800635c <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d10c      	bne.n	80062c8 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80062c6:	e075      	b.n	80063b4 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f6:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f000 f9e7 	bl	8006700 <HAL_DMA_Start_IT>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d03d      	beq.n	80063b4 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8006354:	69f8      	ldr	r0, [r7, #28]
 8006356:	f7fc fd57 	bl	8002e08 <HAL_DCMI_ErrorCallback>
}
 800635a:	e02b      	b.n	80063b4 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d124      	bne.n	80063b4 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01d      	beq.n	80063b4 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d10f      	bne.n	80063ae <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 021e 	bic.w	r2, r2, #30
 800639c:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 80063ae:	69f8      	ldr	r0, [r7, #28]
 80063b0:	f7fd f988 	bl	80036c4 <HAL_DCMI_FrameEventCallback>
}
 80063b4:	bf00      	nop
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d03c      	beq.n	800644c <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80063da:	4293      	cmp	r3, r2
 80063dc:	d036      	beq.n	800644c <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	1e5a      	subs	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f2:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006410:	1ad2      	subs	r2, r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f000 f96e 	bl	8006700 <HAL_DMA_Start_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d010      	beq.n	800644c <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f7fc fcde 	bl	8002e08 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 800644c:	bf00      	nop
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7fc fcc6 	bl	8002e08 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b096      	sub	sp, #88	; 0x58
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 800648c:	2301      	movs	r3, #1
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f00b fb4d 	bl	8011b3c <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 80064a2:	2302      	movs	r3, #2
 80064a4:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 80064a6:	e02b      	b.n	8006500 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 80064a8:	4a38      	ldr	r2, [pc, #224]	; (800658c <DCMI_TransferSize+0x108>)
 80064aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d328      	bcc.n	8006508 <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 80064b6:	e014      	b.n	80064e2 <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 80064b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	3358      	adds	r3, #88	; 0x58
 80064be:	443b      	add	r3, r7
 80064c0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3358      	adds	r3, #88	; 0x58
 80064cc:	443b      	add	r3, r7
 80064ce:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 80064d2:	4a2e      	ldr	r2, [pc, #184]	; (800658c <DCMI_TransferSize+0x108>)
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <DCMI_TransferSize+0x108>)
 80064e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80064f0:	fb01 f202 	mul.w	r2, r1, r2
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0de      	beq.n	80064b8 <DCMI_TransferSize+0x34>
    }
    j++;
 80064fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fc:	3301      	adds	r3, #1
 80064fe:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8006500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006502:	2b0f      	cmp	r3, #15
 8006504:	d9d0      	bls.n	80064a8 <DCMI_TransferSize+0x24>
 8006506:	e000      	b.n	800650a <DCMI_TransferSize+0x86>
      break;
 8006508:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3b01      	subs	r3, #1
 800650e:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8006510:	230f      	movs	r3, #15
 8006512:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8006514:	e02c      	b.n	8006570 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <DCMI_TransferSize+0x108>)
 8006518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006528:	4293      	cmp	r3, r2
 800652a:	d81d      	bhi.n	8006568 <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <DCMI_TransferSize+0x108>)
 800652e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 800653c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	3358      	adds	r3, #88	; 0x58
 8006542:	443b      	add	r3, r7
 8006544:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	3358      	adds	r3, #88	; 0x58
 8006550:	443b      	add	r3, r7
 8006552:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 8006556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	3358      	adds	r3, #88	; 0x58
 800655c:	443b      	add	r3, r7
 800655e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1d7      	bne.n	8006516 <DCMI_TransferSize+0x92>
 8006566:	e000      	b.n	800656a <DCMI_TransferSize+0xe6>
        break;
 8006568:	bf00      	nop
      }
    }
    j--;
 800656a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656c:	3b01      	subs	r3, #1
 800656e:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8006570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <DCMI_TransferSize+0xfc>
 8006576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006578:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800657c:	4293      	cmp	r3, r2
 800657e:	d9ea      	bls.n	8006556 <DCMI_TransferSize+0xd2>
  }



  return output;
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006582:	4618      	mov	r0, r3
 8006584:	3758      	adds	r7, #88	; 0x58
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	080154d4 	.word	0x080154d4

08006590 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e098      	b.n	80066d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	4b4d      	ldr	r3, [pc, #308]	; (80066e0 <HAL_DMA_Init+0x150>)
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d80f      	bhi.n	80065ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b4b      	ldr	r3, [pc, #300]	; (80066e4 <HAL_DMA_Init+0x154>)
 80065b6:	4413      	add	r3, r2
 80065b8:	4a4b      	ldr	r2, [pc, #300]	; (80066e8 <HAL_DMA_Init+0x158>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	009a      	lsls	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a48      	ldr	r2, [pc, #288]	; (80066ec <HAL_DMA_Init+0x15c>)
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40
 80065cc:	e00e      	b.n	80065ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <HAL_DMA_Init+0x160>)
 80065d6:	4413      	add	r3, r2
 80065d8:	4a43      	ldr	r2, [pc, #268]	; (80066e8 <HAL_DMA_Init+0x158>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	091b      	lsrs	r3, r3, #4
 80065e0:	009a      	lsls	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a42      	ldr	r2, [pc, #264]	; (80066f4 <HAL_DMA_Init+0x164>)
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800661c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006646:	d039      	beq.n	80066bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	4a27      	ldr	r2, [pc, #156]	; (80066ec <HAL_DMA_Init+0x15c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d11a      	bne.n	8006688 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <HAL_DMA_Init+0x168>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	f003 031c 	and.w	r3, r3, #28
 800665e:	210f      	movs	r1, #15
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	4924      	ldr	r1, [pc, #144]	; (80066f8 <HAL_DMA_Init+0x168>)
 8006668:	4013      	ands	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <HAL_DMA_Init+0x168>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	f003 031c 	and.w	r3, r3, #28
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	491d      	ldr	r1, [pc, #116]	; (80066f8 <HAL_DMA_Init+0x168>)
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
 8006686:	e019      	b.n	80066bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_DMA_Init+0x16c>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f003 031c 	and.w	r3, r3, #28
 8006694:	210f      	movs	r1, #15
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	43db      	mvns	r3, r3
 800669c:	4917      	ldr	r1, [pc, #92]	; (80066fc <HAL_DMA_Init+0x16c>)
 800669e:	4013      	ands	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <HAL_DMA_Init+0x16c>)
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6859      	ldr	r1, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	f003 031c 	and.w	r3, r3, #28
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	4911      	ldr	r1, [pc, #68]	; (80066fc <HAL_DMA_Init+0x16c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40020407 	.word	0x40020407
 80066e4:	bffdfff8 	.word	0xbffdfff8
 80066e8:	cccccccd 	.word	0xcccccccd
 80066ec:	40020000 	.word	0x40020000
 80066f0:	bffdfbf8 	.word	0xbffdfbf8
 80066f4:	40020400 	.word	0x40020400
 80066f8:	400200a8 	.word	0x400200a8
 80066fc:	400204a8 	.word	0x400204a8

08006700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_DMA_Start_IT+0x20>
 800671c:	2302      	movs	r3, #2
 800671e:	e04b      	b.n	80067b8 <HAL_DMA_Start_IT+0xb8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	d13a      	bne.n	80067aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0201 	bic.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f95f 	bl	8006a1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 020e 	orr.w	r2, r2, #14
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e00f      	b.n	8006798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 020a 	orr.w	r2, r2, #10
 8006796:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e005      	b.n	80067b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
 80067b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d008      	beq.n	80067ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2204      	movs	r2, #4
 80067dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e022      	b.n	8006830 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 020e 	bic.w	r2, r2, #14
 80067f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f003 021c 	and.w	r2, r3, #28
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2101      	movs	r1, #1
 8006818:	fa01 f202 	lsl.w	r2, r1, r2
 800681c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d005      	beq.n	8006860 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2204      	movs	r2, #4
 8006858:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
 800685e:	e029      	b.n	80068b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 020e 	bic.w	r2, r2, #14
 800686e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f003 021c 	and.w	r2, r3, #28
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f202 	lsl.w	r2, r1, r2
 8006892:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
    }
  }
  return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f003 031c 	and.w	r3, r3, #28
 80068de:	2204      	movs	r2, #4
 80068e0:	409a      	lsls	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d026      	beq.n	8006938 <HAL_DMA_IRQHandler+0x7a>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d021      	beq.n	8006938 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0204 	bic.w	r2, r2, #4
 8006910:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	f003 021c 	and.w	r2, r3, #28
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2104      	movs	r1, #4
 8006920:	fa01 f202 	lsl.w	r2, r1, r2
 8006924:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d071      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006936:	e06c      	b.n	8006a12 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693c:	f003 031c 	and.w	r3, r3, #28
 8006940:	2202      	movs	r2, #2
 8006942:	409a      	lsls	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d02e      	beq.n	80069aa <HAL_DMA_IRQHandler+0xec>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d029      	beq.n	80069aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 020a 	bic.w	r2, r2, #10
 8006972:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	f003 021c 	and.w	r2, r3, #28
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	2102      	movs	r1, #2
 800698a:	fa01 f202 	lsl.w	r2, r1, r2
 800698e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d038      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80069a8:	e033      	b.n	8006a12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	f003 031c 	and.w	r3, r3, #28
 80069b2:	2208      	movs	r2, #8
 80069b4:	409a      	lsls	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d02a      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x156>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d025      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 020e 	bic.w	r2, r2, #14
 80069d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f003 021c 	and.w	r2, r3, #28
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
}
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f003 021c 	and.w	r2, r3, #28
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d108      	bne.n	8006a60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a5e:	e007      	b.n	8006a70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e04b      	b.n	8006b26 <HAL_DMA2D_Init+0xaa>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe fc12 	bl	80052cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
#else
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]
  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	f023 0107 	bic.w	r1, r3, #7
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68d1      	ldr	r1, [r2, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	430b      	orrs	r3, r1
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	051a      	lsls	r2, r3, #20
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	055b      	lsls	r3, r3, #21
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_DMA2D_Start_IT>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                     uint32_t Height)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b086      	sub	sp, #24
 8006b32:	af02      	add	r7, sp, #8
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_DMA2D_Start_IT+0x1c>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e020      	b.n	8006b8c <HAL_DMA2D_Start_IT+0x5e>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f9c3 	bl	8006ef0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8006b78:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d026      	beq.n	8006c04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d021      	beq.n	8006c04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2204      	movs	r2, #4
 8006be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d026      	beq.n	8006c5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d021      	beq.n	8006c5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f043 0202 	orr.w	r2, r3, #2
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d026      	beq.n	8006cb4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d021      	beq.n	8006cb4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2208      	movs	r2, #8
 8006c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2204      	movs	r2, #4
 8006c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d013      	beq.n	8006ce6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2204      	movs	r2, #4
 8006cde:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f853 	bl	8006d8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d024      	beq.n	8006d3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01f      	beq.n	8006d3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01f      	beq.n	8006d84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01a      	beq.n	8006d84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2210      	movs	r2, #16
 8006d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f80e 	bl	8006da0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_DMA2D_ConfigLayer+0x20>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e084      	b.n	8006ede <HAL_DMA2D_ConfigLayer+0x12a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	4613      	mov	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	3320      	adds	r3, #32
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e08:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006e14:	4b35      	ldr	r3, [pc, #212]	; (8006eec <HAL_DMA2D_ConfigLayer+0x138>)
 8006e16:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b0a      	cmp	r3, #10
 8006e1e:	d003      	beq.n	8006e28 <HAL_DMA2D_ConfigLayer+0x74>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d107      	bne.n	8006e38 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e005      	b.n	8006e44 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d120      	bne.n	8006e8c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	ea02 0103 	and.w	r1, r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b0a      	cmp	r3, #10
 8006e72:	d003      	beq.n	8006e7c <HAL_DMA2D_ConfigLayer+0xc8>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d127      	bne.n	8006ecc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28
 8006e8a:	e01f      	b.n	8006ecc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	ea02 0103 	and.w	r1, r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b0a      	cmp	r3, #10
 8006eb4:	d003      	beq.n	8006ebe <HAL_DMA2D_ConfigLayer+0x10a>
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d106      	bne.n	8006ecc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006eca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	ff33000f 	.word	0xff33000f

08006ef0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b08b      	sub	sp, #44	; 0x2c
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	041a      	lsls	r2, r3, #16
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f28:	d174      	bne.n	8007014 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f60:	e053      	b.n	800700a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d106      	bne.n	8006f78 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
 8006f76:	e048      	b.n	800700a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d111      	bne.n	8006fa4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	0cdb      	lsrs	r3, r3, #19
 8006f84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	0a9b      	lsrs	r3, r3, #10
 8006f8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	08db      	lsrs	r3, r3, #3
 8006f90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	02db      	lsls	r3, r3, #11
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	e032      	b.n	800700a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d117      	bne.n	8006fdc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	0fdb      	lsrs	r3, r3, #31
 8006fb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	0cdb      	lsrs	r3, r3, #19
 8006fb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	0adb      	lsrs	r3, r3, #11
 8006fbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	03db      	lsls	r3, r3, #15
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	e016      	b.n	800700a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	0f1b      	lsrs	r3, r3, #28
 8006fe0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	0b1b      	lsrs	r3, r3, #12
 8006fec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	011a      	lsls	r2, r3, #4
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	031b      	lsls	r3, r3, #12
 8007002:	4313      	orrs	r3, r2
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007012:	e003      	b.n	800701c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	60da      	str	r2, [r3, #12]
}
 800701c:	bf00      	nop
 800701e:	372c      	adds	r7, #44	; 0x2c
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007036:	e166      	b.n	8007306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	2101      	movs	r1, #1
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	4013      	ands	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8158 	beq.w	8007300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	2b01      	cmp	r3, #1
 800705a:	d005      	beq.n	8007068 <HAL_GPIO_Init+0x40>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d130      	bne.n	80070ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	2203      	movs	r2, #3
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	43db      	mvns	r3, r3
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4013      	ands	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800709e:	2201      	movs	r2, #1
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 0201 	and.w	r2, r3, #1
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d017      	beq.n	8007106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	2203      	movs	r2, #3
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43db      	mvns	r3, r3
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4013      	ands	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d123      	bne.n	800715a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	08da      	lsrs	r2, r3, #3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3208      	adds	r2, #8
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	220f      	movs	r2, #15
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	43db      	mvns	r3, r3
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4013      	ands	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	08da      	lsrs	r2, r3, #3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3208      	adds	r2, #8
 8007154:	6939      	ldr	r1, [r7, #16]
 8007156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	2203      	movs	r2, #3
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43db      	mvns	r3, r3
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4013      	ands	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 0203 	and.w	r2, r3, #3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80b2 	beq.w	8007300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800719c:	4b61      	ldr	r3, [pc, #388]	; (8007324 <HAL_GPIO_Init+0x2fc>)
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	4a60      	ldr	r2, [pc, #384]	; (8007324 <HAL_GPIO_Init+0x2fc>)
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	6613      	str	r3, [r2, #96]	; 0x60
 80071a8:	4b5e      	ldr	r3, [pc, #376]	; (8007324 <HAL_GPIO_Init+0x2fc>)
 80071aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80071b4:	4a5c      	ldr	r2, [pc, #368]	; (8007328 <HAL_GPIO_Init+0x300>)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	089b      	lsrs	r3, r3, #2
 80071ba:	3302      	adds	r3, #2
 80071bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	220f      	movs	r2, #15
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4013      	ands	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071de:	d02b      	beq.n	8007238 <HAL_GPIO_Init+0x210>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a52      	ldr	r2, [pc, #328]	; (800732c <HAL_GPIO_Init+0x304>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d025      	beq.n	8007234 <HAL_GPIO_Init+0x20c>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a51      	ldr	r2, [pc, #324]	; (8007330 <HAL_GPIO_Init+0x308>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d01f      	beq.n	8007230 <HAL_GPIO_Init+0x208>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a50      	ldr	r2, [pc, #320]	; (8007334 <HAL_GPIO_Init+0x30c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d019      	beq.n	800722c <HAL_GPIO_Init+0x204>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a4f      	ldr	r2, [pc, #316]	; (8007338 <HAL_GPIO_Init+0x310>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <HAL_GPIO_Init+0x200>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a4e      	ldr	r2, [pc, #312]	; (800733c <HAL_GPIO_Init+0x314>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00d      	beq.n	8007224 <HAL_GPIO_Init+0x1fc>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a4d      	ldr	r2, [pc, #308]	; (8007340 <HAL_GPIO_Init+0x318>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <HAL_GPIO_Init+0x1f8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a4c      	ldr	r2, [pc, #304]	; (8007344 <HAL_GPIO_Init+0x31c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <HAL_GPIO_Init+0x1f4>
 8007218:	2307      	movs	r3, #7
 800721a:	e00e      	b.n	800723a <HAL_GPIO_Init+0x212>
 800721c:	2308      	movs	r3, #8
 800721e:	e00c      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007220:	2306      	movs	r3, #6
 8007222:	e00a      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007224:	2305      	movs	r3, #5
 8007226:	e008      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007228:	2304      	movs	r3, #4
 800722a:	e006      	b.n	800723a <HAL_GPIO_Init+0x212>
 800722c:	2303      	movs	r3, #3
 800722e:	e004      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007230:	2302      	movs	r3, #2
 8007232:	e002      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <HAL_GPIO_Init+0x212>
 8007238:	2300      	movs	r3, #0
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	f002 0203 	and.w	r2, r2, #3
 8007240:	0092      	lsls	r2, r2, #2
 8007242:	4093      	lsls	r3, r2
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800724a:	4937      	ldr	r1, [pc, #220]	; (8007328 <HAL_GPIO_Init+0x300>)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	089b      	lsrs	r3, r3, #2
 8007250:	3302      	adds	r3, #2
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007258:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <HAL_GPIO_Init+0x320>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	43db      	mvns	r3, r3
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4013      	ands	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800727c:	4a32      	ldr	r2, [pc, #200]	; (8007348 <HAL_GPIO_Init+0x320>)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <HAL_GPIO_Init+0x320>)
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	43db      	mvns	r3, r3
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4013      	ands	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072a6:	4a28      	ldr	r2, [pc, #160]	; (8007348 <HAL_GPIO_Init+0x320>)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072ac:	4b26      	ldr	r3, [pc, #152]	; (8007348 <HAL_GPIO_Init+0x320>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072d0:	4a1d      	ldr	r2, [pc, #116]	; (8007348 <HAL_GPIO_Init+0x320>)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <HAL_GPIO_Init+0x320>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	43db      	mvns	r3, r3
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4013      	ands	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072fa:	4a13      	ldr	r2, [pc, #76]	; (8007348 <HAL_GPIO_Init+0x320>)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f ae91 	bne.w	8007038 <HAL_GPIO_Init+0x10>
  }
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40021000 	.word	0x40021000
 8007328:	40010000 	.word	0x40010000
 800732c:	48000400 	.word	0x48000400
 8007330:	48000800 	.word	0x48000800
 8007334:	48000c00 	.word	0x48000c00
 8007338:	48001000 	.word	0x48001000
 800733c:	48001400 	.word	0x48001400
 8007340:	48001800 	.word	0x48001800
 8007344:	48001c00 	.word	0x48001c00
 8007348:	40010400 	.word	0x40010400

0800734c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800735a:	e0c9      	b.n	80074f0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800735c:	2201      	movs	r2, #1
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	4013      	ands	r3, r2
 8007368:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80bc 	beq.w	80074ea <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007372:	4a66      	ldr	r2, [pc, #408]	; (800750c <HAL_GPIO_DeInit+0x1c0>)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	089b      	lsrs	r3, r3, #2
 8007378:	3302      	adds	r3, #2
 800737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	220f      	movs	r2, #15
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800739a:	d02b      	beq.n	80073f4 <HAL_GPIO_DeInit+0xa8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a5c      	ldr	r2, [pc, #368]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d025      	beq.n	80073f0 <HAL_GPIO_DeInit+0xa4>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a5b      	ldr	r2, [pc, #364]	; (8007514 <HAL_GPIO_DeInit+0x1c8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d01f      	beq.n	80073ec <HAL_GPIO_DeInit+0xa0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a5a      	ldr	r2, [pc, #360]	; (8007518 <HAL_GPIO_DeInit+0x1cc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d019      	beq.n	80073e8 <HAL_GPIO_DeInit+0x9c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a59      	ldr	r2, [pc, #356]	; (800751c <HAL_GPIO_DeInit+0x1d0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a58      	ldr	r2, [pc, #352]	; (8007520 <HAL_GPIO_DeInit+0x1d4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00d      	beq.n	80073e0 <HAL_GPIO_DeInit+0x94>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a57      	ldr	r2, [pc, #348]	; (8007524 <HAL_GPIO_DeInit+0x1d8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d007      	beq.n	80073dc <HAL_GPIO_DeInit+0x90>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a56      	ldr	r2, [pc, #344]	; (8007528 <HAL_GPIO_DeInit+0x1dc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d101      	bne.n	80073d8 <HAL_GPIO_DeInit+0x8c>
 80073d4:	2307      	movs	r3, #7
 80073d6:	e00e      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073d8:	2308      	movs	r3, #8
 80073da:	e00c      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073dc:	2306      	movs	r3, #6
 80073de:	e00a      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073e0:	2305      	movs	r3, #5
 80073e2:	e008      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073e4:	2304      	movs	r3, #4
 80073e6:	e006      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073e8:	2303      	movs	r3, #3
 80073ea:	e004      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e002      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <HAL_GPIO_DeInit+0xaa>
 80073f4:	2300      	movs	r3, #0
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	f002 0203 	and.w	r2, r2, #3
 80073fc:	0092      	lsls	r2, r2, #2
 80073fe:	4093      	lsls	r3, r2
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	429a      	cmp	r2, r3
 8007404:	d132      	bne.n	800746c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007406:	4b49      	ldr	r3, [pc, #292]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	43db      	mvns	r3, r3
 800740e:	4947      	ldr	r1, [pc, #284]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 8007410:	4013      	ands	r3, r2
 8007412:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007414:	4b45      	ldr	r3, [pc, #276]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	43db      	mvns	r3, r3
 800741c:	4943      	ldr	r1, [pc, #268]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 800741e:	4013      	ands	r3, r2
 8007420:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	43db      	mvns	r3, r3
 800742a:	4940      	ldr	r1, [pc, #256]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 800742c:	4013      	ands	r3, r2
 800742e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007430:	4b3e      	ldr	r3, [pc, #248]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	43db      	mvns	r3, r3
 8007438:	493c      	ldr	r1, [pc, #240]	; (800752c <HAL_GPIO_DeInit+0x1e0>)
 800743a:	4013      	ands	r3, r2
 800743c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	220f      	movs	r2, #15
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800744e:	4a2f      	ldr	r2, [pc, #188]	; (800750c <HAL_GPIO_DeInit+0x1c0>)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	089b      	lsrs	r3, r3, #2
 8007454:	3302      	adds	r3, #2
 8007456:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	43da      	mvns	r2, r3
 800745e:	482b      	ldr	r0, [pc, #172]	; (800750c <HAL_GPIO_DeInit+0x1c0>)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	089b      	lsrs	r3, r3, #2
 8007464:	400a      	ands	r2, r1
 8007466:	3302      	adds	r3, #2
 8007468:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	2103      	movs	r1, #3
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	08da      	lsrs	r2, r3, #3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3208      	adds	r2, #8
 8007488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	220f      	movs	r2, #15
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	08d2      	lsrs	r2, r2, #3
 80074a0:	4019      	ands	r1, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3208      	adds	r2, #8
 80074a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	2103      	movs	r1, #3
 80074b4:	fa01 f303 	lsl.w	r3, r1, r3
 80074b8:	43db      	mvns	r3, r3
 80074ba:	401a      	ands	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	2101      	movs	r1, #1
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	2103      	movs	r1, #3
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	43db      	mvns	r3, r3
 80074e4:	401a      	ands	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	3301      	adds	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f47f af2f 	bne.w	800735c <HAL_GPIO_DeInit+0x10>
  }
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40010000 	.word	0x40010000
 8007510:	48000400 	.word	0x48000400
 8007514:	48000800 	.word	0x48000800
 8007518:	48000c00 	.word	0x48000c00
 800751c:	48001000 	.word	0x48001000
 8007520:	48001400 	.word	0x48001400
 8007524:	48001800 	.word	0x48001800
 8007528:	48001c00 	.word	0x48001c00
 800752c:	40010400 	.word	0x40010400

08007530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	807b      	strh	r3, [r7, #2]
 800753c:	4613      	mov	r3, r2
 800753e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007540:	787b      	ldrb	r3, [r7, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007546:	887a      	ldrh	r2, [r7, #2]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800754c:	e002      	b.n	8007554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800754e:	887a      	ldrh	r2, [r7, #2]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007576:	4a05      	ldr	r2, [pc, #20]	; (800758c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	4618      	mov	r0, r3
 8007580:	f7fb ffd0 	bl	8003524 <HAL_GPIO_EXTI_Callback>
  }
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40010400 	.word	0x40010400

08007590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e081      	b.n	80076a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f8a8 	bl	800770c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	; 0x24
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d107      	bne.n	800760a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	e006      	b.n	8007618 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d104      	bne.n	800762a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800764c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69d9      	ldr	r1, [r3, #28]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e021      	b.n	8007704 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	; 0x24
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f821 	bl	8007720 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	817b      	strh	r3, [r7, #10]
 8007746:	460b      	mov	r3, r1
 8007748:	813b      	strh	r3, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b20      	cmp	r3, #32
 8007758:	f040 80f9 	bne.w	800794e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_I2C_Mem_Write+0x34>
 8007762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800776e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0ed      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_I2C_Mem_Write+0x4e>
 800777e:	2302      	movs	r3, #2
 8007780:	e0e6      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800778a:	f7fe f927 	bl	80059dc <HAL_GetTick>
 800778e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	2319      	movs	r3, #25
 8007796:	2201      	movs	r2, #1
 8007798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fbd9 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0d1      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2221      	movs	r2, #33	; 0x21
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a3a      	ldr	r2, [r7, #32]
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077d4:	88f8      	ldrh	r0, [r7, #6]
 80077d6:	893a      	ldrh	r2, [r7, #8]
 80077d8:	8979      	ldrh	r1, [r7, #10]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4603      	mov	r3, r0
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fae9 	bl	8007dbc <I2C_RequestMemoryWrite>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0a9      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2bff      	cmp	r3, #255	; 0xff
 8007804:	d90e      	bls.n	8007824 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22ff      	movs	r2, #255	; 0xff
 800780a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007810:	b2da      	uxtb	r2, r3
 8007812:	8979      	ldrh	r1, [r7, #10]
 8007814:	2300      	movs	r3, #0
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fd41 	bl	80082a4 <I2C_TransferConfig>
 8007822:	e00f      	b.n	8007844 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007832:	b2da      	uxtb	r2, r3
 8007834:	8979      	ldrh	r1, [r7, #10]
 8007836:	2300      	movs	r3, #0
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fd30 	bl	80082a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 fbc3 	bl	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e07b      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d034      	beq.n	80078fc <HAL_I2C_Mem_Write+0x1c8>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d130      	bne.n	80078fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	2200      	movs	r2, #0
 80078a2:	2180      	movs	r1, #128	; 0x80
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fb55 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e04d      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2bff      	cmp	r3, #255	; 0xff
 80078bc:	d90e      	bls.n	80078dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	8979      	ldrh	r1, [r7, #10]
 80078cc:	2300      	movs	r3, #0
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fce5 	bl	80082a4 <I2C_TransferConfig>
 80078da:	e00f      	b.n	80078fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	8979      	ldrh	r1, [r7, #10]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fcd4 	bl	80082a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d19e      	bne.n	8007844 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fba2 	bl	8008054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e01a      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2220      	movs	r2, #32
 8007920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6859      	ldr	r1, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_I2C_Mem_Write+0x224>)
 800792e:	400b      	ands	r3, r1
 8007930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	fe00e800 	.word	0xfe00e800

0800795c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af02      	add	r7, sp, #8
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	461a      	mov	r2, r3
 800796a:	4603      	mov	r3, r0
 800796c:	817b      	strh	r3, [r7, #10]
 800796e:	460b      	mov	r3, r1
 8007970:	813b      	strh	r3, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b20      	cmp	r3, #32
 8007980:	f040 80fd 	bne.w	8007b7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_I2C_Mem_Read+0x34>
 800798a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007996:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0f1      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_I2C_Mem_Read+0x4e>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e0ea      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079b2:	f7fe f813 	bl	80059dc <HAL_GetTick>
 80079b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2319      	movs	r3, #25
 80079be:	2201      	movs	r2, #1
 80079c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fac5 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e0d5      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2222      	movs	r2, #34	; 0x22
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2240      	movs	r2, #64	; 0x40
 80079e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079fc:	88f8      	ldrh	r0, [r7, #6]
 80079fe:	893a      	ldrh	r2, [r7, #8]
 8007a00:	8979      	ldrh	r1, [r7, #10]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fa29 	bl	8007e64 <I2C_RequestMemoryRead>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0ad      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2bff      	cmp	r3, #255	; 0xff
 8007a2c:	d90e      	bls.n	8007a4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	8979      	ldrh	r1, [r7, #10]
 8007a3c:	4b52      	ldr	r3, [pc, #328]	; (8007b88 <HAL_I2C_Mem_Read+0x22c>)
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fc2d 	bl	80082a4 <I2C_TransferConfig>
 8007a4a:	e00f      	b.n	8007a6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	8979      	ldrh	r1, [r7, #10]
 8007a5e:	4b4a      	ldr	r3, [pc, #296]	; (8007b88 <HAL_I2C_Mem_Read+0x22c>)
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fc1c 	bl	80082a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2200      	movs	r2, #0
 8007a74:	2104      	movs	r1, #4
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fa6c 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e07c      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d034      	beq.n	8007b2c <HAL_I2C_Mem_Read+0x1d0>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d130      	bne.n	8007b2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2180      	movs	r1, #128	; 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fa3d 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e04d      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2bff      	cmp	r3, #255	; 0xff
 8007aec:	d90e      	bls.n	8007b0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	22ff      	movs	r2, #255	; 0xff
 8007af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	8979      	ldrh	r1, [r7, #10]
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fbcd 	bl	80082a4 <I2C_TransferConfig>
 8007b0a:	e00f      	b.n	8007b2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	8979      	ldrh	r1, [r7, #10]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fbbc 	bl	80082a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d19a      	bne.n	8007a6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fa8a 	bl	8008054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e01a      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6859      	ldr	r1, [r3, #4]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <HAL_I2C_Mem_Read+0x230>)
 8007b5e:	400b      	ands	r3, r1
 8007b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b7e:	2302      	movs	r3, #2
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	80002400 	.word	0x80002400
 8007b8c:	fe00e800 	.word	0xfe00e800

08007b90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	f040 80f1 	bne.w	8007d94 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc0:	d101      	bne.n	8007bc6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e0e7      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_I2C_IsDeviceReady+0x44>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e0e0      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2224      	movs	r2, #36	; 0x24
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d107      	bne.n	8007c02 <HAL_I2C_IsDeviceReady+0x72>
 8007bf2:	897b      	ldrh	r3, [r7, #10]
 8007bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c00:	e004      	b.n	8007c0c <HAL_I2C_IsDeviceReady+0x7c>
 8007c02:	897b      	ldrh	r3, [r7, #10]
 8007c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c08:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007c12:	f7fd fee3 	bl	80059dc <HAL_GetTick>
 8007c16:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b10      	cmp	r3, #16
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007c44:	e034      	b.n	8007cb0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d01a      	beq.n	8007c84 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fd fec5 	bl	80059dc <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <HAL_I2C_IsDeviceReady+0xd4>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10f      	bne.n	8007c84 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c70:	f043 0220 	orr.w	r2, r3, #32
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e088      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2301      	moveq	r3, #1
 8007caa:	2300      	movne	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007cb0:	7ffb      	ldrb	r3, [r7, #31]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <HAL_I2C_IsDeviceReady+0x12c>
 8007cb6:	7fbb      	ldrb	r3, [r7, #30]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0c4      	beq.n	8007c46 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d01a      	beq.n	8007d00 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f93d 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e058      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e04a      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	2120      	movs	r1, #32
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f922 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e03d      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2220      	movs	r2, #32
 8007d28:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d118      	bne.n	8007d64 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d40:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2120      	movs	r1, #32
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f901 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e01c      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2220      	movs	r2, #32
 8007d62:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3301      	adds	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	f63f af3b 	bhi.w	8007bea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dac:	b2db      	uxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	817b      	strh	r3, [r7, #10]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	813b      	strh	r3, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	8979      	ldrh	r1, [r7, #10]
 8007ddc:	4b20      	ldr	r3, [pc, #128]	; (8007e60 <I2C_RequestMemoryWrite+0xa4>)
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fa5d 	bl	80082a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	69b9      	ldr	r1, [r7, #24]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f8f0 	bl	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e02c      	b.n	8007e58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d105      	bne.n	8007e10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e04:	893b      	ldrh	r3, [r7, #8]
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8007e0e:	e015      	b.n	8007e3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e10:	893b      	ldrh	r3, [r7, #8]
 8007e12:	0a1b      	lsrs	r3, r3, #8
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	69b9      	ldr	r1, [r7, #24]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f8d6 	bl	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e012      	b.n	8007e58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f884 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	80002000 	.word	0x80002000

08007e64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4603      	mov	r3, r0
 8007e74:	817b      	strh	r3, [r7, #10]
 8007e76:	460b      	mov	r3, r1
 8007e78:	813b      	strh	r3, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	8979      	ldrh	r1, [r7, #10]
 8007e84:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <I2C_RequestMemoryRead+0xa4>)
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fa0a 	bl	80082a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	69b9      	ldr	r1, [r7, #24]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f89d 	bl	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e02c      	b.n	8007efe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d105      	bne.n	8007eb6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8007eb4:	e015      	b.n	8007ee2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	69b9      	ldr	r1, [r7, #24]
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f883 	bl	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e012      	b.n	8007efe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed8:	893b      	ldrh	r3, [r7, #8]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2140      	movs	r1, #64	; 0x40
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f831 	bl	8007f54 <I2C_WaitOnFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	80002000 	.word	0x80002000

08007f0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d103      	bne.n	8007f2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d007      	beq.n	8007f48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	619a      	str	r2, [r3, #24]
  }
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f64:	e022      	b.n	8007fac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d01e      	beq.n	8007fac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6e:	f7fd fd35 	bl	80059dc <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d113      	bne.n	8007fac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f88:	f043 0220 	orr.w	r2, r3, #32
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e00f      	b.n	8007fcc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	bf0c      	ite	eq
 8007fbc:	2301      	moveq	r3, #1
 8007fbe:	2300      	movne	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d0cd      	beq.n	8007f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fe0:	e02c      	b.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f870 	bl	80080cc <I2C_IsErrorOccurred>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e02a      	b.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d01e      	beq.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffe:	f7fd fced 	bl	80059dc <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d302      	bcc.n	8008014 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d113      	bne.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	f043 0220 	orr.w	r2, r3, #32
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e007      	b.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b02      	cmp	r3, #2
 8008048:	d1cb      	bne.n	8007fe2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008060:	e028      	b.n	80080b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f830 	bl	80080cc <I2C_IsErrorOccurred>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e026      	b.n	80080c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008076:	f7fd fcb1 	bl	80059dc <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d302      	bcc.n	800808c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d113      	bne.n	80080b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008090:	f043 0220 	orr.w	r2, r3, #32
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e007      	b.n	80080c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d1cf      	bne.n	8008062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	; 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d075      	beq.n	80081e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2210      	movs	r2, #16
 80080fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008100:	e056      	b.n	80081b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008108:	d052      	beq.n	80081b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800810a:	f7fd fc67 	bl	80059dc <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <I2C_IsErrorOccurred+0x54>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d147      	bne.n	80081b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008142:	d12e      	bne.n	80081a2 <I2C_IsErrorOccurred+0xd6>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800814a:	d02a      	beq.n	80081a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800814c:	7cfb      	ldrb	r3, [r7, #19]
 800814e:	2b20      	cmp	r3, #32
 8008150:	d027      	beq.n	80081a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008160:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008162:	f7fd fc3b 	bl	80059dc <HAL_GetTick>
 8008166:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008168:	e01b      	b.n	80081a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800816a:	f7fd fc37 	bl	80059dc <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b19      	cmp	r3, #25
 8008176:	d914      	bls.n	80081a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d1dc      	bne.n	800816a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d003      	beq.n	80081c6 <I2C_IsErrorOccurred+0xfa>
 80081be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d09d      	beq.n	8008102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80081c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2220      	movs	r2, #32
 80081d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	f043 0304 	orr.w	r3, r3, #4
 80081dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	f043 0308 	orr.w	r3, r3, #8
 800821e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800824a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01c      	beq.n	8008294 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fe56 	bl	8007f0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <I2C_IsErrorOccurred+0x1d4>)
 800826c:	400b      	ands	r3, r1
 800826e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	431a      	orrs	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008298:	4618      	mov	r0, r3
 800829a:	3728      	adds	r7, #40	; 0x28
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	fe00e800 	.word	0xfe00e800

080082a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	607b      	str	r3, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	817b      	strh	r3, [r7, #10]
 80082b2:	4613      	mov	r3, r2
 80082b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082b6:	897b      	ldrh	r3, [r7, #10]
 80082b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082bc:	7a7b      	ldrb	r3, [r7, #9]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	0d5b      	lsrs	r3, r3, #21
 80082de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <I2C_TransferConfig+0x60>)
 80082e4:	430b      	orrs	r3, r1
 80082e6:	43db      	mvns	r3, r3
 80082e8:	ea02 0103 	and.w	r1, r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	03ff63ff 	.word	0x03ff63ff

08008308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <HAL_PWREx_GetVoltageRange+0x18>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008314:	4618      	mov	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40007000 	.word	0x40007000

08008324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008332:	d130      	bne.n	8008396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008334:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800833c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008340:	d038      	beq.n	80083b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008342:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800834a:	4a1e      	ldr	r2, [pc, #120]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800834c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008352:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2232      	movs	r2, #50	; 0x32
 8008358:	fb02 f303 	mul.w	r3, r2, r3
 800835c:	4a1b      	ldr	r2, [pc, #108]	; (80083cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800835e:	fba2 2303 	umull	r2, r3, r2, r3
 8008362:	0c9b      	lsrs	r3, r3, #18
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008368:	e002      	b.n	8008370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b01      	subs	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008370:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d102      	bne.n	8008384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f2      	bne.n	800836a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008384:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008390:	d110      	bne.n	80083b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e00f      	b.n	80083b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a2:	d007      	beq.n	80083b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083ac:	4a05      	ldr	r2, [pc, #20]	; (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40007000 	.word	0x40007000
 80083c8:	200000f4 	.word	0x200000f4
 80083cc:	431bde83 	.word	0x431bde83

080083d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4a04      	ldr	r2, [pc, #16]	; (80083ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80083da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083de:	6053      	str	r3, [r2, #4]
}
 80083e0:	bf00      	nop
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40007000 	.word	0x40007000

080083f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	f000 bc08 	b.w	8008c14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008404:	4b96      	ldr	r3, [pc, #600]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 030c 	and.w	r3, r3, #12
 800840c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800840e:	4b94      	ldr	r3, [pc, #592]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80e4 	beq.w	80085ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <HAL_RCC_OscConfig+0x4c>
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b0c      	cmp	r3, #12
 8008430:	f040 808b 	bne.w	800854a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b01      	cmp	r3, #1
 8008438:	f040 8087 	bne.w	800854a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800843c:	4b88      	ldr	r3, [pc, #544]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_OscConfig+0x64>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e3df      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	4b81      	ldr	r3, [pc, #516]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <HAL_RCC_OscConfig+0x7e>
 8008464:	4b7e      	ldr	r3, [pc, #504]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800846c:	e005      	b.n	800847a <HAL_RCC_OscConfig+0x8a>
 800846e:	4b7c      	ldr	r3, [pc, #496]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800847a:	4293      	cmp	r3, r2
 800847c:	d223      	bcs.n	80084c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fdc6 	bl	8009014 <RCC_SetFlashLatencyFromMSIRange>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e3c0      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008492:	4b73      	ldr	r3, [pc, #460]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a72      	ldr	r2, [pc, #456]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008498:	f043 0308 	orr.w	r3, r3, #8
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b70      	ldr	r3, [pc, #448]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	496d      	ldr	r1, [pc, #436]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084b0:	4b6b      	ldr	r3, [pc, #428]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	4968      	ldr	r1, [pc, #416]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	604b      	str	r3, [r1, #4]
 80084c4:	e025      	b.n	8008512 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084c6:	4b66      	ldr	r3, [pc, #408]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a65      	ldr	r2, [pc, #404]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084cc:	f043 0308 	orr.w	r3, r3, #8
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	4b63      	ldr	r3, [pc, #396]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	4960      	ldr	r1, [pc, #384]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084e4:	4b5e      	ldr	r3, [pc, #376]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	495b      	ldr	r1, [pc, #364]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fd86 	bl	8009014 <RCC_SetFlashLatencyFromMSIRange>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e380      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008512:	f000 fcbb 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8008516:	4602      	mov	r2, r0
 8008518:	4b51      	ldr	r3, [pc, #324]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	091b      	lsrs	r3, r3, #4
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	4950      	ldr	r1, [pc, #320]	; (8008664 <HAL_RCC_OscConfig+0x274>)
 8008524:	5ccb      	ldrb	r3, [r1, r3]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	4a4e      	ldr	r2, [pc, #312]	; (8008668 <HAL_RCC_OscConfig+0x278>)
 8008530:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008532:	4b4e      	ldr	r3, [pc, #312]	; (800866c <HAL_RCC_OscConfig+0x27c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f7fd fa00 	bl	800593c <HAL_InitTick>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d052      	beq.n	80085ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	e364      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d032      	beq.n	80085b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008552:	4b43      	ldr	r3, [pc, #268]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a42      	ldr	r2, [pc, #264]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800855e:	f7fd fa3d 	bl	80059dc <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008566:	f7fd fa39 	bl	80059dc <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e34d      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008578:	4b39      	ldr	r3, [pc, #228]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008584:	4b36      	ldr	r3, [pc, #216]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a35      	ldr	r2, [pc, #212]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800858a:	f043 0308 	orr.w	r3, r3, #8
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4b33      	ldr	r3, [pc, #204]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	4930      	ldr	r1, [pc, #192]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085a2:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	492b      	ldr	r1, [pc, #172]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	604b      	str	r3, [r1, #4]
 80085b6:	e01a      	b.n	80085ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a28      	ldr	r2, [pc, #160]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80085be:	f023 0301 	bic.w	r3, r3, #1
 80085c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085c4:	f7fd fa0a 	bl	80059dc <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085cc:	f7fd fa06 	bl	80059dc <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e31a      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085de:	4b20      	ldr	r3, [pc, #128]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f0      	bne.n	80085cc <HAL_RCC_OscConfig+0x1dc>
 80085ea:	e000      	b.n	80085ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d073      	beq.n	80086e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d005      	beq.n	800860c <HAL_RCC_OscConfig+0x21c>
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b0c      	cmp	r3, #12
 8008604:	d10e      	bne.n	8008624 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b03      	cmp	r3, #3
 800860a:	d10b      	bne.n	8008624 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d063      	beq.n	80086e0 <HAL_RCC_OscConfig+0x2f0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d15f      	bne.n	80086e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e2f7      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800862c:	d106      	bne.n	800863c <HAL_RCC_OscConfig+0x24c>
 800862e:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	e025      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008644:	d114      	bne.n	8008670 <HAL_RCC_OscConfig+0x280>
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a05      	ldr	r2, [pc, #20]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 800864c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	4b03      	ldr	r3, [pc, #12]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a02      	ldr	r2, [pc, #8]	; (8008660 <HAL_RCC_OscConfig+0x270>)
 8008658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	e013      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
 8008660:	40021000 	.word	0x40021000
 8008664:	0801548c 	.word	0x0801548c
 8008668:	200000f4 	.word	0x200000f4
 800866c:	200000f8 	.word	0x200000f8
 8008670:	4ba0      	ldr	r3, [pc, #640]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a9f      	ldr	r2, [pc, #636]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	4b9d      	ldr	r3, [pc, #628]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a9c      	ldr	r2, [pc, #624]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d013      	beq.n	80086b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008690:	f7fd f9a4 	bl	80059dc <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008698:	f7fd f9a0 	bl	80059dc <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	; 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e2b4      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086aa:	4b92      	ldr	r3, [pc, #584]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0x2a8>
 80086b6:	e014      	b.n	80086e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b8:	f7fd f990 	bl	80059dc <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086be:	e008      	b.n	80086d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c0:	f7fd f98c 	bl	80059dc <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b64      	cmp	r3, #100	; 0x64
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e2a0      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086d2:	4b88      	ldr	r3, [pc, #544]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f0      	bne.n	80086c0 <HAL_RCC_OscConfig+0x2d0>
 80086de:	e000      	b.n	80086e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d060      	beq.n	80087b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d005      	beq.n	8008700 <HAL_RCC_OscConfig+0x310>
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b0c      	cmp	r3, #12
 80086f8:	d119      	bne.n	800872e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d116      	bne.n	800872e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008700:	4b7c      	ldr	r3, [pc, #496]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_RCC_OscConfig+0x328>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e27d      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008718:	4b76      	ldr	r3, [pc, #472]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	061b      	lsls	r3, r3, #24
 8008726:	4973      	ldr	r1, [pc, #460]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008728:	4313      	orrs	r3, r2
 800872a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800872c:	e040      	b.n	80087b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d023      	beq.n	800877e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008736:	4b6f      	ldr	r3, [pc, #444]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a6e      	ldr	r2, [pc, #440]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800873c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008742:	f7fd f94b 	bl	80059dc <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008748:	e008      	b.n	800875c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800874a:	f7fd f947 	bl	80059dc <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e25b      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800875c:	4b65      	ldr	r3, [pc, #404]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0f0      	beq.n	800874a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008768:	4b62      	ldr	r3, [pc, #392]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	061b      	lsls	r3, r3, #24
 8008776:	495f      	ldr	r1, [pc, #380]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008778:	4313      	orrs	r3, r2
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	e018      	b.n	80087b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800877e:	4b5d      	ldr	r3, [pc, #372]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a5c      	ldr	r2, [pc, #368]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878a:	f7fd f927 	bl	80059dc <HAL_GetTick>
 800878e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008790:	e008      	b.n	80087a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008792:	f7fd f923 	bl	80059dc <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	2b02      	cmp	r3, #2
 800879e:	d901      	bls.n	80087a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e237      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087a4:	4b53      	ldr	r3, [pc, #332]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1f0      	bne.n	8008792 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03c      	beq.n	8008836 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01c      	beq.n	80087fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087c4:	4b4b      	ldr	r3, [pc, #300]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80087c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ca:	4a4a      	ldr	r2, [pc, #296]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d4:	f7fd f902 	bl	80059dc <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087dc:	f7fd f8fe 	bl	80059dc <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e212      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087ee:	4b41      	ldr	r3, [pc, #260]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80087f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0ef      	beq.n	80087dc <HAL_RCC_OscConfig+0x3ec>
 80087fc:	e01b      	b.n	8008836 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fe:	4b3d      	ldr	r3, [pc, #244]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008804:	4a3b      	ldr	r2, [pc, #236]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008806:	f023 0301 	bic.w	r3, r3, #1
 800880a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880e:	f7fd f8e5 	bl	80059dc <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008816:	f7fd f8e1 	bl	80059dc <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1f5      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008828:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800882a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1ef      	bne.n	8008816 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80a6 	beq.w	8008990 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008844:	2300      	movs	r3, #0
 8008846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008848:	4b2a      	ldr	r3, [pc, #168]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800884a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008854:	4b27      	ldr	r3, [pc, #156]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	4a26      	ldr	r2, [pc, #152]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 800885a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885e:	6593      	str	r3, [r2, #88]	; 0x58
 8008860:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 8008862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800886c:	2301      	movs	r3, #1
 800886e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <HAL_RCC_OscConfig+0x508>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008878:	2b00      	cmp	r3, #0
 800887a:	d118      	bne.n	80088ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800887c:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <HAL_RCC_OscConfig+0x508>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a1d      	ldr	r2, [pc, #116]	; (80088f8 <HAL_RCC_OscConfig+0x508>)
 8008882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008888:	f7fd f8a8 	bl	80059dc <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008890:	f7fd f8a4 	bl	80059dc <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e1b8      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <HAL_RCC_OscConfig+0x508>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d108      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4d8>
 80088b6:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088bc:	4a0d      	ldr	r2, [pc, #52]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088c6:	e029      	b.n	800891c <HAL_RCC_OscConfig+0x52c>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d115      	bne.n	80088fc <HAL_RCC_OscConfig+0x50c>
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d6:	4a07      	ldr	r2, [pc, #28]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088d8:	f043 0304 	orr.w	r3, r3, #4
 80088dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088e0:	4b04      	ldr	r3, [pc, #16]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	4a03      	ldr	r2, [pc, #12]	; (80088f4 <HAL_RCC_OscConfig+0x504>)
 80088e8:	f043 0301 	orr.w	r3, r3, #1
 80088ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088f0:	e014      	b.n	800891c <HAL_RCC_OscConfig+0x52c>
 80088f2:	bf00      	nop
 80088f4:	40021000 	.word	0x40021000
 80088f8:	40007000 	.word	0x40007000
 80088fc:	4b9d      	ldr	r3, [pc, #628]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80088fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008902:	4a9c      	ldr	r2, [pc, #624]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008904:	f023 0301 	bic.w	r3, r3, #1
 8008908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800890c:	4b99      	ldr	r3, [pc, #612]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 800890e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008912:	4a98      	ldr	r2, [pc, #608]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008914:	f023 0304 	bic.w	r3, r3, #4
 8008918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d016      	beq.n	8008952 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008924:	f7fd f85a 	bl	80059dc <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800892a:	e00a      	b.n	8008942 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800892c:	f7fd f856 	bl	80059dc <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	f241 3288 	movw	r2, #5000	; 0x1388
 800893a:	4293      	cmp	r3, r2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e168      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008942:	4b8c      	ldr	r3, [pc, #560]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0ed      	beq.n	800892c <HAL_RCC_OscConfig+0x53c>
 8008950:	e015      	b.n	800897e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008952:	f7fd f843 	bl	80059dc <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008958:	e00a      	b.n	8008970 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800895a:	f7fd f83f 	bl	80059dc <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f241 3288 	movw	r2, #5000	; 0x1388
 8008968:	4293      	cmp	r3, r2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e151      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008970:	4b80      	ldr	r3, [pc, #512]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ed      	bne.n	800895a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800897e:	7ffb      	ldrb	r3, [r7, #31]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d105      	bne.n	8008990 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008984:	4b7b      	ldr	r3, [pc, #492]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	4a7a      	ldr	r2, [pc, #488]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 800898a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800898e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d03c      	beq.n	8008a16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01c      	beq.n	80089de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089a4:	4b73      	ldr	r3, [pc, #460]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80089a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089aa:	4a72      	ldr	r2, [pc, #456]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b4:	f7fd f812 	bl	80059dc <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089bc:	f7fd f80e 	bl	80059dc <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e122      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089ce:	4b69      	ldr	r3, [pc, #420]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80089d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0ef      	beq.n	80089bc <HAL_RCC_OscConfig+0x5cc>
 80089dc:	e01b      	b.n	8008a16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089de:	4b65      	ldr	r3, [pc, #404]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80089e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089e4:	4a63      	ldr	r2, [pc, #396]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ee:	f7fc fff5 	bl	80059dc <HAL_GetTick>
 80089f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089f4:	e008      	b.n	8008a08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089f6:	f7fc fff1 	bl	80059dc <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e105      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a08:	4b5a      	ldr	r3, [pc, #360]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1ef      	bne.n	80089f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80f9 	beq.w	8008c12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	f040 80cf 	bne.w	8008bc8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a2a:	4b52      	ldr	r3, [pc, #328]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f003 0203 	and.w	r2, r3, #3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d12c      	bne.n	8008a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d123      	bne.n	8008a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d11b      	bne.n	8008a98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d113      	bne.n	8008a98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d109      	bne.n	8008a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	3b01      	subs	r3, #1
 8008a92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d071      	beq.n	8008b7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b0c      	cmp	r3, #12
 8008a9c:	d068      	beq.n	8008b70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008a9e:	4b35      	ldr	r3, [pc, #212]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d105      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008aaa:	4b32      	ldr	r3, [pc, #200]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e0ac      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a2d      	ldr	r2, [pc, #180]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ac6:	f7fc ff89 	bl	80059dc <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ace:	f7fc ff85 	bl	80059dc <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e099      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ae0:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f0      	bne.n	8008ace <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008aec:	4b21      	ldr	r3, [pc, #132]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008afc:	3a01      	subs	r2, #1
 8008afe:	0112      	lsls	r2, r2, #4
 8008b00:	4311      	orrs	r1, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b06:	0212      	lsls	r2, r2, #8
 8008b08:	4311      	orrs	r1, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b0e:	0852      	lsrs	r2, r2, #1
 8008b10:	3a01      	subs	r2, #1
 8008b12:	0552      	lsls	r2, r2, #21
 8008b14:	4311      	orrs	r1, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b1a:	0852      	lsrs	r2, r2, #1
 8008b1c:	3a01      	subs	r2, #1
 8008b1e:	0652      	lsls	r2, r2, #25
 8008b20:	4311      	orrs	r1, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b26:	06d2      	lsls	r2, r2, #27
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	4912      	ldr	r1, [pc, #72]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a0f      	ldr	r2, [pc, #60]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	4a0c      	ldr	r2, [pc, #48]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b48:	f7fc ff48 	bl	80059dc <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b50:	f7fc ff44 	bl	80059dc <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e058      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b62:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b6e:	e050      	b.n	8008c12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e04f      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
 8008b74:	40021000 	.word	0x40021000
 8008b78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b7c:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d144      	bne.n	8008c12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008b88:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a23      	ldr	r2, [pc, #140]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b94:	4b21      	ldr	r3, [pc, #132]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4a20      	ldr	r2, [pc, #128]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ba0:	f7fc ff1c 	bl	80059dc <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba8:	f7fc ff18 	bl	80059dc <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e02c      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bba:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0f0      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x7b8>
 8008bc6:	e024      	b.n	8008c12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b0c      	cmp	r3, #12
 8008bcc:	d01f      	beq.n	8008c0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a12      	ldr	r2, [pc, #72]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bda:	f7fc feff 	bl	80059dc <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be2:	f7fc fefb 	bl	80059dc <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e00f      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f0      	bne.n	8008be2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008c02:	68da      	ldr	r2, [r3, #12]
 8008c04:	4905      	ldr	r1, [pc, #20]	; (8008c1c <HAL_RCC_OscConfig+0x82c>)
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <HAL_RCC_OscConfig+0x830>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	60cb      	str	r3, [r1, #12]
 8008c0c:	e001      	b.n	8008c12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	feeefffc 	.word	0xfeeefffc

08008c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e0e7      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c38:	4b75      	ldr	r3, [pc, #468]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d910      	bls.n	8008c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c46:	4b72      	ldr	r3, [pc, #456]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f023 0207 	bic.w	r2, r3, #7
 8008c4e:	4970      	ldr	r1, [pc, #448]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c56:	4b6e      	ldr	r3, [pc, #440]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d001      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0cf      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	4b66      	ldr	r3, [pc, #408]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d908      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c84:	4b63      	ldr	r3, [pc, #396]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	4960      	ldr	r1, [pc, #384]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04c      	beq.n	8008d3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d107      	bne.n	8008cba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008caa:	4b5a      	ldr	r3, [pc, #360]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d121      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e0a6      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cc2:	4b54      	ldr	r3, [pc, #336]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d115      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e09a      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d107      	bne.n	8008cea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cda:	4b4e      	ldr	r3, [pc, #312]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e08e      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cea:	4b4a      	ldr	r3, [pc, #296]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e086      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cfa:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f023 0203 	bic.w	r2, r3, #3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	4943      	ldr	r1, [pc, #268]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d0c:	f7fc fe66 	bl	80059dc <HAL_GetTick>
 8008d10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d12:	e00a      	b.n	8008d2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d14:	f7fc fe62 	bl	80059dc <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e06e      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d2a:	4b3a      	ldr	r3, [pc, #232]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 020c 	and.w	r2, r3, #12
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d1eb      	bne.n	8008d14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d010      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d208      	bcs.n	8008d6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d58:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	492b      	ldr	r1, [pc, #172]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d6a:	4b29      	ldr	r3, [pc, #164]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d210      	bcs.n	8008d9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d78:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f023 0207 	bic.w	r2, r3, #7
 8008d80:	4923      	ldr	r1, [pc, #140]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <HAL_RCC_ClockConfig+0x1ec>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d001      	beq.n	8008d9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e036      	b.n	8008e08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008da6:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	4918      	ldr	r1, [pc, #96]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dc4:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	4910      	ldr	r1, [pc, #64]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dd8:	f000 f858 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <HAL_RCC_ClockConfig+0x1f0>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	091b      	lsrs	r3, r3, #4
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	490b      	ldr	r1, [pc, #44]	; (8008e18 <HAL_RCC_ClockConfig+0x1f4>)
 8008dea:	5ccb      	ldrb	r3, [r1, r3]
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <HAL_RCC_ClockConfig+0x1f8>)
 8008df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008df8:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <HAL_RCC_ClockConfig+0x1fc>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fc fd9d 	bl	800593c <HAL_InitTick>
 8008e02:	4603      	mov	r3, r0
 8008e04:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e06:	7afb      	ldrb	r3, [r7, #11]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40022000 	.word	0x40022000
 8008e14:	40021000 	.word	0x40021000
 8008e18:	0801548c 	.word	0x0801548c
 8008e1c:	200000f4 	.word	0x200000f4
 8008e20:	200000f8 	.word	0x200000f8

08008e24 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08a      	sub	sp, #40	; 0x28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <HAL_RCC_MCOConfig+0x64>)
 8008e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e34:	4a14      	ldr	r2, [pc, #80]	; (8008e88 <HAL_RCC_MCOConfig+0x64>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <HAL_RCC_MCOConfig+0x64>)
 8008e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4e:	2302      	movs	r3, #2
 8008e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e52:	2302      	movs	r3, #2
 8008e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008e5e:	f107 0314 	add.w	r3, r7, #20
 8008e62:	4619      	mov	r1, r3
 8008e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e68:	f7fe f8de 	bl	8007028 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <HAL_RCC_MCOConfig+0x64>)
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	4903      	ldr	r1, [pc, #12]	; (8008e88 <HAL_RCC_MCOConfig+0x64>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	608b      	str	r3, [r1, #8]
}
 8008e80:	bf00      	nop
 8008e82:	3728      	adds	r7, #40	; 0x28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	40021000 	.word	0x40021000

08008e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b089      	sub	sp, #36	; 0x24
 8008e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e9a:	4b3e      	ldr	r3, [pc, #248]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 030c 	and.w	r3, r3, #12
 8008ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ea4:	4b3b      	ldr	r3, [pc, #236]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b0c      	cmp	r3, #12
 8008eb8:	d121      	bne.n	8008efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d11e      	bne.n	8008efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ec0:	4b34      	ldr	r3, [pc, #208]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0308 	and.w	r3, r3, #8
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ecc:	4b31      	ldr	r3, [pc, #196]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	f003 030f 	and.w	r3, r3, #15
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	e005      	b.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008edc:	4b2d      	ldr	r3, [pc, #180]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	091b      	lsrs	r3, r3, #4
 8008ee2:	f003 030f 	and.w	r3, r3, #15
 8008ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ee8:	4a2b      	ldr	r2, [pc, #172]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10d      	bne.n	8008f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008efc:	e00a      	b.n	8008f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d102      	bne.n	8008f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f04:	4b25      	ldr	r3, [pc, #148]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e004      	b.n	8008f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d101      	bne.n	8008f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f10:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b0c      	cmp	r3, #12
 8008f18:	d134      	bne.n	8008f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f1a:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d003      	beq.n	8008f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0xac>
 8008f30:	e005      	b.n	8008f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008f32:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8008f34:	617b      	str	r3, [r7, #20]
      break;
 8008f36:	e005      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008f38:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008f3a:	617b      	str	r3, [r7, #20]
      break;
 8008f3c:	e002      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	617b      	str	r3, [r7, #20]
      break;
 8008f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f44:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	3301      	adds	r3, #1
 8008f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f52:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	fb03 f202 	mul.w	r2, r3, r2
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f6a:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	0e5b      	lsrs	r3, r3, #25
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	3301      	adds	r3, #1
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f84:	69bb      	ldr	r3, [r7, #24]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3724      	adds	r7, #36	; 0x24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40021000 	.word	0x40021000
 8008f98:	080154a4 	.word	0x080154a4
 8008f9c:	00f42400 	.word	0x00f42400
 8008fa0:	007a1200 	.word	0x007a1200

08008fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	200000f4 	.word	0x200000f4

08008fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fc0:	f7ff fff0 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	4904      	ldr	r1, [pc, #16]	; (8008fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fd2:	5ccb      	ldrb	r3, [r1, r3]
 8008fd4:	f003 031f 	and.w	r3, r3, #31
 8008fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	0801549c 	.word	0x0801549c

08008fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fec:	f7ff ffda 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	4b06      	ldr	r3, [pc, #24]	; (800900c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	0adb      	lsrs	r3, r3, #11
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	4904      	ldr	r1, [pc, #16]	; (8009010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ffe:	5ccb      	ldrb	r3, [r1, r3]
 8009000:	f003 031f 	and.w	r3, r3, #31
 8009004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009008:	4618      	mov	r0, r3
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40021000 	.word	0x40021000
 8009010:	0801549c 	.word	0x0801549c

08009014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009020:	4b2a      	ldr	r3, [pc, #168]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800902c:	f7ff f96c 	bl	8008308 <HAL_PWREx_GetVoltageRange>
 8009030:	6178      	str	r0, [r7, #20]
 8009032:	e014      	b.n	800905e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009034:	4b25      	ldr	r3, [pc, #148]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	4a24      	ldr	r2, [pc, #144]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800903a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903e:	6593      	str	r3, [r2, #88]	; 0x58
 8009040:	4b22      	ldr	r3, [pc, #136]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800904c:	f7ff f95c 	bl	8008308 <HAL_PWREx_GetVoltageRange>
 8009050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009052:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	4a1d      	ldr	r2, [pc, #116]	; (80090cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800905c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009064:	d10b      	bne.n	800907e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d919      	bls.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2ba0      	cmp	r3, #160	; 0xa0
 8009070:	d902      	bls.n	8009078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009072:	2302      	movs	r3, #2
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	e013      	b.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009078:	2301      	movs	r3, #1
 800907a:	613b      	str	r3, [r7, #16]
 800907c:	e010      	b.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b80      	cmp	r3, #128	; 0x80
 8009082:	d902      	bls.n	800908a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009084:	2303      	movs	r3, #3
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	e00a      	b.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b80      	cmp	r3, #128	; 0x80
 800908e:	d102      	bne.n	8009096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009090:	2302      	movs	r3, #2
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	e004      	b.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b70      	cmp	r3, #112	; 0x70
 800909a:	d101      	bne.n	80090a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800909c:	2301      	movs	r3, #1
 800909e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f023 0207 	bic.w	r2, r3, #7
 80090a8:	4909      	ldr	r1, [pc, #36]	; (80090d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80090b0:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0307 	and.w	r3, r3, #7
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d001      	beq.n	80090c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40021000 	.word	0x40021000
 80090d0:	40022000 	.word	0x40022000

080090d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090dc:	2300      	movs	r3, #0
 80090de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090e0:	2300      	movs	r3, #0
 80090e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d041      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090f8:	d02a      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80090fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80090fe:	d824      	bhi.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009104:	d008      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800910a:	d81e      	bhi.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009114:	d010      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009116:	e018      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009118:	4b86      	ldr	r3, [pc, #536]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	4a85      	ldr	r2, [pc, #532]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800911e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009124:	e015      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3304      	adds	r3, #4
 800912a:	2100      	movs	r1, #0
 800912c:	4618      	mov	r0, r3
 800912e:	f001 f97d 	bl	800a42c <RCCEx_PLLSAI1_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009136:	e00c      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3320      	adds	r3, #32
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f001 fa66 	bl	800a610 <RCCEx_PLLSAI2_Config>
 8009144:	4603      	mov	r3, r0
 8009146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009148:	e003      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	74fb      	strb	r3, [r7, #19]
      break;
 800914e:	e000      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009152:	7cfb      	ldrb	r3, [r7, #19]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10b      	bne.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009158:	4b76      	ldr	r3, [pc, #472]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800915a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009166:	4973      	ldr	r1, [pc, #460]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009168:	4313      	orrs	r3, r2
 800916a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800916e:	e001      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009170:	7cfb      	ldrb	r3, [r7, #19]
 8009172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d041      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009188:	d02a      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800918a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800918e:	d824      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009194:	d008      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919a:	d81e      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80091a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091a4:	d010      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80091a6:	e018      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091a8:	4b62      	ldr	r3, [pc, #392]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	4a61      	ldr	r2, [pc, #388]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091b4:	e015      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3304      	adds	r3, #4
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 f935 	bl	800a42c <RCCEx_PLLSAI1_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091c6:	e00c      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3320      	adds	r3, #32
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 fa1e 	bl	800a610 <RCCEx_PLLSAI2_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	74fb      	strb	r3, [r7, #19]
      break;
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80091e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091e2:	7cfb      	ldrb	r3, [r7, #19]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091e8:	4b52      	ldr	r3, [pc, #328]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f6:	494f      	ldr	r1, [pc, #316]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80091fe:	e001      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009200:	7cfb      	ldrb	r3, [r7, #19]
 8009202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80a0 	beq.w	8009352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009212:	2300      	movs	r3, #0
 8009214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009216:	4b47      	ldr	r3, [pc, #284]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800922c:	4b41      	ldr	r3, [pc, #260]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800922e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009230:	4a40      	ldr	r2, [pc, #256]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009236:	6593      	str	r3, [r2, #88]	; 0x58
 8009238:	4b3e      	ldr	r3, [pc, #248]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800923a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009244:	2301      	movs	r3, #1
 8009246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009248:	4b3b      	ldr	r3, [pc, #236]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a3a      	ldr	r2, [pc, #232]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800924e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009254:	f7fc fbc2 	bl	80059dc <HAL_GetTick>
 8009258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800925a:	e009      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800925c:	f7fc fbbe 	bl	80059dc <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d902      	bls.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	74fb      	strb	r3, [r7, #19]
        break;
 800926e:	e005      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009270:	4b31      	ldr	r3, [pc, #196]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0ef      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800927c:	7cfb      	ldrb	r3, [r7, #19]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d15c      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009282:	4b2c      	ldr	r3, [pc, #176]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800928c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01f      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	429a      	cmp	r2, r3
 800929e:	d019      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092a0:	4b24      	ldr	r3, [pc, #144]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092ac:	4b21      	ldr	r3, [pc, #132]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b2:	4a20      	ldr	r2, [pc, #128]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092bc:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	4a1c      	ldr	r2, [pc, #112]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092cc:	4a19      	ldr	r2, [pc, #100]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d016      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092de:	f7fc fb7d 	bl	80059dc <HAL_GetTick>
 80092e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092e4:	e00b      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e6:	f7fc fb79 	bl	80059dc <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d902      	bls.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	74fb      	strb	r3, [r7, #19]
            break;
 80092fc:	e006      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092fe:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0ec      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800930c:	7cfb      	ldrb	r3, [r7, #19]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10c      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	4904      	ldr	r1, [pc, #16]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800932a:	e009      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800932c:	7cfb      	ldrb	r3, [r7, #19]
 800932e:	74bb      	strb	r3, [r7, #18]
 8009330:	e006      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009332:	bf00      	nop
 8009334:	40021000 	.word	0x40021000
 8009338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	7cfb      	ldrb	r3, [r7, #19]
 800933e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009340:	7c7b      	ldrb	r3, [r7, #17]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d105      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009346:	4ba6      	ldr	r3, [pc, #664]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	4aa5      	ldr	r2, [pc, #660]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800934c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800935e:	4ba0      	ldr	r3, [pc, #640]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009364:	f023 0203 	bic.w	r2, r3, #3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	499c      	ldr	r1, [pc, #624]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800936e:	4313      	orrs	r3, r2
 8009370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009380:	4b97      	ldr	r3, [pc, #604]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009386:	f023 020c 	bic.w	r2, r3, #12
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	4994      	ldr	r1, [pc, #592]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093a2:	4b8f      	ldr	r3, [pc, #572]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	498b      	ldr	r1, [pc, #556]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0308 	and.w	r3, r3, #8
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093c4:	4b86      	ldr	r3, [pc, #536]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d2:	4983      	ldr	r1, [pc, #524]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093e6:	4b7e      	ldr	r3, [pc, #504]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f4:	497a      	ldr	r1, [pc, #488]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0320 	and.w	r3, r3, #32
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009408:	4b75      	ldr	r3, [pc, #468]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009416:	4972      	ldr	r1, [pc, #456]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800942a:	4b6d      	ldr	r3, [pc, #436]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009438:	4969      	ldr	r1, [pc, #420]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800944c:	4b64      	ldr	r3, [pc, #400]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800944e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800945a:	4961      	ldr	r1, [pc, #388]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800945c:	4313      	orrs	r3, r2
 800945e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800946e:	4b5c      	ldr	r3, [pc, #368]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947c:	4958      	ldr	r1, [pc, #352]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009490:	4b53      	ldr	r3, [pc, #332]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	4950      	ldr	r1, [pc, #320]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094b2:	4b4b      	ldr	r3, [pc, #300]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c0:	4947      	ldr	r1, [pc, #284]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094d4:	4b42      	ldr	r3, [pc, #264]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094da:	f023 0203 	bic.w	r2, r3, #3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e2:	493f      	ldr	r1, [pc, #252]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d028      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094f6:	4b3a      	ldr	r3, [pc, #232]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009504:	4936      	ldr	r1, [pc, #216]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009516:	4b32      	ldr	r3, [pc, #200]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	4a31      	ldr	r2, [pc, #196]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800951c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009520:	60d3      	str	r3, [r2, #12]
 8009522:	e011      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800952c:	d10c      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3304      	adds	r3, #4
 8009532:	2101      	movs	r1, #1
 8009534:	4618      	mov	r0, r3
 8009536:	f000 ff79 	bl	800a42c <RCCEx_PLLSAI1_Config>
 800953a:	4603      	mov	r3, r0
 800953c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800953e:	7cfb      	ldrb	r3, [r7, #19]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8009544:	7cfb      	ldrb	r3, [r7, #19]
 8009546:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d028      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009554:	4b22      	ldr	r3, [pc, #136]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009562:	491f      	ldr	r1, [pc, #124]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009564:	4313      	orrs	r3, r2
 8009566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800956e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009572:	d106      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009574:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	4a19      	ldr	r2, [pc, #100]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800957a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800957e:	60d3      	str	r3, [r2, #12]
 8009580:	e011      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800958a:	d10c      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3304      	adds	r3, #4
 8009590:	2101      	movs	r1, #1
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff4a 	bl	800a42c <RCCEx_PLLSAI1_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800959c:	7cfb      	ldrb	r3, [r7, #19]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80095a2:	7cfb      	ldrb	r3, [r7, #19]
 80095a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d02a      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095b2:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d0:	d108      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	4a02      	ldr	r2, [pc, #8]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095dc:	60d3      	str	r3, [r2, #12]
 80095de:	e013      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80095e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ec:	d10c      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3304      	adds	r3, #4
 80095f2:	2101      	movs	r1, #1
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 ff19 	bl	800a42c <RCCEx_PLLSAI1_Config>
 80095fa:	4603      	mov	r3, r0
 80095fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095fe:	7cfb      	ldrb	r3, [r7, #19]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8009604:	7cfb      	ldrb	r3, [r7, #19]
 8009606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d02f      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009614:	4b2c      	ldr	r3, [pc, #176]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800961a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009622:	4929      	ldr	r1, [pc, #164]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009624:	4313      	orrs	r3, r2
 8009626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009632:	d10d      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	2102      	movs	r1, #2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fef6 	bl	800a42c <RCCEx_PLLSAI1_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009644:	7cfb      	ldrb	r3, [r7, #19]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d014      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800964a:	7cfb      	ldrb	r3, [r7, #19]
 800964c:	74bb      	strb	r3, [r7, #18]
 800964e:	e011      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009658:	d10c      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3320      	adds	r3, #32
 800965e:	2102      	movs	r1, #2
 8009660:	4618      	mov	r0, r3
 8009662:	f000 ffd5 	bl	800a610 <RCCEx_PLLSAI2_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800966a:	7cfb      	ldrb	r3, [r7, #19]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009670:	7cfb      	ldrb	r3, [r7, #19]
 8009672:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009680:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009690:	490d      	ldr	r1, [pc, #52]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009692:	4313      	orrs	r3, r2
 8009694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b4:	4904      	ldr	r1, [pc, #16]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80096bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	40021000 	.word	0x40021000

080096cc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a77      	ldr	r2, [pc, #476]	; (80098b4 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 80096d8:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80096da:	4b77      	ldr	r3, [pc, #476]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0203 	and.w	r2, r3, #3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80096e6:	4b74      	ldr	r3, [pc, #464]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	091b      	lsrs	r3, r3, #4
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80096f6:	4b70      	ldr	r3, [pc, #448]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8009704:	4b6c      	ldr	r3, [pc, #432]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	0c5b      	lsrs	r3, r3, #17
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	1dda      	adds	r2, r3, #7
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8009716:	4b68      	ldr	r3, [pc, #416]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	0d5b      	lsrs	r3, r3, #21
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	3301      	adds	r3, #1
 8009722:	005a      	lsls	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8009728:	4b63      	ldr	r3, [pc, #396]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	0e5b      	lsrs	r3, r3, #25
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	3301      	adds	r3, #1
 8009734:	005a      	lsls	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800974a:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8009758:	4b57      	ldr	r3, [pc, #348]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	0c5b      	lsrs	r3, r3, #17
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	1dda      	adds	r2, r3, #7
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800976a:	4b53      	ldr	r3, [pc, #332]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	0e5b      	lsrs	r3, r3, #25
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	3301      	adds	r3, #1
 8009776:	005a      	lsls	r2, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800977c:	4b4e      	ldr	r3, [pc, #312]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	f003 0203 	and.w	r2, r3, #3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800978a:	4b4b      	ldr	r3, [pc, #300]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800978c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009790:	f003 020c 	and.w	r2, r3, #12
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8009798:	4b47      	ldr	r3, [pc, #284]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800979a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80097a6:	4b44      	ldr	r3, [pc, #272]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ac:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 80097b4:	4b40      	ldr	r3, [pc, #256]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80097c2:	4b3d      	ldr	r3, [pc, #244]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d6:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80097de:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 80097ec:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80097fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009800:	f003 0203 	and.w	r2, r3, #3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800980a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980e:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009816:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8009824:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8009832:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8009840:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009846:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8009850:	4b19      	ldr	r3, [pc, #100]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800986c:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800986e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009872:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800987c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009880:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009888:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009898:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	001fffff 	.word	0x001fffff
 80098b8:	40021000 	.word	0x40021000

080098bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ce:	d13e      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80098d0:	4bb4      	ldr	r3, [pc, #720]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098da:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e2:	d028      	beq.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ea:	f200 858c 	bhi.w	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f4:	d005      	beq.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098fc:	d00e      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80098fe:	f000 bd82 	b.w	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009902:	4ba8      	ldr	r3, [pc, #672]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b02      	cmp	r3, #2
 800990e:	f040 857c 	bne.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8009912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009916:	61fb      	str	r3, [r7, #28]
      break;
 8009918:	f000 bd77 	b.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800991c:	4ba1      	ldr	r3, [pc, #644]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800991e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	f040 8571 	bne.w	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 800992c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009930:	61fb      	str	r3, [r7, #28]
      break;
 8009932:	f000 bd6c 	b.w	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009936:	4b9b      	ldr	r3, [pc, #620]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009942:	f040 8566 	bne.w	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8009946:	4b98      	ldr	r3, [pc, #608]	; (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009948:	61fb      	str	r3, [r7, #28]
      break;
 800994a:	f000 bd62 	b.w	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800994e:	4b95      	ldr	r3, [pc, #596]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d036      	beq.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d840      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d003      	beq.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d020      	beq.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009970:	e039      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009972:	4b8c      	ldr	r3, [pc, #560]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b02      	cmp	r3, #2
 800997c:	d116      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800997e:	4b89      	ldr	r3, [pc, #548]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0308 	and.w	r3, r3, #8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800998a:	4b86      	ldr	r3, [pc, #536]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	091b      	lsrs	r3, r3, #4
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	e005      	b.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8009996:	4b83      	ldr	r3, [pc, #524]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	f003 030f 	and.w	r3, r3, #15
 80099a2:	4a82      	ldr	r2, [pc, #520]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80099a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80099aa:	e01f      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61bb      	str	r3, [r7, #24]
      break;
 80099b0:	e01c      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099b2:	4b7c      	ldr	r3, [pc, #496]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099be:	d102      	bne.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80099c0:	4b7b      	ldr	r3, [pc, #492]	; (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80099c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80099c4:	e012      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	61bb      	str	r3, [r7, #24]
      break;
 80099ca:	e00f      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099cc:	4b75      	ldr	r3, [pc, #468]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099d8:	d102      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80099da:	4b76      	ldr	r3, [pc, #472]	; (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80099dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80099de:	e005      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
      break;
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61bb      	str	r3, [r7, #24]
      break;
 80099ea:	bf00      	nop
    }

    switch(PeriphClk)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099f2:	f000 842a 	beq.w	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099fc:	f200 850b 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a06:	f000 80df 	beq.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a10:	f200 8501 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a1a:	f000 80d5 	beq.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a24:	f200 84f7 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2e:	f000 8377 	beq.w	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a38:	f200 84ed 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a42:	f000 84c3 	beq.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a4c:	f200 84e3 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a56:	f000 82e6 	beq.w	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a60:	f200 84d9 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a6a:	f000 80ad 	beq.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a74:	f200 84cf 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a7e:	f000 809b 	beq.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a88:	f200 84c5 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a92:	d07f      	beq.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a9a:	f200 84bc 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa4:	f000 8448 	beq.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aae:	f200 84b2 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab8:	f000 83f0 	beq.w	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ac2:	f200 84a8 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009acc:	f000 8391 	beq.w	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad6:	f200 849e 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b80      	cmp	r3, #128	; 0x80
 8009ade:	f000 835c 	beq.w	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b80      	cmp	r3, #128	; 0x80
 8009ae6:	f200 8496 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d84b      	bhi.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 848f 	beq.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	2b1f      	cmp	r3, #31
 8009afe:	f200 848a 	bhi.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009d1f 	.word	0x08009d1f
 8009b0c:	08009d8f 	.word	0x08009d8f
 8009b10:	0800a417 	.word	0x0800a417
 8009b14:	08009e23 	.word	0x08009e23
 8009b18:	0800a417 	.word	0x0800a417
 8009b1c:	0800a417 	.word	0x0800a417
 8009b20:	0800a417 	.word	0x0800a417
 8009b24:	08009eab 	.word	0x08009eab
 8009b28:	0800a417 	.word	0x0800a417
 8009b2c:	0800a417 	.word	0x0800a417
 8009b30:	0800a417 	.word	0x0800a417
 8009b34:	0800a417 	.word	0x0800a417
 8009b38:	0800a417 	.word	0x0800a417
 8009b3c:	0800a417 	.word	0x0800a417
 8009b40:	0800a417 	.word	0x0800a417
 8009b44:	08009f23 	.word	0x08009f23
 8009b48:	0800a417 	.word	0x0800a417
 8009b4c:	0800a417 	.word	0x0800a417
 8009b50:	0800a417 	.word	0x0800a417
 8009b54:	0800a417 	.word	0x0800a417
 8009b58:	0800a417 	.word	0x0800a417
 8009b5c:	0800a417 	.word	0x0800a417
 8009b60:	0800a417 	.word	0x0800a417
 8009b64:	0800a417 	.word	0x0800a417
 8009b68:	0800a417 	.word	0x0800a417
 8009b6c:	0800a417 	.word	0x0800a417
 8009b70:	0800a417 	.word	0x0800a417
 8009b74:	0800a417 	.word	0x0800a417
 8009b78:	0800a417 	.word	0x0800a417
 8009b7c:	0800a417 	.word	0x0800a417
 8009b80:	0800a417 	.word	0x0800a417
 8009b84:	08009fa5 	.word	0x08009fa5
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b40      	cmp	r3, #64	; 0x40
 8009b8c:	f000 82d9 	beq.w	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009b90:	f000 bc41 	b.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009b94:	69b9      	ldr	r1, [r7, #24]
 8009b96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009b9a:	f000 fe15 	bl	800a7c8 <RCCEx_GetSAIxPeriphCLKFreq>
 8009b9e:	61f8      	str	r0, [r7, #28]
      break;
 8009ba0:	f000 bc3a 	b.w	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009ba4:	40021000 	.word	0x40021000
 8009ba8:	0003d090 	.word	0x0003d090
 8009bac:	080154a4 	.word	0x080154a4
 8009bb0:	00f42400 	.word	0x00f42400
 8009bb4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009bb8:	69b9      	ldr	r1, [r7, #24]
 8009bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009bbe:	f000 fe03 	bl	800a7c8 <RCCEx_GetSAIxPeriphCLKFreq>
 8009bc2:	61f8      	str	r0, [r7, #28]
      break;
 8009bc4:	f000 bc28 	b.w	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009bc8:	4ba6      	ldr	r3, [pc, #664]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009bda:	d015      	beq.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009be2:	f200 8092 	bhi.w	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bec:	d029      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bf4:	f200 8089 	bhi.w	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d07b      	beq.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c04:	d04a      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8009c06:	e080      	b.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009c08:	4b96      	ldr	r3, [pc, #600]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d17c      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009c14:	4b93      	ldr	r3, [pc, #588]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0308 	and.w	r3, r3, #8
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009c20:	4b90      	ldr	r3, [pc, #576]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	091b      	lsrs	r3, r3, #4
 8009c26:	f003 030f 	and.w	r3, r3, #15
 8009c2a:	e005      	b.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009c2c:	4b8d      	ldr	r3, [pc, #564]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	4a8b      	ldr	r2, [pc, #556]	; (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8009c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c3e:	61fb      	str	r3, [r7, #28]
          break;
 8009c40:	e065      	b.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009c42:	4b88      	ldr	r3, [pc, #544]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c4e:	d160      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009c50:	4b84      	ldr	r3, [pc, #528]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c5c:	d159      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009c5e:	4b81      	ldr	r3, [pc, #516]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	0a1b      	lsrs	r3, r3, #8
 8009c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c68:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	fb03 f202 	mul.w	r2, r3, r2
 8009c72:	4b7c      	ldr	r3, [pc, #496]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c82:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009c84:	4b77      	ldr	r3, [pc, #476]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	0d5b      	lsrs	r3, r3, #21
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	3301      	adds	r3, #1
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c98:	61fb      	str	r3, [r7, #28]
          break;
 8009c9a:	e03a      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009c9c:	4b71      	ldr	r3, [pc, #452]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca8:	d135      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009caa:	4b6e      	ldr	r3, [pc, #440]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb6:	d12e      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009cb8:	4b6a      	ldr	r3, [pc, #424]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	0a1b      	lsrs	r3, r3, #8
 8009cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	fb03 f202 	mul.w	r2, r3, r2
 8009ccc:	4b65      	ldr	r3, [pc, #404]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	091b      	lsrs	r3, r3, #4
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cdc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009cde:	4b61      	ldr	r3, [pc, #388]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	0d5b      	lsrs	r3, r3, #21
 8009ce4:	f003 0303 	and.w	r3, r3, #3
 8009ce8:	3301      	adds	r3, #1
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	61fb      	str	r3, [r7, #28]
          break;
 8009cf4:	e00f      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009cf6:	4b5b      	ldr	r3, [pc, #364]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d10a      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8009d04:	4b59      	ldr	r3, [pc, #356]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8009d06:	61fb      	str	r3, [r7, #28]
          break;
 8009d08:	e007      	b.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8009d0a:	bf00      	nop
 8009d0c:	e384      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d0e:	bf00      	nop
 8009d10:	e382      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d12:	bf00      	nop
 8009d14:	e380      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d16:	bf00      	nop
 8009d18:	e37e      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d1a:	bf00      	nop
        break;
 8009d1c:	e37c      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009d1e:	4b51      	ldr	r3, [pc, #324]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d828      	bhi.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d51 	.word	0x08009d51
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d6d 	.word	0x08009d6d
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d48:	f7ff f94e 	bl	8008fe8 <HAL_RCC_GetPCLK2Freq>
 8009d4c:	61f8      	str	r0, [r7, #28]
          break;
 8009d4e:	e01d      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009d50:	f7ff f89c 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009d54:	61f8      	str	r0, [r7, #28]
          break;
 8009d56:	e019      	b.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d58:	4b42      	ldr	r3, [pc, #264]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d64:	d10f      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8009d66:	4b42      	ldr	r3, [pc, #264]	; (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009d68:	61fb      	str	r3, [r7, #28]
          break;
 8009d6a:	e00c      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d6c:	4b3d      	ldr	r3, [pc, #244]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d107      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8009d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d7e:	61fb      	str	r3, [r7, #28]
          break;
 8009d80:	e003      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8009d82:	bf00      	nop
 8009d84:	e348      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d86:	bf00      	nop
 8009d88:	e346      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009d8a:	bf00      	nop
        break;
 8009d8c:	e344      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009d8e:	4b35      	ldr	r3, [pc, #212]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	f003 030c 	and.w	r3, r3, #12
 8009d98:	613b      	str	r3, [r7, #16]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b0c      	cmp	r3, #12
 8009d9e:	d83a      	bhi.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009ddd 	.word	0x08009ddd
 8009dac:	08009e17 	.word	0x08009e17
 8009db0:	08009e17 	.word	0x08009e17
 8009db4:	08009e17 	.word	0x08009e17
 8009db8:	08009de5 	.word	0x08009de5
 8009dbc:	08009e17 	.word	0x08009e17
 8009dc0:	08009e17 	.word	0x08009e17
 8009dc4:	08009e17 	.word	0x08009e17
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009e17 	.word	0x08009e17
 8009dd0:	08009e17 	.word	0x08009e17
 8009dd4:	08009e17 	.word	0x08009e17
 8009dd8:	08009e01 	.word	0x08009e01
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ddc:	f7ff f8ee 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8009de0:	61f8      	str	r0, [r7, #28]
          break;
 8009de2:	e01d      	b.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8009de4:	f7ff f852 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009de8:	61f8      	str	r0, [r7, #28]
          break;
 8009dea:	e019      	b.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dec:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df8:	d10f      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009dfc:	61fb      	str	r3, [r7, #28]
          break;
 8009dfe:	e00c      	b.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d107      	bne.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8009e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e12:	61fb      	str	r3, [r7, #28]
          break;
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8009e16:	bf00      	nop
 8009e18:	e2fe      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009e1a:	bf00      	nop
 8009e1c:	e2fc      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009e1e:	bf00      	nop
        break;
 8009e20:	e2fa      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e2c:	613b      	str	r3, [r7, #16]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d029      	beq.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b30      	cmp	r3, #48	; 0x30
 8009e38:	d831      	bhi.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d019      	beq.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	d82b      	bhi.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b10      	cmp	r3, #16
 8009e50:	d004      	beq.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8009e52:	e024      	b.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e54:	f7ff f8b2 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8009e58:	61f8      	str	r0, [r7, #28]
          break;
 8009e5a:	e025      	b.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e5c:	f7ff f816 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009e60:	61f8      	str	r0, [r7, #28]
          break;
 8009e62:	e021      	b.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8009e64:	40021000 	.word	0x40021000
 8009e68:	080154a4 	.word	0x080154a4
 8009e6c:	02dc6c00 	.word	0x02dc6c00
 8009e70:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e74:	4b8f      	ldr	r3, [pc, #572]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e80:	d10f      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8009e82:	4b8d      	ldr	r3, [pc, #564]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8009e84:	61fb      	str	r3, [r7, #28]
          break;
 8009e86:	e00c      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e88:	4b8a      	ldr	r3, [pc, #552]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d107      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8009e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e9a:	61fb      	str	r3, [r7, #28]
          break;
 8009e9c:	e003      	b.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8009e9e:	bf00      	nop
 8009ea0:	e2ba      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009ea2:	bf00      	nop
 8009ea4:	e2b8      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009ea6:	bf00      	nop
        break;
 8009ea8:	e2b6      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009eaa:	4b82      	ldr	r3, [pc, #520]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eb4:	613b      	str	r3, [r7, #16]
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8009eba:	d021      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8009ec0:	d829      	bhi.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b80      	cmp	r3, #128	; 0x80
 8009ec6:	d011      	beq.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2b80      	cmp	r3, #128	; 0x80
 8009ecc:	d823      	bhi.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d003      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b40      	cmp	r3, #64	; 0x40
 8009ed8:	d004      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8009eda:	e01c      	b.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009edc:	f7ff f86e 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8009ee0:	61f8      	str	r0, [r7, #28]
          break;
 8009ee2:	e01d      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8009ee4:	f7fe ffd2 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009ee8:	61f8      	str	r0, [r7, #28]
          break;
 8009eea:	e019      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009eec:	4b71      	ldr	r3, [pc, #452]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ef8:	d10f      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8009efa:	4b6f      	ldr	r3, [pc, #444]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8009efc:	61fb      	str	r3, [r7, #28]
          break;
 8009efe:	e00c      	b.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f00:	4b6c      	ldr	r3, [pc, #432]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8009f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f12:	61fb      	str	r3, [r7, #28]
          break;
 8009f14:	e003      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8009f16:	bf00      	nop
 8009f18:	e27e      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009f1a:	bf00      	nop
 8009f1c:	e27c      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009f1e:	bf00      	nop
        break;
 8009f20:	e27a      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009f22:	4b64      	ldr	r3, [pc, #400]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f34:	d025      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f3c:	d82c      	bhi.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f44:	d013      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f4c:	d824      	bhi.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d004      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f5a:	d004      	beq.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8009f5c:	e01c      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f5e:	f7ff f82d 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8009f62:	61f8      	str	r0, [r7, #28]
          break;
 8009f64:	e01d      	b.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f66:	f7fe ff91 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009f6a:	61f8      	str	r0, [r7, #28]
          break;
 8009f6c:	e019      	b.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f6e:	4b51      	ldr	r3, [pc, #324]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f7a:	d10f      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8009f7c:	4b4e      	ldr	r3, [pc, #312]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8009f7e:	61fb      	str	r3, [r7, #28]
          break;
 8009f80:	e00c      	b.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f82:	4b4c      	ldr	r3, [pc, #304]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d107      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8009f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f94:	61fb      	str	r3, [r7, #28]
          break;
 8009f96:	e003      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8009f98:	bf00      	nop
 8009f9a:	e23d      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009f9c:	bf00      	nop
 8009f9e:	e23b      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009fa0:	bf00      	nop
        break;
 8009fa2:	e239      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009fa4:	4b43      	ldr	r3, [pc, #268]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fae:	613b      	str	r3, [r7, #16]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fb6:	d025      	beq.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fbe:	d82c      	bhi.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fc6:	d013      	beq.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fce:	d824      	bhi.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d004      	beq.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fdc:	d004      	beq.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8009fde:	e01c      	b.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009fe0:	f7fe ffec 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8009fe4:	61f8      	str	r0, [r7, #28]
          break;
 8009fe6:	e01d      	b.n	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8009fe8:	f7fe ff50 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 8009fec:	61f8      	str	r0, [r7, #28]
          break;
 8009fee:	e019      	b.n	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ff0:	4b30      	ldr	r3, [pc, #192]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ffc:	d10f      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8009ffe:	4b2e      	ldr	r3, [pc, #184]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a000:	61fb      	str	r3, [r7, #28]
          break;
 800a002:	e00c      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a004:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d107      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 800a012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a016:	61fb      	str	r3, [r7, #28]
          break;
 800a018:	e003      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800a01a:	bf00      	nop
 800a01c:	e1fc      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a01e:	bf00      	nop
 800a020:	e1fa      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a022:	bf00      	nop
        break;
 800a024:	e1f8      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a026:	4b23      	ldr	r3, [pc, #140]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a038:	d00c      	beq.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a040:	d868      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a048:	d008      	beq.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a050:	d034      	beq.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 800a052:	e05f      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 800a054:	f7fe ff1a 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a058:	61f8      	str	r0, [r7, #28]
          break;
 800a05a:	e060      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a05c:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a068:	d156      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800a06a:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d050      	beq.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a080:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	fb03 f202 	mul.w	r2, r3, r2
 800a08a:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	091b      	lsrs	r3, r3, #4
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	3301      	adds	r3, #1
 800a096:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	0e5b      	lsrs	r3, r3, #25
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b0:	61fb      	str	r3, [r7, #28]
          break;
 800a0b2:	e031      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800a0b4:	40021000 	.word	0x40021000
 800a0b8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a0bc:	4b9c      	ldr	r3, [pc, #624]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0c8:	d128      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800a0ca:	4b99      	ldr	r3, [pc, #612]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d022      	beq.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a0d6:	4b96      	ldr	r3, [pc, #600]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	fb03 f202 	mul.w	r2, r3, r2
 800a0ea:	4b91      	ldr	r3, [pc, #580]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	091b      	lsrs	r3, r3, #4
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0fa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a0fc:	4b8c      	ldr	r3, [pc, #560]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	0e5b      	lsrs	r3, r3, #25
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	3301      	adds	r3, #1
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a110:	61fb      	str	r3, [r7, #28]
          break;
 800a112:	e003      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800a114:	bf00      	nop
 800a116:	e17f      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a118:	bf00      	nop
 800a11a:	e17d      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a11c:	bf00      	nop
        break;
 800a11e:	e17b      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a120:	4b83      	ldr	r3, [pc, #524]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a12a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d103      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a132:	f7fe ff59 	bl	8008fe8 <HAL_RCC_GetPCLK2Freq>
 800a136:	61f8      	str	r0, [r7, #28]
        break;
 800a138:	e16e      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a13a:	f7fe fea7 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a13e:	61f8      	str	r0, [r7, #28]
        break;
 800a140:	e16a      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a142:	4b7b      	ldr	r3, [pc, #492]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a154:	d013      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15c:	d819      	bhi.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16a:	d004      	beq.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800a16c:	e011      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a16e:	f7fe ff25 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a172:	61f8      	str	r0, [r7, #28]
          break;
 800a174:	e010      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800a176:	f7fe fe89 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a17a:	61f8      	str	r0, [r7, #28]
          break;
 800a17c:	e00c      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a17e:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a18a:	d104      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800a18c:	4b69      	ldr	r3, [pc, #420]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800a18e:	61fb      	str	r3, [r7, #28]
          break;
 800a190:	e001      	b.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 800a192:	bf00      	nop
 800a194:	e140      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a196:	bf00      	nop
        break;
 800a198:	e13e      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a19a:	4b65      	ldr	r3, [pc, #404]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1a4:	613b      	str	r3, [r7, #16]
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ac:	d013      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b4:	d819      	bhi.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d004      	beq.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1c2:	d004      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 800a1c4:	e011      	b.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1c6:	f7fe fef9 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a1ca:	61f8      	str	r0, [r7, #28]
          break;
 800a1cc:	e010      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1ce:	f7fe fe5d 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a1d2:	61f8      	str	r0, [r7, #28]
          break;
 800a1d4:	e00c      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1d6:	4b56      	ldr	r3, [pc, #344]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e2:	d104      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 800a1e4:	4b53      	ldr	r3, [pc, #332]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800a1e6:	61fb      	str	r3, [r7, #28]
          break;
 800a1e8:	e001      	b.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800a1ea:	bf00      	nop
 800a1ec:	e114      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a1ee:	bf00      	nop
        break;
 800a1f0:	e112      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a1f2:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a204:	d013      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a20c:	d819      	bhi.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a21a:	d004      	beq.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 800a21c:	e011      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a21e:	f7fe fecd 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a222:	61f8      	str	r0, [r7, #28]
          break;
 800a224:	e010      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a226:	f7fe fe31 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a22a:	61f8      	str	r0, [r7, #28]
          break;
 800a22c:	e00c      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a22e:	4b40      	ldr	r3, [pc, #256]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a23a:	d104      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 800a23c:	4b3d      	ldr	r3, [pc, #244]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800a23e:	61fb      	str	r3, [r7, #28]
          break;
 800a240:	e001      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 800a242:	bf00      	nop
 800a244:	e0e8      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a246:	bf00      	nop
        break;
 800a248:	e0e6      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a24a:	4b39      	ldr	r3, [pc, #228]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a24c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	613b      	str	r3, [r7, #16]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d011      	beq.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d818      	bhi.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d004      	beq.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800a26e:	e011      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a270:	f7fe fea4 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a274:	61f8      	str	r0, [r7, #28]
          break;
 800a276:	e010      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800a278:	f7fe fe08 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800a27c:	61f8      	str	r0, [r7, #28]
          break;
 800a27e:	e00c      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a280:	4b2b      	ldr	r3, [pc, #172]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28c:	d104      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800a28e:	4b29      	ldr	r3, [pc, #164]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800a290:	61fb      	str	r3, [r7, #28]
          break;
 800a292:	e001      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800a294:	bf00      	nop
 800a296:	e0bf      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a298:	bf00      	nop
        break;
 800a29a:	e0bd      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a29c:	4b24      	ldr	r3, [pc, #144]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a2ae:	d02c      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a2b6:	d833      	bhi.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2be:	d01a      	beq.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2c6:	d82b      	bhi.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2d4:	d004      	beq.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800a2d6:	e023      	b.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2d8:	f7fe fe70 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a2dc:	61f8      	str	r0, [r7, #28]
          break;
 800a2de:	e026      	b.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a2e0:	4b13      	ldr	r3, [pc, #76]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a2e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d11a      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800a2ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a2f2:	61fb      	str	r3, [r7, #28]
          break;
 800a2f4:	e016      	b.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2f6:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a302:	d111      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800a304:	4b0b      	ldr	r3, [pc, #44]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800a306:	61fb      	str	r3, [r7, #28]
          break;
 800a308:	e00e      	b.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800a30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a310:	f003 0302 	and.w	r3, r3, #2
 800a314:	2b02      	cmp	r3, #2
 800a316:	d109      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800a318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a31c:	61fb      	str	r3, [r7, #28]
          break;
 800a31e:	e005      	b.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800a320:	bf00      	nop
 800a322:	e079      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a324:	bf00      	nop
 800a326:	e077      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a328:	bf00      	nop
 800a32a:	e075      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a32c:	bf00      	nop
        break;
 800a32e:	e073      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800a330:	40021000 	.word	0x40021000
 800a334:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a338:	4b3a      	ldr	r3, [pc, #232]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a34a:	d02c      	beq.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a352:	d833      	bhi.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a35a:	d01a      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a362:	d82b      	bhi.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a370:	d004      	beq.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800a372:	e023      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a374:	f7fe fe22 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a378:	61f8      	str	r0, [r7, #28]
          break;
 800a37a:	e026      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a37c:	4b29      	ldr	r3, [pc, #164]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a37e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b02      	cmp	r3, #2
 800a388:	d11a      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800a38a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a38e:	61fb      	str	r3, [r7, #28]
          break;
 800a390:	e016      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a392:	4b24      	ldr	r3, [pc, #144]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a39e:	d111      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 800a3a0:	4b21      	ldr	r3, [pc, #132]	; (800a428 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800a3a2:	61fb      	str	r3, [r7, #28]
          break;
 800a3a4:	e00e      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d109      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800a3b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b8:	61fb      	str	r3, [r7, #28]
          break;
 800a3ba:	e005      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800a3bc:	bf00      	nop
 800a3be:	e02b      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a3c0:	bf00      	nop
 800a3c2:	e029      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a3c4:	bf00      	nop
 800a3c6:	e027      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800a3c8:	bf00      	nop
        break;
 800a3ca:	e025      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a3cc:	4b15      	ldr	r3, [pc, #84]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e4:	d004      	beq.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800a3e6:	e00d      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3e8:	f7fe fde8 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a3ec:	61f8      	str	r0, [r7, #28]
          break;
 800a3ee:	e009      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fc:	d101      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800a400:	61fb      	str	r3, [r7, #28]
          break;
 800a402:	bf00      	nop
        break;
 800a404:	e008      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800a406:	bf00      	nop
 800a408:	e006      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800a40a:	bf00      	nop
 800a40c:	e004      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 800a416:	bf00      	nop
    }
  }

  return(frequency);
 800a418:	69fb      	ldr	r3, [r7, #28]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	40021000 	.word	0x40021000
 800a428:	00f42400 	.word	0x00f42400

0800a42c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a43a:	4b74      	ldr	r3, [pc, #464]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d018      	beq.n	800a478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a446:	4b71      	ldr	r3, [pc, #452]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f003 0203 	and.w	r2, r3, #3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d10d      	bne.n	800a472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
       ||
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d009      	beq.n	800a472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a45e:	4b6b      	ldr	r3, [pc, #428]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	091b      	lsrs	r3, r3, #4
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
       ||
 800a46e:	429a      	cmp	r2, r3
 800a470:	d047      	beq.n	800a502 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	73fb      	strb	r3, [r7, #15]
 800a476:	e044      	b.n	800a502 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d018      	beq.n	800a4b2 <RCCEx_PLLSAI1_Config+0x86>
 800a480:	2b03      	cmp	r3, #3
 800a482:	d825      	bhi.n	800a4d0 <RCCEx_PLLSAI1_Config+0xa4>
 800a484:	2b01      	cmp	r3, #1
 800a486:	d002      	beq.n	800a48e <RCCEx_PLLSAI1_Config+0x62>
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d009      	beq.n	800a4a0 <RCCEx_PLLSAI1_Config+0x74>
 800a48c:	e020      	b.n	800a4d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a48e:	4b5f      	ldr	r3, [pc, #380]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d11d      	bne.n	800a4d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a49e:	e01a      	b.n	800a4d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a4a0:	4b5a      	ldr	r3, [pc, #360]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d116      	bne.n	800a4da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4b0:	e013      	b.n	800a4da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4b2:	4b56      	ldr	r3, [pc, #344]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10f      	bne.n	800a4de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4be:	4b53      	ldr	r3, [pc, #332]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4ce:	e006      	b.n	800a4de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d4:	e004      	b.n	800a4e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4d6:	bf00      	nop
 800a4d8:	e002      	b.n	800a4e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4da:	bf00      	nop
 800a4dc:	e000      	b.n	800a4e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4de:	bf00      	nop
    }

    if(status == HAL_OK)
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10d      	bne.n	800a502 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a4e6:	4b49      	ldr	r3, [pc, #292]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	4943      	ldr	r1, [pc, #268]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d17c      	bne.n	800a602 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a508:	4b40      	ldr	r3, [pc, #256]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a3f      	ldr	r2, [pc, #252]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a50e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a514:	f7fb fa62 	bl	80059dc <HAL_GetTick>
 800a518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a51a:	e009      	b.n	800a530 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a51c:	f7fb fa5e 	bl	80059dc <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d902      	bls.n	800a530 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	73fb      	strb	r3, [r7, #15]
        break;
 800a52e:	e005      	b.n	800a53c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a530:	4b36      	ldr	r3, [pc, #216]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1ef      	bne.n	800a51c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d15f      	bne.n	800a602 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d110      	bne.n	800a56a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a548:	4b30      	ldr	r3, [pc, #192]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6892      	ldr	r2, [r2, #8]
 800a558:	0211      	lsls	r1, r2, #8
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	68d2      	ldr	r2, [r2, #12]
 800a55e:	06d2      	lsls	r2, r2, #27
 800a560:	430a      	orrs	r2, r1
 800a562:	492a      	ldr	r1, [pc, #168]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a564:	4313      	orrs	r3, r2
 800a566:	610b      	str	r3, [r1, #16]
 800a568:	e027      	b.n	800a5ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d112      	bne.n	800a596 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a570:	4b26      	ldr	r3, [pc, #152]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6892      	ldr	r2, [r2, #8]
 800a580:	0211      	lsls	r1, r2, #8
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6912      	ldr	r2, [r2, #16]
 800a586:	0852      	lsrs	r2, r2, #1
 800a588:	3a01      	subs	r2, #1
 800a58a:	0552      	lsls	r2, r2, #21
 800a58c:	430a      	orrs	r2, r1
 800a58e:	491f      	ldr	r1, [pc, #124]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a590:	4313      	orrs	r3, r2
 800a592:	610b      	str	r3, [r1, #16]
 800a594:	e011      	b.n	800a5ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a59e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6892      	ldr	r2, [r2, #8]
 800a5a6:	0211      	lsls	r1, r2, #8
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6952      	ldr	r2, [r2, #20]
 800a5ac:	0852      	lsrs	r2, r2, #1
 800a5ae:	3a01      	subs	r2, #1
 800a5b0:	0652      	lsls	r2, r2, #25
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	4915      	ldr	r1, [pc, #84]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5ba:	4b14      	ldr	r3, [pc, #80]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a13      	ldr	r2, [pc, #76]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c6:	f7fb fa09 	bl	80059dc <HAL_GetTick>
 800a5ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5cc:	e009      	b.n	800a5e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5ce:	f7fb fa05 	bl	80059dc <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d902      	bls.n	800a5e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	73fb      	strb	r3, [r7, #15]
          break;
 800a5e0:	e005      	b.n	800a5ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5e2:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0ef      	beq.n	800a5ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a5f4:	4b05      	ldr	r3, [pc, #20]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	4903      	ldr	r1, [pc, #12]	; (800a60c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40021000 	.word	0x40021000

0800a610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a61e:	4b69      	ldr	r3, [pc, #420]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d018      	beq.n	800a65c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a62a:	4b66      	ldr	r3, [pc, #408]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f003 0203 	and.w	r2, r3, #3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d10d      	bne.n	800a656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
       ||
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a642:	4b60      	ldr	r3, [pc, #384]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	091b      	lsrs	r3, r3, #4
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
       ||
 800a652:	429a      	cmp	r2, r3
 800a654:	d047      	beq.n	800a6e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	73fb      	strb	r3, [r7, #15]
 800a65a:	e044      	b.n	800a6e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d018      	beq.n	800a696 <RCCEx_PLLSAI2_Config+0x86>
 800a664:	2b03      	cmp	r3, #3
 800a666:	d825      	bhi.n	800a6b4 <RCCEx_PLLSAI2_Config+0xa4>
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d002      	beq.n	800a672 <RCCEx_PLLSAI2_Config+0x62>
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d009      	beq.n	800a684 <RCCEx_PLLSAI2_Config+0x74>
 800a670:	e020      	b.n	800a6b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a672:	4b54      	ldr	r3, [pc, #336]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d11d      	bne.n	800a6ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a682:	e01a      	b.n	800a6ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a684:	4b4f      	ldr	r3, [pc, #316]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d116      	bne.n	800a6be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a694:	e013      	b.n	800a6be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a696:	4b4b      	ldr	r3, [pc, #300]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10f      	bne.n	800a6c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6a2:	4b48      	ldr	r3, [pc, #288]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d109      	bne.n	800a6c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6b2:	e006      	b.n	800a6c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b8:	e004      	b.n	800a6c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6ba:	bf00      	nop
 800a6bc:	e002      	b.n	800a6c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6be:	bf00      	nop
 800a6c0:	e000      	b.n	800a6c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6c2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10d      	bne.n	800a6e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6ca:	4b3e      	ldr	r3, [pc, #248]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6819      	ldr	r1, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	4938      	ldr	r1, [pc, #224]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d166      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a6ec:	4b35      	ldr	r3, [pc, #212]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a34      	ldr	r2, [pc, #208]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f8:	f7fb f970 	bl	80059dc <HAL_GetTick>
 800a6fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a6fe:	e009      	b.n	800a714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a700:	f7fb f96c 	bl	80059dc <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d902      	bls.n	800a714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	73fb      	strb	r3, [r7, #15]
        break;
 800a712:	e005      	b.n	800a720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a714:	4b2b      	ldr	r3, [pc, #172]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ef      	bne.n	800a700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d149      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d110      	bne.n	800a74e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a72c:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a734:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	6892      	ldr	r2, [r2, #8]
 800a73c:	0211      	lsls	r1, r2, #8
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68d2      	ldr	r2, [r2, #12]
 800a742:	06d2      	lsls	r2, r2, #27
 800a744:	430a      	orrs	r2, r1
 800a746:	491f      	ldr	r1, [pc, #124]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	614b      	str	r3, [r1, #20]
 800a74c:	e011      	b.n	800a772 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6892      	ldr	r2, [r2, #8]
 800a75e:	0211      	lsls	r1, r2, #8
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6912      	ldr	r2, [r2, #16]
 800a764:	0852      	lsrs	r2, r2, #1
 800a766:	3a01      	subs	r2, #1
 800a768:	0652      	lsls	r2, r2, #25
 800a76a:	430a      	orrs	r2, r1
 800a76c:	4915      	ldr	r1, [pc, #84]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a772:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a13      	ldr	r2, [pc, #76]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a77e:	f7fb f92d 	bl	80059dc <HAL_GetTick>
 800a782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a784:	e009      	b.n	800a79a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a786:	f7fb f929 	bl	80059dc <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d902      	bls.n	800a79a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	73fb      	strb	r3, [r7, #15]
          break;
 800a798:	e005      	b.n	800a7a6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a79a:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0ef      	beq.n	800a786 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7ae:	695a      	ldr	r2, [r3, #20]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	40021000 	.word	0x40021000

0800a7c8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b089      	sub	sp, #36	; 0x24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e4:	d10c      	bne.n	800a800 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a7e6:	4b77      	ldr	r3, [pc, #476]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a7f0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a7f8:	d112      	bne.n	800a820 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a7fa:	4b73      	ldr	r3, [pc, #460]	; (800a9c8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e00f      	b.n	800a820 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a806:	d10b      	bne.n	800a820 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a808:	4b6e      	ldr	r3, [pc, #440]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800a812:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a81a:	d101      	bne.n	800a820 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a81c:	4b6a      	ldr	r3, [pc, #424]	; (800a9c8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800a81e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 80c6 	bne.w	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a832:	d003      	beq.n	800a83c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a83a:	d13b      	bne.n	800a8b4 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a83c:	4b61      	ldr	r3, [pc, #388]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a848:	f040 80b3 	bne.w	800a9b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800a84c:	4b5d      	ldr	r3, [pc, #372]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 80ac 	beq.w	800a9b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a85a:	4b5a      	ldr	r3, [pc, #360]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	091b      	lsrs	r3, r3, #4
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	3301      	adds	r3, #1
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a86e:	4b55      	ldr	r3, [pc, #340]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	0a1b      	lsrs	r3, r3, #8
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a878:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a87a:	4b52      	ldr	r3, [pc, #328]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	0edb      	lsrs	r3, r3, #27
 800a880:	f003 031f 	and.w	r3, r3, #31
 800a884:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a88c:	4b4d      	ldr	r3, [pc, #308]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800a898:	2311      	movs	r3, #17
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e001      	b.n	800a8a2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800a89e:	2307      	movs	r3, #7
 800a8a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	fb03 f202 	mul.w	r2, r3, r2
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a8b2:	e07e      	b.n	800a9b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d139      	bne.n	800a92e <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a8ba:	4b42      	ldr	r3, [pc, #264]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c6:	d175      	bne.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800a8c8:	4b3e      	ldr	r3, [pc, #248]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d06f      	beq.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a8d4:	4b3b      	ldr	r3, [pc, #236]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	091b      	lsrs	r3, r3, #4
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	3301      	adds	r3, #1
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a8e8:	4b36      	ldr	r3, [pc, #216]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a8f4:	4b33      	ldr	r3, [pc, #204]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	0edb      	lsrs	r3, r3, #27
 800a8fa:	f003 031f 	and.w	r3, r3, #31
 800a8fe:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a906:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800a912:	2311      	movs	r3, #17
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	e001      	b.n	800a91c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800a918:	2307      	movs	r3, #7
 800a91a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	fb03 f202 	mul.w	r2, r3, r2
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	61fb      	str	r3, [r7, #28]
 800a92c:	e042      	b.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a934:	d003      	beq.n	800a93e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a93c:	d13a      	bne.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a93e:	4b21      	ldr	r3, [pc, #132]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a94a:	d133      	bne.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800a94c:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d02d      	beq.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	091b      	lsrs	r3, r3, #4
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	3301      	adds	r3, #1
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a96c:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	0a1b      	lsrs	r3, r3, #8
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a978:	4b12      	ldr	r3, [pc, #72]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	0edb      	lsrs	r3, r3, #27
 800a97e:	f003 031f 	and.w	r3, r3, #31
 800a982:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10a      	bne.n	800a9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800a996:	2311      	movs	r3, #17
 800a998:	617b      	str	r3, [r7, #20]
 800a99a:	e001      	b.n	800a9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800a99c:	2307      	movs	r3, #7
 800a99e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	fb03 f202 	mul.w	r2, r3, r2
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e000      	b.n	800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a9b2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3724      	adds	r7, #36	; 0x24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40021000 	.word	0x40021000
 800a9c8:	001fff68 	.word	0x001fff68

0800a9cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e022      	b.n	800aa24 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fa fc91 	bl	8005318 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2203      	movs	r2, #3
 800a9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f814 	bl	800aa2c <HAL_SD_InitCard>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e00a      	b.n	800aa24 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa2c:	b5b0      	push	{r4, r5, r7, lr}
 800aa2e:	b08e      	sub	sp, #56	; 0x38
 800aa30:	af04      	add	r7, sp, #16
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800aa48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800aa4c:	f7fe ff36 	bl	80098bc <HAL_RCCEx_GetPeriphCLKFreq>
 800aa50:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d109      	bne.n	800aa6c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e07b      	b.n	800ab64 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	09db      	lsrs	r3, r3, #7
 800aa70:	4a3e      	ldr	r2, [pc, #248]	; (800ab6c <HAL_SD_InitCard+0x140>)
 800aa72:	fba2 2303 	umull	r2, r3, r2, r3
 800aa76:	091b      	lsrs	r3, r3, #4
 800aa78:	3b02      	subs	r3, #2
 800aa7a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681d      	ldr	r5, [r3, #0]
 800aa80:	466c      	mov	r4, sp
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa8e:	f107 0308 	add.w	r3, r7, #8
 800aa92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa94:	4628      	mov	r0, r5
 800aa96:	f002 fe4f 	bl	800d738 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aaa8:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f002 fe8d 	bl	800d7ce <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aac2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	3302      	adds	r3, #2
 800aac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <HAL_SD_InitCard+0x144>)
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad8:	3301      	adds	r3, #1
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fa ff8a 	bl	80059f4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f915 	bl	800bd10 <SD_PowerON>
 800aae6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e02e      	b.n	800ab64 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 f834 	bl	800bb74 <SD_InitCard>
 800ab0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e01b      	b.n	800ab64 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 fedd 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800ab3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00f      	beq.n	800ab62 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a0b      	ldr	r2, [pc, #44]	; (800ab74 <HAL_SD_InitCard+0x148>)
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3728      	adds	r7, #40	; 0x28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab6c:	014f8b59 	.word	0x014f8b59
 800ab70:	00012110 	.word	0x00012110
 800ab74:	004005ff 	.word	0x004005ff

0800ab78 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b092      	sub	sp, #72	; 0x48
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab86:	f7fa ff29 	bl	80059dc <HAL_GetTick>
 800ab8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d107      	bne.n	800abaa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e1bd      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	f040 81b0 	bne.w	800af18 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800abbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	441a      	add	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d907      	bls.n	800abdc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e1a4      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2203      	movs	r2, #3
 800abe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2200      	movs	r2, #0
 800abea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d002      	beq.n	800abfa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800abf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf6:	025b      	lsls	r3, r3, #9
 800abf8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abfa:	f04f 33ff 	mov.w	r3, #4294967295
 800abfe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	025b      	lsls	r3, r3, #9
 800ac04:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ac06:	2390      	movs	r3, #144	; 0x90
 800ac08:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800ac12:	2301      	movs	r3, #1
 800ac14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f107 0214 	add.w	r2, r7, #20
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f002 fe3b 	bl	800d89c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d90a      	bls.n	800ac42 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f002 fe9f 	bl	800d97c <SDMMC_CmdReadMultiBlock>
 800ac3e:	6478      	str	r0, [r7, #68]	; 0x44
 800ac40:	e009      	b.n	800ac56 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2201      	movs	r2, #1
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 fe72 	bl	800d938 <SDMMC_CmdReadSingleBlock>
 800ac54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d012      	beq.n	800ac82 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a7a      	ldr	r2, [pc, #488]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e151      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac86:	e061      	b.n	800ad4c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03c      	beq.n	800ad10 <HAL_SD_ReadBlocks+0x198>
 800ac96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d039      	beq.n	800ad10 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	643b      	str	r3, [r7, #64]	; 0x40
 800aca0:	e033      	b.n	800ad0a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 fd73 	bl	800d792 <SDMMC_ReadFIFO>
 800acac:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	3301      	adds	r3, #1
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800acbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbe:	3b01      	subs	r3, #1
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acce:	3301      	adds	r3, #1
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800acd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd4:	3b01      	subs	r3, #1
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace4:	3301      	adds	r3, #1
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	3b01      	subs	r3, #1
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	0e1b      	lsrs	r3, r3, #24
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800acf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfa:	3301      	adds	r3, #1
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800acfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad00:	3b01      	subs	r3, #1
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800ad04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad06:	3301      	adds	r3, #1
 800ad08:	643b      	str	r3, [r7, #64]	; 0x40
 800ad0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	d9c8      	bls.n	800aca2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ad10:	f7fa fe64 	bl	80059dc <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d902      	bls.n	800ad26 <HAL_SD_ReadBlocks+0x1ae>
 800ad20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d112      	bne.n	800ad4c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a48      	ldr	r2, [pc, #288]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800ad2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e0ec      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d096      	beq.n	800ac88 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d022      	beq.n	800adae <HAL_SD_ReadBlocks+0x236>
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d91f      	bls.n	800adae <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d01b      	beq.n	800adae <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 fe64 	bl	800da48 <SDMMC_CmdStopTransfer>
 800ad80:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d012      	beq.n	800adae <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a2f      	ldr	r2, [pc, #188]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad96:	431a      	orrs	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e0bb      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d012      	beq.n	800ade2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a22      	ldr	r2, [pc, #136]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc8:	f043 0208 	orr.w	r2, r3, #8
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e0a1      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade8:	f003 0302 	and.w	r3, r3, #2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a15      	ldr	r2, [pc, #84]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	f043 0202 	orr.w	r2, r3, #2
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e087      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d064      	beq.n	800aeee <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a08      	ldr	r2, [pc, #32]	; (800ae4c <HAL_SD_ReadBlocks+0x2d4>)
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	f043 0220 	orr.w	r2, r3, #32
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e06d      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
 800ae4a:	bf00      	nop
 800ae4c:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 fc9c 	bl	800d792 <SDMMC_ReadFIFO>
 800ae5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae66:	3301      	adds	r3, #1
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ae6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae82:	3b01      	subs	r3, #1
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	0c1b      	lsrs	r3, r3, #16
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ae90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae92:	3301      	adds	r3, #1
 800ae94:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ae96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	0e1b      	lsrs	r3, r3, #24
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea8:	3301      	adds	r3, #1
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800aeb2:	f7fa fd93 	bl	80059dc <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d902      	bls.n	800aec8 <HAL_SD_ReadBlocks+0x350>
 800aec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d112      	bne.n	800aeee <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a18      	ldr	r2, [pc, #96]	; (800af30 <HAL_SD_ReadBlocks+0x3b8>)
 800aece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e01b      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <HAL_SD_ReadBlocks+0x38a>
 800aefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1a6      	bne.n	800ae50 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f240 523a 	movw	r2, #1338	; 0x53a
 800af0a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	e006      	b.n	800af26 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
  }
}
 800af26:	4618      	mov	r0, r3
 800af28:	3748      	adds	r7, #72	; 0x48
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	004005ff 	.word	0x004005ff

0800af34 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b092      	sub	sp, #72	; 0x48
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af42:	f7fa fd4b 	bl	80059dc <HAL_GetTick>
 800af46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e165      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b01      	cmp	r3, #1
 800af70:	f040 8158 	bne.w	800b224 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	441a      	add	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af84:	429a      	cmp	r2, r3
 800af86:	d907      	bls.n	800af98 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e14c      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2203      	movs	r2, #3
 800af9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	2b01      	cmp	r3, #1
 800afae:	d002      	beq.n	800afb6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	025b      	lsls	r3, r3, #9
 800afb4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	025b      	lsls	r3, r3, #9
 800afc0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800afc2:	2390      	movs	r3, #144	; 0x90
 800afc4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800afc6:	2300      	movs	r3, #0
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afca:	2300      	movs	r3, #0
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800afce:	2301      	movs	r3, #1
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f107 0218 	add.w	r2, r7, #24
 800afda:	4611      	mov	r1, r2
 800afdc:	4618      	mov	r0, r3
 800afde:	f002 fc5d 	bl	800d89c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d90a      	bls.n	800affe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aff4:	4618      	mov	r0, r3
 800aff6:	f002 fd05 	bl	800da04 <SDMMC_CmdWriteMultiBlock>
 800affa:	6478      	str	r0, [r7, #68]	; 0x44
 800affc:	e009      	b.n	800b012 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2210      	movs	r2, #16
 800b002:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b00a:	4618      	mov	r0, r3
 800b00c:	f002 fcd8 	bl	800d9c0 <SDMMC_CmdWriteSingleBlock>
 800b010:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b014:	2b00      	cmp	r3, #0
 800b016:	d012      	beq.n	800b03e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a87      	ldr	r2, [pc, #540]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b026:	431a      	orrs	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e0f9      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b042:	e065      	b.n	800b110 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d040      	beq.n	800b0d4 <HAL_SD_WriteBlocks+0x1a0>
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d03d      	beq.n	800b0d4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b058:	2300      	movs	r3, #0
 800b05a:	643b      	str	r3, [r7, #64]	; 0x40
 800b05c:	e037      	b.n	800b0ce <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b066:	3301      	adds	r3, #1
 800b068:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	3b01      	subs	r3, #1
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	021a      	lsls	r2, r3, #8
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07e:	3301      	adds	r3, #1
 800b080:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b084:	3b01      	subs	r3, #1
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	041a      	lsls	r2, r3, #16
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	4313      	orrs	r3, r2
 800b092:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b096:	3301      	adds	r3, #1
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09c:	3b01      	subs	r3, #1
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	061a      	lsls	r2, r3, #24
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f107 0214 	add.w	r2, r7, #20
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f002 fb72 	bl	800d7ac <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d9c4      	bls.n	800b05e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b0d4:	f7fa fc82 	bl	80059dc <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d902      	bls.n	800b0ea <HAL_SD_WriteBlocks+0x1b6>
 800b0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d112      	bne.n	800b110 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a53      	ldr	r2, [pc, #332]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b0f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e090      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b116:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d092      	beq.n	800b044 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d022      	beq.n	800b172 <HAL_SD_WriteBlocks+0x23e>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d91f      	bls.n	800b172 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b136:	2b03      	cmp	r3, #3
 800b138:	d01b      	beq.n	800b172 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 fc82 	bl	800da48 <SDMMC_CmdStopTransfer>
 800b144:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d012      	beq.n	800b172 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a3a      	ldr	r2, [pc, #232]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b152:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15a:	431a      	orrs	r2, r3
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e05f      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d012      	beq.n	800b1a6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a2d      	ldr	r2, [pc, #180]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b186:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18c:	f043 0208 	orr.w	r2, r3, #8
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e045      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d012      	beq.n	800b1da <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a20      	ldr	r2, [pc, #128]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	f043 0202 	orr.w	r2, r3, #2
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e02b      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d012      	beq.n	800b20e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a13      	ldr	r2, [pc, #76]	; (800b23c <HAL_SD_WriteBlocks+0x308>)
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	f043 0210 	orr.w	r2, r3, #16
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e011      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f240 523a 	movw	r2, #1338	; 0x53a
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	e006      	b.n	800b232 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
  }
}
 800b232:	4618      	mov	r0, r3
 800b234:	3748      	adds	r7, #72	; 0x48
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	004005ff 	.word	0x004005ff

0800b240 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d008      	beq.n	800b26e <HAL_SD_IRQHandler+0x2e>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 ff68 	bl	800c13c <SD_Read_IT>
 800b26c:	e155      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 808f 	beq.w	800b39c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b286:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b296:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b29a:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0201 	bic.w	r2, r2, #1
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f003 0308 	and.w	r3, r3, #8
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d039      	beq.n	800b32a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f003 0302 	and.w	r3, r3, #2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <HAL_SD_IRQHandler+0x8a>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f003 0320 	and.w	r3, r3, #32
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d011      	beq.n	800b2ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f002 fbba 	bl	800da48 <SDMMC_CmdStopTransfer>
 800b2d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d008      	beq.n	800b2ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f91f 	bl	800b52c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d104      	bne.n	800b31a <HAL_SD_IRQHandler+0xda>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f003 0302 	and.w	r3, r3, #2
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f002 ff9e 	bl	800e25c <HAL_SD_RxCpltCallback>
 800b320:	e0fb      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f002 ff90 	bl	800e248 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800b328:	e0f7      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 80f2 	beq.w	800b51a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d011      	beq.n	800b364 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f002 fb7f 	bl	800da48 <SDMMC_CmdStopTransfer>
 800b34a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	431a      	orrs	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f8e4 	bl	800b52c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f040 80d5 	bne.w	800b51a <HAL_SD_IRQHandler+0x2da>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 80cf 	bne.w	800b51a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f022 0208 	bic.w	r2, r2, #8
 800b38a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f002 ff57 	bl	800e248 <HAL_SD_TxCpltCallback>
}
 800b39a:	e0be      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <HAL_SD_IRQHandler+0x17c>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 ff12 	bl	800c1de <SD_Write_IT>
 800b3ba:	e0ae      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 80a7 	beq.w	800b51a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3de:	f043 0202 	orr.w	r2, r3, #2
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ec:	f003 0308 	and.w	r3, r3, #8
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	f043 0208 	orr.w	r2, r3, #8
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b406:	f003 0320 	and.w	r3, r3, #32
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	f043 0220 	orr.w	r2, r3, #32
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b420:	f003 0310 	and.w	r3, r3, #16
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	f043 0210 	orr.w	r2, r3, #16
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f240 523a 	movw	r2, #1338	; 0x53a
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b44c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4618      	mov	r0, r3
 800b454:	f002 faf8 	bl	800da48 <SDMMC_CmdStopTransfer>
 800b458:	4602      	mov	r2, r0
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f855 	bl	800b52c <HAL_SD_ErrorCallback>
}
 800b482:	e04a      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d045      	beq.n	800b51a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b00      	cmp	r3, #0
 800b496:	d104      	bne.n	800b4a2 <HAL_SD_IRQHandler+0x262>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f003 0320 	and.w	r3, r3, #32
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d011      	beq.n	800b4c6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a6:	4a1f      	ldr	r2, [pc, #124]	; (800b524 <HAL_SD_IRQHandler+0x2e4>)
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fb f9c4 	bl	800683c <HAL_DMA_Abort_IT>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d02f      	beq.n	800b51a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 faea 	bl	800ba98 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b4c4:	e029      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <HAL_SD_IRQHandler+0x29a>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f003 0302 	and.w	r3, r3, #2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d011      	beq.n	800b4fe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	4a12      	ldr	r2, [pc, #72]	; (800b528 <HAL_SD_IRQHandler+0x2e8>)
 800b4e0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fb f9a8 	bl	800683c <HAL_DMA_Abort_IT>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d013      	beq.n	800b51a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 fb05 	bl	800bb06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b4fc:	e00d      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f002 fe8e 	bl	800e234 <HAL_SD_AbortCallback>
}
 800b518:	e7ff      	b.n	800b51a <HAL_SD_IRQHandler+0x2da>
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0800ba99 	.word	0x0800ba99
 800b528:	0800bb07 	.word	0x0800bb07

0800b52c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b54e:	0f9b      	lsrs	r3, r3, #30
 800b550:	b2da      	uxtb	r2, r3
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b55a:	0e9b      	lsrs	r3, r3, #26
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	b2da      	uxtb	r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b56c:	0e1b      	lsrs	r3, r3, #24
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	f003 0303 	and.w	r3, r3, #3
 800b574:	b2da      	uxtb	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	b2da      	uxtb	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b58a:	0a1b      	lsrs	r3, r3, #8
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b596:	b2da      	uxtb	r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a0:	0d1b      	lsrs	r3, r3, #20
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5ac:	0c1b      	lsrs	r3, r3, #16
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 030f 	and.w	r3, r3, #15
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5be:	0bdb      	lsrs	r3, r3, #15
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5d0:	0b9b      	lsrs	r3, r3, #14
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5e2:	0b5b      	lsrs	r3, r3, #13
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5f4:	0b1b      	lsrs	r3, r3, #12
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2200      	movs	r2, #0
 800b606:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d163      	bne.n	800b6d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b614:	009a      	lsls	r2, r3, #2
 800b616:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b61a:	4013      	ands	r3, r2
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b620:	0f92      	lsrs	r2, r2, #30
 800b622:	431a      	orrs	r2, r3
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b62c:	0edb      	lsrs	r3, r3, #27
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	f003 0307 	and.w	r3, r3, #7
 800b634:	b2da      	uxtb	r2, r3
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63e:	0e1b      	lsrs	r3, r3, #24
 800b640:	b2db      	uxtb	r3, r3
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	b2da      	uxtb	r2, r3
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b650:	0d5b      	lsrs	r3, r3, #21
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 0307 	and.w	r3, r3, #7
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b662:	0c9b      	lsrs	r3, r3, #18
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b674:	0bdb      	lsrs	r3, r3, #15
 800b676:	b2db      	uxtb	r3, r3
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	7e1b      	ldrb	r3, [r3, #24]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	3302      	adds	r3, #2
 800b698:	2201      	movs	r2, #1
 800b69a:	fa02 f303 	lsl.w	r3, r2, r3
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b6a2:	fb03 f202 	mul.w	r2, r3, r2
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	7a1b      	ldrb	r3, [r3, #8]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	409a      	lsls	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b6c4:	0a52      	lsrs	r2, r2, #9
 800b6c6:	fb03 f202 	mul.w	r2, r3, r2
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b6d6:	e031      	b.n	800b73c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d11d      	bne.n	800b71c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6e4:	041b      	lsls	r3, r3, #16
 800b6e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ee:	0c1b      	lsrs	r3, r3, #16
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	029a      	lsls	r2, r3, #10
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b710:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	661a      	str	r2, [r3, #96]	; 0x60
 800b71a:	e00f      	b.n	800b73c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a58      	ldr	r2, [pc, #352]	; (800b884 <HAL_SD_GetCardCSD+0x344>)
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	e09d      	b.n	800b878 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b740:	0b9b      	lsrs	r3, r3, #14
 800b742:	b2db      	uxtb	r3, r3
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b752:	09db      	lsrs	r3, r3, #7
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b774:	0fdb      	lsrs	r3, r3, #31
 800b776:	b2da      	uxtb	r2, r3
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b780:	0f5b      	lsrs	r3, r3, #29
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 0303 	and.w	r3, r3, #3
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b792:	0e9b      	lsrs	r3, r3, #26
 800b794:	b2db      	uxtb	r3, r3
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a4:	0d9b      	lsrs	r3, r3, #22
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f003 030f 	and.w	r3, r3, #15
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b6:	0d5b      	lsrs	r3, r3, #21
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d2:	0c1b      	lsrs	r3, r3, #16
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e6:	0bdb      	lsrs	r3, r3, #15
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	0b9b      	lsrs	r3, r3, #14
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	b2da      	uxtb	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	0b5b      	lsrs	r3, r3, #13
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	b2da      	uxtb	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b822:	0b1b      	lsrs	r3, r3, #12
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b836:	0a9b      	lsrs	r3, r3, #10
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84a:	0a1b      	lsrs	r3, r3, #8
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	b2da      	uxtb	r2, r3
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b85e:	085b      	lsrs	r3, r3, #1
 800b860:	b2db      	uxtb	r3, r3
 800b862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b866:	b2da      	uxtb	r2, r3
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	004005ff 	.word	0x004005ff

0800b888 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b8e0:	b5b0      	push	{r4, r5, r7, lr}
 800b8e2:	b090      	sub	sp, #64	; 0x40
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d02e      	beq.n	800b95e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b906:	d106      	bne.n	800b916 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
 800b914:	e029      	b.n	800b96a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b91c:	d10a      	bne.n	800b934 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 faac 	bl	800be7c <SD_WideBus_Enable>
 800b924:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	431a      	orrs	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	639a      	str	r2, [r3, #56]	; 0x38
 800b932:	e01a      	b.n	800b96a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fae9 	bl	800bf12 <SD_WideBus_Disable>
 800b940:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	431a      	orrs	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
 800b94e:	e00c      	b.n	800b96a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
 800b95c:	e005      	b.n	800b96a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b962:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d007      	beq.n	800b982 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a35      	ldr	r2, [pc, #212]	; (800ba4c <HAL_SD_ConfigWideBusOperation+0x16c>)
 800b978:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b980:	e042      	b.n	800ba08 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b982:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b986:	f7fd ff99 	bl	80098bc <HAL_RCCEx_GetPeriphCLKFreq>
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d031      	beq.n	800b9f6 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ba:	4a25      	ldr	r2, [pc, #148]	; (800ba50 <HAL_SD_ConfigWideBusOperation+0x170>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d907      	bls.n	800b9d0 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	4a24      	ldr	r2, [pc, #144]	; (800ba54 <HAL_SD_ConfigWideBusOperation+0x174>)
 800b9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c8:	0ddb      	lsrs	r3, r3, #23
 800b9ca:	3b02      	subs	r3, #2
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	e002      	b.n	800b9d6 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	466c      	mov	r4, sp
 800b9dc:	f107 0318 	add.w	r3, r7, #24
 800b9e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b9e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b9e8:	f107 030c 	add.w	r3, r7, #12
 800b9ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f001 fea2 	bl	800d738 <SDMMC_Init>
 800b9f4:	e008      	b.n	800ba08 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba10:	4618      	mov	r0, r3
 800ba12:	f001 ff6f 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800ba16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <HAL_SD_ConfigWideBusOperation+0x16c>)
 800ba24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ba40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3730      	adds	r7, #48	; 0x30
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ba4c:	004005ff 	.word	0x004005ff
 800ba50:	017d7840 	.word	0x017d7840
 800ba54:	55e63b89 	.word	0x55e63b89

0800ba58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ba64:	f107 030c 	add.w	r3, r7, #12
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f9de 	bl	800be2c <SD_SendStatus>
 800ba70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	0a5b      	lsrs	r3, r3, #9
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ba8e:	693b      	ldr	r3, [r7, #16]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f240 523a 	movw	r2, #1338	; 0x53a
 800baae:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff ffd1 	bl	800ba58 <HAL_SD_GetCardState>
 800bab6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d002      	beq.n	800bad2 <SD_DMATxAbort+0x3a>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d10a      	bne.n	800bae8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 ffb6 	bl	800da48 <SDMMC_CmdStopTransfer>
 800badc:	4602      	mov	r2, r0
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	431a      	orrs	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baec:	2b00      	cmp	r3, #0
 800baee:	d103      	bne.n	800baf8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f002 fb9f 	bl	800e234 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800baf6:	e002      	b.n	800bafe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7ff fd17 	bl	800b52c <HAL_SD_ErrorCallback>
}
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff ff9a 	bl	800ba58 <HAL_SD_GetCardState>
 800bb24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b06      	cmp	r3, #6
 800bb38:	d002      	beq.n	800bb40 <SD_DMARxAbort+0x3a>
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b05      	cmp	r3, #5
 800bb3e:	d10a      	bne.n	800bb56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 ff7f 	bl	800da48 <SDMMC_CmdStopTransfer>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb50:	431a      	orrs	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f002 fb68 	bl	800e234 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bb64:	e002      	b.n	800bb6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff fce0 	bl	800b52c <HAL_SD_ErrorCallback>
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb74:	b5b0      	push	{r4, r5, r7, lr}
 800bb76:	b094      	sub	sp, #80	; 0x50
 800bb78:	af04      	add	r7, sp, #16
 800bb7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 fe31 	bl	800d7ec <SDMMC_GetPowerState>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d102      	bne.n	800bb96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bb94:	e0b8      	b.n	800bd08 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d02f      	beq.n	800bbfe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f002 f85a 	bl	800dc5c <SDMMC_CmdSendCID>
 800bba8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <SD_InitCard+0x40>
    {
      return errorstate;
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb2:	e0a9      	b.n	800bd08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 fe5b 	bl	800d876 <SDMMC_GetResponse>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2104      	movs	r1, #4
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 fe52 	bl	800d876 <SDMMC_GetResponse>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2108      	movs	r1, #8
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f001 fe49 	bl	800d876 <SDMMC_GetResponse>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	210c      	movs	r1, #12
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 fe40 	bl	800d876 <SDMMC_GetResponse>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d00d      	beq.n	800bc22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f107 020e 	add.w	r2, r7, #14
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f002 f860 	bl	800dcd6 <SDMMC_CmdSetRelAdd>
 800bc16:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <SD_InitCard+0xae>
    {
      return errorstate;
 800bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc20:	e072      	b.n	800bd08 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d036      	beq.n	800bc98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bc2a:	89fb      	ldrh	r3, [r7, #14]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f002 f82a 	bl	800dc98 <SDMMC_CmdSendCSD>
 800bc44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	e05b      	b.n	800bd08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2100      	movs	r1, #0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 fe0d 	bl	800d876 <SDMMC_GetResponse>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2104      	movs	r1, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f001 fe04 	bl	800d876 <SDMMC_GetResponse>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2108      	movs	r1, #8
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f001 fdfb 	bl	800d876 <SDMMC_GetResponse>
 800bc80:	4602      	mov	r2, r0
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	210c      	movs	r1, #12
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 fdf2 	bl	800d876 <SDMMC_GetResponse>
 800bc92:	4602      	mov	r2, r0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2104      	movs	r1, #4
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 fde9 	bl	800d876 <SDMMC_GetResponse>
 800bca4:	4603      	mov	r3, r0
 800bca6:	0d1a      	lsrs	r2, r3, #20
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bcac:	f107 0310 	add.w	r3, r7, #16
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fc44 	bl	800b540 <HAL_SD_GetCardCSD>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d002      	beq.n	800bcc4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bcc2:	e021      	b.n	800bd08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6819      	ldr	r1, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bccc:	041b      	lsls	r3, r3, #16
 800bcce:	2200      	movs	r2, #0
 800bcd0:	461c      	mov	r4, r3
 800bcd2:	4615      	mov	r5, r2
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	462b      	mov	r3, r5
 800bcd8:	4608      	mov	r0, r1
 800bcda:	f001 fed7 	bl	800da8c <SDMMC_CmdSelDesel>
 800bcde:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <SD_InitCard+0x176>
  {
    return errorstate;
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	e00e      	b.n	800bd08 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	466c      	mov	r4, sp
 800bcf2:	f103 0210 	add.w	r2, r3, #16
 800bcf6:	ca07      	ldmia	r2, {r0, r1, r2}
 800bcf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd00:	4628      	mov	r0, r5
 800bd02:	f001 fd19 	bl	800d738 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3740      	adds	r7, #64	; 0x40
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	2300      	movs	r3, #0
 800bd22:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 fed2 	bl	800dad2 <SDMMC_CmdGoIdleState>
 800bd2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <SD_PowerON+0x2a>
  {
    return errorstate;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	e072      	b.n	800be20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 fee5 	bl	800db0e <SDMMC_CmdOperCond>
 800bd44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00d      	beq.n	800bd68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 febb 	bl	800dad2 <SDMMC_CmdGoIdleState>
 800bd5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <SD_PowerON+0x5e>
    {
      return errorstate;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	e05b      	b.n	800be20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d137      	bne.n	800bde6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 fee5 	bl	800db4c <SDMMC_CmdAppCommand>
 800bd82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d02d      	beq.n	800bde6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd8e:	e047      	b.n	800be20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2100      	movs	r1, #0
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 fed8 	bl	800db4c <SDMMC_CmdAppCommand>
 800bd9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <SD_PowerON+0x98>
    {
      return errorstate;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	e03b      	b.n	800be20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	491e      	ldr	r1, [pc, #120]	; (800be28 <SD_PowerON+0x118>)
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 feee 	bl	800db90 <SDMMC_CmdAppOperCommand>
 800bdb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bdc0:	e02e      	b.n	800be20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f001 fd54 	bl	800d876 <SDMMC_GetResponse>
 800bdce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	0fdb      	lsrs	r3, r3, #31
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <SD_PowerON+0xcc>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <SD_PowerON+0xce>
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]

    count++;
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3301      	adds	r3, #1
 800bde4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d802      	bhi.n	800bdf6 <SD_PowerON+0xe6>
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0cc      	beq.n	800bd90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d902      	bls.n	800be06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800be00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be04:	e00c      	b.n	800be20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	645a      	str	r2, [r3, #68]	; 0x44
 800be16:	e002      	b.n	800be1e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	c1100000 	.word	0xc1100000

0800be2c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800be3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be40:	e018      	b.n	800be74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be4a:	041b      	lsls	r3, r3, #16
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f001 ff62 	bl	800dd18 <SDMMC_CmdSendStatus>
 800be54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <SD_SendStatus+0x34>
  {
    return errorstate;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	e009      	b.n	800be74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2100      	movs	r1, #0
 800be66:	4618      	mov	r0, r3
 800be68:	f001 fd05 	bl	800d876 <SDMMC_GetResponse>
 800be6c:	4602      	mov	r2, r0
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800be84:	2300      	movs	r3, #0
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	2300      	movs	r3, #0
 800be8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f001 fcef 	bl	800d876 <SDMMC_GetResponse>
 800be98:	4603      	mov	r3, r0
 800be9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bea2:	d102      	bne.n	800beaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bea8:	e02f      	b.n	800bf0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f879 	bl	800bfa8 <SD_FindSCR>
 800beb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	e023      	b.n	800bf0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d01c      	beq.n	800bf06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed4:	041b      	lsls	r3, r3, #16
 800bed6:	4619      	mov	r1, r3
 800bed8:	4610      	mov	r0, r2
 800beda:	f001 fe37 	bl	800db4c <SDMMC_CmdAppCommand>
 800bede:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	e00f      	b.n	800bf0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2102      	movs	r1, #2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f001 fe70 	bl	800dbd6 <SDMMC_CmdBusWidth>
 800bef6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	e003      	b.n	800bf0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e001      	b.n	800bf0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b086      	sub	sp, #24
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2100      	movs	r1, #0
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f001 fca4 	bl	800d876 <SDMMC_GetResponse>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf38:	d102      	bne.n	800bf40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf3e:	e02f      	b.n	800bfa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bf40:	f107 030c 	add.w	r3, r7, #12
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f82e 	bl	800bfa8 <SD_FindSCR>
 800bf4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	e023      	b.n	800bfa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01c      	beq.n	800bf9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4610      	mov	r0, r2
 800bf70:	f001 fdec 	bl	800db4c <SDMMC_CmdAppCommand>
 800bf74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	e00f      	b.n	800bfa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2100      	movs	r1, #0
 800bf86:	4618      	mov	r0, r3
 800bf88:	f001 fe25 	bl	800dbd6 <SDMMC_CmdBusWidth>
 800bf8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d001      	beq.n	800bf98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	e003      	b.n	800bfa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e001      	b.n	800bfa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3718      	adds	r7, #24
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bfa8:	b590      	push	{r4, r7, lr}
 800bfaa:	b08f      	sub	sp, #60	; 0x3c
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bfb2:	f7f9 fd13 	bl	80059dc <HAL_GetTick>
 800bfb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60bb      	str	r3, [r7, #8]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2108      	movs	r1, #8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fc90 	bl	800d8f4 <SDMMC_CmdBlockLength>
 800bfd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	e0a9      	b.n	800c134 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe8:	041b      	lsls	r3, r3, #16
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f001 fdad 	bl	800db4c <SDMMC_CmdAppCommand>
 800bff2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <SD_FindSCR+0x56>
  {
    return errorstate;
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	e09a      	b.n	800c134 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bffe:	f04f 33ff 	mov.w	r3, #4294967295
 800c002:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c004:	2308      	movs	r3, #8
 800c006:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c008:	2330      	movs	r3, #48	; 0x30
 800c00a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c00c:	2302      	movs	r3, #2
 800c00e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c010:	2300      	movs	r3, #0
 800c012:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c014:	2301      	movs	r3, #1
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f107 0210 	add.w	r2, r7, #16
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fc3a 	bl	800d89c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f001 fdf4 	bl	800dc1a <SDMMC_CmdSendSCR>
 800c032:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	2b00      	cmp	r3, #0
 800c038:	d022      	beq.n	800c080 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	e07a      	b.n	800c134 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00e      	beq.n	800c06a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6819      	ldr	r1, [r3, #0]
 800c050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	f107 0208 	add.w	r2, r7, #8
 800c058:	18d4      	adds	r4, r2, r3
 800c05a:	4608      	mov	r0, r1
 800c05c:	f001 fb99 	bl	800d792 <SDMMC_ReadFIFO>
 800c060:	4603      	mov	r3, r0
 800c062:	6023      	str	r3, [r4, #0]
      index++;
 800c064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c066:	3301      	adds	r3, #1
 800c068:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c06a:	f7f9 fcb7 	bl	80059dc <HAL_GetTick>
 800c06e:	4602      	mov	r2, r0
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d102      	bne.n	800c080 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c07a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c07e:	e059      	b.n	800c134 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c086:	f240 432a 	movw	r3, #1066	; 0x42a
 800c08a:	4013      	ands	r3, r2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0d6      	beq.n	800c03e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c096:	f003 0308 	and.w	r3, r3, #8
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d005      	beq.n	800c0aa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2208      	movs	r2, #8
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c0a6:	2308      	movs	r3, #8
 800c0a8:	e044      	b.n	800c134 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b0:	f003 0302 	and.w	r3, r3, #2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e037      	b.n	800c134 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f003 0320 	and.w	r3, r3, #32
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d005      	beq.n	800c0de <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2220      	movs	r2, #32
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c0da:	2320      	movs	r3, #32
 800c0dc:	e02a      	b.n	800c134 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f240 523a 	movw	r2, #1338	; 0x53a
 800c0e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	061a      	lsls	r2, r3, #24
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	0a1b      	lsrs	r3, r3, #8
 800c0fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	0e1b      	lsrs	r3, r3, #24
 800c104:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	601a      	str	r2, [r3, #0]
    scr++;
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	3304      	adds	r3, #4
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	061a      	lsls	r2, r3, #24
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	021b      	lsls	r3, r3, #8
 800c118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c11c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	0a1b      	lsrs	r3, r3, #8
 800c122:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c126:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	0e1b      	lsrs	r3, r3, #24
 800c12c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	373c      	adds	r7, #60	; 0x3c
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd90      	pop	{r4, r7, pc}

0800c13c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d03f      	beq.n	800c1d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c156:	2300      	movs	r3, #0
 800c158:	617b      	str	r3, [r7, #20]
 800c15a:	e033      	b.n	800c1c4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fb16 	bl	800d792 <SDMMC_ReadFIFO>
 800c166:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3b01      	subs	r3, #1
 800c17a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	0a1b      	lsrs	r3, r3, #8
 800c180:	b2da      	uxtb	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3301      	adds	r3, #1
 800c18a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	3b01      	subs	r3, #1
 800c190:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	0c1b      	lsrs	r3, r3, #16
 800c196:	b2da      	uxtb	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	0e1b      	lsrs	r3, r3, #24
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b07      	cmp	r3, #7
 800c1c8:	d9c8      	bls.n	800c15c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c1d6:	bf00      	nop
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b086      	sub	sp, #24
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d043      	beq.n	800c280 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
 800c1fc:	e037      	b.n	800c26e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	021a      	lsls	r2, r3, #8
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	4313      	orrs	r3, r2
 800c21a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	3b01      	subs	r3, #1
 800c226:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	041a      	lsls	r2, r3, #16
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	4313      	orrs	r3, r2
 800c232:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3301      	adds	r3, #1
 800c238:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	061a      	lsls	r2, r3, #24
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	4313      	orrs	r3, r2
 800c24a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	3b01      	subs	r3, #1
 800c256:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f107 0208 	add.w	r2, r7, #8
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f001 faa2 	bl	800d7ac <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	3301      	adds	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b07      	cmp	r3, #7
 800c272:	d9c4      	bls.n	800c1fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c280:	bf00      	nop
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e038      	b.n	800c310 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7f9 f9ba 	bl	800562c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f001 f920 	bl	800d508 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	f001 f9a8 	bl	800d628 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6858      	ldr	r0, [r3, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	f001 f9ef 	bl	800d6c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	6892      	ldr	r2, [r2, #8]
 800c2f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	6892      	ldr	r2, [r2, #8]
 800c2fe:	f041 0101 	orr.w	r1, r1, #1
 800c302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e040      	b.n	800c3ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7f9 f888 	bl	8005450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2224      	movs	r2, #36	; 0x24
 800c344:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f022 0201 	bic.w	r2, r2, #1
 800c354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fbc2 	bl	800cae0 <UART_SetConfig>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e022      	b.n	800c3ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fe6e 	bl	800d050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f042 0201 	orr.w	r2, r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fef5 	bl	800d194 <UART_CheckIdleState>
 800c3aa:	4603      	mov	r3, r0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08a      	sub	sp, #40	; 0x28
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	f040 8082 	bne.w	800c4d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <HAL_UART_Transmit+0x26>
 800c3d4:	88fb      	ldrh	r3, [r7, #6]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e07a      	b.n	800c4d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d101      	bne.n	800c3ec <HAL_UART_Transmit+0x38>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e073      	b.n	800c4d4 <HAL_UART_Transmit+0x120>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2221      	movs	r2, #33	; 0x21
 800c400:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c402:	f7f9 faeb 	bl	80059dc <HAL_GetTick>
 800c406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	88fa      	ldrh	r2, [r7, #6]
 800c40c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	88fa      	ldrh	r2, [r7, #6]
 800c414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c420:	d108      	bne.n	800c434 <HAL_UART_Transmit+0x80>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d104      	bne.n	800c434 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	e003      	b.n	800c43c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c444:	e02d      	b.n	800c4a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2200      	movs	r2, #0
 800c44e:	2180      	movs	r1, #128	; 0x80
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 fee8 	bl	800d226 <UART_WaitOnFlagUntilTimeout>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e039      	b.n	800c4d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	881a      	ldrh	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c472:	b292      	uxth	r2, r2
 800c474:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	3302      	adds	r3, #2
 800c47a:	61bb      	str	r3, [r7, #24]
 800c47c:	e008      	b.n	800c490 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	b292      	uxth	r2, r2
 800c488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	3301      	adds	r3, #1
 800c48e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c496:	b29b      	uxth	r3, r3
 800c498:	3b01      	subs	r3, #1
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1cb      	bne.n	800c446 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2140      	movs	r1, #64	; 0x40
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f000 feb4 	bl	800d226 <UART_WaitOnFlagUntilTimeout>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	e005      	b.n	800c4d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e000      	b.n	800c4d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c4d2:	2302      	movs	r3, #2
  }
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3720      	adds	r7, #32
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b0ba      	sub	sp, #232	; 0xe8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c506:	f640 030f 	movw	r3, #2063	; 0x80f
 800c50a:	4013      	ands	r3, r2
 800c50c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d115      	bne.n	800c544 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00f      	beq.n	800c544 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d009      	beq.n	800c544 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 82a6 	beq.w	800ca86 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	4798      	blx	r3
      }
      return;
 800c542:	e2a0      	b.n	800ca86 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 8117 	beq.w	800c77c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c55a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c55e:	4b85      	ldr	r3, [pc, #532]	; (800c774 <HAL_UART_IRQHandler+0x298>)
 800c560:	4013      	ands	r3, r2
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 810a 	beq.w	800c77c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d011      	beq.n	800c598 <HAL_UART_IRQHandler+0xbc>
 800c574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2201      	movs	r2, #1
 800c586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c58e:	f043 0201 	orr.w	r2, r3, #1
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d011      	beq.n	800c5c8 <HAL_UART_IRQHandler+0xec>
 800c5a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00b      	beq.n	800c5c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5be:	f043 0204 	orr.w	r2, r3, #4
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d011      	beq.n	800c5f8 <HAL_UART_IRQHandler+0x11c>
 800c5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00b      	beq.n	800c5f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ee:	f043 0202 	orr.w	r2, r3, #2
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5fc:	f003 0308 	and.w	r3, r3, #8
 800c600:	2b00      	cmp	r3, #0
 800c602:	d017      	beq.n	800c634 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c608:	f003 0320 	and.w	r3, r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d105      	bne.n	800c61c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c614:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2208      	movs	r2, #8
 800c622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62a:	f043 0208 	orr.w	r2, r3, #8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d012      	beq.n	800c666 <HAL_UART_IRQHandler+0x18a>
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00c      	beq.n	800c666 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65c:	f043 0220 	orr.w	r2, r3, #32
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 820c 	beq.w	800ca8a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c676:	f003 0320 	and.w	r3, r3, #32
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00d      	beq.n	800c69a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c67e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d007      	beq.n	800c69a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ae:	2b40      	cmp	r3, #64	; 0x40
 800c6b0:	d005      	beq.n	800c6be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d04f      	beq.n	800c75e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fe75 	bl	800d3ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ce:	2b40      	cmp	r3, #64	; 0x40
 800c6d0:	d141      	bne.n	800c756 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c70a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1d9      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c722:	2b00      	cmp	r3, #0
 800c724:	d013      	beq.n	800c74e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c72a:	4a13      	ldr	r2, [pc, #76]	; (800c778 <HAL_UART_IRQHandler+0x29c>)
 800c72c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c732:	4618      	mov	r0, r3
 800c734:	f7fa f882 	bl	800683c <HAL_DMA_Abort_IT>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d017      	beq.n	800c76e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c74c:	e00f      	b.n	800c76e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f9b0 	bl	800cab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c754:	e00b      	b.n	800c76e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9ac 	bl	800cab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c75c:	e007      	b.n	800c76e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f9a8 	bl	800cab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c76c:	e18d      	b.n	800ca8a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76e:	bf00      	nop
    return;
 800c770:	e18b      	b.n	800ca8a <HAL_UART_IRQHandler+0x5ae>
 800c772:	bf00      	nop
 800c774:	04000120 	.word	0x04000120
 800c778:	0800d475 	.word	0x0800d475

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c780:	2b01      	cmp	r3, #1
 800c782:	f040 8146 	bne.w	800ca12 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 813f 	beq.w	800ca12 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c798:	f003 0310 	and.w	r3, r3, #16
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 8138 	beq.w	800ca12 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2210      	movs	r2, #16
 800c7a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b4:	2b40      	cmp	r3, #64	; 0x40
 800c7b6:	f040 80b4 	bne.w	800c922 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 815f 	beq.w	800ca8e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c7d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	f080 8157 	bcs.w	800ca8e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0320 	and.w	r3, r3, #32
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f040 8085 	bne.w	800c906 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c82a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1da      	bne.n	800c7fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3308      	adds	r3, #8
 800c84c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c858:	f023 0301 	bic.w	r3, r3, #1
 800c85c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3308      	adds	r3, #8
 800c866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c86a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c86e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c876:	e841 2300 	strex	r3, r2, [r1]
 800c87a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1e1      	bne.n	800c846 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c88c:	e853 3f00 	ldrex	r3, [r3]
 800c890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8ae:	e841 2300 	strex	r3, r2, [r1]
 800c8b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1e3      	bne.n	800c882 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2220      	movs	r2, #32
 800c8be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ce:	e853 3f00 	ldrex	r3, [r3]
 800c8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d6:	f023 0310 	bic.w	r3, r3, #16
 800c8da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e4      	bne.n	800c8c6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c900:	4618      	mov	r0, r3
 800c902:	f7f9 ff5d 	bl	80067c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c912:	b29b      	uxth	r3, r3
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	b29b      	uxth	r3, r3
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f8d4 	bl	800cac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c920:	e0b5      	b.n	800ca8e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c92e:	b29b      	uxth	r3, r3
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 80a7 	beq.w	800ca92 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 80a2 	beq.w	800ca92 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c970:	647b      	str	r3, [r7, #68]	; 0x44
 800c972:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c978:	e841 2300 	strex	r3, r2, [r1]
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e4      	bne.n	800c94e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3308      	adds	r3, #8
 800c98a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	623b      	str	r3, [r7, #32]
   return(result);
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	f023 0301 	bic.w	r3, r3, #1
 800c99a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9a8:	633a      	str	r2, [r7, #48]	; 0x30
 800c9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e3      	bne.n	800c984 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2220      	movs	r2, #32
 800c9c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	e853 3f00 	ldrex	r3, [r3]
 800c9da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f023 0310 	bic.w	r3, r3, #16
 800c9e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9f0:	61fb      	str	r3, [r7, #28]
 800c9f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f4:	69b9      	ldr	r1, [r7, #24]
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	e841 2300 	strex	r3, r2, [r1]
 800c9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1e4      	bne.n	800c9ce <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f85c 	bl	800cac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca10:	e03f      	b.n	800ca92 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00e      	beq.n	800ca3c <HAL_UART_IRQHandler+0x560>
 800ca1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d008      	beq.n	800ca3c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fd5d 	bl	800d4f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca3a:	e02d      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ca3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00e      	beq.n	800ca66 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ca48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d008      	beq.n	800ca66 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d01c      	beq.n	800ca96 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	4798      	blx	r3
    }
    return;
 800ca64:	e017      	b.n	800ca96 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d012      	beq.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
 800ca72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00c      	beq.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fd0e 	bl	800d4a0 <UART_EndTransmit_IT>
    return;
 800ca84:	e008      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ca86:	bf00      	nop
 800ca88:	e006      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ca8a:	bf00      	nop
 800ca8c:	e004      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ca8e:	bf00      	nop
 800ca90:	e002      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ca92:	bf00      	nop
 800ca94:	e000      	b.n	800ca98 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ca96:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ca98:	37e8      	adds	r7, #232	; 0xe8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop

0800caa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	460b      	mov	r3, r1
 800cad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cae4:	b08a      	sub	sp, #40	; 0x28
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	689a      	ldr	r2, [r3, #8]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	431a      	orrs	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	431a      	orrs	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4ba4      	ldr	r3, [pc, #656]	; (800cda0 <UART_SetConfig+0x2c0>)
 800cb10:	4013      	ands	r3, r2
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	68da      	ldr	r2, [r3, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a99      	ldr	r2, [pc, #612]	; (800cda4 <UART_SetConfig+0x2c4>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d004      	beq.n	800cb4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a90      	ldr	r2, [pc, #576]	; (800cda8 <UART_SetConfig+0x2c8>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d126      	bne.n	800cbb8 <UART_SetConfig+0xd8>
 800cb6a:	4b90      	ldr	r3, [pc, #576]	; (800cdac <UART_SetConfig+0x2cc>)
 800cb6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d81b      	bhi.n	800cbb0 <UART_SetConfig+0xd0>
 800cb78:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <UART_SetConfig+0xa0>)
 800cb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7e:	bf00      	nop
 800cb80:	0800cb91 	.word	0x0800cb91
 800cb84:	0800cba1 	.word	0x0800cba1
 800cb88:	0800cb99 	.word	0x0800cb99
 800cb8c:	0800cba9 	.word	0x0800cba9
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb96:	e116      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb9e:	e112      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cba0:	2304      	movs	r3, #4
 800cba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cba6:	e10e      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cba8:	2308      	movs	r3, #8
 800cbaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbae:	e10a      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbb6:	e106      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a7c      	ldr	r2, [pc, #496]	; (800cdb0 <UART_SetConfig+0x2d0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d138      	bne.n	800cc34 <UART_SetConfig+0x154>
 800cbc2:	4b7a      	ldr	r3, [pc, #488]	; (800cdac <UART_SetConfig+0x2cc>)
 800cbc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc8:	f003 030c 	and.w	r3, r3, #12
 800cbcc:	2b0c      	cmp	r3, #12
 800cbce:	d82d      	bhi.n	800cc2c <UART_SetConfig+0x14c>
 800cbd0:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <UART_SetConfig+0xf8>)
 800cbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd6:	bf00      	nop
 800cbd8:	0800cc0d 	.word	0x0800cc0d
 800cbdc:	0800cc2d 	.word	0x0800cc2d
 800cbe0:	0800cc2d 	.word	0x0800cc2d
 800cbe4:	0800cc2d 	.word	0x0800cc2d
 800cbe8:	0800cc1d 	.word	0x0800cc1d
 800cbec:	0800cc2d 	.word	0x0800cc2d
 800cbf0:	0800cc2d 	.word	0x0800cc2d
 800cbf4:	0800cc2d 	.word	0x0800cc2d
 800cbf8:	0800cc15 	.word	0x0800cc15
 800cbfc:	0800cc2d 	.word	0x0800cc2d
 800cc00:	0800cc2d 	.word	0x0800cc2d
 800cc04:	0800cc2d 	.word	0x0800cc2d
 800cc08:	0800cc25 	.word	0x0800cc25
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc12:	e0d8      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc14:	2302      	movs	r3, #2
 800cc16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc1a:	e0d4      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc1c:	2304      	movs	r3, #4
 800cc1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc22:	e0d0      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc24:	2308      	movs	r3, #8
 800cc26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc2a:	e0cc      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc32:	e0c8      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a5e      	ldr	r2, [pc, #376]	; (800cdb4 <UART_SetConfig+0x2d4>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d125      	bne.n	800cc8a <UART_SetConfig+0x1aa>
 800cc3e:	4b5b      	ldr	r3, [pc, #364]	; (800cdac <UART_SetConfig+0x2cc>)
 800cc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc48:	2b30      	cmp	r3, #48	; 0x30
 800cc4a:	d016      	beq.n	800cc7a <UART_SetConfig+0x19a>
 800cc4c:	2b30      	cmp	r3, #48	; 0x30
 800cc4e:	d818      	bhi.n	800cc82 <UART_SetConfig+0x1a2>
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d00a      	beq.n	800cc6a <UART_SetConfig+0x18a>
 800cc54:	2b20      	cmp	r3, #32
 800cc56:	d814      	bhi.n	800cc82 <UART_SetConfig+0x1a2>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <UART_SetConfig+0x182>
 800cc5c:	2b10      	cmp	r3, #16
 800cc5e:	d008      	beq.n	800cc72 <UART_SetConfig+0x192>
 800cc60:	e00f      	b.n	800cc82 <UART_SetConfig+0x1a2>
 800cc62:	2300      	movs	r3, #0
 800cc64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc68:	e0ad      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc70:	e0a9      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc72:	2304      	movs	r3, #4
 800cc74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc78:	e0a5      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc7a:	2308      	movs	r3, #8
 800cc7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc80:	e0a1      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc82:	2310      	movs	r3, #16
 800cc84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc88:	e09d      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a4a      	ldr	r2, [pc, #296]	; (800cdb8 <UART_SetConfig+0x2d8>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d125      	bne.n	800cce0 <UART_SetConfig+0x200>
 800cc94:	4b45      	ldr	r3, [pc, #276]	; (800cdac <UART_SetConfig+0x2cc>)
 800cc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cc9e:	2bc0      	cmp	r3, #192	; 0xc0
 800cca0:	d016      	beq.n	800ccd0 <UART_SetConfig+0x1f0>
 800cca2:	2bc0      	cmp	r3, #192	; 0xc0
 800cca4:	d818      	bhi.n	800ccd8 <UART_SetConfig+0x1f8>
 800cca6:	2b80      	cmp	r3, #128	; 0x80
 800cca8:	d00a      	beq.n	800ccc0 <UART_SetConfig+0x1e0>
 800ccaa:	2b80      	cmp	r3, #128	; 0x80
 800ccac:	d814      	bhi.n	800ccd8 <UART_SetConfig+0x1f8>
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <UART_SetConfig+0x1d8>
 800ccb2:	2b40      	cmp	r3, #64	; 0x40
 800ccb4:	d008      	beq.n	800ccc8 <UART_SetConfig+0x1e8>
 800ccb6:	e00f      	b.n	800ccd8 <UART_SetConfig+0x1f8>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccbe:	e082      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccc6:	e07e      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800ccc8:	2304      	movs	r3, #4
 800ccca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccce:	e07a      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800ccd0:	2308      	movs	r3, #8
 800ccd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccd6:	e076      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800ccd8:	2310      	movs	r3, #16
 800ccda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccde:	e072      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a35      	ldr	r2, [pc, #212]	; (800cdbc <UART_SetConfig+0x2dc>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d12a      	bne.n	800cd40 <UART_SetConfig+0x260>
 800ccea:	4b30      	ldr	r3, [pc, #192]	; (800cdac <UART_SetConfig+0x2cc>)
 800ccec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccf8:	d01a      	beq.n	800cd30 <UART_SetConfig+0x250>
 800ccfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccfe:	d81b      	bhi.n	800cd38 <UART_SetConfig+0x258>
 800cd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd04:	d00c      	beq.n	800cd20 <UART_SetConfig+0x240>
 800cd06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd0a:	d815      	bhi.n	800cd38 <UART_SetConfig+0x258>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <UART_SetConfig+0x238>
 800cd10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd14:	d008      	beq.n	800cd28 <UART_SetConfig+0x248>
 800cd16:	e00f      	b.n	800cd38 <UART_SetConfig+0x258>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd1e:	e052      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd20:	2302      	movs	r3, #2
 800cd22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd26:	e04e      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd28:	2304      	movs	r3, #4
 800cd2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd2e:	e04a      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd30:	2308      	movs	r3, #8
 800cd32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd36:	e046      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd38:	2310      	movs	r3, #16
 800cd3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd3e:	e042      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <UART_SetConfig+0x2c4>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d13a      	bne.n	800cdc0 <UART_SetConfig+0x2e0>
 800cd4a:	4b18      	ldr	r3, [pc, #96]	; (800cdac <UART_SetConfig+0x2cc>)
 800cd4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd58:	d01a      	beq.n	800cd90 <UART_SetConfig+0x2b0>
 800cd5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd5e:	d81b      	bhi.n	800cd98 <UART_SetConfig+0x2b8>
 800cd60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd64:	d00c      	beq.n	800cd80 <UART_SetConfig+0x2a0>
 800cd66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd6a:	d815      	bhi.n	800cd98 <UART_SetConfig+0x2b8>
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <UART_SetConfig+0x298>
 800cd70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd74:	d008      	beq.n	800cd88 <UART_SetConfig+0x2a8>
 800cd76:	e00f      	b.n	800cd98 <UART_SetConfig+0x2b8>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd7e:	e022      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd80:	2302      	movs	r3, #2
 800cd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd86:	e01e      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd88:	2304      	movs	r3, #4
 800cd8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd8e:	e01a      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd90:	2308      	movs	r3, #8
 800cd92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd96:	e016      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cd98:	2310      	movs	r3, #16
 800cd9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd9e:	e012      	b.n	800cdc6 <UART_SetConfig+0x2e6>
 800cda0:	efff69f3 	.word	0xefff69f3
 800cda4:	40008000 	.word	0x40008000
 800cda8:	40013800 	.word	0x40013800
 800cdac:	40021000 	.word	0x40021000
 800cdb0:	40004400 	.word	0x40004400
 800cdb4:	40004800 	.word	0x40004800
 800cdb8:	40004c00 	.word	0x40004c00
 800cdbc:	40005000 	.word	0x40005000
 800cdc0:	2310      	movs	r3, #16
 800cdc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a9f      	ldr	r2, [pc, #636]	; (800d048 <UART_SetConfig+0x568>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d17a      	bne.n	800cec6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdd4:	2b08      	cmp	r3, #8
 800cdd6:	d824      	bhi.n	800ce22 <UART_SetConfig+0x342>
 800cdd8:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <UART_SetConfig+0x300>)
 800cdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdde:	bf00      	nop
 800cde0:	0800ce05 	.word	0x0800ce05
 800cde4:	0800ce23 	.word	0x0800ce23
 800cde8:	0800ce0d 	.word	0x0800ce0d
 800cdec:	0800ce23 	.word	0x0800ce23
 800cdf0:	0800ce13 	.word	0x0800ce13
 800cdf4:	0800ce23 	.word	0x0800ce23
 800cdf8:	0800ce23 	.word	0x0800ce23
 800cdfc:	0800ce23 	.word	0x0800ce23
 800ce00:	0800ce1b 	.word	0x0800ce1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce04:	f7fc f8da 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800ce08:	61f8      	str	r0, [r7, #28]
        break;
 800ce0a:	e010      	b.n	800ce2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce0c:	4b8f      	ldr	r3, [pc, #572]	; (800d04c <UART_SetConfig+0x56c>)
 800ce0e:	61fb      	str	r3, [r7, #28]
        break;
 800ce10:	e00d      	b.n	800ce2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce12:	f7fc f83b 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800ce16:	61f8      	str	r0, [r7, #28]
        break;
 800ce18:	e009      	b.n	800ce2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce1e:	61fb      	str	r3, [r7, #28]
        break;
 800ce20:	e005      	b.n	800ce2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ce2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f000 80fb 	beq.w	800d02c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	4413      	add	r3, r2
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d305      	bcc.n	800ce52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce4c:	69fa      	ldr	r2, [r7, #28]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d903      	bls.n	800ce5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ce58:	e0e8      	b.n	800d02c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	461c      	mov	r4, r3
 800ce60:	4615      	mov	r5, r2
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	022b      	lsls	r3, r5, #8
 800ce6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ce70:	0222      	lsls	r2, r4, #8
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	6849      	ldr	r1, [r1, #4]
 800ce76:	0849      	lsrs	r1, r1, #1
 800ce78:	2000      	movs	r0, #0
 800ce7a:	4688      	mov	r8, r1
 800ce7c:	4681      	mov	r9, r0
 800ce7e:	eb12 0a08 	adds.w	sl, r2, r8
 800ce82:	eb43 0b09 	adc.w	fp, r3, r9
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	603b      	str	r3, [r7, #0]
 800ce8e:	607a      	str	r2, [r7, #4]
 800ce90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce94:	4650      	mov	r0, sl
 800ce96:	4659      	mov	r1, fp
 800ce98:	f7f3 f9fa 	bl	8000290 <__aeabi_uldivmod>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	4613      	mov	r3, r2
 800cea2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceaa:	d308      	bcc.n	800cebe <UART_SetConfig+0x3de>
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceb2:	d204      	bcs.n	800cebe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	60da      	str	r2, [r3, #12]
 800cebc:	e0b6      	b.n	800d02c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cec4:	e0b2      	b.n	800d02c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cece:	d15e      	bne.n	800cf8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ced0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	d828      	bhi.n	800cf2a <UART_SetConfig+0x44a>
 800ced8:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <UART_SetConfig+0x400>)
 800ceda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cede:	bf00      	nop
 800cee0:	0800cf05 	.word	0x0800cf05
 800cee4:	0800cf0d 	.word	0x0800cf0d
 800cee8:	0800cf15 	.word	0x0800cf15
 800ceec:	0800cf2b 	.word	0x0800cf2b
 800cef0:	0800cf1b 	.word	0x0800cf1b
 800cef4:	0800cf2b 	.word	0x0800cf2b
 800cef8:	0800cf2b 	.word	0x0800cf2b
 800cefc:	0800cf2b 	.word	0x0800cf2b
 800cf00:	0800cf23 	.word	0x0800cf23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf04:	f7fc f85a 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800cf08:	61f8      	str	r0, [r7, #28]
        break;
 800cf0a:	e014      	b.n	800cf36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf0c:	f7fc f86c 	bl	8008fe8 <HAL_RCC_GetPCLK2Freq>
 800cf10:	61f8      	str	r0, [r7, #28]
        break;
 800cf12:	e010      	b.n	800cf36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf14:	4b4d      	ldr	r3, [pc, #308]	; (800d04c <UART_SetConfig+0x56c>)
 800cf16:	61fb      	str	r3, [r7, #28]
        break;
 800cf18:	e00d      	b.n	800cf36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf1a:	f7fb ffb7 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800cf1e:	61f8      	str	r0, [r7, #28]
        break;
 800cf20:	e009      	b.n	800cf36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf26:	61fb      	str	r3, [r7, #28]
        break;
 800cf28:	e005      	b.n	800cf36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cf34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d077      	beq.n	800d02c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	005a      	lsls	r2, r3, #1
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	085b      	lsrs	r3, r3, #1
 800cf46:	441a      	add	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	2b0f      	cmp	r3, #15
 800cf56:	d916      	bls.n	800cf86 <UART_SetConfig+0x4a6>
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf5e:	d212      	bcs.n	800cf86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	f023 030f 	bic.w	r3, r3, #15
 800cf68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	085b      	lsrs	r3, r3, #1
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	f003 0307 	and.w	r3, r3, #7
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	8afb      	ldrh	r3, [r7, #22]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	8afa      	ldrh	r2, [r7, #22]
 800cf82:	60da      	str	r2, [r3, #12]
 800cf84:	e052      	b.n	800d02c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cf8c:	e04e      	b.n	800d02c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf92:	2b08      	cmp	r3, #8
 800cf94:	d827      	bhi.n	800cfe6 <UART_SetConfig+0x506>
 800cf96:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <UART_SetConfig+0x4bc>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800cfc1 	.word	0x0800cfc1
 800cfa0:	0800cfc9 	.word	0x0800cfc9
 800cfa4:	0800cfd1 	.word	0x0800cfd1
 800cfa8:	0800cfe7 	.word	0x0800cfe7
 800cfac:	0800cfd7 	.word	0x0800cfd7
 800cfb0:	0800cfe7 	.word	0x0800cfe7
 800cfb4:	0800cfe7 	.word	0x0800cfe7
 800cfb8:	0800cfe7 	.word	0x0800cfe7
 800cfbc:	0800cfdf 	.word	0x0800cfdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfc0:	f7fb fffc 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800cfc4:	61f8      	str	r0, [r7, #28]
        break;
 800cfc6:	e014      	b.n	800cff2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfc8:	f7fc f80e 	bl	8008fe8 <HAL_RCC_GetPCLK2Freq>
 800cfcc:	61f8      	str	r0, [r7, #28]
        break;
 800cfce:	e010      	b.n	800cff2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <UART_SetConfig+0x56c>)
 800cfd2:	61fb      	str	r3, [r7, #28]
        break;
 800cfd4:	e00d      	b.n	800cff2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfd6:	f7fb ff59 	bl	8008e8c <HAL_RCC_GetSysClockFreq>
 800cfda:	61f8      	str	r0, [r7, #28]
        break;
 800cfdc:	e009      	b.n	800cff2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfe2:	61fb      	str	r3, [r7, #28]
        break;
 800cfe4:	e005      	b.n	800cff2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cff0:	bf00      	nop
    }

    if (pclk != 0U)
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d019      	beq.n	800d02c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	085a      	lsrs	r2, r3, #1
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	441a      	add	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	2b0f      	cmp	r3, #15
 800d010:	d909      	bls.n	800d026 <UART_SetConfig+0x546>
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d018:	d205      	bcs.n	800d026 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	60da      	str	r2, [r3, #12]
 800d024:	e002      	b.n	800d02c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3728      	adds	r7, #40	; 0x28
 800d040:	46bd      	mov	sp, r7
 800d042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d046:	bf00      	nop
 800d048:	40008000 	.word	0x40008000
 800d04c:	00f42400 	.word	0x00f42400

0800d050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	f003 0301 	and.w	r3, r3, #1
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00a      	beq.n	800d07a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	430a      	orrs	r2, r1
 800d09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	f003 0304 	and.w	r3, r3, #4
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	430a      	orrs	r2, r1
 800d0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	f003 0308 	and.w	r3, r3, #8
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00a      	beq.n	800d0e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	f003 0310 	and.w	r3, r3, #16
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00a      	beq.n	800d102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	430a      	orrs	r2, r1
 800d100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	f003 0320 	and.w	r3, r3, #32
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00a      	beq.n	800d124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	430a      	orrs	r2, r1
 800d122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01a      	beq.n	800d166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d14e:	d10a      	bne.n	800d166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	430a      	orrs	r2, r1
 800d164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00a      	beq.n	800d188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	605a      	str	r2, [r3, #4]
  }
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af02      	add	r7, sp, #8
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d1a4:	f7f8 fc1a 	bl	80059dc <HAL_GetTick>
 800d1a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0308 	and.w	r3, r3, #8
 800d1b4:	2b08      	cmp	r3, #8
 800d1b6:	d10e      	bne.n	800d1d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f82d 	bl	800d226 <UART_WaitOnFlagUntilTimeout>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e023      	b.n	800d21e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 0304 	and.w	r3, r3, #4
 800d1e0:	2b04      	cmp	r3, #4
 800d1e2:	d10e      	bne.n	800d202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f817 	bl	800d226 <UART_WaitOnFlagUntilTimeout>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1fe:	2303      	movs	r3, #3
 800d200:	e00d      	b.n	800d21e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2220      	movs	r2, #32
 800d206:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2220      	movs	r2, #32
 800d20c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b09c      	sub	sp, #112	; 0x70
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	60b9      	str	r1, [r7, #8]
 800d230:	603b      	str	r3, [r7, #0]
 800d232:	4613      	mov	r3, r2
 800d234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d236:	e0a5      	b.n	800d384 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23e:	f000 80a1 	beq.w	800d384 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d242:	f7f8 fbcb 	bl	80059dc <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d24e:	429a      	cmp	r2, r3
 800d250:	d302      	bcc.n	800d258 <UART_WaitOnFlagUntilTimeout+0x32>
 800d252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d254:	2b00      	cmp	r3, #0
 800d256:	d13e      	bne.n	800d2d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d26c:	667b      	str	r3, [r7, #100]	; 0x64
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d276:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d278:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d27c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e6      	bne.n	800d258 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3308      	adds	r3, #8
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d294:	e853 3f00 	ldrex	r3, [r3]
 800d298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	f023 0301 	bic.w	r3, r3, #1
 800d2a0:	663b      	str	r3, [r7, #96]	; 0x60
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d2ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e5      	bne.n	800d28a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	e067      	b.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d04f      	beq.n	800d384 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	69db      	ldr	r3, [r3, #28]
 800d2ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2f2:	d147      	bne.n	800d384 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	e853 3f00 	ldrex	r3, [r3]
 800d30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d312:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d31c:	637b      	str	r3, [r7, #52]	; 0x34
 800d31e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d324:	e841 2300 	strex	r3, r2, [r1]
 800d328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1e6      	bne.n	800d2fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	3308      	adds	r3, #8
 800d336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	e853 3f00 	ldrex	r3, [r3]
 800d33e:	613b      	str	r3, [r7, #16]
   return(result);
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	f023 0301 	bic.w	r3, r3, #1
 800d346:	66bb      	str	r3, [r7, #104]	; 0x68
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3308      	adds	r3, #8
 800d34e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d350:	623a      	str	r2, [r7, #32]
 800d352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d354:	69f9      	ldr	r1, [r7, #28]
 800d356:	6a3a      	ldr	r2, [r7, #32]
 800d358:	e841 2300 	strex	r3, r2, [r1]
 800d35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e5      	bne.n	800d330 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2220      	movs	r2, #32
 800d368:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2220      	movs	r2, #32
 800d36e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2220      	movs	r2, #32
 800d374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e010      	b.n	800d3a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	69da      	ldr	r2, [r3, #28]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	4013      	ands	r3, r2
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	429a      	cmp	r2, r3
 800d392:	bf0c      	ite	eq
 800d394:	2301      	moveq	r3, #1
 800d396:	2300      	movne	r3, #0
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	461a      	mov	r2, r3
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	f43f af4a 	beq.w	800d238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3770      	adds	r7, #112	; 0x70
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b095      	sub	sp, #84	; 0x54
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3be:	e853 3f00 	ldrex	r3, [r3]
 800d3c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d4:	643b      	str	r3, [r7, #64]	; 0x40
 800d3d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e6      	bne.n	800d3b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	e853 3f00 	ldrex	r3, [r3]
 800d3f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	f023 0301 	bic.w	r3, r3, #1
 800d3fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3308      	adds	r3, #8
 800d406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d40a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d410:	e841 2300 	strex	r3, r2, [r1]
 800d414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1e5      	bne.n	800d3e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d420:	2b01      	cmp	r3, #1
 800d422:	d118      	bne.n	800d456 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	e853 3f00 	ldrex	r3, [r3]
 800d430:	60bb      	str	r3, [r7, #8]
   return(result);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f023 0310 	bic.w	r3, r3, #16
 800d438:	647b      	str	r3, [r7, #68]	; 0x44
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d442:	61bb      	str	r3, [r7, #24]
 800d444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d446:	6979      	ldr	r1, [r7, #20]
 800d448:	69ba      	ldr	r2, [r7, #24]
 800d44a:	e841 2300 	strex	r3, r2, [r1]
 800d44e:	613b      	str	r3, [r7, #16]
   return(result);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1e6      	bne.n	800d424 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2220      	movs	r2, #32
 800d45a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d468:	bf00      	nop
 800d46a:	3754      	adds	r7, #84	; 0x54
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2200      	movs	r2, #0
 800d48e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff fb0e 	bl	800cab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d498:	bf00      	nop
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	e853 3f00 	ldrex	r3, [r3]
 800d4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4bc:	61fb      	str	r3, [r7, #28]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	61bb      	str	r3, [r7, #24]
 800d4c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ca:	6979      	ldr	r1, [r7, #20]
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	e841 2300 	strex	r3, r2, [r1]
 800d4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1e6      	bne.n	800d4a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2220      	movs	r2, #32
 800d4de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fada 	bl	800caa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4ec:	bf00      	nop
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	6812      	ldr	r2, [r2, #0]
 800d520:	f023 0101 	bic.w	r1, r3, #1
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	2b08      	cmp	r3, #8
 800d530:	d102      	bne.n	800d538 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	617b      	str	r3, [r7, #20]
 800d536:	e001      	b.n	800d53c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d538:	2300      	movs	r3, #0
 800d53a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d548:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d54e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d554:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d55a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d560:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d566:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d56c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d572:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d578:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d57e:	4313      	orrs	r3, r2
 800d580:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	4313      	orrs	r3, r2
 800d58a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d5a0:	4b20      	ldr	r3, [pc, #128]	; (800d624 <FMC_NORSRAM_Init+0x11c>)
 800d5a2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5aa:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5b2:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d5ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	43db      	mvns	r3, r3
 800d5ca:	ea02 0103 	and.w	r1, r2, r3
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	4319      	orrs	r1, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5e4:	d10c      	bne.n	800d600 <FMC_NORSRAM_Init+0xf8>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d008      	beq.n	800d600 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d006      	beq.n	800d616 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d610:	431a      	orrs	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	371c      	adds	r7, #28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	0008fb7f 	.word	0x0008fb7f

0800d628 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d628:	b480      	push	{r7}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d63e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	011b      	lsls	r3, r3, #4
 800d64c:	431a      	orrs	r2, r3
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	431a      	orrs	r2, r3
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	041b      	lsls	r3, r3, #16
 800d65c:	431a      	orrs	r2, r3
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	695b      	ldr	r3, [r3, #20]
 800d662:	3b01      	subs	r3, #1
 800d664:	051b      	lsls	r3, r3, #20
 800d666:	431a      	orrs	r2, r3
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	3b02      	subs	r3, #2
 800d66e:	061b      	lsls	r3, r3, #24
 800d670:	431a      	orrs	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	4313      	orrs	r3, r2
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	3201      	adds	r2, #1
 800d67c:	4319      	orrs	r1, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d68c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d690:	d113      	bne.n	800d6ba <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d69a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	051b      	lsls	r3, r3, #20
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	371c      	adds	r7, #28
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6dc:	d11d      	bne.n	800d71a <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d6e6:	4b13      	ldr	r3, [pc, #76]	; (800d734 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	6811      	ldr	r1, [r2, #0]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	6852      	ldr	r2, [r2, #4]
 800d6f2:	0112      	lsls	r2, r2, #4
 800d6f4:	4311      	orrs	r1, r2
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	6892      	ldr	r2, [r2, #8]
 800d6fa:	0212      	lsls	r2, r2, #8
 800d6fc:	4311      	orrs	r1, r2
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	69d2      	ldr	r2, [r2, #28]
 800d702:	4311      	orrs	r1, r2
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	6912      	ldr	r2, [r2, #16]
 800d708:	0412      	lsls	r2, r2, #16
 800d70a:	430a      	orrs	r2, r1
 800d70c:	ea43 0102 	orr.w	r1, r3, r2
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d718:	e005      	b.n	800d726 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	cff00000 	.word	0xcff00000

0800d738 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d738:	b084      	sub	sp, #16
 800d73a:	b480      	push	{r7}
 800d73c:	b085      	sub	sp, #20
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	f107 001c 	add.w	r0, r7, #28
 800d746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4313      	orrs	r3, r2
 800d754:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d756:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800d75a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d75e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d762:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d766:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	431a      	orrs	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	b004      	add	sp, #16
 800d790:	4770      	bx	lr

0800d792 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d792:	b480      	push	{r7}
 800d794:	b083      	sub	sp, #12
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2203      	movs	r2, #3
 800d7da:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d7dc:	2002      	movs	r0, #2
 800d7de:	f7f8 f909 	bl	80059f4 <HAL_Delay>

  return HAL_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0303 	and.w	r3, r3, #3
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d826:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d82c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d832:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d842:	f023 030f 	bic.w	r3, r3, #15
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	b2db      	uxtb	r3, r3
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d876:	b480      	push	{r7}
 800d878:	b085      	sub	sp, #20
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3314      	adds	r3, #20
 800d884:	461a      	mov	r2, r3
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	4413      	add	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d8c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d8ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8da:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d8e6:	2300      	movs	r3, #0

}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d902:	2310      	movs	r3, #16
 800d904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d906:	2340      	movs	r3, #64	; 0x40
 800d908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d914:	f107 0308 	add.w	r3, r7, #8
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7ff ff74 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d920:	f241 3288 	movw	r2, #5000	; 0x1388
 800d924:	2110      	movs	r1, #16
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fa18 	bl	800dd5c <SDMMC_GetCmdResp1>
 800d92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d92e:	69fb      	ldr	r3, [r7, #28]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3720      	adds	r7, #32
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d946:	2311      	movs	r3, #17
 800d948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d94a:	2340      	movs	r3, #64	; 0x40
 800d94c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d94e:	2300      	movs	r3, #0
 800d950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d958:	f107 0308 	add.w	r3, r7, #8
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff ff52 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d964:	f241 3288 	movw	r2, #5000	; 0x1388
 800d968:	2111      	movs	r1, #17
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f9f6 	bl	800dd5c <SDMMC_GetCmdResp1>
 800d970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d972:	69fb      	ldr	r3, [r7, #28]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3720      	adds	r7, #32
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d98a:	2312      	movs	r3, #18
 800d98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d98e:	2340      	movs	r3, #64	; 0x40
 800d990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d992:	2300      	movs	r3, #0
 800d994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d99c:	f107 0308 	add.w	r3, r7, #8
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff ff30 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ac:	2112      	movs	r1, #18
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f9d4 	bl	800dd5c <SDMMC_GetCmdResp1>
 800d9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3720      	adds	r7, #32
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d9ce:	2318      	movs	r3, #24
 800d9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9d2:	2340      	movs	r3, #64	; 0x40
 800d9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9e0:	f107 0308 	add.w	r3, r7, #8
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff ff0e 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f0:	2118      	movs	r1, #24
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f9b2 	bl	800dd5c <SDMMC_GetCmdResp1>
 800d9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3720      	adds	r7, #32
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800da12:	2319      	movs	r3, #25
 800da14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da16:	2340      	movs	r3, #64	; 0x40
 800da18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da24:	f107 0308 	add.w	r3, r7, #8
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff feec 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da30:	f241 3288 	movw	r2, #5000	; 0x1388
 800da34:	2119      	movs	r1, #25
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f990 	bl	800dd5c <SDMMC_GetCmdResp1>
 800da3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da3e:	69fb      	ldr	r3, [r7, #28]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3720      	adds	r7, #32
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da54:	230c      	movs	r3, #12
 800da56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da58:	2340      	movs	r3, #64	; 0x40
 800da5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da5c:	2300      	movs	r3, #0
 800da5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da64:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da66:	f107 0308 	add.w	r3, r7, #8
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fecb 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800da72:	4a05      	ldr	r2, [pc, #20]	; (800da88 <SDMMC_CmdStopTransfer+0x40>)
 800da74:	210c      	movs	r1, #12
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f970 	bl	800dd5c <SDMMC_GetCmdResp1>
 800da7c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800da7e:	69fb      	ldr	r3, [r7, #28]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3720      	adds	r7, #32
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	05f5e100 	.word	0x05f5e100

0800da8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800da9c:	2307      	movs	r3, #7
 800da9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daa0:	2340      	movs	r3, #64	; 0x40
 800daa2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daa4:	2300      	movs	r3, #0
 800daa6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daae:	f107 0310 	add.w	r3, r7, #16
 800dab2:	4619      	mov	r1, r3
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff fea7 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800daba:	f241 3288 	movw	r2, #5000	; 0x1388
 800dabe:	2107      	movs	r1, #7
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 f94b 	bl	800dd5c <SDMMC_GetCmdResp1>
 800dac6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3728      	adds	r7, #40	; 0x28
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b088      	sub	sp, #32
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dade:	2300      	movs	r3, #0
 800dae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dae2:	2300      	movs	r3, #0
 800dae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dae6:	2300      	movs	r3, #0
 800dae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daf0:	f107 0308 	add.w	r3, r7, #8
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fe86 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fb65 	bl	800e1cc <SDMMC_GetCmdError>
 800db02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db04:	69fb      	ldr	r3, [r7, #28]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b088      	sub	sp, #32
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800db1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db1c:	2308      	movs	r3, #8
 800db1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db20:	2340      	movs	r3, #64	; 0x40
 800db22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db24:	2300      	movs	r3, #0
 800db26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db2e:	f107 0308 	add.w	r3, r7, #8
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fe67 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 faf8 	bl	800e130 <SDMMC_GetCmdResp7>
 800db40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db42:	69fb      	ldr	r3, [r7, #28]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db5a:	2337      	movs	r3, #55	; 0x37
 800db5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db6c:	f107 0308 	add.w	r3, r7, #8
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7ff fe48 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800db78:	f241 3288 	movw	r2, #5000	; 0x1388
 800db7c:	2137      	movs	r1, #55	; 0x37
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f8ec 	bl	800dd5c <SDMMC_GetCmdResp1>
 800db84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db86:	69fb      	ldr	r3, [r7, #28]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dba4:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dba6:	2329      	movs	r3, #41	; 0x29
 800dba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbb8:	f107 0308 	add.w	r3, r7, #8
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff fe22 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f9ff 	bl	800dfc8 <SDMMC_GetCmdResp3>
 800dbca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3720      	adds	r7, #32
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b088      	sub	sp, #32
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
 800dbde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dbe4:	2306      	movs	r3, #6
 800dbe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbec:	2300      	movs	r3, #0
 800dbee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbf6:	f107 0308 	add.w	r3, r7, #8
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fe03 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc02:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc06:	2106      	movs	r1, #6
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f8a7 	bl	800dd5c <SDMMC_GetCmdResp1>
 800dc0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc10:	69fb      	ldr	r3, [r7, #28]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3720      	adds	r7, #32
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b088      	sub	sp, #32
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc26:	2333      	movs	r3, #51	; 0x33
 800dc28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc2a:	2340      	movs	r3, #64	; 0x40
 800dc2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc38:	f107 0308 	add.w	r3, r7, #8
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff fde2 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dc44:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc48:	2133      	movs	r1, #51	; 0x33
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f886 	bl	800dd5c <SDMMC_GetCmdResp1>
 800dc50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc52:	69fb      	ldr	r3, [r7, #28]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3720      	adds	r7, #32
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dc68:	2302      	movs	r3, #2
 800dc6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc6c:	23c0      	movs	r3, #192	; 0xc0
 800dc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc70:	2300      	movs	r3, #0
 800dc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc7a:	f107 0308 	add.w	r3, r7, #8
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff fdc1 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f956 	bl	800df38 <SDMMC_GetCmdResp2>
 800dc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3720      	adds	r7, #32
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dca6:	2309      	movs	r3, #9
 800dca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcaa:	23c0      	movs	r3, #192	; 0xc0
 800dcac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcb8:	f107 0308 	add.w	r3, r7, #8
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff fda2 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f937 	bl	800df38 <SDMMC_GetCmdResp2>
 800dcca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dccc:	69fb      	ldr	r3, [r7, #28]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3720      	adds	r7, #32
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b088      	sub	sp, #32
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dce0:	2300      	movs	r3, #0
 800dce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dce4:	2303      	movs	r3, #3
 800dce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dce8:	2340      	movs	r3, #64	; 0x40
 800dcea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcec:	2300      	movs	r3, #0
 800dcee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcf6:	f107 0308 	add.w	r3, r7, #8
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff fd83 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd02:	683a      	ldr	r2, [r7, #0]
 800dd04:	2103      	movs	r1, #3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f99c 	bl	800e044 <SDMMC_GetCmdResp6>
 800dd0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd0e:	69fb      	ldr	r3, [r7, #28]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3720      	adds	r7, #32
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd26:	230d      	movs	r3, #13
 800dd28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd38:	f107 0308 	add.w	r3, r7, #8
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fd62 	bl	800d808 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd48:	210d      	movs	r1, #13
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f806 	bl	800dd5c <SDMMC_GetCmdResp1>
 800dd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd52:	69fb      	ldr	r3, [r7, #28]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	460b      	mov	r3, r1
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd6a:	4b70      	ldr	r3, [pc, #448]	; (800df2c <SDMMC_GetCmdResp1+0x1d0>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a70      	ldr	r2, [pc, #448]	; (800df30 <SDMMC_GetCmdResp1+0x1d4>)
 800dd70:	fba2 2303 	umull	r2, r3, r2, r3
 800dd74:	0a5a      	lsrs	r2, r3, #9
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	fb02 f303 	mul.w	r3, r2, r3
 800dd7c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	1e5a      	subs	r2, r3, #1
 800dd82:	61fa      	str	r2, [r7, #28]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd8c:	e0c9      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd92:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0ef      	beq.n	800dd7e <SDMMC_GetCmdResp1+0x22>
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1ea      	bne.n	800dd7e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d004      	beq.n	800ddbe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2204      	movs	r2, #4
 800ddb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddba:	2304      	movs	r3, #4
 800ddbc:	e0b1      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d004      	beq.n	800ddd4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e0a6      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	22c5      	movs	r2, #197	; 0xc5
 800ddd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7ff fd3e 	bl	800d85c <SDMMC_GetCommandResponse>
 800dde0:	4603      	mov	r3, r0
 800dde2:	461a      	mov	r2, r3
 800dde4:	7afb      	ldrb	r3, [r7, #11]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d001      	beq.n	800ddee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e099      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ddee:	2100      	movs	r1, #0
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f7ff fd40 	bl	800d876 <SDMMC_GetResponse>
 800ddf6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	4b4e      	ldr	r3, [pc, #312]	; (800df34 <SDMMC_GetCmdResp1+0x1d8>)
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800de02:	2300      	movs	r3, #0
 800de04:	e08d      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	da02      	bge.n	800de12 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de10:	e087      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	e080      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de2a:	2380      	movs	r3, #128	; 0x80
 800de2c:	e079      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de3c:	e071      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de4c:	e069      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de5c:	e061      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de6c:	e059      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de7c:	e051      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de8c:	e049      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de9c:	e041      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800deac:	e039      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800deb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800debc:	e031      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dec8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800decc:	e029      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ded8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dedc:	e021      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800deec:	e019      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800def8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800defc:	e011      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800df08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df0c:	e009      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800df18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800df1c:	e001      	b.n	800df22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800df22:	4618      	mov	r0, r3
 800df24:	3720      	adds	r7, #32
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	200000f4 	.word	0x200000f4
 800df30:	10624dd3 	.word	0x10624dd3
 800df34:	fdffe008 	.word	0xfdffe008

0800df38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df40:	4b1f      	ldr	r3, [pc, #124]	; (800dfc0 <SDMMC_GetCmdResp2+0x88>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a1f      	ldr	r2, [pc, #124]	; (800dfc4 <SDMMC_GetCmdResp2+0x8c>)
 800df46:	fba2 2303 	umull	r2, r3, r2, r3
 800df4a:	0a5b      	lsrs	r3, r3, #9
 800df4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df50:	fb02 f303 	mul.w	r3, r2, r3
 800df54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	1e5a      	subs	r2, r3, #1
 800df5a:	60fa      	str	r2, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d102      	bne.n	800df66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df64:	e026      	b.n	800dfb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0ef      	beq.n	800df56 <SDMMC_GetCmdResp2+0x1e>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1ea      	bne.n	800df56 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d004      	beq.n	800df96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2204      	movs	r2, #4
 800df90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df92:	2304      	movs	r3, #4
 800df94:	e00e      	b.n	800dfb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d004      	beq.n	800dfac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e003      	b.n	800dfb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	22c5      	movs	r2, #197	; 0xc5
 800dfb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	200000f4 	.word	0x200000f4
 800dfc4:	10624dd3 	.word	0x10624dd3

0800dfc8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfd0:	4b1a      	ldr	r3, [pc, #104]	; (800e03c <SDMMC_GetCmdResp3+0x74>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a1a      	ldr	r2, [pc, #104]	; (800e040 <SDMMC_GetCmdResp3+0x78>)
 800dfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfda:	0a5b      	lsrs	r3, r3, #9
 800dfdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe0:	fb02 f303 	mul.w	r3, r2, r3
 800dfe4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	1e5a      	subs	r2, r3, #1
 800dfea:	60fa      	str	r2, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dff4:	e01b      	b.n	800e02e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0ef      	beq.n	800dfe6 <SDMMC_GetCmdResp3+0x1e>
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1ea      	bne.n	800dfe6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d004      	beq.n	800e026 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2204      	movs	r2, #4
 800e020:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e022:	2304      	movs	r3, #4
 800e024:	e003      	b.n	800e02e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	22c5      	movs	r2, #197	; 0xc5
 800e02a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	200000f4 	.word	0x200000f4
 800e040:	10624dd3 	.word	0x10624dd3

0800e044 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	460b      	mov	r3, r1
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e052:	4b35      	ldr	r3, [pc, #212]	; (800e128 <SDMMC_GetCmdResp6+0xe4>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a35      	ldr	r2, [pc, #212]	; (800e12c <SDMMC_GetCmdResp6+0xe8>)
 800e058:	fba2 2303 	umull	r2, r3, r2, r3
 800e05c:	0a5b      	lsrs	r3, r3, #9
 800e05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e062:	fb02 f303 	mul.w	r3, r2, r3
 800e066:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	1e5a      	subs	r2, r3, #1
 800e06c:	61fa      	str	r2, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e072:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e076:	e052      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e07c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e084:	2b00      	cmp	r3, #0
 800e086:	d0ef      	beq.n	800e068 <SDMMC_GetCmdResp6+0x24>
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1ea      	bne.n	800e068 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	f003 0304 	and.w	r3, r3, #4
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d004      	beq.n	800e0a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2204      	movs	r2, #4
 800e0a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	e03a      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e02f      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f7ff fbcc 	bl	800d85c <SDMMC_GetCommandResponse>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d001      	beq.n	800e0d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e025      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	22c5      	movs	r2, #197	; 0xc5
 800e0d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e0d8:	2100      	movs	r1, #0
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7ff fbcb 	bl	800d876 <SDMMC_GetResponse>
 800e0e0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d106      	bne.n	800e0fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	0c1b      	lsrs	r3, r3, #16
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e011      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e108:	e009      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e118:	e001      	b.n	800e11e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e11a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	200000f4 	.word	0x200000f4
 800e12c:	10624dd3 	.word	0x10624dd3

0800e130 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e138:	4b22      	ldr	r3, [pc, #136]	; (800e1c4 <SDMMC_GetCmdResp7+0x94>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a22      	ldr	r2, [pc, #136]	; (800e1c8 <SDMMC_GetCmdResp7+0x98>)
 800e13e:	fba2 2303 	umull	r2, r3, r2, r3
 800e142:	0a5b      	lsrs	r3, r3, #9
 800e144:	f241 3288 	movw	r2, #5000	; 0x1388
 800e148:	fb02 f303 	mul.w	r3, r2, r3
 800e14c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1e5a      	subs	r2, r3, #1
 800e152:	60fa      	str	r2, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e15c:	e02c      	b.n	800e1b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e162:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0ef      	beq.n	800e14e <SDMMC_GetCmdResp7+0x1e>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1ea      	bne.n	800e14e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d004      	beq.n	800e18e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2204      	movs	r2, #4
 800e188:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e18a:	2304      	movs	r3, #4
 800e18c:	e014      	b.n	800e1b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e009      	b.n	800e1b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2240      	movs	r2, #64	; 0x40
 800e1b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1b6:	2300      	movs	r3, #0

}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	200000f4 	.word	0x200000f4
 800e1c8:	10624dd3 	.word	0x10624dd3

0800e1cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1d4:	4b11      	ldr	r3, [pc, #68]	; (800e21c <SDMMC_GetCmdError+0x50>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a11      	ldr	r2, [pc, #68]	; (800e220 <SDMMC_GetCmdError+0x54>)
 800e1da:	fba2 2303 	umull	r2, r3, r2, r3
 800e1de:	0a5b      	lsrs	r3, r3, #9
 800e1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1e4:	fb02 f303 	mul.w	r3, r2, r3
 800e1e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	1e5a      	subs	r2, r3, #1
 800e1ee:	60fa      	str	r2, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1f8:	e009      	b.n	800e20e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0f1      	beq.n	800e1ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	22c5      	movs	r2, #197	; 0xc5
 800e20a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	200000f4 	.word	0x200000f4
 800e220:	10624dd3 	.word	0x10624dd3

0800e224 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e224:	b480      	push	{r7}
 800e226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e228:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e23c:	f7f5 f914 	bl	8003468 <BSP_SD_AbortCallback>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e250:	f7f5 f911 	bl	8003476 <BSP_SD_WriteCpltCallback>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e264:	f7f5 f90e 	bl	8003484 <BSP_SD_ReadCpltCallback>
}
 800e268:	bf00      	nop
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e27a:	79fb      	ldrb	r3, [r7, #7]
 800e27c:	4a08      	ldr	r2, [pc, #32]	; (800e2a0 <disk_status+0x30>)
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	79fa      	ldrb	r2, [r7, #7]
 800e288:	4905      	ldr	r1, [pc, #20]	; (800e2a0 <disk_status+0x30>)
 800e28a:	440a      	add	r2, r1
 800e28c:	7a12      	ldrb	r2, [r2, #8]
 800e28e:	4610      	mov	r0, r2
 800e290:	4798      	blx	r3
 800e292:	4603      	mov	r3, r0
 800e294:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e296:	7bfb      	ldrb	r3, [r7, #15]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	2001ce80 	.word	0x2001ce80

0800e2a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e2b2:	79fb      	ldrb	r3, [r7, #7]
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <disk_initialize+0x48>)
 800e2b6:	5cd3      	ldrb	r3, [r2, r3]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d111      	bne.n	800e2e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	4a0b      	ldr	r2, [pc, #44]	; (800e2ec <disk_initialize+0x48>)
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e2c4:	79fb      	ldrb	r3, [r7, #7]
 800e2c6:	4a09      	ldr	r2, [pc, #36]	; (800e2ec <disk_initialize+0x48>)
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	79fa      	ldrb	r2, [r7, #7]
 800e2d2:	4906      	ldr	r1, [pc, #24]	; (800e2ec <disk_initialize+0x48>)
 800e2d4:	440a      	add	r2, r1
 800e2d6:	7a12      	ldrb	r2, [r2, #8]
 800e2d8:	4610      	mov	r0, r2
 800e2da:	4798      	blx	r3
 800e2dc:	4603      	mov	r3, r0
 800e2de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	2001ce80 	.word	0x2001ce80

0800e2f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e2f0:	b590      	push	{r4, r7, lr}
 800e2f2:	b087      	sub	sp, #28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60b9      	str	r1, [r7, #8]
 800e2f8:	607a      	str	r2, [r7, #4]
 800e2fa:	603b      	str	r3, [r7, #0]
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	4a0a      	ldr	r2, [pc, #40]	; (800e32c <disk_read+0x3c>)
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	689c      	ldr	r4, [r3, #8]
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	4a07      	ldr	r2, [pc, #28]	; (800e32c <disk_read+0x3c>)
 800e310:	4413      	add	r3, r2
 800e312:	7a18      	ldrb	r0, [r3, #8]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	47a0      	blx	r4
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e320:	7dfb      	ldrb	r3, [r7, #23]
}
 800e322:	4618      	mov	r0, r3
 800e324:	371c      	adds	r7, #28
 800e326:	46bd      	mov	sp, r7
 800e328:	bd90      	pop	{r4, r7, pc}
 800e32a:	bf00      	nop
 800e32c:	2001ce80 	.word	0x2001ce80

0800e330 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e330:	b590      	push	{r4, r7, lr}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60b9      	str	r1, [r7, #8]
 800e338:	607a      	str	r2, [r7, #4]
 800e33a:	603b      	str	r3, [r7, #0]
 800e33c:	4603      	mov	r3, r0
 800e33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	4a0a      	ldr	r2, [pc, #40]	; (800e36c <disk_write+0x3c>)
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	68dc      	ldr	r4, [r3, #12]
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	4a07      	ldr	r2, [pc, #28]	; (800e36c <disk_write+0x3c>)
 800e350:	4413      	add	r3, r2
 800e352:	7a18      	ldrb	r0, [r3, #8]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	47a0      	blx	r4
 800e35c:	4603      	mov	r3, r0
 800e35e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e360:	7dfb      	ldrb	r3, [r7, #23]
}
 800e362:	4618      	mov	r0, r3
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	bd90      	pop	{r4, r7, pc}
 800e36a:	bf00      	nop
 800e36c:	2001ce80 	.word	0x2001ce80

0800e370 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	603a      	str	r2, [r7, #0]
 800e37a:	71fb      	strb	r3, [r7, #7]
 800e37c:	460b      	mov	r3, r1
 800e37e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	4a09      	ldr	r2, [pc, #36]	; (800e3a8 <disk_ioctl+0x38>)
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	79fa      	ldrb	r2, [r7, #7]
 800e38e:	4906      	ldr	r1, [pc, #24]	; (800e3a8 <disk_ioctl+0x38>)
 800e390:	440a      	add	r2, r1
 800e392:	7a10      	ldrb	r0, [r2, #8]
 800e394:	79b9      	ldrb	r1, [r7, #6]
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	4798      	blx	r3
 800e39a:	4603      	mov	r3, r0
 800e39c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	2001ce80 	.word	0x2001ce80

0800e3ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e3bc:	89fb      	ldrh	r3, [r7, #14]
 800e3be:	021b      	lsls	r3, r3, #8
 800e3c0:	b21a      	sxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	b21b      	sxth	r3, r3
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	b21b      	sxth	r3, r3
 800e3cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e3ce:	89fb      	ldrh	r3, [r7, #14]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	3303      	adds	r3, #3
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	3202      	adds	r2, #2
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	021b      	lsls	r3, r3, #8
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	3201      	adds	r2, #1
 800e402:	7812      	ldrb	r2, [r2, #0]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	021b      	lsls	r3, r3, #8
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	7812      	ldrb	r2, [r2, #0]
 800e410:	4313      	orrs	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]
	return rv;
 800e414:	68fb      	ldr	r3, [r7, #12]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	887a      	ldrh	r2, [r7, #2]
 800e436:	b2d2      	uxtb	r2, r2
 800e438:	701a      	strb	r2, [r3, #0]
 800e43a:	887b      	ldrh	r3, [r7, #2]
 800e43c:	0a1b      	lsrs	r3, r3, #8
 800e43e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	1c5a      	adds	r2, r3, #1
 800e444:	607a      	str	r2, [r7, #4]
 800e446:	887a      	ldrh	r2, [r7, #2]
 800e448:	b2d2      	uxtb	r2, r2
 800e44a:	701a      	strb	r2, [r3, #0]
}
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	b2d2      	uxtb	r2, r2
 800e46c:	701a      	strb	r2, [r3, #0]
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	0a1b      	lsrs	r3, r3, #8
 800e472:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	1c5a      	adds	r2, r3, #1
 800e478:	607a      	str	r2, [r7, #4]
 800e47a:	683a      	ldr	r2, [r7, #0]
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	0a1b      	lsrs	r3, r3, #8
 800e484:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	607a      	str	r2, [r7, #4]
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	b2d2      	uxtb	r2, r2
 800e490:	701a      	strb	r2, [r3, #0]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	0a1b      	lsrs	r3, r3, #8
 800e496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	607a      	str	r2, [r7, #4]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	b2d2      	uxtb	r2, r2
 800e4a2:	701a      	strb	r2, [r3, #0]
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e4b0:	b480      	push	{r7}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00d      	beq.n	800e4e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	1c53      	adds	r3, r2, #1
 800e4ce:	613b      	str	r3, [r7, #16]
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	1c59      	adds	r1, r3, #1
 800e4d4:	6179      	str	r1, [r7, #20]
 800e4d6:	7812      	ldrb	r2, [r2, #0]
 800e4d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	607b      	str	r3, [r7, #4]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1f1      	bne.n	800e4ca <mem_cpy+0x1a>
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e4f2:	b480      	push	{r7}
 800e4f4:	b087      	sub	sp, #28
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	617a      	str	r2, [r7, #20]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	b2d2      	uxtb	r2, r2
 800e50c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3b01      	subs	r3, #1
 800e512:	607b      	str	r3, [r7, #4]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1f3      	bne.n	800e502 <mem_set+0x10>
}
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	371c      	adds	r7, #28
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e528:	b480      	push	{r7}
 800e52a:	b089      	sub	sp, #36	; 0x24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	61fb      	str	r3, [r7, #28]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	1c5a      	adds	r2, r3, #1
 800e544:	61fa      	str	r2, [r7, #28]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	4619      	mov	r1, r3
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	61ba      	str	r2, [r7, #24]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	1acb      	subs	r3, r1, r3
 800e554:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3b01      	subs	r3, #1
 800e55a:	607b      	str	r3, [r7, #4]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <mem_cmp+0x40>
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0eb      	beq.n	800e540 <mem_cmp+0x18>

	return r;
 800e568:	697b      	ldr	r3, [r7, #20]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3724      	adds	r7, #36	; 0x24
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e576:	b480      	push	{r7}
 800e578:	b083      	sub	sp, #12
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e580:	e002      	b.n	800e588 <chk_chr+0x12>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	3301      	adds	r3, #1
 800e586:	607b      	str	r3, [r7, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d005      	beq.n	800e59c <chk_chr+0x26>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	4293      	cmp	r3, r2
 800e59a:	d1f2      	bne.n	800e582 <chk_chr+0xc>
	return *str;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	781b      	ldrb	r3, [r3, #0]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	60bb      	str	r3, [r7, #8]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	60fb      	str	r3, [r7, #12]
 800e5be:	e029      	b.n	800e614 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e5c0:	4a27      	ldr	r2, [pc, #156]	; (800e660 <chk_lock+0xb4>)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	4413      	add	r3, r2
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d01d      	beq.n	800e60a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5ce:	4a24      	ldr	r2, [pc, #144]	; (800e660 <chk_lock+0xb4>)
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	011b      	lsls	r3, r3, #4
 800e5d4:	4413      	add	r3, r2
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d116      	bne.n	800e60e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e5e0:	4a1f      	ldr	r2, [pc, #124]	; (800e660 <chk_lock+0xb4>)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	011b      	lsls	r3, r3, #4
 800e5e6:	4413      	add	r3, r2
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d10c      	bne.n	800e60e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e5f4:	4a1a      	ldr	r2, [pc, #104]	; (800e660 <chk_lock+0xb4>)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	011b      	lsls	r3, r3, #4
 800e5fa:	4413      	add	r3, r2
 800e5fc:	3308      	adds	r3, #8
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e604:	429a      	cmp	r2, r3
 800e606:	d102      	bne.n	800e60e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e608:	e007      	b.n	800e61a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e60a:	2301      	movs	r3, #1
 800e60c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3301      	adds	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d9d2      	bls.n	800e5c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d109      	bne.n	800e634 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <chk_lock+0x80>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d101      	bne.n	800e630 <chk_lock+0x84>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e010      	b.n	800e652 <chk_lock+0xa6>
 800e630:	2312      	movs	r3, #18
 800e632:	e00e      	b.n	800e652 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d108      	bne.n	800e64c <chk_lock+0xa0>
 800e63a:	4a09      	ldr	r2, [pc, #36]	; (800e660 <chk_lock+0xb4>)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	011b      	lsls	r3, r3, #4
 800e640:	4413      	add	r3, r2
 800e642:	330c      	adds	r3, #12
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e64a:	d101      	bne.n	800e650 <chk_lock+0xa4>
 800e64c:	2310      	movs	r3, #16
 800e64e:	e000      	b.n	800e652 <chk_lock+0xa6>
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	2001ce60 	.word	0x2001ce60

0800e664 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e66a:	2300      	movs	r3, #0
 800e66c:	607b      	str	r3, [r7, #4]
 800e66e:	e002      	b.n	800e676 <enq_lock+0x12>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3301      	adds	r3, #1
 800e674:	607b      	str	r3, [r7, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d806      	bhi.n	800e68a <enq_lock+0x26>
 800e67c:	4a09      	ldr	r2, [pc, #36]	; (800e6a4 <enq_lock+0x40>)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	011b      	lsls	r3, r3, #4
 800e682:	4413      	add	r3, r2
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1f2      	bne.n	800e670 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	bf14      	ite	ne
 800e690:	2301      	movne	r3, #1
 800e692:	2300      	moveq	r3, #0
 800e694:	b2db      	uxtb	r3, r3
}
 800e696:	4618      	mov	r0, r3
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	2001ce60 	.word	0x2001ce60

0800e6a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	e01f      	b.n	800e6f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e6b8:	4a41      	ldr	r2, [pc, #260]	; (800e7c0 <inc_lock+0x118>)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	011b      	lsls	r3, r3, #4
 800e6be:	4413      	add	r3, r2
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d113      	bne.n	800e6f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e6ca:	4a3d      	ldr	r2, [pc, #244]	; (800e7c0 <inc_lock+0x118>)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	4413      	add	r3, r2
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d109      	bne.n	800e6f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e6de:	4a38      	ldr	r2, [pc, #224]	; (800e7c0 <inc_lock+0x118>)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d006      	beq.n	800e700 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d9dc      	bls.n	800e6b8 <inc_lock+0x10>
 800e6fe:	e000      	b.n	800e702 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e700:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b02      	cmp	r3, #2
 800e706:	d132      	bne.n	800e76e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e708:	2300      	movs	r3, #0
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e002      	b.n	800e714 <inc_lock+0x6c>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3301      	adds	r3, #1
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d806      	bhi.n	800e728 <inc_lock+0x80>
 800e71a:	4a29      	ldr	r2, [pc, #164]	; (800e7c0 <inc_lock+0x118>)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	011b      	lsls	r3, r3, #4
 800e720:	4413      	add	r3, r2
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1f2      	bne.n	800e70e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d101      	bne.n	800e732 <inc_lock+0x8a>
 800e72e:	2300      	movs	r3, #0
 800e730:	e040      	b.n	800e7b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	4922      	ldr	r1, [pc, #136]	; (800e7c0 <inc_lock+0x118>)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	011b      	lsls	r3, r3, #4
 800e73c:	440b      	add	r3, r1
 800e73e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	689a      	ldr	r2, [r3, #8]
 800e744:	491e      	ldr	r1, [pc, #120]	; (800e7c0 <inc_lock+0x118>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	440b      	add	r3, r1
 800e74c:	3304      	adds	r3, #4
 800e74e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	695a      	ldr	r2, [r3, #20]
 800e754:	491a      	ldr	r1, [pc, #104]	; (800e7c0 <inc_lock+0x118>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	440b      	add	r3, r1
 800e75c:	3308      	adds	r3, #8
 800e75e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e760:	4a17      	ldr	r2, [pc, #92]	; (800e7c0 <inc_lock+0x118>)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	011b      	lsls	r3, r3, #4
 800e766:	4413      	add	r3, r2
 800e768:	330c      	adds	r3, #12
 800e76a:	2200      	movs	r2, #0
 800e76c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d009      	beq.n	800e788 <inc_lock+0xe0>
 800e774:	4a12      	ldr	r2, [pc, #72]	; (800e7c0 <inc_lock+0x118>)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	4413      	add	r3, r2
 800e77c:	330c      	adds	r3, #12
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <inc_lock+0xe0>
 800e784:	2300      	movs	r3, #0
 800e786:	e015      	b.n	800e7b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d108      	bne.n	800e7a0 <inc_lock+0xf8>
 800e78e:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <inc_lock+0x118>)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	011b      	lsls	r3, r3, #4
 800e794:	4413      	add	r3, r2
 800e796:	330c      	adds	r3, #12
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	3301      	adds	r3, #1
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	e001      	b.n	800e7a4 <inc_lock+0xfc>
 800e7a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7a4:	4906      	ldr	r1, [pc, #24]	; (800e7c0 <inc_lock+0x118>)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	011b      	lsls	r3, r3, #4
 800e7aa:	440b      	add	r3, r1
 800e7ac:	330c      	adds	r3, #12
 800e7ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	3301      	adds	r3, #1
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	2001ce60 	.word	0x2001ce60

0800e7c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	607b      	str	r3, [r7, #4]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d825      	bhi.n	800e824 <dec_lock+0x60>
		n = Files[i].ctr;
 800e7d8:	4a17      	ldr	r2, [pc, #92]	; (800e838 <dec_lock+0x74>)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	011b      	lsls	r3, r3, #4
 800e7de:	4413      	add	r3, r2
 800e7e0:	330c      	adds	r3, #12
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e7e6:	89fb      	ldrh	r3, [r7, #14]
 800e7e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7ec:	d101      	bne.n	800e7f2 <dec_lock+0x2e>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e7f2:	89fb      	ldrh	r3, [r7, #14]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <dec_lock+0x3a>
 800e7f8:	89fb      	ldrh	r3, [r7, #14]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e7fe:	4a0e      	ldr	r2, [pc, #56]	; (800e838 <dec_lock+0x74>)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	011b      	lsls	r3, r3, #4
 800e804:	4413      	add	r3, r2
 800e806:	330c      	adds	r3, #12
 800e808:	89fa      	ldrh	r2, [r7, #14]
 800e80a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e80c:	89fb      	ldrh	r3, [r7, #14]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <dec_lock+0x5a>
 800e812:	4a09      	ldr	r2, [pc, #36]	; (800e838 <dec_lock+0x74>)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	4413      	add	r3, r2
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	737b      	strb	r3, [r7, #13]
 800e822:	e001      	b.n	800e828 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e824:	2302      	movs	r3, #2
 800e826:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e828:	7b7b      	ldrb	r3, [r7, #13]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	2001ce60 	.word	0x2001ce60

0800e83c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e844:	2300      	movs	r3, #0
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	e010      	b.n	800e86c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e84a:	4a0d      	ldr	r2, [pc, #52]	; (800e880 <clear_lock+0x44>)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	011b      	lsls	r3, r3, #4
 800e850:	4413      	add	r3, r2
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	429a      	cmp	r2, r3
 800e858:	d105      	bne.n	800e866 <clear_lock+0x2a>
 800e85a:	4a09      	ldr	r2, [pc, #36]	; (800e880 <clear_lock+0x44>)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	4413      	add	r3, r2
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	3301      	adds	r3, #1
 800e86a:	60fb      	str	r3, [r7, #12]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d9eb      	bls.n	800e84a <clear_lock+0xe>
	}
}
 800e872:	bf00      	nop
 800e874:	bf00      	nop
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	2001ce60 	.word	0x2001ce60

0800e884 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e88c:	2300      	movs	r3, #0
 800e88e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	78db      	ldrb	r3, [r3, #3]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d034      	beq.n	800e902 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7858      	ldrb	r0, [r3, #1]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	f7ff fd40 	bl	800e330 <disk_write>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d002      	beq.n	800e8bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	73fb      	strb	r3, [r7, #15]
 800e8ba:	e022      	b.n	800e902 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	1ad2      	subs	r2, r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d217      	bcs.n	800e902 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	789b      	ldrb	r3, [r3, #2]
 800e8d6:	613b      	str	r3, [r7, #16]
 800e8d8:	e010      	b.n	800e8fc <sync_window+0x78>
					wsect += fs->fsize;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69db      	ldr	r3, [r3, #28]
 800e8de:	697a      	ldr	r2, [r7, #20]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	7858      	ldrb	r0, [r3, #1]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	697a      	ldr	r2, [r7, #20]
 800e8f2:	f7ff fd1d 	bl	800e330 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	613b      	str	r3, [r7, #16]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d8eb      	bhi.n	800e8da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e902:	7bfb      	ldrb	r3, [r7, #15]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	429a      	cmp	r2, r3
 800e922:	d01b      	beq.n	800e95c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff ffad 	bl	800e884 <sync_window>
 800e92a:	4603      	mov	r3, r0
 800e92c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d113      	bne.n	800e95c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	7858      	ldrb	r0, [r3, #1]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e93e:	2301      	movs	r3, #1
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	f7ff fcd5 	bl	800e2f0 <disk_read>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e94c:	f04f 33ff 	mov.w	r3, #4294967295
 800e950:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e952:	2301      	movs	r3, #1
 800e954:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	683a      	ldr	r2, [r7, #0]
 800e95a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff ff87 	bl	800e884 <sync_window>
 800e976:	4603      	mov	r3, r0
 800e978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e97a:	7bfb      	ldrb	r3, [r7, #15]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d158      	bne.n	800ea32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2b03      	cmp	r3, #3
 800e986:	d148      	bne.n	800ea1a <sync_fs+0xb2>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	791b      	ldrb	r3, [r3, #4]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d144      	bne.n	800ea1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3334      	adds	r3, #52	; 0x34
 800e994:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e998:	2100      	movs	r1, #0
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7ff fda9 	bl	800e4f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3334      	adds	r3, #52	; 0x34
 800e9a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e9a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7ff fd38 	bl	800e422 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3334      	adds	r3, #52	; 0x34
 800e9b6:	4921      	ldr	r1, [pc, #132]	; (800ea3c <sync_fs+0xd4>)
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fd4d 	bl	800e458 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3334      	adds	r3, #52	; 0x34
 800e9c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e9c6:	491e      	ldr	r1, [pc, #120]	; (800ea40 <sync_fs+0xd8>)
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff fd45 	bl	800e458 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3334      	adds	r3, #52	; 0x34
 800e9d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	4619      	mov	r1, r3
 800e9dc:	4610      	mov	r0, r2
 800e9de:	f7ff fd3b 	bl	800e458 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3334      	adds	r3, #52	; 0x34
 800e9e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	f7ff fd31 	bl	800e458 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	1c5a      	adds	r2, r3, #1
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7858      	ldrb	r0, [r3, #1]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea0e:	2301      	movs	r3, #1
 800ea10:	f7ff fc8e 	bl	800e330 <disk_write>
			fs->fsi_flag = 0;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	785b      	ldrb	r3, [r3, #1]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	2100      	movs	r1, #0
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff fca4 	bl	800e370 <disk_ioctl>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <sync_fs+0xca>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	41615252 	.word	0x41615252
 800ea40:	61417272 	.word	0x61417272

0800ea44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	3b02      	subs	r3, #2
 800ea52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	3b02      	subs	r3, #2
 800ea5a:	683a      	ldr	r2, [r7, #0]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d301      	bcc.n	800ea64 <clust2sect+0x20>
 800ea60:	2300      	movs	r3, #0
 800ea62:	e008      	b.n	800ea76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	895b      	ldrh	r3, [r3, #10]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	fb03 f202 	mul.w	r2, r3, r2
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea74:	4413      	add	r3, r2
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b086      	sub	sp, #24
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d904      	bls.n	800eaa2 <get_fat+0x20>
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d302      	bcc.n	800eaa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	617b      	str	r3, [r7, #20]
 800eaa6:	e08f      	b.n	800ebc8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eaa8:	f04f 33ff 	mov.w	r3, #4294967295
 800eaac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d062      	beq.n	800eb7c <get_fat+0xfa>
 800eab6:	2b03      	cmp	r3, #3
 800eab8:	dc7c      	bgt.n	800ebb4 <get_fat+0x132>
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d002      	beq.n	800eac4 <get_fat+0x42>
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d042      	beq.n	800eb48 <get_fat+0xc6>
 800eac2:	e077      	b.n	800ebb4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	60fb      	str	r3, [r7, #12]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	085b      	lsrs	r3, r3, #1
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	4413      	add	r3, r2
 800ead0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	0a5b      	lsrs	r3, r3, #9
 800eada:	4413      	add	r3, r2
 800eadc:	4619      	mov	r1, r3
 800eade:	6938      	ldr	r0, [r7, #16]
 800eae0:	f7ff ff14 	bl	800e90c <move_window>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d167      	bne.n	800ebba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	1c5a      	adds	r2, r3, #1
 800eaee:	60fa      	str	r2, [r7, #12]
 800eaf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eafc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	0a5b      	lsrs	r3, r3, #9
 800eb06:	4413      	add	r3, r2
 800eb08:	4619      	mov	r1, r3
 800eb0a:	6938      	ldr	r0, [r7, #16]
 800eb0c:	f7ff fefe 	bl	800e90c <move_window>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d153      	bne.n	800ebbe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb1c:	693a      	ldr	r2, [r7, #16]
 800eb1e:	4413      	add	r3, r2
 800eb20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb24:	021b      	lsls	r3, r3, #8
 800eb26:	461a      	mov	r2, r3
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	f003 0301 	and.w	r3, r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <get_fat+0xbc>
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	091b      	lsrs	r3, r3, #4
 800eb3c:	e002      	b.n	800eb44 <get_fat+0xc2>
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb44:	617b      	str	r3, [r7, #20]
			break;
 800eb46:	e03f      	b.n	800ebc8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	0a1b      	lsrs	r3, r3, #8
 800eb50:	4413      	add	r3, r2
 800eb52:	4619      	mov	r1, r3
 800eb54:	6938      	ldr	r0, [r7, #16]
 800eb56:	f7ff fed9 	bl	800e90c <move_window>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d130      	bne.n	800ebc2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eb6e:	4413      	add	r3, r2
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff fc1b 	bl	800e3ac <ld_word>
 800eb76:	4603      	mov	r3, r0
 800eb78:	617b      	str	r3, [r7, #20]
			break;
 800eb7a:	e025      	b.n	800ebc8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	09db      	lsrs	r3, r3, #7
 800eb84:	4413      	add	r3, r2
 800eb86:	4619      	mov	r1, r3
 800eb88:	6938      	ldr	r0, [r7, #16]
 800eb8a:	f7ff febf 	bl	800e90c <move_window>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d118      	bne.n	800ebc6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	009b      	lsls	r3, r3, #2
 800eb9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eba2:	4413      	add	r3, r2
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff fc19 	bl	800e3dc <ld_dword>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ebb0:	617b      	str	r3, [r7, #20]
			break;
 800ebb2:	e009      	b.n	800ebc8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	e006      	b.n	800ebc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebba:	bf00      	nop
 800ebbc:	e004      	b.n	800ebc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebbe:	bf00      	nop
 800ebc0:	e002      	b.n	800ebc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ebc2:	bf00      	nop
 800ebc4:	e000      	b.n	800ebc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ebc6:	bf00      	nop
		}
	}

	return val;
 800ebc8:	697b      	ldr	r3, [r7, #20]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ebd2:	b590      	push	{r4, r7, lr}
 800ebd4:	b089      	sub	sp, #36	; 0x24
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	f240 80d2 	bls.w	800ed8e <put_fat+0x1bc>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	699b      	ldr	r3, [r3, #24]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	f080 80cc 	bcs.w	800ed8e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	f000 8096 	beq.w	800ed2c <put_fat+0x15a>
 800ec00:	2b03      	cmp	r3, #3
 800ec02:	f300 80cd 	bgt.w	800eda0 <put_fat+0x1ce>
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d002      	beq.n	800ec10 <put_fat+0x3e>
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d06e      	beq.n	800ecec <put_fat+0x11a>
 800ec0e:	e0c7      	b.n	800eda0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	61bb      	str	r3, [r7, #24]
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	085b      	lsrs	r3, r3, #1
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	0a5b      	lsrs	r3, r3, #9
 800ec26:	4413      	add	r3, r2
 800ec28:	4619      	mov	r1, r3
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f7ff fe6e 	bl	800e90c <move_window>
 800ec30:	4603      	mov	r3, r0
 800ec32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec34:	7ffb      	ldrb	r3, [r7, #31]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f040 80ab 	bne.w	800ed92 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	1c59      	adds	r1, r3, #1
 800ec46:	61b9      	str	r1, [r7, #24]
 800ec48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec4c:	4413      	add	r3, r2
 800ec4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00d      	beq.n	800ec76 <put_fat+0xa4>
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b25b      	sxtb	r3, r3
 800ec60:	f003 030f 	and.w	r3, r3, #15
 800ec64:	b25a      	sxtb	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	011b      	lsls	r3, r3, #4
 800ec6c:	b25b      	sxtb	r3, r3
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	e001      	b.n	800ec7a <put_fat+0xa8>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2201      	movs	r2, #1
 800ec82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	0a5b      	lsrs	r3, r3, #9
 800ec8c:	4413      	add	r3, r2
 800ec8e:	4619      	mov	r1, r3
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fe3b 	bl	800e90c <move_window>
 800ec96:	4603      	mov	r3, r0
 800ec98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec9a:	7ffb      	ldrb	r3, [r7, #31]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d17a      	bne.n	800ed96 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecac:	4413      	add	r3, r2
 800ecae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d003      	beq.n	800ecc2 <put_fat+0xf0>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	091b      	lsrs	r3, r3, #4
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	e00e      	b.n	800ece0 <put_fat+0x10e>
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	f023 030f 	bic.w	r3, r3, #15
 800eccc:	b25a      	sxtb	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	0a1b      	lsrs	r3, r3, #8
 800ecd2:	b25b      	sxtb	r3, r3
 800ecd4:	f003 030f 	and.w	r3, r3, #15
 800ecd8:	b25b      	sxtb	r3, r3
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	b25b      	sxtb	r3, r3
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	697a      	ldr	r2, [r7, #20]
 800ece2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2201      	movs	r2, #1
 800ece8:	70da      	strb	r2, [r3, #3]
			break;
 800ecea:	e059      	b.n	800eda0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	0a1b      	lsrs	r3, r3, #8
 800ecf4:	4413      	add	r3, r2
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fe07 	bl	800e90c <move_window>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed02:	7ffb      	ldrb	r3, [r7, #31]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d148      	bne.n	800ed9a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ed16:	4413      	add	r3, r2
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	b292      	uxth	r2, r2
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff fb7f 	bl	800e422 <st_word>
			fs->wflag = 1;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	70da      	strb	r2, [r3, #3]
			break;
 800ed2a:	e039      	b.n	800eda0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	09db      	lsrs	r3, r3, #7
 800ed34:	4413      	add	r3, r2
 800ed36:	4619      	mov	r1, r3
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7ff fde7 	bl	800e90c <move_window>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed42:	7ffb      	ldrb	r3, [r7, #31]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d12a      	bne.n	800ed9e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed5c:	4413      	add	r3, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7ff fb3c 	bl	800e3dc <ld_dword>
 800ed64:	4603      	mov	r3, r0
 800ed66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ed6a:	4323      	orrs	r3, r4
 800ed6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed7c:	4413      	add	r3, r2
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff fb69 	bl	800e458 <st_dword>
			fs->wflag = 1;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	70da      	strb	r2, [r3, #3]
			break;
 800ed8c:	e008      	b.n	800eda0 <put_fat+0x1ce>
		}
	}
 800ed8e:	bf00      	nop
 800ed90:	e006      	b.n	800eda0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed92:	bf00      	nop
 800ed94:	e004      	b.n	800eda0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed96:	bf00      	nop
 800ed98:	e002      	b.n	800eda0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed9a:	bf00      	nop
 800ed9c:	e000      	b.n	800eda0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed9e:	bf00      	nop
	return res;
 800eda0:	7ffb      	ldrb	r3, [r7, #31]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3724      	adds	r7, #36	; 0x24
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd90      	pop	{r4, r7, pc}

0800edaa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b088      	sub	sp, #32
 800edae:	af00      	add	r7, sp, #0
 800edb0:	60f8      	str	r0, [r7, #12]
 800edb2:	60b9      	str	r1, [r7, #8]
 800edb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d904      	bls.n	800edd0 <remove_chain+0x26>
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	699b      	ldr	r3, [r3, #24]
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d301      	bcc.n	800edd4 <remove_chain+0x2a>
 800edd0:	2302      	movs	r3, #2
 800edd2:	e04b      	b.n	800ee6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00c      	beq.n	800edf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800edda:	f04f 32ff 	mov.w	r2, #4294967295
 800edde:	6879      	ldr	r1, [r7, #4]
 800ede0:	69b8      	ldr	r0, [r7, #24]
 800ede2:	f7ff fef6 	bl	800ebd2 <put_fat>
 800ede6:	4603      	mov	r3, r0
 800ede8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800edea:	7ffb      	ldrb	r3, [r7, #31]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <remove_chain+0x4a>
 800edf0:	7ffb      	ldrb	r3, [r7, #31]
 800edf2:	e03b      	b.n	800ee6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800edf4:	68b9      	ldr	r1, [r7, #8]
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff fe43 	bl	800ea82 <get_fat>
 800edfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d031      	beq.n	800ee68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d101      	bne.n	800ee0e <remove_chain+0x64>
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	e02e      	b.n	800ee6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d101      	bne.n	800ee1a <remove_chain+0x70>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e028      	b.n	800ee6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	69b8      	ldr	r0, [r7, #24]
 800ee20:	f7ff fed7 	bl	800ebd2 <put_fat>
 800ee24:	4603      	mov	r3, r0
 800ee26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ee28:	7ffb      	ldrb	r3, [r7, #31]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <remove_chain+0x88>
 800ee2e:	7ffb      	ldrb	r3, [r7, #31]
 800ee30:	e01c      	b.n	800ee6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	695a      	ldr	r2, [r3, #20]
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	3b02      	subs	r3, #2
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d20b      	bcs.n	800ee58 <remove_chain+0xae>
			fs->free_clst++;
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	695b      	ldr	r3, [r3, #20]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	791b      	ldrb	r3, [r3, #4]
 800ee4e:	f043 0301 	orr.w	r3, r3, #1
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d3c6      	bcc.n	800edf4 <remove_chain+0x4a>
 800ee66:	e000      	b.n	800ee6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ee68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ee6a:	2300      	movs	r3, #0
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3720      	adds	r7, #32
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10d      	bne.n	800eea6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d004      	beq.n	800eea0 <create_chain+0x2c>
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d31b      	bcc.n	800eed8 <create_chain+0x64>
 800eea0:	2301      	movs	r3, #1
 800eea2:	61bb      	str	r3, [r7, #24]
 800eea4:	e018      	b.n	800eed8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff fdea 	bl	800ea82 <get_fat>
 800eeae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d801      	bhi.n	800eeba <create_chain+0x46>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e070      	b.n	800ef9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec0:	d101      	bne.n	800eec6 <create_chain+0x52>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	e06a      	b.n	800ef9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d201      	bcs.n	800eed4 <create_chain+0x60>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	e063      	b.n	800ef9c <create_chain+0x128>
		scl = clst;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	3301      	adds	r3, #1
 800eee0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	699b      	ldr	r3, [r3, #24]
 800eee6:	69fa      	ldr	r2, [r7, #28]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d307      	bcc.n	800eefc <create_chain+0x88>
				ncl = 2;
 800eeec:	2302      	movs	r3, #2
 800eeee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eef0:	69fa      	ldr	r2, [r7, #28]
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d901      	bls.n	800eefc <create_chain+0x88>
 800eef8:	2300      	movs	r3, #0
 800eefa:	e04f      	b.n	800ef9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eefc:	69f9      	ldr	r1, [r7, #28]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7ff fdbf 	bl	800ea82 <get_fat>
 800ef04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00e      	beq.n	800ef2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d003      	beq.n	800ef1a <create_chain+0xa6>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef18:	d101      	bne.n	800ef1e <create_chain+0xaa>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	e03e      	b.n	800ef9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ef1e:	69fa      	ldr	r2, [r7, #28]
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d1da      	bne.n	800eedc <create_chain+0x68>
 800ef26:	2300      	movs	r3, #0
 800ef28:	e038      	b.n	800ef9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ef2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ef2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef30:	69f9      	ldr	r1, [r7, #28]
 800ef32:	6938      	ldr	r0, [r7, #16]
 800ef34:	f7ff fe4d 	bl	800ebd2 <put_fat>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d109      	bne.n	800ef56 <create_chain+0xe2>
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ef48:	69fa      	ldr	r2, [r7, #28]
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6938      	ldr	r0, [r7, #16]
 800ef4e:	f7ff fe40 	bl	800ebd2 <put_fat>
 800ef52:	4603      	mov	r3, r0
 800ef54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d116      	bne.n	800ef8a <create_chain+0x116>
		fs->last_clst = ncl;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	69fa      	ldr	r2, [r7, #28]
 800ef60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	695a      	ldr	r2, [r3, #20]
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	3b02      	subs	r3, #2
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d804      	bhi.n	800ef7a <create_chain+0x106>
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	1e5a      	subs	r2, r3, #1
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	791b      	ldrb	r3, [r3, #4]
 800ef7e:	f043 0301 	orr.w	r3, r3, #1
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	711a      	strb	r2, [r3, #4]
 800ef88:	e007      	b.n	800ef9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ef8a:	7dfb      	ldrb	r3, [r7, #23]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d102      	bne.n	800ef96 <create_chain+0x122>
 800ef90:	f04f 33ff 	mov.w	r3, #4294967295
 800ef94:	e000      	b.n	800ef98 <create_chain+0x124>
 800ef96:	2301      	movs	r3, #1
 800ef98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ef9a:	69fb      	ldr	r3, [r7, #28]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3720      	adds	r7, #32
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb8:	3304      	adds	r3, #4
 800efba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	0a5b      	lsrs	r3, r3, #9
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	8952      	ldrh	r2, [r2, #10]
 800efc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800efc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	1d1a      	adds	r2, r3, #4
 800efce:	613a      	str	r2, [r7, #16]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d101      	bne.n	800efde <clmt_clust+0x3a>
 800efda:	2300      	movs	r3, #0
 800efdc:	e010      	b.n	800f000 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800efde:	697a      	ldr	r2, [r7, #20]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d307      	bcc.n	800eff6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800efe6:	697a      	ldr	r2, [r7, #20]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	617b      	str	r3, [r7, #20]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	3304      	adds	r3, #4
 800eff2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eff4:	e7e9      	b.n	800efca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eff6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	4413      	add	r3, r2
}
 800f000:	4618      	mov	r0, r3
 800f002:	371c      	adds	r7, #28
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f022:	d204      	bcs.n	800f02e <dir_sdi+0x22>
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	f003 031f 	and.w	r3, r3, #31
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f02e:	2302      	movs	r3, #2
 800f030:	e063      	b.n	800f0fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d106      	bne.n	800f052 <dir_sdi+0x46>
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d902      	bls.n	800f052 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f050:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10c      	bne.n	800f072 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	095b      	lsrs	r3, r3, #5
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	8912      	ldrh	r2, [r2, #8]
 800f060:	4293      	cmp	r3, r2
 800f062:	d301      	bcc.n	800f068 <dir_sdi+0x5c>
 800f064:	2302      	movs	r3, #2
 800f066:	e048      	b.n	800f0fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	61da      	str	r2, [r3, #28]
 800f070:	e029      	b.n	800f0c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	895b      	ldrh	r3, [r3, #10]
 800f076:	025b      	lsls	r3, r3, #9
 800f078:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f07a:	e019      	b.n	800f0b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6979      	ldr	r1, [r7, #20]
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fcfe 	bl	800ea82 <get_fat>
 800f086:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08e:	d101      	bne.n	800f094 <dir_sdi+0x88>
 800f090:	2301      	movs	r3, #1
 800f092:	e032      	b.n	800f0fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b01      	cmp	r3, #1
 800f098:	d904      	bls.n	800f0a4 <dir_sdi+0x98>
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	697a      	ldr	r2, [r7, #20]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d301      	bcc.n	800f0a8 <dir_sdi+0x9c>
 800f0a4:	2302      	movs	r3, #2
 800f0a6:	e028      	b.n	800f0fa <dir_sdi+0xee>
			ofs -= csz;
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d2e1      	bcs.n	800f07c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f0b8:	6979      	ldr	r1, [r7, #20]
 800f0ba:	6938      	ldr	r0, [r7, #16]
 800f0bc:	f7ff fcc2 	bl	800ea44 <clust2sect>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	697a      	ldr	r2, [r7, #20]
 800f0ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d101      	bne.n	800f0d8 <dir_sdi+0xcc>
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	e010      	b.n	800f0fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	69da      	ldr	r2, [r3, #28]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	0a5b      	lsrs	r3, r3, #9
 800f0e0:	441a      	add	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f2:	441a      	add	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b086      	sub	sp, #24
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	695b      	ldr	r3, [r3, #20]
 800f116:	3320      	adds	r3, #32
 800f118:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	69db      	ldr	r3, [r3, #28]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <dir_next+0x28>
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f128:	d301      	bcc.n	800f12e <dir_next+0x2c>
 800f12a:	2304      	movs	r3, #4
 800f12c:	e0aa      	b.n	800f284 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f134:	2b00      	cmp	r3, #0
 800f136:	f040 8098 	bne.w	800f26a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	69db      	ldr	r3, [r3, #28]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10b      	bne.n	800f164 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	095b      	lsrs	r3, r3, #5
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	8912      	ldrh	r2, [r2, #8]
 800f154:	4293      	cmp	r3, r2
 800f156:	f0c0 8088 	bcc.w	800f26a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	61da      	str	r2, [r3, #28]
 800f160:	2304      	movs	r3, #4
 800f162:	e08f      	b.n	800f284 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	0a5b      	lsrs	r3, r3, #9
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	8952      	ldrh	r2, [r2, #10]
 800f16c:	3a01      	subs	r2, #1
 800f16e:	4013      	ands	r3, r2
 800f170:	2b00      	cmp	r3, #0
 800f172:	d17a      	bne.n	800f26a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	699b      	ldr	r3, [r3, #24]
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f7ff fc80 	bl	800ea82 <get_fat>
 800f182:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d801      	bhi.n	800f18e <dir_next+0x8c>
 800f18a:	2302      	movs	r3, #2
 800f18c:	e07a      	b.n	800f284 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d101      	bne.n	800f19a <dir_next+0x98>
 800f196:	2301      	movs	r3, #1
 800f198:	e074      	b.n	800f284 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	697a      	ldr	r2, [r7, #20]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d358      	bcc.n	800f256 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d104      	bne.n	800f1b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	61da      	str	r2, [r3, #28]
 800f1b0:	2304      	movs	r3, #4
 800f1b2:	e067      	b.n	800f284 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4610      	mov	r0, r2
 800f1be:	f7ff fe59 	bl	800ee74 <create_chain>
 800f1c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <dir_next+0xcc>
 800f1ca:	2307      	movs	r3, #7
 800f1cc:	e05a      	b.n	800f284 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d101      	bne.n	800f1d8 <dir_next+0xd6>
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	e055      	b.n	800f284 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1de:	d101      	bne.n	800f1e4 <dir_next+0xe2>
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e04f      	b.n	800f284 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f7ff fb4d 	bl	800e884 <sync_window>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <dir_next+0xf2>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e047      	b.n	800f284 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3334      	adds	r3, #52	; 0x34
 800f1f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff f977 	bl	800e4f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f204:	2300      	movs	r3, #0
 800f206:	613b      	str	r3, [r7, #16]
 800f208:	6979      	ldr	r1, [r7, #20]
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f7ff fc1a 	bl	800ea44 <clust2sect>
 800f210:	4602      	mov	r2, r0
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	631a      	str	r2, [r3, #48]	; 0x30
 800f216:	e012      	b.n	800f23e <dir_next+0x13c>
						fs->wflag = 1;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2201      	movs	r2, #1
 800f21c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7ff fb30 	bl	800e884 <sync_window>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <dir_next+0x12c>
 800f22a:	2301      	movs	r3, #1
 800f22c:	e02a      	b.n	800f284 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	3301      	adds	r3, #1
 800f232:	613b      	str	r3, [r7, #16]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f238:	1c5a      	adds	r2, r3, #1
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	631a      	str	r2, [r3, #48]	; 0x30
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	895b      	ldrh	r3, [r3, #10]
 800f242:	461a      	mov	r2, r3
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	4293      	cmp	r3, r2
 800f248:	d3e6      	bcc.n	800f218 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	1ad2      	subs	r2, r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	697a      	ldr	r2, [r7, #20]
 800f25a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f25c:	6979      	ldr	r1, [r7, #20]
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7ff fbf0 	bl	800ea44 <clust2sect>
 800f264:	4602      	mov	r2, r0
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27c:	441a      	add	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f29c:	2100      	movs	r1, #0
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff feb4 	bl	800f00c <dir_sdi>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f2a8:	7dfb      	ldrb	r3, [r7, #23]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d12b      	bne.n	800f306 <dir_alloc+0x7a>
		n = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	69db      	ldr	r3, [r3, #28]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f7ff fb27 	bl	800e90c <move_window>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d11d      	bne.n	800f304 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a1b      	ldr	r3, [r3, #32]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	2be5      	cmp	r3, #229	; 0xe5
 800f2d0:	d004      	beq.n	800f2dc <dir_alloc+0x50>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d107      	bne.n	800f2ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	613b      	str	r3, [r7, #16]
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d102      	bne.n	800f2f0 <dir_alloc+0x64>
 800f2ea:	e00c      	b.n	800f306 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff ff05 	bl	800f102 <dir_next>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0d7      	beq.n	800f2b2 <dir_alloc+0x26>
 800f302:	e000      	b.n	800f306 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f304:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d101      	bne.n	800f310 <dir_alloc+0x84>
 800f30c:	2307      	movs	r3, #7
 800f30e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f310:	7dfb      	ldrb	r3, [r7, #23]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b084      	sub	sp, #16
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	331a      	adds	r3, #26
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff f83f 	bl	800e3ac <ld_word>
 800f32e:	4603      	mov	r3, r0
 800f330:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b03      	cmp	r3, #3
 800f338:	d109      	bne.n	800f34e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	3314      	adds	r3, #20
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff f834 	bl	800e3ac <ld_word>
 800f344:	4603      	mov	r3, r0
 800f346:	041b      	lsls	r3, r3, #16
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f34e:	68fb      	ldr	r3, [r7, #12]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	331a      	adds	r3, #26
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	b292      	uxth	r2, r2
 800f36c:	4611      	mov	r1, r2
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff f857 	bl	800e422 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d109      	bne.n	800f390 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	f103 0214 	add.w	r2, r3, #20
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	0c1b      	lsrs	r3, r3, #16
 800f386:	b29b      	uxth	r3, r3
 800f388:	4619      	mov	r1, r3
 800f38a:	4610      	mov	r0, r2
 800f38c:	f7ff f849 	bl	800e422 <st_word>
	}
}
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f398:	b590      	push	{r4, r7, lr}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	331a      	adds	r3, #26
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff f800 	bl	800e3ac <ld_word>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <cmp_lfn+0x1e>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e059      	b.n	800f46a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3be:	1e5a      	subs	r2, r3, #1
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	4413      	add	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4413      	add	r3, r2
 800f3ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	81fb      	strh	r3, [r7, #14]
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	613b      	str	r3, [r7, #16]
 800f3d4:	e033      	b.n	800f43e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f3d6:	4a27      	ldr	r2, [pc, #156]	; (800f474 <cmp_lfn+0xdc>)
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	4413      	add	r3, r2
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe ffe1 	bl	800e3ac <ld_word>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f3ee:	89fb      	ldrh	r3, [r7, #14]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d01a      	beq.n	800f42a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	2bfe      	cmp	r3, #254	; 0xfe
 800f3f8:	d812      	bhi.n	800f420 <cmp_lfn+0x88>
 800f3fa:	89bb      	ldrh	r3, [r7, #12]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f002 fa9b 	bl	8011938 <ff_wtoupper>
 800f402:	4603      	mov	r3, r0
 800f404:	461c      	mov	r4, r3
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	1c5a      	adds	r2, r3, #1
 800f40a:	617a      	str	r2, [r7, #20]
 800f40c:	005b      	lsls	r3, r3, #1
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	4413      	add	r3, r2
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	4618      	mov	r0, r3
 800f416:	f002 fa8f 	bl	8011938 <ff_wtoupper>
 800f41a:	4603      	mov	r3, r0
 800f41c:	429c      	cmp	r4, r3
 800f41e:	d001      	beq.n	800f424 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f420:	2300      	movs	r3, #0
 800f422:	e022      	b.n	800f46a <cmp_lfn+0xd2>
			}
			wc = uc;
 800f424:	89bb      	ldrh	r3, [r7, #12]
 800f426:	81fb      	strh	r3, [r7, #14]
 800f428:	e006      	b.n	800f438 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f42a:	89bb      	ldrh	r3, [r7, #12]
 800f42c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f430:	4293      	cmp	r3, r2
 800f432:	d001      	beq.n	800f438 <cmp_lfn+0xa0>
 800f434:	2300      	movs	r3, #0
 800f436:	e018      	b.n	800f46a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	3301      	adds	r3, #1
 800f43c:	613b      	str	r3, [r7, #16]
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b0c      	cmp	r3, #12
 800f442:	d9c8      	bls.n	800f3d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00b      	beq.n	800f468 <cmp_lfn+0xd0>
 800f450:	89fb      	ldrh	r3, [r7, #14]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d008      	beq.n	800f468 <cmp_lfn+0xd0>
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	005b      	lsls	r3, r3, #1
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	4413      	add	r3, r2
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <cmp_lfn+0xd0>
 800f464:	2300      	movs	r3, #0
 800f466:	e000      	b.n	800f46a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f468:	2301      	movs	r3, #1
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd90      	pop	{r4, r7, pc}
 800f472:	bf00      	nop
 800f474:	08015594 	.word	0x08015594

0800f478 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	4611      	mov	r1, r2
 800f484:	461a      	mov	r2, r3
 800f486:	460b      	mov	r3, r1
 800f488:	71fb      	strb	r3, [r7, #7]
 800f48a:	4613      	mov	r3, r2
 800f48c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	330d      	adds	r3, #13
 800f492:	79ba      	ldrb	r2, [r7, #6]
 800f494:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	330b      	adds	r3, #11
 800f49a:	220f      	movs	r2, #15
 800f49c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	330c      	adds	r3, #12
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	331a      	adds	r3, #26
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe ffb8 	bl	800e422 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	1e5a      	subs	r2, r3, #1
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	4413      	add	r3, r2
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	4413      	add	r3, r2
 800f4c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	82fb      	strh	r3, [r7, #22]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f4ca:	8afb      	ldrh	r3, [r7, #22]
 800f4cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d007      	beq.n	800f4e4 <put_lfn+0x6c>
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	1c5a      	adds	r2, r3, #1
 800f4d8:	61fa      	str	r2, [r7, #28]
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	4413      	add	r3, r2
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f4e4:	4a17      	ldr	r2, [pc, #92]	; (800f544 <put_lfn+0xcc>)
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	8afa      	ldrh	r2, [r7, #22]
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe ff93 	bl	800e422 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f4fc:	8afb      	ldrh	r3, [r7, #22]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d102      	bne.n	800f508 <put_lfn+0x90>
 800f502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f506:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	3301      	adds	r3, #1
 800f50c:	61bb      	str	r3, [r7, #24]
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	2b0c      	cmp	r3, #12
 800f512:	d9da      	bls.n	800f4ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f514:	8afb      	ldrh	r3, [r7, #22]
 800f516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d006      	beq.n	800f52c <put_lfn+0xb4>
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	005b      	lsls	r3, r3, #1
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d103      	bne.n	800f534 <put_lfn+0xbc>
 800f52c:	79fb      	ldrb	r3, [r7, #7]
 800f52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f532:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	79fa      	ldrb	r2, [r7, #7]
 800f538:	701a      	strb	r2, [r3, #0]
}
 800f53a:	bf00      	nop
 800f53c:	3720      	adds	r7, #32
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	08015594 	.word	0x08015594

0800f548 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b08c      	sub	sp, #48	; 0x30
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f556:	220b      	movs	r2, #11
 800f558:	68b9      	ldr	r1, [r7, #8]
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7fe ffa8 	bl	800e4b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	2b05      	cmp	r3, #5
 800f564:	d92b      	bls.n	800f5be <gen_numname+0x76>
		sr = seq;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f56a:	e022      	b.n	800f5b2 <gen_numname+0x6a>
			wc = *lfn++;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	1c9a      	adds	r2, r3, #2
 800f570:	607a      	str	r2, [r7, #4]
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f576:	2300      	movs	r3, #0
 800f578:	62bb      	str	r3, [r7, #40]	; 0x28
 800f57a:	e017      	b.n	800f5ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	005a      	lsls	r2, r3, #1
 800f580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f582:	f003 0301 	and.w	r3, r3, #1
 800f586:	4413      	add	r3, r2
 800f588:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f58a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f596:	2b00      	cmp	r3, #0
 800f598:	d005      	beq.n	800f5a6 <gen_numname+0x5e>
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f5a0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f5a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	2b0f      	cmp	r3, #15
 800f5b0:	d9e4      	bls.n	800f57c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1d8      	bne.n	800f56c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f5be:	2307      	movs	r3, #7
 800f5c0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	f003 030f 	and.w	r3, r3, #15
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	3330      	adds	r3, #48	; 0x30
 800f5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5d6:	2b39      	cmp	r3, #57	; 0x39
 800f5d8:	d904      	bls.n	800f5e4 <gen_numname+0x9c>
 800f5da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5de:	3307      	adds	r3, #7
 800f5e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e6:	1e5a      	subs	r2, r3, #1
 800f5e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800f5ea:	3330      	adds	r3, #48	; 0x30
 800f5ec:	443b      	add	r3, r7
 800f5ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f5f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	091b      	lsrs	r3, r3, #4
 800f5fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1df      	bne.n	800f5c2 <gen_numname+0x7a>
	ns[i] = '~';
 800f602:	f107 0214 	add.w	r2, r7, #20
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	4413      	add	r3, r2
 800f60a:	227e      	movs	r2, #126	; 0x7e
 800f60c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f60e:	2300      	movs	r3, #0
 800f610:	627b      	str	r3, [r7, #36]	; 0x24
 800f612:	e002      	b.n	800f61a <gen_numname+0xd2>
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	3301      	adds	r3, #1
 800f618:	627b      	str	r3, [r7, #36]	; 0x24
 800f61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61e:	429a      	cmp	r2, r3
 800f620:	d205      	bcs.n	800f62e <gen_numname+0xe6>
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	4413      	add	r3, r2
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b20      	cmp	r3, #32
 800f62c:	d1f2      	bne.n	800f614 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f630:	2b07      	cmp	r3, #7
 800f632:	d807      	bhi.n	800f644 <gen_numname+0xfc>
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	1c5a      	adds	r2, r3, #1
 800f638:	62ba      	str	r2, [r7, #40]	; 0x28
 800f63a:	3330      	adds	r3, #48	; 0x30
 800f63c:	443b      	add	r3, r7
 800f63e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f642:	e000      	b.n	800f646 <gen_numname+0xfe>
 800f644:	2120      	movs	r1, #32
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	1c5a      	adds	r2, r3, #1
 800f64a:	627a      	str	r2, [r7, #36]	; 0x24
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4413      	add	r3, r2
 800f650:	460a      	mov	r2, r1
 800f652:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	2b07      	cmp	r3, #7
 800f658:	d9e9      	bls.n	800f62e <gen_numname+0xe6>
}
 800f65a:	bf00      	nop
 800f65c:	bf00      	nop
 800f65e:	3730      	adds	r7, #48	; 0x30
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f670:	230b      	movs	r3, #11
 800f672:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	b2da      	uxtb	r2, r3
 800f678:	0852      	lsrs	r2, r2, #1
 800f67a:	01db      	lsls	r3, r3, #7
 800f67c:	4313      	orrs	r3, r2
 800f67e:	b2da      	uxtb	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	1c59      	adds	r1, r3, #1
 800f684:	6079      	str	r1, [r7, #4]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	4413      	add	r3, r2
 800f68a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	3b01      	subs	r3, #1
 800f690:	60bb      	str	r3, [r7, #8]
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d1ed      	bne.n	800f674 <sum_sfn+0x10>
	return sum;
 800f698:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b086      	sub	sp, #24
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff fca8 	bl	800f00c <dir_sdi>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <dir_find+0x24>
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	e0a9      	b.n	800f81e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f6ca:	23ff      	movs	r3, #255	; 0xff
 800f6cc:	753b      	strb	r3, [r7, #20]
 800f6ce:	7d3b      	ldrb	r3, [r7, #20]
 800f6d0:	757b      	strb	r3, [r7, #21]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	69db      	ldr	r3, [r3, #28]
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6938      	ldr	r0, [r7, #16]
 800f6e2:	f7ff f913 	bl	800e90c <move_window>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f6ea:	7dfb      	ldrb	r3, [r7, #23]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f040 8090 	bne.w	800f812 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f6fa:	7dbb      	ldrb	r3, [r7, #22]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <dir_find+0x60>
 800f700:	2304      	movs	r3, #4
 800f702:	75fb      	strb	r3, [r7, #23]
 800f704:	e08a      	b.n	800f81c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	330b      	adds	r3, #11
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f712:	73fb      	strb	r3, [r7, #15]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	7bfa      	ldrb	r2, [r7, #15]
 800f718:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f71a:	7dbb      	ldrb	r3, [r7, #22]
 800f71c:	2be5      	cmp	r3, #229	; 0xe5
 800f71e:	d007      	beq.n	800f730 <dir_find+0x8a>
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	f003 0308 	and.w	r3, r3, #8
 800f726:	2b00      	cmp	r3, #0
 800f728:	d009      	beq.n	800f73e <dir_find+0x98>
 800f72a:	7bfb      	ldrb	r3, [r7, #15]
 800f72c:	2b0f      	cmp	r3, #15
 800f72e:	d006      	beq.n	800f73e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f730:	23ff      	movs	r3, #255	; 0xff
 800f732:	757b      	strb	r3, [r7, #21]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f04f 32ff 	mov.w	r2, #4294967295
 800f73a:	631a      	str	r2, [r3, #48]	; 0x30
 800f73c:	e05e      	b.n	800f7fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	2b0f      	cmp	r3, #15
 800f742:	d136      	bne.n	800f7b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d154      	bne.n	800f7fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f752:	7dbb      	ldrb	r3, [r7, #22]
 800f754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00d      	beq.n	800f778 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	7b5b      	ldrb	r3, [r3, #13]
 800f762:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f764:	7dbb      	ldrb	r3, [r7, #22]
 800f766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f76a:	75bb      	strb	r3, [r7, #22]
 800f76c:	7dbb      	ldrb	r3, [r7, #22]
 800f76e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	695a      	ldr	r2, [r3, #20]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f778:	7dba      	ldrb	r2, [r7, #22]
 800f77a:	7d7b      	ldrb	r3, [r7, #21]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d115      	bne.n	800f7ac <dir_find+0x106>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a1b      	ldr	r3, [r3, #32]
 800f784:	330d      	adds	r3, #13
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	7d3a      	ldrb	r2, [r7, #20]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d10e      	bne.n	800f7ac <dir_find+0x106>
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	68da      	ldr	r2, [r3, #12]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	4619      	mov	r1, r3
 800f798:	4610      	mov	r0, r2
 800f79a:	f7ff fdfd 	bl	800f398 <cmp_lfn>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <dir_find+0x106>
 800f7a4:	7d7b      	ldrb	r3, [r7, #21]
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	e000      	b.n	800f7ae <dir_find+0x108>
 800f7ac:	23ff      	movs	r3, #255	; 0xff
 800f7ae:	757b      	strb	r3, [r7, #21]
 800f7b0:	e024      	b.n	800f7fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f7b2:	7d7b      	ldrb	r3, [r7, #21]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d109      	bne.n	800f7cc <dir_find+0x126>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7ff ff51 	bl	800f664 <sum_sfn>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	7d3b      	ldrb	r3, [r7, #20]
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d024      	beq.n	800f816 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f7d2:	f003 0301 	and.w	r3, r3, #1
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10a      	bne.n	800f7f0 <dir_find+0x14a>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a18      	ldr	r0, [r3, #32]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3324      	adds	r3, #36	; 0x24
 800f7e2:	220b      	movs	r2, #11
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f7fe fe9f 	bl	800e528 <mem_cmp>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d014      	beq.n	800f81a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f7f0:	23ff      	movs	r3, #255	; 0xff
 800f7f2:	757b      	strb	r3, [r7, #21]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7ff fc7f 	bl	800f102 <dir_next>
 800f804:	4603      	mov	r3, r0
 800f806:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f808:	7dfb      	ldrb	r3, [r7, #23]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f43f af65 	beq.w	800f6da <dir_find+0x34>
 800f810:	e004      	b.n	800f81c <dir_find+0x176>
		if (res != FR_OK) break;
 800f812:	bf00      	nop
 800f814:	e002      	b.n	800f81c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f816:	bf00      	nop
 800f818:	e000      	b.n	800f81c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f81a:	bf00      	nop

	return res;
 800f81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
	...

0800f828 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08c      	sub	sp, #48	; 0x30
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f83c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <dir_register+0x20>
 800f844:	2306      	movs	r3, #6
 800f846:	e0e0      	b.n	800fa0a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f848:	2300      	movs	r3, #0
 800f84a:	627b      	str	r3, [r7, #36]	; 0x24
 800f84c:	e002      	b.n	800f854 <dir_register+0x2c>
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	3301      	adds	r3, #1
 800f852:	627b      	str	r3, [r7, #36]	; 0x24
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	68da      	ldr	r2, [r3, #12]
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	005b      	lsls	r3, r3, #1
 800f85c:	4413      	add	r3, r2
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1f4      	bne.n	800f84e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f86a:	f107 030c 	add.w	r3, r7, #12
 800f86e:	220c      	movs	r2, #12
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe fe1d 	bl	800e4b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f876:	7dfb      	ldrb	r3, [r7, #23]
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d032      	beq.n	800f8e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2240      	movs	r2, #64	; 0x40
 800f884:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f888:	2301      	movs	r3, #1
 800f88a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f88c:	e016      	b.n	800f8bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	68da      	ldr	r2, [r3, #12]
 800f898:	f107 010c 	add.w	r1, r7, #12
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	f7ff fe53 	bl	800f548 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff feff 	bl	800f6a6 <dir_find>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	2b63      	cmp	r3, #99	; 0x63
 800f8c0:	d9e5      	bls.n	800f88e <dir_register+0x66>
 800f8c2:	e000      	b.n	800f8c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f8c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	2b64      	cmp	r3, #100	; 0x64
 800f8ca:	d101      	bne.n	800f8d0 <dir_register+0xa8>
 800f8cc:	2307      	movs	r3, #7
 800f8ce:	e09c      	b.n	800fa0a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f8d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8d4:	2b04      	cmp	r3, #4
 800f8d6:	d002      	beq.n	800f8de <dir_register+0xb6>
 800f8d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8dc:	e095      	b.n	800fa0a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f8de:	7dfa      	ldrb	r2, [r7, #23]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f8e6:	7dfb      	ldrb	r3, [r7, #23]
 800f8e8:	f003 0302 	and.w	r3, r3, #2
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d007      	beq.n	800f900 <dir_register+0xd8>
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	330c      	adds	r3, #12
 800f8f4:	4a47      	ldr	r2, [pc, #284]	; (800fa14 <dir_register+0x1ec>)
 800f8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8fa:	089b      	lsrs	r3, r3, #2
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	e000      	b.n	800f902 <dir_register+0xda>
 800f900:	2301      	movs	r3, #1
 800f902:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f904:	6a39      	ldr	r1, [r7, #32]
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff fcc0 	bl	800f28c <dir_alloc>
 800f90c:	4603      	mov	r3, r0
 800f90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f916:	2b00      	cmp	r3, #0
 800f918:	d148      	bne.n	800f9ac <dir_register+0x184>
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	623b      	str	r3, [r7, #32]
 800f920:	6a3b      	ldr	r3, [r7, #32]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d042      	beq.n	800f9ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	695a      	ldr	r2, [r3, #20]
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	015b      	lsls	r3, r3, #5
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	4619      	mov	r1, r3
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff fb6a 	bl	800f00c <dir_sdi>
 800f938:	4603      	mov	r3, r0
 800f93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f93e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f942:	2b00      	cmp	r3, #0
 800f944:	d132      	bne.n	800f9ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3324      	adds	r3, #36	; 0x24
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7ff fe8a 	bl	800f664 <sum_sfn>
 800f950:	4603      	mov	r3, r0
 800f952:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	69db      	ldr	r3, [r3, #28]
 800f958:	4619      	mov	r1, r3
 800f95a:	69f8      	ldr	r0, [r7, #28]
 800f95c:	f7fe ffd6 	bl	800e90c <move_window>
 800f960:	4603      	mov	r3, r0
 800f962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d11d      	bne.n	800f9aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	68d8      	ldr	r0, [r3, #12]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a19      	ldr	r1, [r3, #32]
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	7efb      	ldrb	r3, [r7, #27]
 800f97c:	f7ff fd7c 	bl	800f478 <put_lfn>
				fs->wflag = 1;
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	2201      	movs	r2, #1
 800f984:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f986:	2100      	movs	r1, #0
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7ff fbba 	bl	800f102 <dir_next>
 800f98e:	4603      	mov	r3, r0
 800f990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d107      	bne.n	800f9ac <dir_register+0x184>
 800f99c:	6a3b      	ldr	r3, [r7, #32]
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	623b      	str	r3, [r7, #32]
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1d5      	bne.n	800f954 <dir_register+0x12c>
 800f9a8:	e000      	b.n	800f9ac <dir_register+0x184>
				if (res != FR_OK) break;
 800f9aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d128      	bne.n	800fa06 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	69db      	ldr	r3, [r3, #28]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	69f8      	ldr	r0, [r7, #28]
 800f9bc:	f7fe ffa6 	bl	800e90c <move_window>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f9c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d11b      	bne.n	800fa06 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fe fd8b 	bl	800e4f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a18      	ldr	r0, [r3, #32]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	3324      	adds	r3, #36	; 0x24
 800f9e4:	220b      	movs	r2, #11
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	f7fe fd62 	bl	800e4b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	330c      	adds	r3, #12
 800f9f8:	f002 0218 	and.w	r2, r2, #24
 800f9fc:	b2d2      	uxtb	r2, r2
 800f9fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	2201      	movs	r2, #1
 800fa04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fa06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3730      	adds	r7, #48	; 0x30
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	4ec4ec4f 	.word	0x4ec4ec4f

0800fa18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b08a      	sub	sp, #40	; 0x28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	613b      	str	r3, [r7, #16]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	2300      	movs	r3, #0
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	61ba      	str	r2, [r7, #24]
 800fa3e:	693a      	ldr	r2, [r7, #16]
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fa46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa48:	2b1f      	cmp	r3, #31
 800fa4a:	d940      	bls.n	800face <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fa4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa4e:	2b2f      	cmp	r3, #47	; 0x2f
 800fa50:	d006      	beq.n	800fa60 <create_name+0x48>
 800fa52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa54:	2b5c      	cmp	r3, #92	; 0x5c
 800fa56:	d110      	bne.n	800fa7a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fa58:	e002      	b.n	800fa60 <create_name+0x48>
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	61bb      	str	r3, [r7, #24]
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	4413      	add	r3, r2
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	2b2f      	cmp	r3, #47	; 0x2f
 800fa6a:	d0f6      	beq.n	800fa5a <create_name+0x42>
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	4413      	add	r3, r2
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b5c      	cmp	r3, #92	; 0x5c
 800fa76:	d0f0      	beq.n	800fa5a <create_name+0x42>
			break;
 800fa78:	e02a      	b.n	800fad0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2bfe      	cmp	r3, #254	; 0xfe
 800fa7e:	d901      	bls.n	800fa84 <create_name+0x6c>
 800fa80:	2306      	movs	r3, #6
 800fa82:	e17d      	b.n	800fd80 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fa84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fa8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa8c:	2101      	movs	r1, #1
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f001 ff16 	bl	80118c0 <ff_convert>
 800fa94:	4603      	mov	r3, r0
 800fa96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fa98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d101      	bne.n	800faa2 <create_name+0x8a>
 800fa9e:	2306      	movs	r3, #6
 800faa0:	e16e      	b.n	800fd80 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800faa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faa4:	2b7f      	cmp	r3, #127	; 0x7f
 800faa6:	d809      	bhi.n	800fabc <create_name+0xa4>
 800faa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faaa:	4619      	mov	r1, r3
 800faac:	488d      	ldr	r0, [pc, #564]	; (800fce4 <create_name+0x2cc>)
 800faae:	f7fe fd62 	bl	800e576 <chk_chr>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <create_name+0xa4>
 800fab8:	2306      	movs	r3, #6
 800faba:	e161      	b.n	800fd80 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	617a      	str	r2, [r7, #20]
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4413      	add	r3, r2
 800fac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800faca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800facc:	e7b4      	b.n	800fa38 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800face:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	441a      	add	r2, r3
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fadc:	2b1f      	cmp	r3, #31
 800fade:	d801      	bhi.n	800fae4 <create_name+0xcc>
 800fae0:	2304      	movs	r3, #4
 800fae2:	e000      	b.n	800fae6 <create_name+0xce>
 800fae4:	2300      	movs	r3, #0
 800fae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800faea:	e011      	b.n	800fb10 <create_name+0xf8>
		w = lfn[di - 1];
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800faf2:	3b01      	subs	r3, #1
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	4413      	add	r3, r2
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fafe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d002      	beq.n	800fb0a <create_name+0xf2>
 800fb04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb06:	2b2e      	cmp	r3, #46	; 0x2e
 800fb08:	d106      	bne.n	800fb18 <create_name+0x100>
		di--;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1ea      	bne.n	800faec <create_name+0xd4>
 800fb16:	e000      	b.n	800fb1a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fb18:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	4413      	add	r3, r2
 800fb22:	2200      	movs	r2, #0
 800fb24:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <create_name+0x118>
 800fb2c:	2306      	movs	r3, #6
 800fb2e:	e127      	b.n	800fd80 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	3324      	adds	r3, #36	; 0x24
 800fb34:	220b      	movs	r2, #11
 800fb36:	2120      	movs	r1, #32
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fe fcda 	bl	800e4f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fb3e:	2300      	movs	r3, #0
 800fb40:	61bb      	str	r3, [r7, #24]
 800fb42:	e002      	b.n	800fb4a <create_name+0x132>
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	3301      	adds	r3, #1
 800fb48:	61bb      	str	r3, [r7, #24]
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	005b      	lsls	r3, r3, #1
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	4413      	add	r3, r2
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	2b20      	cmp	r3, #32
 800fb56:	d0f5      	beq.n	800fb44 <create_name+0x12c>
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4413      	add	r3, r2
 800fb60:	881b      	ldrh	r3, [r3, #0]
 800fb62:	2b2e      	cmp	r3, #46	; 0x2e
 800fb64:	d0ee      	beq.n	800fb44 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d009      	beq.n	800fb80 <create_name+0x168>
 800fb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb70:	f043 0303 	orr.w	r3, r3, #3
 800fb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fb78:	e002      	b.n	800fb80 <create_name+0x168>
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	617b      	str	r3, [r7, #20]
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d009      	beq.n	800fb9a <create_name+0x182>
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	4413      	add	r3, r2
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	2b2e      	cmp	r3, #46	; 0x2e
 800fb98:	d1ef      	bne.n	800fb7a <create_name+0x162>

	i = b = 0; ni = 8;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fba0:	2300      	movs	r3, #0
 800fba2:	623b      	str	r3, [r7, #32]
 800fba4:	2308      	movs	r3, #8
 800fba6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	61ba      	str	r2, [r7, #24]
 800fbae:	005b      	lsls	r3, r3, #1
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fbb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 8090 	beq.w	800fce0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbc2:	2b20      	cmp	r3, #32
 800fbc4:	d006      	beq.n	800fbd4 <create_name+0x1bc>
 800fbc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbc8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbca:	d10a      	bne.n	800fbe2 <create_name+0x1ca>
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d006      	beq.n	800fbe2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd8:	f043 0303 	orr.w	r3, r3, #3
 800fbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbe0:	e07d      	b.n	800fcde <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fbe2:	6a3a      	ldr	r2, [r7, #32]
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d203      	bcs.n	800fbf2 <create_name+0x1da>
 800fbea:	69ba      	ldr	r2, [r7, #24]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d123      	bne.n	800fc3a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	2b0b      	cmp	r3, #11
 800fbf6:	d106      	bne.n	800fc06 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbfc:	f043 0303 	orr.w	r3, r3, #3
 800fc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc04:	e075      	b.n	800fcf2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d005      	beq.n	800fc1a <create_name+0x202>
 800fc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc12:	f043 0303 	orr.w	r3, r3, #3
 800fc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fc1a:	69ba      	ldr	r2, [r7, #24]
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d866      	bhi.n	800fcf0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	61bb      	str	r3, [r7, #24]
 800fc26:	2308      	movs	r3, #8
 800fc28:	623b      	str	r3, [r7, #32]
 800fc2a:	230b      	movs	r3, #11
 800fc2c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fc2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc38:	e051      	b.n	800fcde <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fc3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc3c:	2b7f      	cmp	r3, #127	; 0x7f
 800fc3e:	d914      	bls.n	800fc6a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fc40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc42:	2100      	movs	r1, #0
 800fc44:	4618      	mov	r0, r3
 800fc46:	f001 fe3b 	bl	80118c0 <ff_convert>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <create_name+0x246>
 800fc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc56:	3b80      	subs	r3, #128	; 0x80
 800fc58:	4a23      	ldr	r2, [pc, #140]	; (800fce8 <create_name+0x2d0>)
 800fc5a:	5cd3      	ldrb	r3, [r2, r3]
 800fc5c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fc5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc62:	f043 0302 	orr.w	r3, r3, #2
 800fc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fc6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d007      	beq.n	800fc80 <create_name+0x268>
 800fc70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc72:	4619      	mov	r1, r3
 800fc74:	481d      	ldr	r0, [pc, #116]	; (800fcec <create_name+0x2d4>)
 800fc76:	f7fe fc7e 	bl	800e576 <chk_chr>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d008      	beq.n	800fc92 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fc80:	235f      	movs	r3, #95	; 0x5f
 800fc82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc88:	f043 0303 	orr.w	r3, r3, #3
 800fc8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc90:	e01b      	b.n	800fcca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fc92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc94:	2b40      	cmp	r3, #64	; 0x40
 800fc96:	d909      	bls.n	800fcac <create_name+0x294>
 800fc98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc9a:	2b5a      	cmp	r3, #90	; 0x5a
 800fc9c:	d806      	bhi.n	800fcac <create_name+0x294>
					b |= 2;
 800fc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fca2:	f043 0302 	orr.w	r3, r3, #2
 800fca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcaa:	e00e      	b.n	800fcca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fcac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcae:	2b60      	cmp	r3, #96	; 0x60
 800fcb0:	d90b      	bls.n	800fcca <create_name+0x2b2>
 800fcb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcb4:	2b7a      	cmp	r3, #122	; 0x7a
 800fcb6:	d808      	bhi.n	800fcca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fcb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcbc:	f043 0301 	orr.w	r3, r3, #1
 800fcc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcc6:	3b20      	subs	r3, #32
 800fcc8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fcca:	6a3b      	ldr	r3, [r7, #32]
 800fccc:	1c5a      	adds	r2, r3, #1
 800fcce:	623a      	str	r2, [r7, #32]
 800fcd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcd2:	b2d1      	uxtb	r1, r2
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	460a      	mov	r2, r1
 800fcda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fcde:	e763      	b.n	800fba8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fce0:	bf00      	nop
 800fce2:	e006      	b.n	800fcf2 <create_name+0x2da>
 800fce4:	08012f7c 	.word	0x08012f7c
 800fce8:	08015514 	.word	0x08015514
 800fcec:	08012f88 	.word	0x08012f88
			if (si > di) break;			/* No extension */
 800fcf0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fcf8:	2be5      	cmp	r3, #229	; 0xe5
 800fcfa:	d103      	bne.n	800fd04 <create_name+0x2ec>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2205      	movs	r2, #5
 800fd00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	2b08      	cmp	r3, #8
 800fd08:	d104      	bne.n	800fd14 <create_name+0x2fc>
 800fd0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fd14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd18:	f003 030c 	and.w	r3, r3, #12
 800fd1c:	2b0c      	cmp	r3, #12
 800fd1e:	d005      	beq.n	800fd2c <create_name+0x314>
 800fd20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd24:	f003 0303 	and.w	r3, r3, #3
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d105      	bne.n	800fd38 <create_name+0x320>
 800fd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd30:	f043 0302 	orr.w	r3, r3, #2
 800fd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd3c:	f003 0302 	and.w	r3, r3, #2
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d117      	bne.n	800fd74 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fd44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd48:	f003 0303 	and.w	r3, r3, #3
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d105      	bne.n	800fd5c <create_name+0x344>
 800fd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd54:	f043 0310 	orr.w	r3, r3, #16
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fd5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd60:	f003 030c 	and.w	r3, r3, #12
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	d105      	bne.n	800fd74 <create_name+0x35c>
 800fd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800fd7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3728      	adds	r7, #40	; 0x28
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fd9c:	e002      	b.n	800fda4 <follow_path+0x1c>
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	3301      	adds	r3, #1
 800fda2:	603b      	str	r3, [r7, #0]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b2f      	cmp	r3, #47	; 0x2f
 800fdaa:	d0f8      	beq.n	800fd9e <follow_path+0x16>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b5c      	cmp	r3, #92	; 0x5c
 800fdb2:	d0f4      	beq.n	800fd9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b1f      	cmp	r3, #31
 800fdc0:	d80a      	bhi.n	800fdd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2280      	movs	r2, #128	; 0x80
 800fdc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7ff f91d 	bl	800f00c <dir_sdi>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75fb      	strb	r3, [r7, #23]
 800fdd6:	e043      	b.n	800fe60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdd8:	463b      	mov	r3, r7
 800fdda:	4619      	mov	r1, r3
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7ff fe1b 	bl	800fa18 <create_name>
 800fde2:	4603      	mov	r3, r0
 800fde4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fde6:	7dfb      	ldrb	r3, [r7, #23]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d134      	bne.n	800fe56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff fc5a 	bl	800f6a6 <dir_find>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fdfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fdfe:	7dfb      	ldrb	r3, [r7, #23]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00a      	beq.n	800fe1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fe04:	7dfb      	ldrb	r3, [r7, #23]
 800fe06:	2b04      	cmp	r3, #4
 800fe08:	d127      	bne.n	800fe5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fe0a:	7afb      	ldrb	r3, [r7, #11]
 800fe0c:	f003 0304 	and.w	r3, r3, #4
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d122      	bne.n	800fe5a <follow_path+0xd2>
 800fe14:	2305      	movs	r3, #5
 800fe16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fe18:	e01f      	b.n	800fe5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe1a:	7afb      	ldrb	r3, [r7, #11]
 800fe1c:	f003 0304 	and.w	r3, r3, #4
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d11c      	bne.n	800fe5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	799b      	ldrb	r3, [r3, #6]
 800fe28:	f003 0310 	and.w	r3, r3, #16
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d102      	bne.n	800fe36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fe30:	2305      	movs	r3, #5
 800fe32:	75fb      	strb	r3, [r7, #23]
 800fe34:	e014      	b.n	800fe60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe44:	4413      	add	r3, r2
 800fe46:	4619      	mov	r1, r3
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7ff fa66 	bl	800f31a <ld_clust>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe54:	e7c0      	b.n	800fdd8 <follow_path+0x50>
			if (res != FR_OK) break;
 800fe56:	bf00      	nop
 800fe58:	e002      	b.n	800fe60 <follow_path+0xd8>
				break;
 800fe5a:	bf00      	nop
 800fe5c:	e000      	b.n	800fe60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe5e:	bf00      	nop
			}
		}
	}

	return res;
 800fe60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fe6a:	b480      	push	{r7}
 800fe6c:	b087      	sub	sp, #28
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fe72:	f04f 33ff 	mov.w	r3, #4294967295
 800fe76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d031      	beq.n	800fee4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	617b      	str	r3, [r7, #20]
 800fe86:	e002      	b.n	800fe8e <get_ldnumber+0x24>
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	617b      	str	r3, [r7, #20]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b1f      	cmp	r3, #31
 800fe94:	d903      	bls.n	800fe9e <get_ldnumber+0x34>
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	2b3a      	cmp	r3, #58	; 0x3a
 800fe9c:	d1f4      	bne.n	800fe88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	2b3a      	cmp	r3, #58	; 0x3a
 800fea4:	d11c      	bne.n	800fee0 <get_ldnumber+0x76>
			tp = *path;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	1c5a      	adds	r2, r3, #1
 800feb0:	60fa      	str	r2, [r7, #12]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	3b30      	subs	r3, #48	; 0x30
 800feb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	2b09      	cmp	r3, #9
 800febc:	d80e      	bhi.n	800fedc <get_ldnumber+0x72>
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d10a      	bne.n	800fedc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d107      	bne.n	800fedc <get_ldnumber+0x72>
					vol = (int)i;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	3301      	adds	r3, #1
 800fed4:	617b      	str	r3, [r7, #20]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	e002      	b.n	800fee6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fee0:	2300      	movs	r3, #0
 800fee2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fee4:	693b      	ldr	r3, [r7, #16]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	371c      	adds	r7, #28
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
	...

0800fef4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	70da      	strb	r2, [r3, #3]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f04f 32ff 	mov.w	r2, #4294967295
 800ff0a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7fe fcfc 	bl	800e90c <move_window>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <check_fs+0x2a>
 800ff1a:	2304      	movs	r3, #4
 800ff1c:	e038      	b.n	800ff90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3334      	adds	r3, #52	; 0x34
 800ff22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe fa40 	bl	800e3ac <ld_word>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d001      	beq.n	800ff3c <check_fs+0x48>
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e029      	b.n	800ff90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff42:	2be9      	cmp	r3, #233	; 0xe9
 800ff44:	d009      	beq.n	800ff5a <check_fs+0x66>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff4c:	2beb      	cmp	r3, #235	; 0xeb
 800ff4e:	d11e      	bne.n	800ff8e <check_fs+0x9a>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ff56:	2b90      	cmp	r3, #144	; 0x90
 800ff58:	d119      	bne.n	800ff8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	3334      	adds	r3, #52	; 0x34
 800ff5e:	3336      	adds	r3, #54	; 0x36
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fe fa3b 	bl	800e3dc <ld_dword>
 800ff66:	4603      	mov	r3, r0
 800ff68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ff6c:	4a0a      	ldr	r2, [pc, #40]	; (800ff98 <check_fs+0xa4>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d101      	bne.n	800ff76 <check_fs+0x82>
 800ff72:	2300      	movs	r3, #0
 800ff74:	e00c      	b.n	800ff90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	3334      	adds	r3, #52	; 0x34
 800ff7a:	3352      	adds	r3, #82	; 0x52
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fe fa2d 	bl	800e3dc <ld_dword>
 800ff82:	4603      	mov	r3, r0
 800ff84:	4a05      	ldr	r2, [pc, #20]	; (800ff9c <check_fs+0xa8>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d101      	bne.n	800ff8e <check_fs+0x9a>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	e000      	b.n	800ff90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ff8e:	2302      	movs	r3, #2
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	00544146 	.word	0x00544146
 800ff9c:	33544146 	.word	0x33544146

0800ffa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b096      	sub	sp, #88	; 0x58
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	4613      	mov	r3, r2
 800ffac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7ff ff58 	bl	800fe6a <get_ldnumber>
 800ffba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ffbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	da01      	bge.n	800ffc6 <find_volume+0x26>
 800ffc2:	230b      	movs	r3, #11
 800ffc4:	e22d      	b.n	8010422 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ffc6:	4aa1      	ldr	r2, [pc, #644]	; (801024c <find_volume+0x2ac>)
 800ffc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <find_volume+0x3a>
 800ffd6:	230c      	movs	r3, #12
 800ffd8:	e223      	b.n	8010422 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	f023 0301 	bic.w	r3, r3, #1
 800ffe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d01a      	beq.n	8010026 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff2:	785b      	ldrb	r3, [r3, #1]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe f93b 	bl	800e270 <disk_status>
 800fffa:	4603      	mov	r3, r0
 800fffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010004:	f003 0301 	and.w	r3, r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	d10c      	bne.n	8010026 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d007      	beq.n	8010022 <find_volume+0x82>
 8010012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801001e:	230a      	movs	r3, #10
 8010020:	e1ff      	b.n	8010422 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010022:	2300      	movs	r3, #0
 8010024:	e1fd      	b.n	8010422 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	2200      	movs	r2, #0
 801002a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801002c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002e:	b2da      	uxtb	r2, r3
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	785b      	ldrb	r3, [r3, #1]
 8010038:	4618      	mov	r0, r3
 801003a:	f7fe f933 	bl	800e2a4 <disk_initialize>
 801003e:	4603      	mov	r3, r0
 8010040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010050:	2303      	movs	r3, #3
 8010052:	e1e6      	b.n	8010422 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d007      	beq.n	801006a <find_volume+0xca>
 801005a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801005e:	f003 0304 	and.w	r3, r3, #4
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010066:	230a      	movs	r3, #10
 8010068:	e1db      	b.n	8010422 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801006a:	2300      	movs	r3, #0
 801006c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801006e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010072:	f7ff ff3f 	bl	800fef4 <check_fs>
 8010076:	4603      	mov	r3, r0
 8010078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801007c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010080:	2b02      	cmp	r3, #2
 8010082:	d149      	bne.n	8010118 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010084:	2300      	movs	r3, #0
 8010086:	643b      	str	r3, [r7, #64]	; 0x40
 8010088:	e01e      	b.n	80100c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010092:	011b      	lsls	r3, r3, #4
 8010094:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010098:	4413      	add	r3, r2
 801009a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	3304      	adds	r3, #4
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d006      	beq.n	80100b4 <find_volume+0x114>
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	3308      	adds	r3, #8
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fe f996 	bl	800e3dc <ld_dword>
 80100b0:	4602      	mov	r2, r0
 80100b2:	e000      	b.n	80100b6 <find_volume+0x116>
 80100b4:	2200      	movs	r2, #0
 80100b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	3358      	adds	r3, #88	; 0x58
 80100bc:	443b      	add	r3, r7
 80100be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80100c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c4:	3301      	adds	r3, #1
 80100c6:	643b      	str	r3, [r7, #64]	; 0x40
 80100c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d9dd      	bls.n	801008a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80100ce:	2300      	movs	r3, #0
 80100d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80100d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <find_volume+0x13e>
 80100d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100da:	3b01      	subs	r3, #1
 80100dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80100de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	3358      	adds	r3, #88	; 0x58
 80100e4:	443b      	add	r3, r7
 80100e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80100ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d005      	beq.n	80100fe <find_volume+0x15e>
 80100f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100f6:	f7ff fefd 	bl	800fef4 <check_fs>
 80100fa:	4603      	mov	r3, r0
 80100fc:	e000      	b.n	8010100 <find_volume+0x160>
 80100fe:	2303      	movs	r3, #3
 8010100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010108:	2b01      	cmp	r3, #1
 801010a:	d905      	bls.n	8010118 <find_volume+0x178>
 801010c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801010e:	3301      	adds	r3, #1
 8010110:	643b      	str	r3, [r7, #64]	; 0x40
 8010112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010114:	2b03      	cmp	r3, #3
 8010116:	d9e2      	bls.n	80100de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801011c:	2b04      	cmp	r3, #4
 801011e:	d101      	bne.n	8010124 <find_volume+0x184>
 8010120:	2301      	movs	r3, #1
 8010122:	e17e      	b.n	8010422 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010128:	2b01      	cmp	r3, #1
 801012a:	d901      	bls.n	8010130 <find_volume+0x190>
 801012c:	230d      	movs	r3, #13
 801012e:	e178      	b.n	8010422 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010132:	3334      	adds	r3, #52	; 0x34
 8010134:	330b      	adds	r3, #11
 8010136:	4618      	mov	r0, r3
 8010138:	f7fe f938 	bl	800e3ac <ld_word>
 801013c:	4603      	mov	r3, r0
 801013e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010142:	d001      	beq.n	8010148 <find_volume+0x1a8>
 8010144:	230d      	movs	r3, #13
 8010146:	e16c      	b.n	8010422 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	3334      	adds	r3, #52	; 0x34
 801014c:	3316      	adds	r3, #22
 801014e:	4618      	mov	r0, r3
 8010150:	f7fe f92c 	bl	800e3ac <ld_word>
 8010154:	4603      	mov	r3, r0
 8010156:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <find_volume+0x1cc>
 801015e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010160:	3334      	adds	r3, #52	; 0x34
 8010162:	3324      	adds	r3, #36	; 0x24
 8010164:	4618      	mov	r0, r3
 8010166:	f7fe f939 	bl	800e3dc <ld_dword>
 801016a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010170:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	789b      	ldrb	r3, [r3, #2]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d005      	beq.n	8010190 <find_volume+0x1f0>
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	789b      	ldrb	r3, [r3, #2]
 8010188:	2b02      	cmp	r3, #2
 801018a:	d001      	beq.n	8010190 <find_volume+0x1f0>
 801018c:	230d      	movs	r3, #13
 801018e:	e148      	b.n	8010422 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010192:	789b      	ldrb	r3, [r3, #2]
 8010194:	461a      	mov	r2, r3
 8010196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010198:	fb02 f303 	mul.w	r3, r2, r3
 801019c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801019e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101a4:	b29a      	uxth	r2, r3
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	895b      	ldrh	r3, [r3, #10]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d008      	beq.n	80101c4 <find_volume+0x224>
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	895b      	ldrh	r3, [r3, #10]
 80101b6:	461a      	mov	r2, r3
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	895b      	ldrh	r3, [r3, #10]
 80101bc:	3b01      	subs	r3, #1
 80101be:	4013      	ands	r3, r2
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <find_volume+0x228>
 80101c4:	230d      	movs	r3, #13
 80101c6:	e12c      	b.n	8010422 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	3334      	adds	r3, #52	; 0x34
 80101cc:	3311      	adds	r3, #17
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe f8ec 	bl	800e3ac <ld_word>
 80101d4:	4603      	mov	r3, r0
 80101d6:	461a      	mov	r2, r3
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	891b      	ldrh	r3, [r3, #8]
 80101e0:	f003 030f 	and.w	r3, r3, #15
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <find_volume+0x24e>
 80101ea:	230d      	movs	r3, #13
 80101ec:	e119      	b.n	8010422 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80101ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f0:	3334      	adds	r3, #52	; 0x34
 80101f2:	3313      	adds	r3, #19
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe f8d9 	bl	800e3ac <ld_word>
 80101fa:	4603      	mov	r3, r0
 80101fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80101fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010200:	2b00      	cmp	r3, #0
 8010202:	d106      	bne.n	8010212 <find_volume+0x272>
 8010204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010206:	3334      	adds	r3, #52	; 0x34
 8010208:	3320      	adds	r3, #32
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe f8e6 	bl	800e3dc <ld_dword>
 8010210:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010214:	3334      	adds	r3, #52	; 0x34
 8010216:	330e      	adds	r3, #14
 8010218:	4618      	mov	r0, r3
 801021a:	f7fe f8c7 	bl	800e3ac <ld_word>
 801021e:	4603      	mov	r3, r0
 8010220:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <find_volume+0x28c>
 8010228:	230d      	movs	r3, #13
 801022a:	e0fa      	b.n	8010422 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801022c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801022e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010230:	4413      	add	r3, r2
 8010232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010234:	8912      	ldrh	r2, [r2, #8]
 8010236:	0912      	lsrs	r2, r2, #4
 8010238:	b292      	uxth	r2, r2
 801023a:	4413      	add	r3, r2
 801023c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801023e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010242:	429a      	cmp	r2, r3
 8010244:	d204      	bcs.n	8010250 <find_volume+0x2b0>
 8010246:	230d      	movs	r3, #13
 8010248:	e0eb      	b.n	8010422 <find_volume+0x482>
 801024a:	bf00      	nop
 801024c:	2001ce58 	.word	0x2001ce58
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	1ad3      	subs	r3, r2, r3
 8010256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010258:	8952      	ldrh	r2, [r2, #10]
 801025a:	fbb3 f3f2 	udiv	r3, r3, r2
 801025e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <find_volume+0x2ca>
 8010266:	230d      	movs	r3, #13
 8010268:	e0db      	b.n	8010422 <find_volume+0x482>
		fmt = FS_FAT32;
 801026a:	2303      	movs	r3, #3
 801026c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010276:	4293      	cmp	r3, r2
 8010278:	d802      	bhi.n	8010280 <find_volume+0x2e0>
 801027a:	2302      	movs	r3, #2
 801027c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010286:	4293      	cmp	r3, r2
 8010288:	d802      	bhi.n	8010290 <find_volume+0x2f0>
 801028a:	2301      	movs	r3, #1
 801028c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	1c9a      	adds	r2, r3, #2
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801029c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801029e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a2:	441a      	add	r2, r3
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80102a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80102aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ac:	441a      	add	r2, r3
 80102ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80102b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102b6:	2b03      	cmp	r3, #3
 80102b8:	d11e      	bne.n	80102f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	3334      	adds	r3, #52	; 0x34
 80102be:	332a      	adds	r3, #42	; 0x2a
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fe f873 	bl	800e3ac <ld_word>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <find_volume+0x330>
 80102cc:	230d      	movs	r3, #13
 80102ce:	e0a8      	b.n	8010422 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	891b      	ldrh	r3, [r3, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d001      	beq.n	80102dc <find_volume+0x33c>
 80102d8:	230d      	movs	r3, #13
 80102da:	e0a2      	b.n	8010422 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80102dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102de:	3334      	adds	r3, #52	; 0x34
 80102e0:	332c      	adds	r3, #44	; 0x2c
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe f87a 	bl	800e3dc <ld_dword>
 80102e8:	4602      	mov	r2, r0
 80102ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	647b      	str	r3, [r7, #68]	; 0x44
 80102f6:	e01f      	b.n	8010338 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	891b      	ldrh	r3, [r3, #8]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <find_volume+0x364>
 8010300:	230d      	movs	r3, #13
 8010302:	e08e      	b.n	8010422 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801030a:	441a      	add	r2, r3
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010314:	2b02      	cmp	r3, #2
 8010316:	d103      	bne.n	8010320 <find_volume+0x380>
 8010318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031a:	699b      	ldr	r3, [r3, #24]
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	e00a      	b.n	8010336 <find_volume+0x396>
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	699a      	ldr	r2, [r3, #24]
 8010324:	4613      	mov	r3, r2
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	4413      	add	r3, r2
 801032a:	085a      	lsrs	r2, r3, #1
 801032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	f003 0301 	and.w	r3, r3, #1
 8010334:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010336:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	69da      	ldr	r2, [r3, #28]
 801033c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801033e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010342:	0a5b      	lsrs	r3, r3, #9
 8010344:	429a      	cmp	r2, r3
 8010346:	d201      	bcs.n	801034c <find_volume+0x3ac>
 8010348:	230d      	movs	r3, #13
 801034a:	e06a      	b.n	8010422 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034e:	f04f 32ff 	mov.w	r2, #4294967295
 8010352:	615a      	str	r2, [r3, #20]
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	695a      	ldr	r2, [r3, #20]
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035e:	2280      	movs	r2, #128	; 0x80
 8010360:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010366:	2b03      	cmp	r3, #3
 8010368:	d149      	bne.n	80103fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801036a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036c:	3334      	adds	r3, #52	; 0x34
 801036e:	3330      	adds	r3, #48	; 0x30
 8010370:	4618      	mov	r0, r3
 8010372:	f7fe f81b 	bl	800e3ac <ld_word>
 8010376:	4603      	mov	r3, r0
 8010378:	2b01      	cmp	r3, #1
 801037a:	d140      	bne.n	80103fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801037c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801037e:	3301      	adds	r3, #1
 8010380:	4619      	mov	r1, r3
 8010382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010384:	f7fe fac2 	bl	800e90c <move_window>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d137      	bne.n	80103fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801038e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010390:	2200      	movs	r2, #0
 8010392:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010396:	3334      	adds	r3, #52	; 0x34
 8010398:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe f805 	bl	800e3ac <ld_word>
 80103a2:	4603      	mov	r3, r0
 80103a4:	461a      	mov	r2, r3
 80103a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d127      	bne.n	80103fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80103ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b0:	3334      	adds	r3, #52	; 0x34
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fe f812 	bl	800e3dc <ld_dword>
 80103b8:	4603      	mov	r3, r0
 80103ba:	4a1c      	ldr	r2, [pc, #112]	; (801042c <find_volume+0x48c>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d11e      	bne.n	80103fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80103c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c2:	3334      	adds	r3, #52	; 0x34
 80103c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe f807 	bl	800e3dc <ld_dword>
 80103ce:	4603      	mov	r3, r0
 80103d0:	4a17      	ldr	r2, [pc, #92]	; (8010430 <find_volume+0x490>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d113      	bne.n	80103fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80103d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d8:	3334      	adds	r3, #52	; 0x34
 80103da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fd fffc 	bl	800e3dc <ld_dword>
 80103e4:	4602      	mov	r2, r0
 80103e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	3334      	adds	r3, #52	; 0x34
 80103ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fd fff2 	bl	800e3dc <ld_dword>
 80103f8:	4602      	mov	r2, r0
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80103fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010400:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010404:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010406:	4b0b      	ldr	r3, [pc, #44]	; (8010434 <find_volume+0x494>)
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	3301      	adds	r3, #1
 801040c:	b29a      	uxth	r2, r3
 801040e:	4b09      	ldr	r3, [pc, #36]	; (8010434 <find_volume+0x494>)
 8010410:	801a      	strh	r2, [r3, #0]
 8010412:	4b08      	ldr	r3, [pc, #32]	; (8010434 <find_volume+0x494>)
 8010414:	881a      	ldrh	r2, [r3, #0]
 8010416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010418:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801041a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801041c:	f7fe fa0e 	bl	800e83c <clear_lock>
#endif
	return FR_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3758      	adds	r7, #88	; 0x58
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	41615252 	.word	0x41615252
 8010430:	61417272 	.word	0x61417272
 8010434:	2001ce5c 	.word	0x2001ce5c

08010438 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010442:	2309      	movs	r3, #9
 8010444:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d01c      	beq.n	8010486 <validate+0x4e>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d018      	beq.n	8010486 <validate+0x4e>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d013      	beq.n	8010486 <validate+0x4e>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	889a      	ldrh	r2, [r3, #4]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	88db      	ldrh	r3, [r3, #6]
 8010468:	429a      	cmp	r2, r3
 801046a:	d10c      	bne.n	8010486 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	785b      	ldrb	r3, [r3, #1]
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd fefc 	bl	800e270 <disk_status>
 8010478:	4603      	mov	r3, r0
 801047a:	f003 0301 	and.w	r3, r3, #1
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <validate+0x4e>
			res = FR_OK;
 8010482:	2300      	movs	r3, #0
 8010484:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010486:	7bfb      	ldrb	r3, [r7, #15]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d102      	bne.n	8010492 <validate+0x5a>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	e000      	b.n	8010494 <validate+0x5c>
 8010492:	2300      	movs	r3, #0
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	6013      	str	r3, [r2, #0]
	return res;
 8010498:	7bfb      	ldrb	r3, [r7, #15]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
	...

080104a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	4613      	mov	r3, r2
 80104b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80104b6:	f107 0310 	add.w	r3, r7, #16
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff fcd5 	bl	800fe6a <get_ldnumber>
 80104c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	da01      	bge.n	80104cc <f_mount+0x28>
 80104c8:	230b      	movs	r3, #11
 80104ca:	e02b      	b.n	8010524 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80104cc:	4a17      	ldr	r2, [pc, #92]	; (801052c <f_mount+0x88>)
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d005      	beq.n	80104e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80104dc:	69b8      	ldr	r0, [r7, #24]
 80104de:	f7fe f9ad 	bl	800e83c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	2200      	movs	r2, #0
 80104e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2200      	movs	r2, #0
 80104f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	490d      	ldr	r1, [pc, #52]	; (801052c <f_mount+0x88>)
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <f_mount+0x66>
 8010504:	79fb      	ldrb	r3, [r7, #7]
 8010506:	2b01      	cmp	r3, #1
 8010508:	d001      	beq.n	801050e <f_mount+0x6a>
 801050a:	2300      	movs	r3, #0
 801050c:	e00a      	b.n	8010524 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801050e:	f107 010c 	add.w	r1, r7, #12
 8010512:	f107 0308 	add.w	r3, r7, #8
 8010516:	2200      	movs	r2, #0
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fd41 	bl	800ffa0 <find_volume>
 801051e:	4603      	mov	r3, r0
 8010520:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010522:	7dfb      	ldrb	r3, [r7, #23]
}
 8010524:	4618      	mov	r0, r3
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2001ce58 	.word	0x2001ce58

08010530 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b09a      	sub	sp, #104	; 0x68
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	4613      	mov	r3, r2
 801053c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <f_open+0x18>
 8010544:	2309      	movs	r3, #9
 8010546:	e1bd      	b.n	80108c4 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010548:	79fb      	ldrb	r3, [r7, #7]
 801054a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801054e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010550:	79fa      	ldrb	r2, [r7, #7]
 8010552:	f107 0110 	add.w	r1, r7, #16
 8010556:	f107 0308 	add.w	r3, r7, #8
 801055a:	4618      	mov	r0, r3
 801055c:	f7ff fd20 	bl	800ffa0 <find_volume>
 8010560:	4603      	mov	r3, r0
 8010562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801056a:	2b00      	cmp	r3, #0
 801056c:	f040 81a1 	bne.w	80108b2 <f_open+0x382>
		dj.obj.fs = fs;
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8010574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010578:	f001 f98b 	bl	8011892 <ff_memalloc>
 801057c:	65b8      	str	r0, [r7, #88]	; 0x58
 801057e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010580:	2b00      	cmp	r3, #0
 8010582:	d101      	bne.n	8010588 <f_open+0x58>
 8010584:	2311      	movs	r3, #17
 8010586:	e19d      	b.n	80108c4 <f_open+0x394>
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801058c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801058e:	68ba      	ldr	r2, [r7, #8]
 8010590:	f107 0314 	add.w	r3, r7, #20
 8010594:	4611      	mov	r1, r2
 8010596:	4618      	mov	r0, r3
 8010598:	f7ff fbf6 	bl	800fd88 <follow_path>
 801059c:	4603      	mov	r3, r0
 801059e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80105a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d11a      	bne.n	80105e0 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80105aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80105ae:	b25b      	sxtb	r3, r3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	da03      	bge.n	80105bc <f_open+0x8c>
				res = FR_INVALID_NAME;
 80105b4:	2306      	movs	r3, #6
 80105b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80105ba:	e011      	b.n	80105e0 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	f023 0301 	bic.w	r3, r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	bf14      	ite	ne
 80105c6:	2301      	movne	r3, #1
 80105c8:	2300      	moveq	r3, #0
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	461a      	mov	r2, r3
 80105ce:	f107 0314 	add.w	r3, r7, #20
 80105d2:	4611      	mov	r1, r2
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7fd ffe9 	bl	800e5ac <chk_lock>
 80105da:	4603      	mov	r3, r0
 80105dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	f003 031c 	and.w	r3, r3, #28
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d07f      	beq.n	80106ea <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 80105ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d017      	beq.n	8010622 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80105f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105f6:	2b04      	cmp	r3, #4
 80105f8:	d10e      	bne.n	8010618 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80105fa:	f7fe f833 	bl	800e664 <enq_lock>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d006      	beq.n	8010612 <f_open+0xe2>
 8010604:	f107 0314 	add.w	r3, r7, #20
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff f90d 	bl	800f828 <dir_register>
 801060e:	4603      	mov	r3, r0
 8010610:	e000      	b.n	8010614 <f_open+0xe4>
 8010612:	2312      	movs	r3, #18
 8010614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	f043 0308 	orr.w	r3, r3, #8
 801061e:	71fb      	strb	r3, [r7, #7]
 8010620:	e010      	b.n	8010644 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010622:	7ebb      	ldrb	r3, [r7, #26]
 8010624:	f003 0311 	and.w	r3, r3, #17
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <f_open+0x104>
					res = FR_DENIED;
 801062c:	2307      	movs	r3, #7
 801062e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010632:	e007      	b.n	8010644 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010634:	79fb      	ldrb	r3, [r7, #7]
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <f_open+0x114>
 801063e:	2308      	movs	r3, #8
 8010640:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010648:	2b00      	cmp	r3, #0
 801064a:	d168      	bne.n	801071e <f_open+0x1ee>
 801064c:	79fb      	ldrb	r3, [r7, #7]
 801064e:	f003 0308 	and.w	r3, r3, #8
 8010652:	2b00      	cmp	r3, #0
 8010654:	d063      	beq.n	801071e <f_open+0x1ee>
				dw = GET_FATTIME();
 8010656:	f7fd fde5 	bl	800e224 <get_fattime>
 801065a:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801065c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065e:	330e      	adds	r3, #14
 8010660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010662:	4618      	mov	r0, r3
 8010664:	f7fd fef8 	bl	800e458 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066a:	3316      	adds	r3, #22
 801066c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801066e:	4618      	mov	r0, r3
 8010670:	f7fd fef2 	bl	800e458 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010676:	330b      	adds	r3, #11
 8010678:	2220      	movs	r2, #32
 801067a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010680:	4611      	mov	r1, r2
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe fe49 	bl	800f31a <ld_clust>
 8010688:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801068e:	2200      	movs	r2, #0
 8010690:	4618      	mov	r0, r3
 8010692:	f7fe fe61 	bl	800f358 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010698:	331c      	adds	r3, #28
 801069a:	2100      	movs	r1, #0
 801069c:	4618      	mov	r0, r3
 801069e:	f7fd fedb 	bl	800e458 <st_dword>
					fs->wflag = 1;
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	2201      	movs	r2, #1
 80106a6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80106a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d037      	beq.n	801071e <f_open+0x1ee>
						dw = fs->winsect;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b2:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80106b4:	f107 0314 	add.w	r3, r7, #20
 80106b8:	2200      	movs	r2, #0
 80106ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe fb74 	bl	800edaa <remove_chain>
 80106c2:	4603      	mov	r3, r0
 80106c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80106c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d126      	bne.n	801071e <f_open+0x1ee>
							res = move_window(fs, dw);
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fe f919 	bl	800e90c <move_window>
 80106da:	4603      	mov	r3, r0
 80106dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106e4:	3a01      	subs	r2, #1
 80106e6:	611a      	str	r2, [r3, #16]
 80106e8:	e019      	b.n	801071e <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80106ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d115      	bne.n	801071e <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80106f2:	7ebb      	ldrb	r3, [r7, #26]
 80106f4:	f003 0310 	and.w	r3, r3, #16
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <f_open+0x1d4>
					res = FR_NO_FILE;
 80106fc:	2304      	movs	r3, #4
 80106fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010702:	e00c      	b.n	801071e <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010704:	79fb      	ldrb	r3, [r7, #7]
 8010706:	f003 0302 	and.w	r3, r3, #2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d007      	beq.n	801071e <f_open+0x1ee>
 801070e:	7ebb      	ldrb	r3, [r7, #26]
 8010710:	f003 0301 	and.w	r3, r3, #1
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <f_open+0x1ee>
						res = FR_DENIED;
 8010718:	2307      	movs	r3, #7
 801071a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801071e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010722:	2b00      	cmp	r3, #0
 8010724:	d128      	bne.n	8010778 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010726:	79fb      	ldrb	r3, [r7, #7]
 8010728:	f003 0308 	and.w	r3, r3, #8
 801072c:	2b00      	cmp	r3, #0
 801072e:	d003      	beq.n	8010738 <f_open+0x208>
				mode |= FA_MODIFIED;
 8010730:	79fb      	ldrb	r3, [r7, #7]
 8010732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010736:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010746:	79fb      	ldrb	r3, [r7, #7]
 8010748:	f023 0301 	bic.w	r3, r3, #1
 801074c:	2b00      	cmp	r3, #0
 801074e:	bf14      	ite	ne
 8010750:	2301      	movne	r3, #1
 8010752:	2300      	moveq	r3, #0
 8010754:	b2db      	uxtb	r3, r3
 8010756:	461a      	mov	r2, r3
 8010758:	f107 0314 	add.w	r3, r7, #20
 801075c:	4611      	mov	r1, r2
 801075e:	4618      	mov	r0, r3
 8010760:	f7fd ffa2 	bl	800e6a8 <inc_lock>
 8010764:	4602      	mov	r2, r0
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	691b      	ldr	r3, [r3, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d102      	bne.n	8010778 <f_open+0x248>
 8010772:	2302      	movs	r3, #2
 8010774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801077c:	2b00      	cmp	r3, #0
 801077e:	f040 8095 	bne.w	80108ac <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7fe fdc6 	bl	800f31a <ld_clust>
 801078e:	4602      	mov	r2, r0
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	331c      	adds	r3, #28
 8010798:	4618      	mov	r0, r3
 801079a:	f7fd fe1f 	bl	800e3dc <ld_dword>
 801079e:	4602      	mov	r2, r0
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80107aa:	693a      	ldr	r2, [r7, #16]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	88da      	ldrh	r2, [r3, #6]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	79fa      	ldrb	r2, [r7, #7]
 80107bc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2200      	movs	r2, #0
 80107c2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2200      	movs	r2, #0
 80107ce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3330      	adds	r3, #48	; 0x30
 80107d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107d8:	2100      	movs	r1, #0
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fd fe89 	bl	800e4f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80107e0:	79fb      	ldrb	r3, [r7, #7]
 80107e2:	f003 0320 	and.w	r3, r3, #32
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d060      	beq.n	80108ac <f_open+0x37c>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d05c      	beq.n	80108ac <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	68da      	ldr	r2, [r3, #12]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	895b      	ldrh	r3, [r3, #10]
 80107fe:	025b      	lsls	r3, r3, #9
 8010800:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801080e:	e016      	b.n	801083e <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010814:	4618      	mov	r0, r3
 8010816:	f7fe f934 	bl	800ea82 <get_fat>
 801081a:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801081e:	2b01      	cmp	r3, #1
 8010820:	d802      	bhi.n	8010828 <f_open+0x2f8>
 8010822:	2302      	movs	r3, #2
 8010824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801082a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082e:	d102      	bne.n	8010836 <f_open+0x306>
 8010830:	2301      	movs	r3, #1
 8010832:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801083e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010842:	2b00      	cmp	r3, #0
 8010844:	d103      	bne.n	801084e <f_open+0x31e>
 8010846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801084a:	429a      	cmp	r2, r3
 801084c:	d8e0      	bhi.n	8010810 <f_open+0x2e0>
				}
				fp->clust = clst;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010852:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010858:	2b00      	cmp	r3, #0
 801085a:	d127      	bne.n	80108ac <f_open+0x37c>
 801085c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801085e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010862:	2b00      	cmp	r3, #0
 8010864:	d022      	beq.n	80108ac <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe f8ea 	bl	800ea44 <clust2sect>
 8010870:	64b8      	str	r0, [r7, #72]	; 0x48
 8010872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <f_open+0x350>
						res = FR_INT_ERR;
 8010878:	2302      	movs	r3, #2
 801087a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801087e:	e015      	b.n	80108ac <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010882:	0a5a      	lsrs	r2, r3, #9
 8010884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010886:	441a      	add	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	7858      	ldrb	r0, [r3, #1]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6a1a      	ldr	r2, [r3, #32]
 801089a:	2301      	movs	r3, #1
 801089c:	f7fd fd28 	bl	800e2f0 <disk_read>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d002      	beq.n	80108ac <f_open+0x37c>
 80108a6:	2301      	movs	r3, #1
 80108a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80108ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80108ae:	f000 fffc 	bl	80118aa <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80108b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <f_open+0x390>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80108c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3768      	adds	r7, #104	; 0x68
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08e      	sub	sp, #56	; 0x38
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	2200      	movs	r2, #0
 80108e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f107 0214 	add.w	r2, r7, #20
 80108ea:	4611      	mov	r1, r2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fda3 	bl	8010438 <validate>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d107      	bne.n	8010910 <f_read+0x44>
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	7d5b      	ldrb	r3, [r3, #21]
 8010904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <f_read+0x4a>
 8010910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010914:	e115      	b.n	8010b42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	7d1b      	ldrb	r3, [r3, #20]
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <f_read+0x5a>
 8010922:	2307      	movs	r3, #7
 8010924:	e10d      	b.n	8010b42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	68da      	ldr	r2, [r3, #12]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	429a      	cmp	r2, r3
 8010938:	f240 80fe 	bls.w	8010b38 <f_read+0x26c>
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010940:	e0fa      	b.n	8010b38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801094a:	2b00      	cmp	r3, #0
 801094c:	f040 80c6 	bne.w	8010adc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	699b      	ldr	r3, [r3, #24]
 8010954:	0a5b      	lsrs	r3, r3, #9
 8010956:	697a      	ldr	r2, [r7, #20]
 8010958:	8952      	ldrh	r2, [r2, #10]
 801095a:	3a01      	subs	r2, #1
 801095c:	4013      	ands	r3, r2
 801095e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d12f      	bne.n	80109c6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d103      	bne.n	8010976 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	633b      	str	r3, [r7, #48]	; 0x30
 8010974:	e013      	b.n	801099e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	4619      	mov	r1, r3
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f7fe fb0d 	bl	800efa4 <clmt_clust>
 801098a:	6338      	str	r0, [r7, #48]	; 0x30
 801098c:	e007      	b.n	801099e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801098e:	68fa      	ldr	r2, [r7, #12]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	4619      	mov	r1, r3
 8010996:	4610      	mov	r0, r2
 8010998:	f7fe f873 	bl	800ea82 <get_fat>
 801099c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d804      	bhi.n	80109ae <f_read+0xe2>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2202      	movs	r2, #2
 80109a8:	755a      	strb	r2, [r3, #21]
 80109aa:	2302      	movs	r3, #2
 80109ac:	e0c9      	b.n	8010b42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b4:	d104      	bne.n	80109c0 <f_read+0xf4>
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2201      	movs	r2, #1
 80109ba:	755a      	strb	r2, [r3, #21]
 80109bc:	2301      	movs	r3, #1
 80109be:	e0c0      	b.n	8010b42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	69db      	ldr	r3, [r3, #28]
 80109cc:	4619      	mov	r1, r3
 80109ce:	4610      	mov	r0, r2
 80109d0:	f7fe f838 	bl	800ea44 <clust2sect>
 80109d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d104      	bne.n	80109e6 <f_read+0x11a>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2202      	movs	r2, #2
 80109e0:	755a      	strb	r2, [r3, #21]
 80109e2:	2302      	movs	r3, #2
 80109e4:	e0ad      	b.n	8010b42 <f_read+0x276>
			sect += csect;
 80109e6:	69ba      	ldr	r2, [r7, #24]
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	4413      	add	r3, r2
 80109ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	0a5b      	lsrs	r3, r3, #9
 80109f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d039      	beq.n	8010a6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109fa:	69fa      	ldr	r2, [r7, #28]
 80109fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fe:	4413      	add	r3, r2
 8010a00:	697a      	ldr	r2, [r7, #20]
 8010a02:	8952      	ldrh	r2, [r2, #10]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d905      	bls.n	8010a14 <f_read+0x148>
					cc = fs->csize - csect;
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	895b      	ldrh	r3, [r3, #10]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	7858      	ldrb	r0, [r3, #1]
 8010a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a1e:	f7fd fc67 	bl	800e2f0 <disk_read>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d004      	beq.n	8010a32 <f_read+0x166>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	755a      	strb	r2, [r3, #21]
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e087      	b.n	8010b42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	7d1b      	ldrb	r3, [r3, #20]
 8010a36:	b25b      	sxtb	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	da14      	bge.n	8010a66 <f_read+0x19a>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6a1a      	ldr	r2, [r3, #32]
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d90d      	bls.n	8010a66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6a1a      	ldr	r2, [r3, #32]
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	025b      	lsls	r3, r3, #9
 8010a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a56:	18d0      	adds	r0, r2, r3
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	3330      	adds	r3, #48	; 0x30
 8010a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a60:	4619      	mov	r1, r3
 8010a62:	f7fd fd25 	bl	800e4b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	025b      	lsls	r3, r3, #9
 8010a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010a6c:	e050      	b.n	8010b10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6a1b      	ldr	r3, [r3, #32]
 8010a72:	69ba      	ldr	r2, [r7, #24]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d02e      	beq.n	8010ad6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	7d1b      	ldrb	r3, [r3, #20]
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	da18      	bge.n	8010ab4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	7858      	ldrb	r0, [r3, #1]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a1a      	ldr	r2, [r3, #32]
 8010a90:	2301      	movs	r3, #1
 8010a92:	f7fd fc4d 	bl	800e330 <disk_write>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d004      	beq.n	8010aa6 <f_read+0x1da>
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	755a      	strb	r2, [r3, #21]
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e04d      	b.n	8010b42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	7d1b      	ldrb	r3, [r3, #20]
 8010aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	7858      	ldrb	r0, [r3, #1]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010abe:	2301      	movs	r3, #1
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	f7fd fc15 	bl	800e2f0 <disk_read>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d004      	beq.n	8010ad6 <f_read+0x20a>
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	755a      	strb	r2, [r3, #21]
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e035      	b.n	8010b42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	69ba      	ldr	r2, [r7, #24]
 8010ada:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d901      	bls.n	8010af6 <f_read+0x22a>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	699b      	ldr	r3, [r3, #24]
 8010b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b04:	4413      	add	r3, r2
 8010b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b08:	4619      	mov	r1, r3
 8010b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b0c:	f7fd fcd0 	bl	800e4b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	4413      	add	r3, r2
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	699a      	ldr	r2, [r3, #24]
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	441a      	add	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	619a      	str	r2, [r3, #24]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2a:	441a      	add	r2, r3
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	601a      	str	r2, [r3, #0]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f47f af01 	bne.w	8010942 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3738      	adds	r7, #56	; 0x38
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b08c      	sub	sp, #48	; 0x30
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	60f8      	str	r0, [r7, #12]
 8010b52:	60b9      	str	r1, [r7, #8]
 8010b54:	607a      	str	r2, [r7, #4]
 8010b56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f107 0210 	add.w	r2, r7, #16
 8010b68:	4611      	mov	r1, r2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff fc64 	bl	8010438 <validate>
 8010b70:	4603      	mov	r3, r0
 8010b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d107      	bne.n	8010b8e <f_write+0x44>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	7d5b      	ldrb	r3, [r3, #21]
 8010b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <f_write+0x4a>
 8010b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b92:	e14b      	b.n	8010e2c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	7d1b      	ldrb	r3, [r3, #20]
 8010b98:	f003 0302 	and.w	r3, r3, #2
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <f_write+0x5a>
 8010ba0:	2307      	movs	r3, #7
 8010ba2:	e143      	b.n	8010e2c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	699a      	ldr	r2, [r3, #24]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	441a      	add	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	699b      	ldr	r3, [r3, #24]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	f080 812d 	bcs.w	8010e10 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	699b      	ldr	r3, [r3, #24]
 8010bba:	43db      	mvns	r3, r3
 8010bbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010bbe:	e127      	b.n	8010e10 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	699b      	ldr	r3, [r3, #24]
 8010bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f040 80e3 	bne.w	8010d94 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	699b      	ldr	r3, [r3, #24]
 8010bd2:	0a5b      	lsrs	r3, r3, #9
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	8952      	ldrh	r2, [r2, #10]
 8010bd8:	3a01      	subs	r2, #1
 8010bda:	4013      	ands	r3, r2
 8010bdc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d143      	bne.n	8010c6c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10c      	bne.n	8010c06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d11a      	bne.n	8010c2e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe f939 	bl	800ee74 <create_chain>
 8010c02:	62b8      	str	r0, [r7, #40]	; 0x28
 8010c04:	e013      	b.n	8010c2e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d007      	beq.n	8010c1e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	699b      	ldr	r3, [r3, #24]
 8010c12:	4619      	mov	r1, r3
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7fe f9c5 	bl	800efa4 <clmt_clust>
 8010c1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010c1c:	e007      	b.n	8010c2e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	69db      	ldr	r3, [r3, #28]
 8010c24:	4619      	mov	r1, r3
 8010c26:	4610      	mov	r0, r2
 8010c28:	f7fe f924 	bl	800ee74 <create_chain>
 8010c2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f000 80f2 	beq.w	8010e1a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d104      	bne.n	8010c46 <f_write+0xfc>
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	755a      	strb	r2, [r3, #21]
 8010c42:	2302      	movs	r3, #2
 8010c44:	e0f2      	b.n	8010e2c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4c:	d104      	bne.n	8010c58 <f_write+0x10e>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2201      	movs	r2, #1
 8010c52:	755a      	strb	r2, [r3, #21]
 8010c54:	2301      	movs	r3, #1
 8010c56:	e0e9      	b.n	8010e2c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d102      	bne.n	8010c6c <f_write+0x122>
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	7d1b      	ldrb	r3, [r3, #20]
 8010c70:	b25b      	sxtb	r3, r3
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	da18      	bge.n	8010ca8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	7858      	ldrb	r0, [r3, #1]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6a1a      	ldr	r2, [r3, #32]
 8010c84:	2301      	movs	r3, #1
 8010c86:	f7fd fb53 	bl	800e330 <disk_write>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d004      	beq.n	8010c9a <f_write+0x150>
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2201      	movs	r2, #1
 8010c94:	755a      	strb	r2, [r3, #21]
 8010c96:	2301      	movs	r3, #1
 8010c98:	e0c8      	b.n	8010e2c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	7d1b      	ldrb	r3, [r3, #20]
 8010c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	69db      	ldr	r3, [r3, #28]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4610      	mov	r0, r2
 8010cb2:	f7fd fec7 	bl	800ea44 <clust2sect>
 8010cb6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d104      	bne.n	8010cc8 <f_write+0x17e>
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2202      	movs	r2, #2
 8010cc2:	755a      	strb	r2, [r3, #21]
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	e0b1      	b.n	8010e2c <f_write+0x2e2>
			sect += csect;
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	4413      	add	r3, r2
 8010cce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	0a5b      	lsrs	r3, r3, #9
 8010cd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d03c      	beq.n	8010d56 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010cdc:	69ba      	ldr	r2, [r7, #24]
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	8952      	ldrh	r2, [r2, #10]
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d905      	bls.n	8010cf6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	895b      	ldrh	r3, [r3, #10]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	7858      	ldrb	r0, [r3, #1]
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	697a      	ldr	r2, [r7, #20]
 8010cfe:	69f9      	ldr	r1, [r7, #28]
 8010d00:	f7fd fb16 	bl	800e330 <disk_write>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d004      	beq.n	8010d14 <f_write+0x1ca>
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	755a      	strb	r2, [r3, #21]
 8010d10:	2301      	movs	r3, #1
 8010d12:	e08b      	b.n	8010e2c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6a1a      	ldr	r2, [r3, #32]
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	6a3a      	ldr	r2, [r7, #32]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d915      	bls.n	8010d4e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6a1a      	ldr	r2, [r3, #32]
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	025b      	lsls	r3, r3, #9
 8010d32:	69fa      	ldr	r2, [r7, #28]
 8010d34:	4413      	add	r3, r2
 8010d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	f7fd fbb8 	bl	800e4b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	7d1b      	ldrb	r3, [r3, #20]
 8010d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	025b      	lsls	r3, r3, #9
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010d54:	e03f      	b.n	8010dd6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d016      	beq.n	8010d8e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	699a      	ldr	r2, [r3, #24]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d210      	bcs.n	8010d8e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	7858      	ldrb	r0, [r3, #1]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d76:	2301      	movs	r3, #1
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	f7fd fab9 	bl	800e2f0 <disk_read>
 8010d7e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2201      	movs	r2, #1
 8010d88:	755a      	strb	r2, [r3, #21]
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e04e      	b.n	8010e2c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	699b      	ldr	r3, [r3, #24]
 8010d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010da0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d901      	bls.n	8010dae <f_write+0x264>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	699b      	ldr	r3, [r3, #24]
 8010db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dbc:	4413      	add	r3, r2
 8010dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc0:	69f9      	ldr	r1, [r7, #28]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fd fb74 	bl	800e4b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	7d1b      	ldrb	r3, [r3, #20]
 8010dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010dd6:	69fa      	ldr	r2, [r7, #28]
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	4413      	add	r3, r2
 8010ddc:	61fb      	str	r3, [r7, #28]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	699a      	ldr	r2, [r3, #24]
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	441a      	add	r2, r3
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	619a      	str	r2, [r3, #24]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	68da      	ldr	r2, [r3, #12]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	699b      	ldr	r3, [r3, #24]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	bf38      	it	cc
 8010df6:	461a      	movcc	r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	60da      	str	r2, [r3, #12]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	441a      	add	r2, r3
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	601a      	str	r2, [r3, #0]
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f47f aed4 	bne.w	8010bc0 <f_write+0x76>
 8010e18:	e000      	b.n	8010e1c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010e1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	7d1b      	ldrb	r3, [r3, #20]
 8010e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e24:	b2da      	uxtb	r2, r3
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3730      	adds	r7, #48	; 0x30
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f107 0208 	add.w	r2, r7, #8
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff faf7 	bl	8010438 <validate>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d168      	bne.n	8010f26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	7d1b      	ldrb	r3, [r3, #20]
 8010e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d062      	beq.n	8010f26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	7d1b      	ldrb	r3, [r3, #20]
 8010e64:	b25b      	sxtb	r3, r3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da15      	bge.n	8010e96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	7858      	ldrb	r0, [r3, #1]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6a1a      	ldr	r2, [r3, #32]
 8010e78:	2301      	movs	r3, #1
 8010e7a:	f7fd fa59 	bl	800e330 <disk_write>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d001      	beq.n	8010e88 <f_sync+0x54>
 8010e84:	2301      	movs	r3, #1
 8010e86:	e04f      	b.n	8010f28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	7d1b      	ldrb	r3, [r3, #20]
 8010e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e96:	f7fd f9c5 	bl	800e224 <get_fattime>
 8010e9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	f7fd fd31 	bl	800e90c <move_window>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d138      	bne.n	8010f26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	330b      	adds	r3, #11
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	330b      	adds	r3, #11
 8010ec4:	f042 0220 	orr.w	r2, r2, #32
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6818      	ldr	r0, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	68f9      	ldr	r1, [r7, #12]
 8010ed8:	f7fe fa3e 	bl	800f358 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f103 021c 	add.w	r2, r3, #28
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4610      	mov	r0, r2
 8010eea:	f7fd fab5 	bl	800e458 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	3316      	adds	r3, #22
 8010ef2:	6939      	ldr	r1, [r7, #16]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fd faaf 	bl	800e458 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3312      	adds	r3, #18
 8010efe:	2100      	movs	r1, #0
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fd fa8e 	bl	800e422 <st_word>
					fs->wflag = 1;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fd fd2a 	bl	800e968 <sync_fs>
 8010f14:	4603      	mov	r3, r0
 8010f16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7d1b      	ldrb	r3, [r3, #20]
 8010f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3718      	adds	r7, #24
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff ff7b 	bl	8010e34 <f_sync>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010f42:	7bfb      	ldrb	r3, [r7, #15]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d118      	bne.n	8010f7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f107 0208 	add.w	r2, r7, #8
 8010f4e:	4611      	mov	r1, r2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fa71 	bl	8010438 <validate>
 8010f56:	4603      	mov	r3, r0
 8010f58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f5a:	7bfb      	ldrb	r3, [r7, #15]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10c      	bne.n	8010f7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fd fc2d 	bl	800e7c4 <dec_lock>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d102      	bne.n	8010f7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010f84:	b590      	push	{r4, r7, lr}
 8010f86:	b09d      	sub	sp, #116	; 0x74
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	607a      	str	r2, [r7, #4]
 8010f8e:	603b      	str	r3, [r7, #0]
 8010f90:	460b      	mov	r3, r1
 8010f92:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010f94:	2301      	movs	r3, #1
 8010f96:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f9c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010f9e:	f107 030c 	add.w	r3, r7, #12
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe ff61 	bl	800fe6a <get_ldnumber>
 8010fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	da02      	bge.n	8010fb6 <f_mkfs+0x32>
 8010fb0:	230b      	movs	r3, #11
 8010fb2:	f000 bc0d 	b.w	80117d0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010fb6:	4a94      	ldr	r2, [pc, #592]	; (8011208 <f_mkfs+0x284>)
 8010fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d005      	beq.n	8010fce <f_mkfs+0x4a>
 8010fc2:	4a91      	ldr	r2, [pc, #580]	; (8011208 <f_mkfs+0x284>)
 8010fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010fda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fd f960 	bl	800e2a4 <disk_initialize>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010fea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010fee:	f003 0301 	and.w	r3, r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <f_mkfs+0x76>
 8010ff6:	2303      	movs	r3, #3
 8010ff8:	e3ea      	b.n	80117d0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010ffa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010ffe:	f003 0304 	and.w	r3, r3, #4
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <f_mkfs+0x86>
 8011006:	230a      	movs	r3, #10
 8011008:	e3e2      	b.n	80117d0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 801100a:	f107 0214 	add.w	r2, r7, #20
 801100e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011012:	2103      	movs	r1, #3
 8011014:	4618      	mov	r0, r3
 8011016:	f7fd f9ab 	bl	800e370 <disk_ioctl>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10c      	bne.n	801103a <f_mkfs+0xb6>
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d009      	beq.n	801103a <f_mkfs+0xb6>
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801102c:	d805      	bhi.n	801103a <f_mkfs+0xb6>
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	1e5a      	subs	r2, r3, #1
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	4013      	ands	r3, r2
 8011036:	2b00      	cmp	r3, #0
 8011038:	d001      	beq.n	801103e <f_mkfs+0xba>
 801103a:	2301      	movs	r3, #1
 801103c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011042:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <f_mkfs+0xce>
 801104a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d309      	bcc.n	8011066 <f_mkfs+0xe2>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011058:	d805      	bhi.n	8011066 <f_mkfs+0xe2>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	1e5a      	subs	r2, r3, #1
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4013      	ands	r3, r2
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <f_mkfs+0xe6>
 8011066:	2313      	movs	r3, #19
 8011068:	e3b2      	b.n	80117d0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801106a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011072:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8011078:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801107a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011082:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8011084:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011088:	fb02 f303 	mul.w	r3, r2, r3
 801108c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <f_mkfs+0x114>
 8011094:	230e      	movs	r3, #14
 8011096:	e39b      	b.n	80117d0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8011098:	f107 0210 	add.w	r2, r7, #16
 801109c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80110a0:	2101      	movs	r1, #1
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fd f964 	bl	800e370 <disk_ioctl>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d001      	beq.n	80110b2 <f_mkfs+0x12e>
 80110ae:	2301      	movs	r3, #1
 80110b0:	e38e      	b.n	80117d0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80110b2:	7afb      	ldrb	r3, [r7, #11]
 80110b4:	f003 0308 	and.w	r3, r3, #8
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <f_mkfs+0x13c>
 80110bc:	2300      	movs	r3, #0
 80110be:	e000      	b.n	80110c2 <f_mkfs+0x13e>
 80110c0:	233f      	movs	r3, #63	; 0x3f
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d901      	bls.n	80110d0 <f_mkfs+0x14c>
 80110cc:	230e      	movs	r3, #14
 80110ce:	e37f      	b.n	80117d0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	2b7f      	cmp	r3, #127	; 0x7f
 80110dc:	d801      	bhi.n	80110e2 <f_mkfs+0x15e>
 80110de:	230e      	movs	r3, #14
 80110e0:	e376      	b.n	80117d0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b80      	cmp	r3, #128	; 0x80
 80110e6:	d901      	bls.n	80110ec <f_mkfs+0x168>
 80110e8:	2313      	movs	r3, #19
 80110ea:	e371      	b.n	80117d0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80110ec:	7afb      	ldrb	r3, [r7, #11]
 80110ee:	f003 0302 	and.w	r3, r3, #2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d00d      	beq.n	8011112 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80110f6:	7afb      	ldrb	r3, [r7, #11]
 80110f8:	f003 0307 	and.w	r3, r3, #7
 80110fc:	2b02      	cmp	r3, #2
 80110fe:	d004      	beq.n	801110a <f_mkfs+0x186>
 8011100:	7afb      	ldrb	r3, [r7, #11]
 8011102:	f003 0301 	and.w	r3, r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	d103      	bne.n	8011112 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 801110a:	2303      	movs	r3, #3
 801110c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011110:	e009      	b.n	8011126 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8011112:	7afb      	ldrb	r3, [r7, #11]
 8011114:	f003 0301 	and.w	r3, r3, #1
 8011118:	2b00      	cmp	r3, #0
 801111a:	d101      	bne.n	8011120 <f_mkfs+0x19c>
 801111c:	2313      	movs	r3, #19
 801111e:	e357      	b.n	80117d0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8011120:	2302      	movs	r3, #2
 8011122:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801112a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801112e:	2b03      	cmp	r3, #3
 8011130:	d13c      	bne.n	80111ac <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8011132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011134:	2b00      	cmp	r3, #0
 8011136:	d11b      	bne.n	8011170 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	0c5b      	lsrs	r3, r3, #17
 801113c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801113e:	2300      	movs	r3, #0
 8011140:	64bb      	str	r3, [r7, #72]	; 0x48
 8011142:	2301      	movs	r3, #1
 8011144:	653b      	str	r3, [r7, #80]	; 0x50
 8011146:	e005      	b.n	8011154 <f_mkfs+0x1d0>
 8011148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801114a:	3301      	adds	r3, #1
 801114c:	64bb      	str	r3, [r7, #72]	; 0x48
 801114e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011150:	005b      	lsls	r3, r3, #1
 8011152:	653b      	str	r3, [r7, #80]	; 0x50
 8011154:	4a2d      	ldr	r2, [pc, #180]	; (801120c <f_mkfs+0x288>)
 8011156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d007      	beq.n	8011170 <f_mkfs+0x1ec>
 8011160:	4a2a      	ldr	r2, [pc, #168]	; (801120c <f_mkfs+0x288>)
 8011162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011168:	461a      	mov	r2, r3
 801116a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801116c:	4293      	cmp	r3, r2
 801116e:	d2eb      	bcs.n	8011148 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011174:	fbb2 f3f3 	udiv	r3, r2, r3
 8011178:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801117a:	6a3b      	ldr	r3, [r7, #32]
 801117c:	3302      	adds	r3, #2
 801117e:	009a      	lsls	r2, r3, #2
 8011180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011182:	4413      	add	r3, r2
 8011184:	1e5a      	subs	r2, r3, #1
 8011186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011188:	fbb2 f3f3 	udiv	r3, r2, r3
 801118c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801118e:	2320      	movs	r3, #32
 8011190:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8011192:	2300      	movs	r3, #0
 8011194:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8011196:	6a3b      	ldr	r3, [r7, #32]
 8011198:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801119c:	4293      	cmp	r3, r2
 801119e:	d903      	bls.n	80111a8 <f_mkfs+0x224>
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	4a1b      	ldr	r2, [pc, #108]	; (8011210 <f_mkfs+0x28c>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d952      	bls.n	801124e <f_mkfs+0x2ca>
 80111a8:	230e      	movs	r3, #14
 80111aa:	e311      	b.n	80117d0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80111ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d11b      	bne.n	80111ea <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	0b1b      	lsrs	r3, r3, #12
 80111b6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80111b8:	2300      	movs	r3, #0
 80111ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80111bc:	2301      	movs	r3, #1
 80111be:	653b      	str	r3, [r7, #80]	; 0x50
 80111c0:	e005      	b.n	80111ce <f_mkfs+0x24a>
 80111c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111c4:	3301      	adds	r3, #1
 80111c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80111c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	653b      	str	r3, [r7, #80]	; 0x50
 80111ce:	4a11      	ldr	r2, [pc, #68]	; (8011214 <f_mkfs+0x290>)
 80111d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d007      	beq.n	80111ea <f_mkfs+0x266>
 80111da:	4a0e      	ldr	r2, [pc, #56]	; (8011214 <f_mkfs+0x290>)
 80111dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111e2:	461a      	mov	r2, r3
 80111e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d2eb      	bcs.n	80111c2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80111ea:	693a      	ldr	r2, [r7, #16]
 80111ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80111f2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d90c      	bls.n	8011218 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80111fe:	6a3b      	ldr	r3, [r7, #32]
 8011200:	3302      	adds	r3, #2
 8011202:	005b      	lsls	r3, r3, #1
 8011204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011206:	e012      	b.n	801122e <f_mkfs+0x2aa>
 8011208:	2001ce58 	.word	0x2001ce58
 801120c:	080155a4 	.word	0x080155a4
 8011210:	0ffffff5 	.word	0x0ffffff5
 8011214:	080155b4 	.word	0x080155b4
				} else {
					fmt = FS_FAT12;
 8011218:	2301      	movs	r3, #1
 801121a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801121e:	6a3a      	ldr	r2, [r7, #32]
 8011220:	4613      	mov	r3, r2
 8011222:	005b      	lsls	r3, r3, #1
 8011224:	4413      	add	r3, r2
 8011226:	3301      	adds	r3, #1
 8011228:	085b      	lsrs	r3, r3, #1
 801122a:	3303      	adds	r3, #3
 801122c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801122e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011232:	4413      	add	r3, r2
 8011234:	1e5a      	subs	r2, r3, #1
 8011236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011238:	fbb2 f3f3 	udiv	r3, r2, r3
 801123c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801123e:	2301      	movs	r3, #1
 8011240:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8011242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011244:	015a      	lsls	r2, r3, #5
 8011246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011248:	fbb2 f3f3 	udiv	r3, r2, r3
 801124c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011252:	4413      	add	r3, r2
 8011254:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8011256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801125a:	fb03 f202 	mul.w	r2, r3, r2
 801125e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011260:	4413      	add	r3, r2
 8011262:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011264:	4413      	add	r3, r2
 8011266:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	4413      	add	r3, r2
 801126e:	1e5a      	subs	r2, r3, #1
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	425b      	negs	r3, r3
 8011274:	401a      	ands	r2, r3
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 801127c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011280:	2b03      	cmp	r3, #3
 8011282:	d108      	bne.n	8011296 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8011284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011288:	4413      	add	r3, r2
 801128a:	657b      	str	r3, [r7, #84]	; 0x54
 801128c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011290:	4413      	add	r3, r2
 8011292:	65bb      	str	r3, [r7, #88]	; 0x58
 8011294:	e006      	b.n	80112a4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8011296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801129a:	fbb2 f3f3 	udiv	r3, r2, r3
 801129e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80112a0:	4413      	add	r3, r2
 80112a2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80112a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a6:	011a      	lsls	r2, r3, #4
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	441a      	add	r2, r3
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	1ad2      	subs	r2, r2, r3
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d901      	bls.n	80112ba <f_mkfs+0x336>
 80112b6:	230e      	movs	r3, #14
 80112b8:	e28a      	b.n	80117d0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80112ba:	693a      	ldr	r2, [r7, #16]
 80112bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112be:	1ad2      	subs	r2, r2, r3
 80112c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80112c4:	fb01 f303 	mul.w	r3, r1, r3
 80112c8:	1ad2      	subs	r2, r2, r3
 80112ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112cc:	1ad2      	subs	r2, r2, r3
 80112ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80112d4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80112d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80112da:	2b03      	cmp	r3, #3
 80112dc:	d10f      	bne.n	80112fe <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d80a      	bhi.n	80112fe <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d105      	bne.n	80112fa <f_mkfs+0x376>
 80112ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112f0:	085b      	lsrs	r3, r3, #1
 80112f2:	607b      	str	r3, [r7, #4]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d144      	bne.n	8011384 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80112fa:	230e      	movs	r3, #14
 80112fc:	e268      	b.n	80117d0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80112fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011302:	2b02      	cmp	r3, #2
 8011304:	d133      	bne.n	801136e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801130c:	4293      	cmp	r3, r2
 801130e:	d91e      	bls.n	801134e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d107      	bne.n	8011326 <f_mkfs+0x3a2>
 8011316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011318:	005b      	lsls	r3, r3, #1
 801131a:	2b40      	cmp	r3, #64	; 0x40
 801131c:	d803      	bhi.n	8011326 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801131e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	e033      	b.n	801138e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8011326:	7afb      	ldrb	r3, [r7, #11]
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	2b00      	cmp	r3, #0
 801132e:	d003      	beq.n	8011338 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8011330:	2303      	movs	r3, #3
 8011332:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011336:	e02a      	b.n	801138e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d105      	bne.n	801134a <f_mkfs+0x3c6>
 801133e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011340:	005b      	lsls	r3, r3, #1
 8011342:	607b      	str	r3, [r7, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b80      	cmp	r3, #128	; 0x80
 8011348:	d91e      	bls.n	8011388 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 801134a:	230e      	movs	r3, #14
 801134c:	e240      	b.n	80117d0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011354:	4293      	cmp	r3, r2
 8011356:	d80a      	bhi.n	801136e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d105      	bne.n	801136a <f_mkfs+0x3e6>
 801135e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011360:	005b      	lsls	r3, r3, #1
 8011362:	607b      	str	r3, [r7, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b80      	cmp	r3, #128	; 0x80
 8011368:	d910      	bls.n	801138c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 801136a:	230e      	movs	r3, #14
 801136c:	e230      	b.n	80117d0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801136e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011372:	2b01      	cmp	r3, #1
 8011374:	d10c      	bne.n	8011390 <f_mkfs+0x40c>
 8011376:	6a3b      	ldr	r3, [r7, #32]
 8011378:	f640 72f5 	movw	r2, #4085	; 0xff5
 801137c:	4293      	cmp	r3, r2
 801137e:	d907      	bls.n	8011390 <f_mkfs+0x40c>
 8011380:	230e      	movs	r3, #14
 8011382:	e225      	b.n	80117d0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011384:	bf00      	nop
 8011386:	e6ce      	b.n	8011126 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011388:	bf00      	nop
 801138a:	e6cc      	b.n	8011126 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801138c:	bf00      	nop
			pau = au;
 801138e:	e6ca      	b.n	8011126 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8011390:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8011392:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011394:	461a      	mov	r2, r3
 8011396:	2100      	movs	r1, #0
 8011398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801139a:	f7fd f8aa 	bl	800e4f2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801139e:	220b      	movs	r2, #11
 80113a0:	49b2      	ldr	r1, [pc, #712]	; (801166c <f_mkfs+0x6e8>)
 80113a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113a4:	f7fd f884 	bl	800e4b0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80113a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113aa:	330b      	adds	r3, #11
 80113ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80113ae:	4611      	mov	r1, r2
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fd f836 	bl	800e422 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	330d      	adds	r3, #13
 80113ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113bc:	b2d2      	uxtb	r2, r2
 80113be:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80113c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c2:	330e      	adds	r3, #14
 80113c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80113c6:	b292      	uxth	r2, r2
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fd f829 	bl	800e422 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80113d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d2:	3310      	adds	r3, #16
 80113d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113d6:	b2d2      	uxtb	r2, r2
 80113d8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80113da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113dc:	f103 0211 	add.w	r2, r3, #17
 80113e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80113e4:	2b03      	cmp	r3, #3
 80113e6:	d002      	beq.n	80113ee <f_mkfs+0x46a>
 80113e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	e000      	b.n	80113f0 <f_mkfs+0x46c>
 80113ee:	2300      	movs	r3, #0
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fd f815 	bl	800e422 <st_word>
		if (sz_vol < 0x10000) {
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113fe:	d208      	bcs.n	8011412 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8011400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011402:	3313      	adds	r3, #19
 8011404:	693a      	ldr	r2, [r7, #16]
 8011406:	b292      	uxth	r2, r2
 8011408:	4611      	mov	r1, r2
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd f809 	bl	800e422 <st_word>
 8011410:	e006      	b.n	8011420 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	3320      	adds	r3, #32
 8011416:	693a      	ldr	r2, [r7, #16]
 8011418:	4611      	mov	r1, r2
 801141a:	4618      	mov	r0, r3
 801141c:	f7fd f81c 	bl	800e458 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	3315      	adds	r3, #21
 8011424:	22f8      	movs	r2, #248	; 0xf8
 8011426:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8011428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142a:	3318      	adds	r3, #24
 801142c:	213f      	movs	r1, #63	; 0x3f
 801142e:	4618      	mov	r0, r3
 8011430:	f7fc fff7 	bl	800e422 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	331a      	adds	r3, #26
 8011438:	21ff      	movs	r1, #255	; 0xff
 801143a:	4618      	mov	r0, r3
 801143c:	f7fc fff1 	bl	800e422 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8011440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011442:	331c      	adds	r3, #28
 8011444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011446:	4618      	mov	r0, r3
 8011448:	f7fd f806 	bl	800e458 <st_dword>
		if (fmt == FS_FAT32) {
 801144c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011450:	2b03      	cmp	r3, #3
 8011452:	d131      	bne.n	80114b8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8011454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011456:	f103 0443 	add.w	r4, r3, #67	; 0x43
 801145a:	f7fc fee3 	bl	800e224 <get_fattime>
 801145e:	4603      	mov	r3, r0
 8011460:	4619      	mov	r1, r3
 8011462:	4620      	mov	r0, r4
 8011464:	f7fc fff8 	bl	800e458 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8011468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146a:	3324      	adds	r3, #36	; 0x24
 801146c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801146e:	4618      	mov	r0, r3
 8011470:	f7fc fff2 	bl	800e458 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8011474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011476:	332c      	adds	r3, #44	; 0x2c
 8011478:	2102      	movs	r1, #2
 801147a:	4618      	mov	r0, r3
 801147c:	f7fc ffec 	bl	800e458 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8011480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011482:	3330      	adds	r3, #48	; 0x30
 8011484:	2101      	movs	r1, #1
 8011486:	4618      	mov	r0, r3
 8011488:	f7fc ffcb 	bl	800e422 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 801148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148e:	3332      	adds	r3, #50	; 0x32
 8011490:	2106      	movs	r1, #6
 8011492:	4618      	mov	r0, r3
 8011494:	f7fc ffc5 	bl	800e422 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149a:	3340      	adds	r3, #64	; 0x40
 801149c:	2280      	movs	r2, #128	; 0x80
 801149e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80114a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a2:	3342      	adds	r3, #66	; 0x42
 80114a4:	2229      	movs	r2, #41	; 0x29
 80114a6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	3347      	adds	r3, #71	; 0x47
 80114ac:	2213      	movs	r2, #19
 80114ae:	4970      	ldr	r1, [pc, #448]	; (8011670 <f_mkfs+0x6ec>)
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fc fffd 	bl	800e4b0 <mem_cpy>
 80114b6:	e020      	b.n	80114fa <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80114b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ba:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80114be:	f7fc feb1 	bl	800e224 <get_fattime>
 80114c2:	4603      	mov	r3, r0
 80114c4:	4619      	mov	r1, r3
 80114c6:	4620      	mov	r0, r4
 80114c8:	f7fc ffc6 	bl	800e458 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80114cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ce:	3316      	adds	r3, #22
 80114d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114d2:	b292      	uxth	r2, r2
 80114d4:	4611      	mov	r1, r2
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fc ffa3 	bl	800e422 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114de:	3324      	adds	r3, #36	; 0x24
 80114e0:	2280      	movs	r2, #128	; 0x80
 80114e2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80114e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e6:	3326      	adds	r3, #38	; 0x26
 80114e8:	2229      	movs	r2, #41	; 0x29
 80114ea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	332b      	adds	r3, #43	; 0x2b
 80114f0:	2213      	movs	r2, #19
 80114f2:	4960      	ldr	r1, [pc, #384]	; (8011674 <f_mkfs+0x6f0>)
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fc ffdb 	bl	800e4b0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011500:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011504:	4618      	mov	r0, r3
 8011506:	f7fc ff8c 	bl	800e422 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801150a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801150e:	2301      	movs	r3, #1
 8011510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011514:	f7fc ff0c 	bl	800e330 <disk_write>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <f_mkfs+0x59e>
 801151e:	2301      	movs	r3, #1
 8011520:	e156      	b.n	80117d0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011526:	2b03      	cmp	r3, #3
 8011528:	d140      	bne.n	80115ac <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152c:	1d9a      	adds	r2, r3, #6
 801152e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011532:	2301      	movs	r3, #1
 8011534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011536:	f7fc fefb 	bl	800e330 <disk_write>
			mem_set(buf, 0, ss);
 801153a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801153c:	461a      	mov	r2, r3
 801153e:	2100      	movs	r1, #0
 8011540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011542:	f7fc ffd6 	bl	800e4f2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011546:	494c      	ldr	r1, [pc, #304]	; (8011678 <f_mkfs+0x6f4>)
 8011548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801154a:	f7fc ff85 	bl	800e458 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011554:	4949      	ldr	r1, [pc, #292]	; (801167c <f_mkfs+0x6f8>)
 8011556:	4618      	mov	r0, r3
 8011558:	f7fc ff7e 	bl	800e458 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	3b01      	subs	r3, #1
 8011566:	4619      	mov	r1, r3
 8011568:	4610      	mov	r0, r2
 801156a:	f7fc ff75 	bl	800e458 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011574:	2102      	movs	r1, #2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fc ff6e 	bl	800e458 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011582:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011586:	4618      	mov	r0, r3
 8011588:	f7fc ff4b 	bl	800e422 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	1dda      	adds	r2, r3, #7
 8011590:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011594:	2301      	movs	r3, #1
 8011596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011598:	f7fc feca 	bl	800e330 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 801159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159e:	1c5a      	adds	r2, r3, #1
 80115a0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80115a4:	2301      	movs	r3, #1
 80115a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115a8:	f7fc fec2 	bl	800e330 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80115ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ae:	2100      	movs	r1, #0
 80115b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115b2:	f7fc ff9e 	bl	800e4f2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80115b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115b8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80115ba:	2300      	movs	r3, #0
 80115bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80115be:	e04b      	b.n	8011658 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80115c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80115c4:	2b03      	cmp	r3, #3
 80115c6:	d113      	bne.n	80115f0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80115c8:	f06f 0107 	mvn.w	r1, #7
 80115cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ce:	f7fc ff43 	bl	800e458 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80115d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d4:	3304      	adds	r3, #4
 80115d6:	f04f 31ff 	mov.w	r1, #4294967295
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fc ff3c 	bl	800e458 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80115e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e2:	3308      	adds	r3, #8
 80115e4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fc ff35 	bl	800e458 <st_dword>
 80115ee:	e00b      	b.n	8011608 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80115f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d101      	bne.n	80115fc <f_mkfs+0x678>
 80115f8:	4b21      	ldr	r3, [pc, #132]	; (8011680 <f_mkfs+0x6fc>)
 80115fa:	e001      	b.n	8011600 <f_mkfs+0x67c>
 80115fc:	f06f 0307 	mvn.w	r3, #7
 8011600:	4619      	mov	r1, r3
 8011602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011604:	f7fc ff28 	bl	800e458 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801160a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 801160c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011610:	4293      	cmp	r3, r2
 8011612:	bf28      	it	cs
 8011614:	4613      	movcs	r3, r2
 8011616:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011618:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801161c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801161e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011622:	f7fc fe85 	bl	800e330 <disk_write>
 8011626:	4603      	mov	r3, r0
 8011628:	2b00      	cmp	r3, #0
 801162a:	d001      	beq.n	8011630 <f_mkfs+0x6ac>
 801162c:	2301      	movs	r3, #1
 801162e:	e0cf      	b.n	80117d0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8011630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011632:	461a      	mov	r2, r3
 8011634:	2100      	movs	r1, #0
 8011636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011638:	f7fc ff5b 	bl	800e4f2 <mem_set>
				sect += n; nsect -= n;
 801163c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801163e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011640:	4413      	add	r3, r2
 8011642:	667b      	str	r3, [r7, #100]	; 0x64
 8011644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 801164c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1dc      	bne.n	801160c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011654:	3301      	adds	r3, #1
 8011656:	64bb      	str	r3, [r7, #72]	; 0x48
 8011658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801165a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165c:	429a      	cmp	r2, r3
 801165e:	d3af      	bcc.n	80115c0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011664:	2b03      	cmp	r3, #3
 8011666:	d10d      	bne.n	8011684 <f_mkfs+0x700>
 8011668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166a:	e00c      	b.n	8011686 <f_mkfs+0x702>
 801166c:	08012f90 	.word	0x08012f90
 8011670:	08012f9c 	.word	0x08012f9c
 8011674:	08012fb0 	.word	0x08012fb0
 8011678:	41615252 	.word	0x41615252
 801167c:	61417272 	.word	0x61417272
 8011680:	00fffff8 	.word	0x00fffff8
 8011684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011686:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168c:	4293      	cmp	r3, r2
 801168e:	bf28      	it	cs
 8011690:	4613      	movcs	r3, r2
 8011692:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011694:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801169a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801169c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801169e:	f7fc fe47 	bl	800e330 <disk_write>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d001      	beq.n	80116ac <f_mkfs+0x728>
 80116a8:	2301      	movs	r3, #1
 80116aa:	e091      	b.n	80117d0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80116ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80116ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b0:	4413      	add	r3, r2
 80116b2:	667b      	str	r3, [r7, #100]	; 0x64
 80116b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b8:	1ad3      	subs	r3, r2, r3
 80116ba:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80116bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1e2      	bne.n	8011688 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80116c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80116c6:	2b03      	cmp	r3, #3
 80116c8:	d103      	bne.n	80116d2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80116ca:	230c      	movs	r3, #12
 80116cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80116d0:	e010      	b.n	80116f4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116d8:	d303      	bcc.n	80116e2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80116da:	2306      	movs	r3, #6
 80116dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80116e0:	e008      	b.n	80116f4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80116e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80116e6:	2b02      	cmp	r3, #2
 80116e8:	d101      	bne.n	80116ee <f_mkfs+0x76a>
 80116ea:	2304      	movs	r3, #4
 80116ec:	e000      	b.n	80116f0 <f_mkfs+0x76c>
 80116ee:	2301      	movs	r3, #1
 80116f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80116f4:	7afb      	ldrb	r3, [r7, #11]
 80116f6:	f003 0308 	and.w	r3, r3, #8
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d15b      	bne.n	80117b6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80116fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011700:	461a      	mov	r2, r3
 8011702:	2100      	movs	r1, #0
 8011704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011706:	f7fc fef4 	bl	800e4f2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011710:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011714:	4618      	mov	r0, r3
 8011716:	f7fc fe84 	bl	800e422 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011720:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2200      	movs	r2, #0
 8011726:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	3301      	adds	r3, #1
 801172c:	2201      	movs	r2, #1
 801172e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	3302      	adds	r3, #2
 8011734:	2201      	movs	r2, #1
 8011736:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	3303      	adds	r3, #3
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	3304      	adds	r3, #4
 8011744:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8011748:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801174a:	693a      	ldr	r2, [r7, #16]
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	441a      	add	r2, r3
 8011750:	4b21      	ldr	r3, [pc, #132]	; (80117d8 <f_mkfs+0x854>)
 8011752:	fba3 1302 	umull	r1, r3, r3, r2
 8011756:	1ad2      	subs	r2, r2, r3
 8011758:	0852      	lsrs	r2, r2, #1
 801175a:	4413      	add	r3, r2
 801175c:	0b5b      	lsrs	r3, r3, #13
 801175e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	3305      	adds	r3, #5
 8011764:	22fe      	movs	r2, #254	; 0xfe
 8011766:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801176a:	089b      	lsrs	r3, r3, #2
 801176c:	b2da      	uxtb	r2, r3
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	3306      	adds	r3, #6
 8011772:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8011776:	b2d2      	uxtb	r2, r2
 8011778:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	3307      	adds	r3, #7
 801177e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011780:	b2d2      	uxtb	r2, r2
 8011782:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	3308      	adds	r3, #8
 8011788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801178a:	4618      	mov	r0, r3
 801178c:	f7fc fe64 	bl	800e458 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	330c      	adds	r3, #12
 8011794:	693a      	ldr	r2, [r7, #16]
 8011796:	4611      	mov	r1, r2
 8011798:	4618      	mov	r0, r3
 801179a:	f7fc fe5d 	bl	800e458 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801179e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80117a2:	2301      	movs	r3, #1
 80117a4:	2200      	movs	r2, #0
 80117a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117a8:	f7fc fdc2 	bl	800e330 <disk_write>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d001      	beq.n	80117b6 <f_mkfs+0x832>
 80117b2:	2301      	movs	r3, #1
 80117b4:	e00c      	b.n	80117d0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80117b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80117ba:	2200      	movs	r2, #0
 80117bc:	2100      	movs	r1, #0
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fc fdd6 	bl	800e370 <disk_ioctl>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <f_mkfs+0x84a>
 80117ca:	2301      	movs	r3, #1
 80117cc:	e000      	b.n	80117d0 <f_mkfs+0x84c>

	return FR_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3774      	adds	r7, #116	; 0x74
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd90      	pop	{r4, r7, pc}
 80117d8:	0515565b 	.word	0x0515565b

080117dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117dc:	b480      	push	{r7}
 80117de:	b087      	sub	sp, #28
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	4613      	mov	r3, r2
 80117e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117ea:	2301      	movs	r3, #1
 80117ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80117f2:	4b1f      	ldr	r3, [pc, #124]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 80117f4:	7a5b      	ldrb	r3, [r3, #9]
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d131      	bne.n	8011860 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80117fc:	4b1c      	ldr	r3, [pc, #112]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 80117fe:	7a5b      	ldrb	r3, [r3, #9]
 8011800:	b2db      	uxtb	r3, r3
 8011802:	461a      	mov	r2, r3
 8011804:	4b1a      	ldr	r3, [pc, #104]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 8011806:	2100      	movs	r1, #0
 8011808:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801180a:	4b19      	ldr	r3, [pc, #100]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 801180c:	7a5b      	ldrb	r3, [r3, #9]
 801180e:	b2db      	uxtb	r3, r3
 8011810:	4a17      	ldr	r2, [pc, #92]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801181a:	4b15      	ldr	r3, [pc, #84]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 801181c:	7a5b      	ldrb	r3, [r3, #9]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	461a      	mov	r2, r3
 8011822:	4b13      	ldr	r3, [pc, #76]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 8011824:	4413      	add	r3, r2
 8011826:	79fa      	ldrb	r2, [r7, #7]
 8011828:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801182a:	4b11      	ldr	r3, [pc, #68]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 801182c:	7a5b      	ldrb	r3, [r3, #9]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	1c5a      	adds	r2, r3, #1
 8011832:	b2d1      	uxtb	r1, r2
 8011834:	4a0e      	ldr	r2, [pc, #56]	; (8011870 <FATFS_LinkDriverEx+0x94>)
 8011836:	7251      	strb	r1, [r2, #9]
 8011838:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801183a:	7dbb      	ldrb	r3, [r7, #22]
 801183c:	3330      	adds	r3, #48	; 0x30
 801183e:	b2da      	uxtb	r2, r3
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	3301      	adds	r3, #1
 8011848:	223a      	movs	r2, #58	; 0x3a
 801184a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	3302      	adds	r3, #2
 8011850:	222f      	movs	r2, #47	; 0x2f
 8011852:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	3303      	adds	r3, #3
 8011858:	2200      	movs	r2, #0
 801185a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801185c:	2300      	movs	r3, #0
 801185e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011860:	7dfb      	ldrb	r3, [r7, #23]
}
 8011862:	4618      	mov	r0, r3
 8011864:	371c      	adds	r7, #28
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	2001ce80 	.word	0x2001ce80

08011874 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801187e:	2200      	movs	r2, #0
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff ffaa 	bl	80117dc <FATFS_LinkDriverEx>
 8011888:	4603      	mov	r3, r0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b082      	sub	sp, #8
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f930 	bl	8011b00 <malloc>
 80118a0:	4603      	mov	r3, r0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b082      	sub	sp, #8
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f92c 	bl	8011b10 <free>
}
 80118b8:	bf00      	nop
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	6039      	str	r1, [r7, #0]
 80118ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118cc:	88fb      	ldrh	r3, [r7, #6]
 80118ce:	2b7f      	cmp	r3, #127	; 0x7f
 80118d0:	d802      	bhi.n	80118d8 <ff_convert+0x18>
		c = chr;
 80118d2:	88fb      	ldrh	r3, [r7, #6]
 80118d4:	81fb      	strh	r3, [r7, #14]
 80118d6:	e025      	b.n	8011924 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00b      	beq.n	80118f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	2bff      	cmp	r3, #255	; 0xff
 80118e2:	d805      	bhi.n	80118f0 <ff_convert+0x30>
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	3b80      	subs	r3, #128	; 0x80
 80118e8:	4a12      	ldr	r2, [pc, #72]	; (8011934 <ff_convert+0x74>)
 80118ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118ee:	e000      	b.n	80118f2 <ff_convert+0x32>
 80118f0:	2300      	movs	r3, #0
 80118f2:	81fb      	strh	r3, [r7, #14]
 80118f4:	e016      	b.n	8011924 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118f6:	2300      	movs	r3, #0
 80118f8:	81fb      	strh	r3, [r7, #14]
 80118fa:	e009      	b.n	8011910 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118fc:	89fb      	ldrh	r3, [r7, #14]
 80118fe:	4a0d      	ldr	r2, [pc, #52]	; (8011934 <ff_convert+0x74>)
 8011900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011904:	88fa      	ldrh	r2, [r7, #6]
 8011906:	429a      	cmp	r2, r3
 8011908:	d006      	beq.n	8011918 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801190a:	89fb      	ldrh	r3, [r7, #14]
 801190c:	3301      	adds	r3, #1
 801190e:	81fb      	strh	r3, [r7, #14]
 8011910:	89fb      	ldrh	r3, [r7, #14]
 8011912:	2b7f      	cmp	r3, #127	; 0x7f
 8011914:	d9f2      	bls.n	80118fc <ff_convert+0x3c>
 8011916:	e000      	b.n	801191a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011918:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801191a:	89fb      	ldrh	r3, [r7, #14]
 801191c:	3380      	adds	r3, #128	; 0x80
 801191e:	b29b      	uxth	r3, r3
 8011920:	b2db      	uxtb	r3, r3
 8011922:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011924:	89fb      	ldrh	r3, [r7, #14]
}
 8011926:	4618      	mov	r0, r3
 8011928:	3714      	adds	r7, #20
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr
 8011932:	bf00      	nop
 8011934:	080155c4 	.word	0x080155c4

08011938 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011938:	b480      	push	{r7}
 801193a:	b087      	sub	sp, #28
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011942:	88fb      	ldrh	r3, [r7, #6]
 8011944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011948:	d201      	bcs.n	801194e <ff_wtoupper+0x16>
 801194a:	4b3e      	ldr	r3, [pc, #248]	; (8011a44 <ff_wtoupper+0x10c>)
 801194c:	e000      	b.n	8011950 <ff_wtoupper+0x18>
 801194e:	4b3e      	ldr	r3, [pc, #248]	; (8011a48 <ff_wtoupper+0x110>)
 8011950:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	1c9a      	adds	r2, r3, #2
 8011956:	617a      	str	r2, [r7, #20]
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801195c:	8a7b      	ldrh	r3, [r7, #18]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d068      	beq.n	8011a34 <ff_wtoupper+0xfc>
 8011962:	88fa      	ldrh	r2, [r7, #6]
 8011964:	8a7b      	ldrh	r3, [r7, #18]
 8011966:	429a      	cmp	r2, r3
 8011968:	d364      	bcc.n	8011a34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	1c9a      	adds	r2, r3, #2
 801196e:	617a      	str	r2, [r7, #20]
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	823b      	strh	r3, [r7, #16]
 8011974:	8a3b      	ldrh	r3, [r7, #16]
 8011976:	0a1b      	lsrs	r3, r3, #8
 8011978:	81fb      	strh	r3, [r7, #14]
 801197a:	8a3b      	ldrh	r3, [r7, #16]
 801197c:	b2db      	uxtb	r3, r3
 801197e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011980:	88fa      	ldrh	r2, [r7, #6]
 8011982:	8a79      	ldrh	r1, [r7, #18]
 8011984:	8a3b      	ldrh	r3, [r7, #16]
 8011986:	440b      	add	r3, r1
 8011988:	429a      	cmp	r2, r3
 801198a:	da49      	bge.n	8011a20 <ff_wtoupper+0xe8>
			switch (cmd) {
 801198c:	89fb      	ldrh	r3, [r7, #14]
 801198e:	2b08      	cmp	r3, #8
 8011990:	d84f      	bhi.n	8011a32 <ff_wtoupper+0xfa>
 8011992:	a201      	add	r2, pc, #4	; (adr r2, 8011998 <ff_wtoupper+0x60>)
 8011994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011998:	080119bd 	.word	0x080119bd
 801199c:	080119cf 	.word	0x080119cf
 80119a0:	080119e5 	.word	0x080119e5
 80119a4:	080119ed 	.word	0x080119ed
 80119a8:	080119f5 	.word	0x080119f5
 80119ac:	080119fd 	.word	0x080119fd
 80119b0:	08011a05 	.word	0x08011a05
 80119b4:	08011a0d 	.word	0x08011a0d
 80119b8:	08011a15 	.word	0x08011a15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119bc:	88fa      	ldrh	r2, [r7, #6]
 80119be:	8a7b      	ldrh	r3, [r7, #18]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	4413      	add	r3, r2
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	80fb      	strh	r3, [r7, #6]
 80119cc:	e027      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119ce:	88fa      	ldrh	r2, [r7, #6]
 80119d0:	8a7b      	ldrh	r3, [r7, #18]
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	b29b      	uxth	r3, r3
 80119dc:	88fa      	ldrh	r2, [r7, #6]
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	80fb      	strh	r3, [r7, #6]
 80119e2:	e01c      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	3b10      	subs	r3, #16
 80119e8:	80fb      	strh	r3, [r7, #6]
 80119ea:	e018      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	3b20      	subs	r3, #32
 80119f0:	80fb      	strh	r3, [r7, #6]
 80119f2:	e014      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	3b30      	subs	r3, #48	; 0x30
 80119f8:	80fb      	strh	r3, [r7, #6]
 80119fa:	e010      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	3b1a      	subs	r3, #26
 8011a00:	80fb      	strh	r3, [r7, #6]
 8011a02:	e00c      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011a04:	88fb      	ldrh	r3, [r7, #6]
 8011a06:	3308      	adds	r3, #8
 8011a08:	80fb      	strh	r3, [r7, #6]
 8011a0a:	e008      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011a0c:	88fb      	ldrh	r3, [r7, #6]
 8011a0e:	3b50      	subs	r3, #80	; 0x50
 8011a10:	80fb      	strh	r3, [r7, #6]
 8011a12:	e004      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a14:	88fb      	ldrh	r3, [r7, #6]
 8011a16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011a1a:	80fb      	strh	r3, [r7, #6]
 8011a1c:	bf00      	nop
			}
			break;
 8011a1e:	e008      	b.n	8011a32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a20:	89fb      	ldrh	r3, [r7, #14]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d195      	bne.n	8011952 <ff_wtoupper+0x1a>
 8011a26:	8a3b      	ldrh	r3, [r7, #16]
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a30:	e78f      	b.n	8011952 <ff_wtoupper+0x1a>
			break;
 8011a32:	bf00      	nop
	}

	return chr;
 8011a34:	88fb      	ldrh	r3, [r7, #6]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	371c      	adds	r7, #28
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	080156c4 	.word	0x080156c4
 8011a48:	080158b8 	.word	0x080158b8

08011a4c <__assert_func>:
 8011a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a4e:	4614      	mov	r4, r2
 8011a50:	461a      	mov	r2, r3
 8011a52:	4b09      	ldr	r3, [pc, #36]	; (8011a78 <__assert_func+0x2c>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4605      	mov	r5, r0
 8011a58:	68d8      	ldr	r0, [r3, #12]
 8011a5a:	b14c      	cbz	r4, 8011a70 <__assert_func+0x24>
 8011a5c:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <__assert_func+0x30>)
 8011a5e:	9100      	str	r1, [sp, #0]
 8011a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a64:	4906      	ldr	r1, [pc, #24]	; (8011a80 <__assert_func+0x34>)
 8011a66:	462b      	mov	r3, r5
 8011a68:	f000 f814 	bl	8011a94 <fiprintf>
 8011a6c:	f000 fd9a 	bl	80125a4 <abort>
 8011a70:	4b04      	ldr	r3, [pc, #16]	; (8011a84 <__assert_func+0x38>)
 8011a72:	461c      	mov	r4, r3
 8011a74:	e7f3      	b.n	8011a5e <__assert_func+0x12>
 8011a76:	bf00      	nop
 8011a78:	20000100 	.word	0x20000100
 8011a7c:	08015974 	.word	0x08015974
 8011a80:	08015981 	.word	0x08015981
 8011a84:	080159af 	.word	0x080159af

08011a88 <__errno>:
 8011a88:	4b01      	ldr	r3, [pc, #4]	; (8011a90 <__errno+0x8>)
 8011a8a:	6818      	ldr	r0, [r3, #0]
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	20000100 	.word	0x20000100

08011a94 <fiprintf>:
 8011a94:	b40e      	push	{r1, r2, r3}
 8011a96:	b503      	push	{r0, r1, lr}
 8011a98:	4601      	mov	r1, r0
 8011a9a:	ab03      	add	r3, sp, #12
 8011a9c:	4805      	ldr	r0, [pc, #20]	; (8011ab4 <fiprintf+0x20>)
 8011a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aa2:	6800      	ldr	r0, [r0, #0]
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	f000 f95b 	bl	8011d60 <_vfiprintf_r>
 8011aaa:	b002      	add	sp, #8
 8011aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ab0:	b003      	add	sp, #12
 8011ab2:	4770      	bx	lr
 8011ab4:	20000100 	.word	0x20000100

08011ab8 <__libc_init_array>:
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	4d0d      	ldr	r5, [pc, #52]	; (8011af0 <__libc_init_array+0x38>)
 8011abc:	4c0d      	ldr	r4, [pc, #52]	; (8011af4 <__libc_init_array+0x3c>)
 8011abe:	1b64      	subs	r4, r4, r5
 8011ac0:	10a4      	asrs	r4, r4, #2
 8011ac2:	2600      	movs	r6, #0
 8011ac4:	42a6      	cmp	r6, r4
 8011ac6:	d109      	bne.n	8011adc <__libc_init_array+0x24>
 8011ac8:	4d0b      	ldr	r5, [pc, #44]	; (8011af8 <__libc_init_array+0x40>)
 8011aca:	4c0c      	ldr	r4, [pc, #48]	; (8011afc <__libc_init_array+0x44>)
 8011acc:	f001 f88e 	bl	8012bec <_init>
 8011ad0:	1b64      	subs	r4, r4, r5
 8011ad2:	10a4      	asrs	r4, r4, #2
 8011ad4:	2600      	movs	r6, #0
 8011ad6:	42a6      	cmp	r6, r4
 8011ad8:	d105      	bne.n	8011ae6 <__libc_init_array+0x2e>
 8011ada:	bd70      	pop	{r4, r5, r6, pc}
 8011adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ae0:	4798      	blx	r3
 8011ae2:	3601      	adds	r6, #1
 8011ae4:	e7ee      	b.n	8011ac4 <__libc_init_array+0xc>
 8011ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aea:	4798      	blx	r3
 8011aec:	3601      	adds	r6, #1
 8011aee:	e7f2      	b.n	8011ad6 <__libc_init_array+0x1e>
 8011af0:	08015a50 	.word	0x08015a50
 8011af4:	08015a50 	.word	0x08015a50
 8011af8:	08015a50 	.word	0x08015a50
 8011afc:	08015a54 	.word	0x08015a54

08011b00 <malloc>:
 8011b00:	4b02      	ldr	r3, [pc, #8]	; (8011b0c <malloc+0xc>)
 8011b02:	4601      	mov	r1, r0
 8011b04:	6818      	ldr	r0, [r3, #0]
 8011b06:	f000 b88d 	b.w	8011c24 <_malloc_r>
 8011b0a:	bf00      	nop
 8011b0c:	20000100 	.word	0x20000100

08011b10 <free>:
 8011b10:	4b02      	ldr	r3, [pc, #8]	; (8011b1c <free+0xc>)
 8011b12:	4601      	mov	r1, r0
 8011b14:	6818      	ldr	r0, [r3, #0]
 8011b16:	f000 b819 	b.w	8011b4c <_free_r>
 8011b1a:	bf00      	nop
 8011b1c:	20000100 	.word	0x20000100

08011b20 <memcpy>:
 8011b20:	440a      	add	r2, r1
 8011b22:	4291      	cmp	r1, r2
 8011b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b28:	d100      	bne.n	8011b2c <memcpy+0xc>
 8011b2a:	4770      	bx	lr
 8011b2c:	b510      	push	{r4, lr}
 8011b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b36:	4291      	cmp	r1, r2
 8011b38:	d1f9      	bne.n	8011b2e <memcpy+0xe>
 8011b3a:	bd10      	pop	{r4, pc}

08011b3c <memset>:
 8011b3c:	4402      	add	r2, r0
 8011b3e:	4603      	mov	r3, r0
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d100      	bne.n	8011b46 <memset+0xa>
 8011b44:	4770      	bx	lr
 8011b46:	f803 1b01 	strb.w	r1, [r3], #1
 8011b4a:	e7f9      	b.n	8011b40 <memset+0x4>

08011b4c <_free_r>:
 8011b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b4e:	2900      	cmp	r1, #0
 8011b50:	d044      	beq.n	8011bdc <_free_r+0x90>
 8011b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b56:	9001      	str	r0, [sp, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8011b5e:	bfb8      	it	lt
 8011b60:	18e4      	addlt	r4, r4, r3
 8011b62:	f000 ff47 	bl	80129f4 <__malloc_lock>
 8011b66:	4a1e      	ldr	r2, [pc, #120]	; (8011be0 <_free_r+0x94>)
 8011b68:	9801      	ldr	r0, [sp, #4]
 8011b6a:	6813      	ldr	r3, [r2, #0]
 8011b6c:	b933      	cbnz	r3, 8011b7c <_free_r+0x30>
 8011b6e:	6063      	str	r3, [r4, #4]
 8011b70:	6014      	str	r4, [r2, #0]
 8011b72:	b003      	add	sp, #12
 8011b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b78:	f000 bf42 	b.w	8012a00 <__malloc_unlock>
 8011b7c:	42a3      	cmp	r3, r4
 8011b7e:	d908      	bls.n	8011b92 <_free_r+0x46>
 8011b80:	6825      	ldr	r5, [r4, #0]
 8011b82:	1961      	adds	r1, r4, r5
 8011b84:	428b      	cmp	r3, r1
 8011b86:	bf01      	itttt	eq
 8011b88:	6819      	ldreq	r1, [r3, #0]
 8011b8a:	685b      	ldreq	r3, [r3, #4]
 8011b8c:	1949      	addeq	r1, r1, r5
 8011b8e:	6021      	streq	r1, [r4, #0]
 8011b90:	e7ed      	b.n	8011b6e <_free_r+0x22>
 8011b92:	461a      	mov	r2, r3
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	b10b      	cbz	r3, 8011b9c <_free_r+0x50>
 8011b98:	42a3      	cmp	r3, r4
 8011b9a:	d9fa      	bls.n	8011b92 <_free_r+0x46>
 8011b9c:	6811      	ldr	r1, [r2, #0]
 8011b9e:	1855      	adds	r5, r2, r1
 8011ba0:	42a5      	cmp	r5, r4
 8011ba2:	d10b      	bne.n	8011bbc <_free_r+0x70>
 8011ba4:	6824      	ldr	r4, [r4, #0]
 8011ba6:	4421      	add	r1, r4
 8011ba8:	1854      	adds	r4, r2, r1
 8011baa:	42a3      	cmp	r3, r4
 8011bac:	6011      	str	r1, [r2, #0]
 8011bae:	d1e0      	bne.n	8011b72 <_free_r+0x26>
 8011bb0:	681c      	ldr	r4, [r3, #0]
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	6053      	str	r3, [r2, #4]
 8011bb6:	4421      	add	r1, r4
 8011bb8:	6011      	str	r1, [r2, #0]
 8011bba:	e7da      	b.n	8011b72 <_free_r+0x26>
 8011bbc:	d902      	bls.n	8011bc4 <_free_r+0x78>
 8011bbe:	230c      	movs	r3, #12
 8011bc0:	6003      	str	r3, [r0, #0]
 8011bc2:	e7d6      	b.n	8011b72 <_free_r+0x26>
 8011bc4:	6825      	ldr	r5, [r4, #0]
 8011bc6:	1961      	adds	r1, r4, r5
 8011bc8:	428b      	cmp	r3, r1
 8011bca:	bf04      	itt	eq
 8011bcc:	6819      	ldreq	r1, [r3, #0]
 8011bce:	685b      	ldreq	r3, [r3, #4]
 8011bd0:	6063      	str	r3, [r4, #4]
 8011bd2:	bf04      	itt	eq
 8011bd4:	1949      	addeq	r1, r1, r5
 8011bd6:	6021      	streq	r1, [r4, #0]
 8011bd8:	6054      	str	r4, [r2, #4]
 8011bda:	e7ca      	b.n	8011b72 <_free_r+0x26>
 8011bdc:	b003      	add	sp, #12
 8011bde:	bd30      	pop	{r4, r5, pc}
 8011be0:	2001ce8c 	.word	0x2001ce8c

08011be4 <sbrk_aligned>:
 8011be4:	b570      	push	{r4, r5, r6, lr}
 8011be6:	4e0e      	ldr	r6, [pc, #56]	; (8011c20 <sbrk_aligned+0x3c>)
 8011be8:	460c      	mov	r4, r1
 8011bea:	6831      	ldr	r1, [r6, #0]
 8011bec:	4605      	mov	r5, r0
 8011bee:	b911      	cbnz	r1, 8011bf6 <sbrk_aligned+0x12>
 8011bf0:	f000 fc08 	bl	8012404 <_sbrk_r>
 8011bf4:	6030      	str	r0, [r6, #0]
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	f000 fc03 	bl	8012404 <_sbrk_r>
 8011bfe:	1c43      	adds	r3, r0, #1
 8011c00:	d00a      	beq.n	8011c18 <sbrk_aligned+0x34>
 8011c02:	1cc4      	adds	r4, r0, #3
 8011c04:	f024 0403 	bic.w	r4, r4, #3
 8011c08:	42a0      	cmp	r0, r4
 8011c0a:	d007      	beq.n	8011c1c <sbrk_aligned+0x38>
 8011c0c:	1a21      	subs	r1, r4, r0
 8011c0e:	4628      	mov	r0, r5
 8011c10:	f000 fbf8 	bl	8012404 <_sbrk_r>
 8011c14:	3001      	adds	r0, #1
 8011c16:	d101      	bne.n	8011c1c <sbrk_aligned+0x38>
 8011c18:	f04f 34ff 	mov.w	r4, #4294967295
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	2001ce90 	.word	0x2001ce90

08011c24 <_malloc_r>:
 8011c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c28:	1ccd      	adds	r5, r1, #3
 8011c2a:	f025 0503 	bic.w	r5, r5, #3
 8011c2e:	3508      	adds	r5, #8
 8011c30:	2d0c      	cmp	r5, #12
 8011c32:	bf38      	it	cc
 8011c34:	250c      	movcc	r5, #12
 8011c36:	2d00      	cmp	r5, #0
 8011c38:	4607      	mov	r7, r0
 8011c3a:	db01      	blt.n	8011c40 <_malloc_r+0x1c>
 8011c3c:	42a9      	cmp	r1, r5
 8011c3e:	d905      	bls.n	8011c4c <_malloc_r+0x28>
 8011c40:	230c      	movs	r3, #12
 8011c42:	603b      	str	r3, [r7, #0]
 8011c44:	2600      	movs	r6, #0
 8011c46:	4630      	mov	r0, r6
 8011c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4c:	4e2e      	ldr	r6, [pc, #184]	; (8011d08 <_malloc_r+0xe4>)
 8011c4e:	f000 fed1 	bl	80129f4 <__malloc_lock>
 8011c52:	6833      	ldr	r3, [r6, #0]
 8011c54:	461c      	mov	r4, r3
 8011c56:	bb34      	cbnz	r4, 8011ca6 <_malloc_r+0x82>
 8011c58:	4629      	mov	r1, r5
 8011c5a:	4638      	mov	r0, r7
 8011c5c:	f7ff ffc2 	bl	8011be4 <sbrk_aligned>
 8011c60:	1c43      	adds	r3, r0, #1
 8011c62:	4604      	mov	r4, r0
 8011c64:	d14d      	bne.n	8011d02 <_malloc_r+0xde>
 8011c66:	6834      	ldr	r4, [r6, #0]
 8011c68:	4626      	mov	r6, r4
 8011c6a:	2e00      	cmp	r6, #0
 8011c6c:	d140      	bne.n	8011cf0 <_malloc_r+0xcc>
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	4631      	mov	r1, r6
 8011c72:	4638      	mov	r0, r7
 8011c74:	eb04 0803 	add.w	r8, r4, r3
 8011c78:	f000 fbc4 	bl	8012404 <_sbrk_r>
 8011c7c:	4580      	cmp	r8, r0
 8011c7e:	d13a      	bne.n	8011cf6 <_malloc_r+0xd2>
 8011c80:	6821      	ldr	r1, [r4, #0]
 8011c82:	3503      	adds	r5, #3
 8011c84:	1a6d      	subs	r5, r5, r1
 8011c86:	f025 0503 	bic.w	r5, r5, #3
 8011c8a:	3508      	adds	r5, #8
 8011c8c:	2d0c      	cmp	r5, #12
 8011c8e:	bf38      	it	cc
 8011c90:	250c      	movcc	r5, #12
 8011c92:	4629      	mov	r1, r5
 8011c94:	4638      	mov	r0, r7
 8011c96:	f7ff ffa5 	bl	8011be4 <sbrk_aligned>
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	d02b      	beq.n	8011cf6 <_malloc_r+0xd2>
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	442b      	add	r3, r5
 8011ca2:	6023      	str	r3, [r4, #0]
 8011ca4:	e00e      	b.n	8011cc4 <_malloc_r+0xa0>
 8011ca6:	6822      	ldr	r2, [r4, #0]
 8011ca8:	1b52      	subs	r2, r2, r5
 8011caa:	d41e      	bmi.n	8011cea <_malloc_r+0xc6>
 8011cac:	2a0b      	cmp	r2, #11
 8011cae:	d916      	bls.n	8011cde <_malloc_r+0xba>
 8011cb0:	1961      	adds	r1, r4, r5
 8011cb2:	42a3      	cmp	r3, r4
 8011cb4:	6025      	str	r5, [r4, #0]
 8011cb6:	bf18      	it	ne
 8011cb8:	6059      	strne	r1, [r3, #4]
 8011cba:	6863      	ldr	r3, [r4, #4]
 8011cbc:	bf08      	it	eq
 8011cbe:	6031      	streq	r1, [r6, #0]
 8011cc0:	5162      	str	r2, [r4, r5]
 8011cc2:	604b      	str	r3, [r1, #4]
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	f104 060b 	add.w	r6, r4, #11
 8011cca:	f000 fe99 	bl	8012a00 <__malloc_unlock>
 8011cce:	f026 0607 	bic.w	r6, r6, #7
 8011cd2:	1d23      	adds	r3, r4, #4
 8011cd4:	1af2      	subs	r2, r6, r3
 8011cd6:	d0b6      	beq.n	8011c46 <_malloc_r+0x22>
 8011cd8:	1b9b      	subs	r3, r3, r6
 8011cda:	50a3      	str	r3, [r4, r2]
 8011cdc:	e7b3      	b.n	8011c46 <_malloc_r+0x22>
 8011cde:	6862      	ldr	r2, [r4, #4]
 8011ce0:	42a3      	cmp	r3, r4
 8011ce2:	bf0c      	ite	eq
 8011ce4:	6032      	streq	r2, [r6, #0]
 8011ce6:	605a      	strne	r2, [r3, #4]
 8011ce8:	e7ec      	b.n	8011cc4 <_malloc_r+0xa0>
 8011cea:	4623      	mov	r3, r4
 8011cec:	6864      	ldr	r4, [r4, #4]
 8011cee:	e7b2      	b.n	8011c56 <_malloc_r+0x32>
 8011cf0:	4634      	mov	r4, r6
 8011cf2:	6876      	ldr	r6, [r6, #4]
 8011cf4:	e7b9      	b.n	8011c6a <_malloc_r+0x46>
 8011cf6:	230c      	movs	r3, #12
 8011cf8:	603b      	str	r3, [r7, #0]
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	f000 fe80 	bl	8012a00 <__malloc_unlock>
 8011d00:	e7a1      	b.n	8011c46 <_malloc_r+0x22>
 8011d02:	6025      	str	r5, [r4, #0]
 8011d04:	e7de      	b.n	8011cc4 <_malloc_r+0xa0>
 8011d06:	bf00      	nop
 8011d08:	2001ce8c 	.word	0x2001ce8c

08011d0c <__sfputc_r>:
 8011d0c:	6893      	ldr	r3, [r2, #8]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	b410      	push	{r4}
 8011d14:	6093      	str	r3, [r2, #8]
 8011d16:	da08      	bge.n	8011d2a <__sfputc_r+0x1e>
 8011d18:	6994      	ldr	r4, [r2, #24]
 8011d1a:	42a3      	cmp	r3, r4
 8011d1c:	db01      	blt.n	8011d22 <__sfputc_r+0x16>
 8011d1e:	290a      	cmp	r1, #10
 8011d20:	d103      	bne.n	8011d2a <__sfputc_r+0x1e>
 8011d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d26:	f000 bb7d 	b.w	8012424 <__swbuf_r>
 8011d2a:	6813      	ldr	r3, [r2, #0]
 8011d2c:	1c58      	adds	r0, r3, #1
 8011d2e:	6010      	str	r0, [r2, #0]
 8011d30:	7019      	strb	r1, [r3, #0]
 8011d32:	4608      	mov	r0, r1
 8011d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <__sfputs_r>:
 8011d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	4614      	mov	r4, r2
 8011d42:	18d5      	adds	r5, r2, r3
 8011d44:	42ac      	cmp	r4, r5
 8011d46:	d101      	bne.n	8011d4c <__sfputs_r+0x12>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e007      	b.n	8011d5c <__sfputs_r+0x22>
 8011d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d50:	463a      	mov	r2, r7
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7ff ffda 	bl	8011d0c <__sfputc_r>
 8011d58:	1c43      	adds	r3, r0, #1
 8011d5a:	d1f3      	bne.n	8011d44 <__sfputs_r+0xa>
 8011d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d60 <_vfiprintf_r>:
 8011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d64:	460d      	mov	r5, r1
 8011d66:	b09d      	sub	sp, #116	; 0x74
 8011d68:	4614      	mov	r4, r2
 8011d6a:	4698      	mov	r8, r3
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	b118      	cbz	r0, 8011d78 <_vfiprintf_r+0x18>
 8011d70:	6983      	ldr	r3, [r0, #24]
 8011d72:	b90b      	cbnz	r3, 8011d78 <_vfiprintf_r+0x18>
 8011d74:	f000 fd38 	bl	80127e8 <__sinit>
 8011d78:	4b89      	ldr	r3, [pc, #548]	; (8011fa0 <_vfiprintf_r+0x240>)
 8011d7a:	429d      	cmp	r5, r3
 8011d7c:	d11b      	bne.n	8011db6 <_vfiprintf_r+0x56>
 8011d7e:	6875      	ldr	r5, [r6, #4]
 8011d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d82:	07d9      	lsls	r1, r3, #31
 8011d84:	d405      	bmi.n	8011d92 <_vfiprintf_r+0x32>
 8011d86:	89ab      	ldrh	r3, [r5, #12]
 8011d88:	059a      	lsls	r2, r3, #22
 8011d8a:	d402      	bmi.n	8011d92 <_vfiprintf_r+0x32>
 8011d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d8e:	f000 fdc9 	bl	8012924 <__retarget_lock_acquire_recursive>
 8011d92:	89ab      	ldrh	r3, [r5, #12]
 8011d94:	071b      	lsls	r3, r3, #28
 8011d96:	d501      	bpl.n	8011d9c <_vfiprintf_r+0x3c>
 8011d98:	692b      	ldr	r3, [r5, #16]
 8011d9a:	b9eb      	cbnz	r3, 8011dd8 <_vfiprintf_r+0x78>
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	4630      	mov	r0, r6
 8011da0:	f000 fb92 	bl	80124c8 <__swsetup_r>
 8011da4:	b1c0      	cbz	r0, 8011dd8 <_vfiprintf_r+0x78>
 8011da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011da8:	07dc      	lsls	r4, r3, #31
 8011daa:	d50e      	bpl.n	8011dca <_vfiprintf_r+0x6a>
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295
 8011db0:	b01d      	add	sp, #116	; 0x74
 8011db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db6:	4b7b      	ldr	r3, [pc, #492]	; (8011fa4 <_vfiprintf_r+0x244>)
 8011db8:	429d      	cmp	r5, r3
 8011dba:	d101      	bne.n	8011dc0 <_vfiprintf_r+0x60>
 8011dbc:	68b5      	ldr	r5, [r6, #8]
 8011dbe:	e7df      	b.n	8011d80 <_vfiprintf_r+0x20>
 8011dc0:	4b79      	ldr	r3, [pc, #484]	; (8011fa8 <_vfiprintf_r+0x248>)
 8011dc2:	429d      	cmp	r5, r3
 8011dc4:	bf08      	it	eq
 8011dc6:	68f5      	ldreq	r5, [r6, #12]
 8011dc8:	e7da      	b.n	8011d80 <_vfiprintf_r+0x20>
 8011dca:	89ab      	ldrh	r3, [r5, #12]
 8011dcc:	0598      	lsls	r0, r3, #22
 8011dce:	d4ed      	bmi.n	8011dac <_vfiprintf_r+0x4c>
 8011dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dd2:	f000 fda8 	bl	8012926 <__retarget_lock_release_recursive>
 8011dd6:	e7e9      	b.n	8011dac <_vfiprintf_r+0x4c>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9309      	str	r3, [sp, #36]	; 0x24
 8011ddc:	2320      	movs	r3, #32
 8011dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011de6:	2330      	movs	r3, #48	; 0x30
 8011de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011fac <_vfiprintf_r+0x24c>
 8011dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011df0:	f04f 0901 	mov.w	r9, #1
 8011df4:	4623      	mov	r3, r4
 8011df6:	469a      	mov	sl, r3
 8011df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfc:	b10a      	cbz	r2, 8011e02 <_vfiprintf_r+0xa2>
 8011dfe:	2a25      	cmp	r2, #37	; 0x25
 8011e00:	d1f9      	bne.n	8011df6 <_vfiprintf_r+0x96>
 8011e02:	ebba 0b04 	subs.w	fp, sl, r4
 8011e06:	d00b      	beq.n	8011e20 <_vfiprintf_r+0xc0>
 8011e08:	465b      	mov	r3, fp
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ff93 	bl	8011d3a <__sfputs_r>
 8011e14:	3001      	adds	r0, #1
 8011e16:	f000 80aa 	beq.w	8011f6e <_vfiprintf_r+0x20e>
 8011e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e1c:	445a      	add	r2, fp
 8011e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8011e20:	f89a 3000 	ldrb.w	r3, [sl]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f000 80a2 	beq.w	8011f6e <_vfiprintf_r+0x20e>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e34:	f10a 0a01 	add.w	sl, sl, #1
 8011e38:	9304      	str	r3, [sp, #16]
 8011e3a:	9307      	str	r3, [sp, #28]
 8011e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e40:	931a      	str	r3, [sp, #104]	; 0x68
 8011e42:	4654      	mov	r4, sl
 8011e44:	2205      	movs	r2, #5
 8011e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e4a:	4858      	ldr	r0, [pc, #352]	; (8011fac <_vfiprintf_r+0x24c>)
 8011e4c:	f7ee f9d0 	bl	80001f0 <memchr>
 8011e50:	9a04      	ldr	r2, [sp, #16]
 8011e52:	b9d8      	cbnz	r0, 8011e8c <_vfiprintf_r+0x12c>
 8011e54:	06d1      	lsls	r1, r2, #27
 8011e56:	bf44      	itt	mi
 8011e58:	2320      	movmi	r3, #32
 8011e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e5e:	0713      	lsls	r3, r2, #28
 8011e60:	bf44      	itt	mi
 8011e62:	232b      	movmi	r3, #43	; 0x2b
 8011e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e68:	f89a 3000 	ldrb.w	r3, [sl]
 8011e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8011e6e:	d015      	beq.n	8011e9c <_vfiprintf_r+0x13c>
 8011e70:	9a07      	ldr	r2, [sp, #28]
 8011e72:	4654      	mov	r4, sl
 8011e74:	2000      	movs	r0, #0
 8011e76:	f04f 0c0a 	mov.w	ip, #10
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e80:	3b30      	subs	r3, #48	; 0x30
 8011e82:	2b09      	cmp	r3, #9
 8011e84:	d94e      	bls.n	8011f24 <_vfiprintf_r+0x1c4>
 8011e86:	b1b0      	cbz	r0, 8011eb6 <_vfiprintf_r+0x156>
 8011e88:	9207      	str	r2, [sp, #28]
 8011e8a:	e014      	b.n	8011eb6 <_vfiprintf_r+0x156>
 8011e8c:	eba0 0308 	sub.w	r3, r0, r8
 8011e90:	fa09 f303 	lsl.w	r3, r9, r3
 8011e94:	4313      	orrs	r3, r2
 8011e96:	9304      	str	r3, [sp, #16]
 8011e98:	46a2      	mov	sl, r4
 8011e9a:	e7d2      	b.n	8011e42 <_vfiprintf_r+0xe2>
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	1d19      	adds	r1, r3, #4
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	9103      	str	r1, [sp, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	bfbb      	ittet	lt
 8011ea8:	425b      	neglt	r3, r3
 8011eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8011eae:	9307      	strge	r3, [sp, #28]
 8011eb0:	9307      	strlt	r3, [sp, #28]
 8011eb2:	bfb8      	it	lt
 8011eb4:	9204      	strlt	r2, [sp, #16]
 8011eb6:	7823      	ldrb	r3, [r4, #0]
 8011eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eba:	d10c      	bne.n	8011ed6 <_vfiprintf_r+0x176>
 8011ebc:	7863      	ldrb	r3, [r4, #1]
 8011ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8011ec0:	d135      	bne.n	8011f2e <_vfiprintf_r+0x1ce>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	1d1a      	adds	r2, r3, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	9203      	str	r2, [sp, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfb8      	it	lt
 8011ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ed2:	3402      	adds	r4, #2
 8011ed4:	9305      	str	r3, [sp, #20]
 8011ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011fbc <_vfiprintf_r+0x25c>
 8011eda:	7821      	ldrb	r1, [r4, #0]
 8011edc:	2203      	movs	r2, #3
 8011ede:	4650      	mov	r0, sl
 8011ee0:	f7ee f986 	bl	80001f0 <memchr>
 8011ee4:	b140      	cbz	r0, 8011ef8 <_vfiprintf_r+0x198>
 8011ee6:	2340      	movs	r3, #64	; 0x40
 8011ee8:	eba0 000a 	sub.w	r0, r0, sl
 8011eec:	fa03 f000 	lsl.w	r0, r3, r0
 8011ef0:	9b04      	ldr	r3, [sp, #16]
 8011ef2:	4303      	orrs	r3, r0
 8011ef4:	3401      	adds	r4, #1
 8011ef6:	9304      	str	r3, [sp, #16]
 8011ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011efc:	482c      	ldr	r0, [pc, #176]	; (8011fb0 <_vfiprintf_r+0x250>)
 8011efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f02:	2206      	movs	r2, #6
 8011f04:	f7ee f974 	bl	80001f0 <memchr>
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	d03f      	beq.n	8011f8c <_vfiprintf_r+0x22c>
 8011f0c:	4b29      	ldr	r3, [pc, #164]	; (8011fb4 <_vfiprintf_r+0x254>)
 8011f0e:	bb1b      	cbnz	r3, 8011f58 <_vfiprintf_r+0x1f8>
 8011f10:	9b03      	ldr	r3, [sp, #12]
 8011f12:	3307      	adds	r3, #7
 8011f14:	f023 0307 	bic.w	r3, r3, #7
 8011f18:	3308      	adds	r3, #8
 8011f1a:	9303      	str	r3, [sp, #12]
 8011f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f1e:	443b      	add	r3, r7
 8011f20:	9309      	str	r3, [sp, #36]	; 0x24
 8011f22:	e767      	b.n	8011df4 <_vfiprintf_r+0x94>
 8011f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f28:	460c      	mov	r4, r1
 8011f2a:	2001      	movs	r0, #1
 8011f2c:	e7a5      	b.n	8011e7a <_vfiprintf_r+0x11a>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	3401      	adds	r4, #1
 8011f32:	9305      	str	r3, [sp, #20]
 8011f34:	4619      	mov	r1, r3
 8011f36:	f04f 0c0a 	mov.w	ip, #10
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f40:	3a30      	subs	r2, #48	; 0x30
 8011f42:	2a09      	cmp	r2, #9
 8011f44:	d903      	bls.n	8011f4e <_vfiprintf_r+0x1ee>
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0c5      	beq.n	8011ed6 <_vfiprintf_r+0x176>
 8011f4a:	9105      	str	r1, [sp, #20]
 8011f4c:	e7c3      	b.n	8011ed6 <_vfiprintf_r+0x176>
 8011f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f52:	4604      	mov	r4, r0
 8011f54:	2301      	movs	r3, #1
 8011f56:	e7f0      	b.n	8011f3a <_vfiprintf_r+0x1da>
 8011f58:	ab03      	add	r3, sp, #12
 8011f5a:	9300      	str	r3, [sp, #0]
 8011f5c:	462a      	mov	r2, r5
 8011f5e:	4b16      	ldr	r3, [pc, #88]	; (8011fb8 <_vfiprintf_r+0x258>)
 8011f60:	a904      	add	r1, sp, #16
 8011f62:	4630      	mov	r0, r6
 8011f64:	f3af 8000 	nop.w
 8011f68:	4607      	mov	r7, r0
 8011f6a:	1c78      	adds	r0, r7, #1
 8011f6c:	d1d6      	bne.n	8011f1c <_vfiprintf_r+0x1bc>
 8011f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f70:	07d9      	lsls	r1, r3, #31
 8011f72:	d405      	bmi.n	8011f80 <_vfiprintf_r+0x220>
 8011f74:	89ab      	ldrh	r3, [r5, #12]
 8011f76:	059a      	lsls	r2, r3, #22
 8011f78:	d402      	bmi.n	8011f80 <_vfiprintf_r+0x220>
 8011f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f7c:	f000 fcd3 	bl	8012926 <__retarget_lock_release_recursive>
 8011f80:	89ab      	ldrh	r3, [r5, #12]
 8011f82:	065b      	lsls	r3, r3, #25
 8011f84:	f53f af12 	bmi.w	8011dac <_vfiprintf_r+0x4c>
 8011f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f8a:	e711      	b.n	8011db0 <_vfiprintf_r+0x50>
 8011f8c:	ab03      	add	r3, sp, #12
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	462a      	mov	r2, r5
 8011f92:	4b09      	ldr	r3, [pc, #36]	; (8011fb8 <_vfiprintf_r+0x258>)
 8011f94:	a904      	add	r1, sp, #16
 8011f96:	4630      	mov	r0, r6
 8011f98:	f000 f880 	bl	801209c <_printf_i>
 8011f9c:	e7e4      	b.n	8011f68 <_vfiprintf_r+0x208>
 8011f9e:	bf00      	nop
 8011fa0:	08015a08 	.word	0x08015a08
 8011fa4:	08015a28 	.word	0x08015a28
 8011fa8:	080159e8 	.word	0x080159e8
 8011fac:	080159b4 	.word	0x080159b4
 8011fb0:	080159be 	.word	0x080159be
 8011fb4:	00000000 	.word	0x00000000
 8011fb8:	08011d3b 	.word	0x08011d3b
 8011fbc:	080159ba 	.word	0x080159ba

08011fc0 <_printf_common>:
 8011fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc4:	4616      	mov	r6, r2
 8011fc6:	4699      	mov	r9, r3
 8011fc8:	688a      	ldr	r2, [r1, #8]
 8011fca:	690b      	ldr	r3, [r1, #16]
 8011fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	bfb8      	it	lt
 8011fd4:	4613      	movlt	r3, r2
 8011fd6:	6033      	str	r3, [r6, #0]
 8011fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fdc:	4607      	mov	r7, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b10a      	cbz	r2, 8011fe6 <_printf_common+0x26>
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	6033      	str	r3, [r6, #0]
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	0699      	lsls	r1, r3, #26
 8011fea:	bf42      	ittt	mi
 8011fec:	6833      	ldrmi	r3, [r6, #0]
 8011fee:	3302      	addmi	r3, #2
 8011ff0:	6033      	strmi	r3, [r6, #0]
 8011ff2:	6825      	ldr	r5, [r4, #0]
 8011ff4:	f015 0506 	ands.w	r5, r5, #6
 8011ff8:	d106      	bne.n	8012008 <_printf_common+0x48>
 8011ffa:	f104 0a19 	add.w	sl, r4, #25
 8011ffe:	68e3      	ldr	r3, [r4, #12]
 8012000:	6832      	ldr	r2, [r6, #0]
 8012002:	1a9b      	subs	r3, r3, r2
 8012004:	42ab      	cmp	r3, r5
 8012006:	dc26      	bgt.n	8012056 <_printf_common+0x96>
 8012008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801200c:	1e13      	subs	r3, r2, #0
 801200e:	6822      	ldr	r2, [r4, #0]
 8012010:	bf18      	it	ne
 8012012:	2301      	movne	r3, #1
 8012014:	0692      	lsls	r2, r2, #26
 8012016:	d42b      	bmi.n	8012070 <_printf_common+0xb0>
 8012018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801201c:	4649      	mov	r1, r9
 801201e:	4638      	mov	r0, r7
 8012020:	47c0      	blx	r8
 8012022:	3001      	adds	r0, #1
 8012024:	d01e      	beq.n	8012064 <_printf_common+0xa4>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	68e5      	ldr	r5, [r4, #12]
 801202a:	6832      	ldr	r2, [r6, #0]
 801202c:	f003 0306 	and.w	r3, r3, #6
 8012030:	2b04      	cmp	r3, #4
 8012032:	bf08      	it	eq
 8012034:	1aad      	subeq	r5, r5, r2
 8012036:	68a3      	ldr	r3, [r4, #8]
 8012038:	6922      	ldr	r2, [r4, #16]
 801203a:	bf0c      	ite	eq
 801203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012040:	2500      	movne	r5, #0
 8012042:	4293      	cmp	r3, r2
 8012044:	bfc4      	itt	gt
 8012046:	1a9b      	subgt	r3, r3, r2
 8012048:	18ed      	addgt	r5, r5, r3
 801204a:	2600      	movs	r6, #0
 801204c:	341a      	adds	r4, #26
 801204e:	42b5      	cmp	r5, r6
 8012050:	d11a      	bne.n	8012088 <_printf_common+0xc8>
 8012052:	2000      	movs	r0, #0
 8012054:	e008      	b.n	8012068 <_printf_common+0xa8>
 8012056:	2301      	movs	r3, #1
 8012058:	4652      	mov	r2, sl
 801205a:	4649      	mov	r1, r9
 801205c:	4638      	mov	r0, r7
 801205e:	47c0      	blx	r8
 8012060:	3001      	adds	r0, #1
 8012062:	d103      	bne.n	801206c <_printf_common+0xac>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	3501      	adds	r5, #1
 801206e:	e7c6      	b.n	8011ffe <_printf_common+0x3e>
 8012070:	18e1      	adds	r1, r4, r3
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	2030      	movs	r0, #48	; 0x30
 8012076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801207a:	4422      	add	r2, r4
 801207c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012084:	3302      	adds	r3, #2
 8012086:	e7c7      	b.n	8012018 <_printf_common+0x58>
 8012088:	2301      	movs	r3, #1
 801208a:	4622      	mov	r2, r4
 801208c:	4649      	mov	r1, r9
 801208e:	4638      	mov	r0, r7
 8012090:	47c0      	blx	r8
 8012092:	3001      	adds	r0, #1
 8012094:	d0e6      	beq.n	8012064 <_printf_common+0xa4>
 8012096:	3601      	adds	r6, #1
 8012098:	e7d9      	b.n	801204e <_printf_common+0x8e>
	...

0801209c <_printf_i>:
 801209c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120a0:	7e0f      	ldrb	r7, [r1, #24]
 80120a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120a4:	2f78      	cmp	r7, #120	; 0x78
 80120a6:	4691      	mov	r9, r2
 80120a8:	4680      	mov	r8, r0
 80120aa:	460c      	mov	r4, r1
 80120ac:	469a      	mov	sl, r3
 80120ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120b2:	d807      	bhi.n	80120c4 <_printf_i+0x28>
 80120b4:	2f62      	cmp	r7, #98	; 0x62
 80120b6:	d80a      	bhi.n	80120ce <_printf_i+0x32>
 80120b8:	2f00      	cmp	r7, #0
 80120ba:	f000 80d8 	beq.w	801226e <_printf_i+0x1d2>
 80120be:	2f58      	cmp	r7, #88	; 0x58
 80120c0:	f000 80a3 	beq.w	801220a <_printf_i+0x16e>
 80120c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120cc:	e03a      	b.n	8012144 <_printf_i+0xa8>
 80120ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120d2:	2b15      	cmp	r3, #21
 80120d4:	d8f6      	bhi.n	80120c4 <_printf_i+0x28>
 80120d6:	a101      	add	r1, pc, #4	; (adr r1, 80120dc <_printf_i+0x40>)
 80120d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120dc:	08012135 	.word	0x08012135
 80120e0:	08012149 	.word	0x08012149
 80120e4:	080120c5 	.word	0x080120c5
 80120e8:	080120c5 	.word	0x080120c5
 80120ec:	080120c5 	.word	0x080120c5
 80120f0:	080120c5 	.word	0x080120c5
 80120f4:	08012149 	.word	0x08012149
 80120f8:	080120c5 	.word	0x080120c5
 80120fc:	080120c5 	.word	0x080120c5
 8012100:	080120c5 	.word	0x080120c5
 8012104:	080120c5 	.word	0x080120c5
 8012108:	08012255 	.word	0x08012255
 801210c:	08012179 	.word	0x08012179
 8012110:	08012237 	.word	0x08012237
 8012114:	080120c5 	.word	0x080120c5
 8012118:	080120c5 	.word	0x080120c5
 801211c:	08012277 	.word	0x08012277
 8012120:	080120c5 	.word	0x080120c5
 8012124:	08012179 	.word	0x08012179
 8012128:	080120c5 	.word	0x080120c5
 801212c:	080120c5 	.word	0x080120c5
 8012130:	0801223f 	.word	0x0801223f
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	602a      	str	r2, [r5, #0]
 801213c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012144:	2301      	movs	r3, #1
 8012146:	e0a3      	b.n	8012290 <_printf_i+0x1f4>
 8012148:	6820      	ldr	r0, [r4, #0]
 801214a:	6829      	ldr	r1, [r5, #0]
 801214c:	0606      	lsls	r6, r0, #24
 801214e:	f101 0304 	add.w	r3, r1, #4
 8012152:	d50a      	bpl.n	801216a <_printf_i+0xce>
 8012154:	680e      	ldr	r6, [r1, #0]
 8012156:	602b      	str	r3, [r5, #0]
 8012158:	2e00      	cmp	r6, #0
 801215a:	da03      	bge.n	8012164 <_printf_i+0xc8>
 801215c:	232d      	movs	r3, #45	; 0x2d
 801215e:	4276      	negs	r6, r6
 8012160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012164:	485e      	ldr	r0, [pc, #376]	; (80122e0 <_printf_i+0x244>)
 8012166:	230a      	movs	r3, #10
 8012168:	e019      	b.n	801219e <_printf_i+0x102>
 801216a:	680e      	ldr	r6, [r1, #0]
 801216c:	602b      	str	r3, [r5, #0]
 801216e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012172:	bf18      	it	ne
 8012174:	b236      	sxthne	r6, r6
 8012176:	e7ef      	b.n	8012158 <_printf_i+0xbc>
 8012178:	682b      	ldr	r3, [r5, #0]
 801217a:	6820      	ldr	r0, [r4, #0]
 801217c:	1d19      	adds	r1, r3, #4
 801217e:	6029      	str	r1, [r5, #0]
 8012180:	0601      	lsls	r1, r0, #24
 8012182:	d501      	bpl.n	8012188 <_printf_i+0xec>
 8012184:	681e      	ldr	r6, [r3, #0]
 8012186:	e002      	b.n	801218e <_printf_i+0xf2>
 8012188:	0646      	lsls	r6, r0, #25
 801218a:	d5fb      	bpl.n	8012184 <_printf_i+0xe8>
 801218c:	881e      	ldrh	r6, [r3, #0]
 801218e:	4854      	ldr	r0, [pc, #336]	; (80122e0 <_printf_i+0x244>)
 8012190:	2f6f      	cmp	r7, #111	; 0x6f
 8012192:	bf0c      	ite	eq
 8012194:	2308      	moveq	r3, #8
 8012196:	230a      	movne	r3, #10
 8012198:	2100      	movs	r1, #0
 801219a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801219e:	6865      	ldr	r5, [r4, #4]
 80121a0:	60a5      	str	r5, [r4, #8]
 80121a2:	2d00      	cmp	r5, #0
 80121a4:	bfa2      	ittt	ge
 80121a6:	6821      	ldrge	r1, [r4, #0]
 80121a8:	f021 0104 	bicge.w	r1, r1, #4
 80121ac:	6021      	strge	r1, [r4, #0]
 80121ae:	b90e      	cbnz	r6, 80121b4 <_printf_i+0x118>
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	d04d      	beq.n	8012250 <_printf_i+0x1b4>
 80121b4:	4615      	mov	r5, r2
 80121b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80121ba:	fb03 6711 	mls	r7, r3, r1, r6
 80121be:	5dc7      	ldrb	r7, [r0, r7]
 80121c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121c4:	4637      	mov	r7, r6
 80121c6:	42bb      	cmp	r3, r7
 80121c8:	460e      	mov	r6, r1
 80121ca:	d9f4      	bls.n	80121b6 <_printf_i+0x11a>
 80121cc:	2b08      	cmp	r3, #8
 80121ce:	d10b      	bne.n	80121e8 <_printf_i+0x14c>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	07de      	lsls	r6, r3, #31
 80121d4:	d508      	bpl.n	80121e8 <_printf_i+0x14c>
 80121d6:	6923      	ldr	r3, [r4, #16]
 80121d8:	6861      	ldr	r1, [r4, #4]
 80121da:	4299      	cmp	r1, r3
 80121dc:	bfde      	ittt	le
 80121de:	2330      	movle	r3, #48	; 0x30
 80121e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121e8:	1b52      	subs	r2, r2, r5
 80121ea:	6122      	str	r2, [r4, #16]
 80121ec:	f8cd a000 	str.w	sl, [sp]
 80121f0:	464b      	mov	r3, r9
 80121f2:	aa03      	add	r2, sp, #12
 80121f4:	4621      	mov	r1, r4
 80121f6:	4640      	mov	r0, r8
 80121f8:	f7ff fee2 	bl	8011fc0 <_printf_common>
 80121fc:	3001      	adds	r0, #1
 80121fe:	d14c      	bne.n	801229a <_printf_i+0x1fe>
 8012200:	f04f 30ff 	mov.w	r0, #4294967295
 8012204:	b004      	add	sp, #16
 8012206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801220a:	4835      	ldr	r0, [pc, #212]	; (80122e0 <_printf_i+0x244>)
 801220c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012210:	6829      	ldr	r1, [r5, #0]
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	f851 6b04 	ldr.w	r6, [r1], #4
 8012218:	6029      	str	r1, [r5, #0]
 801221a:	061d      	lsls	r5, r3, #24
 801221c:	d514      	bpl.n	8012248 <_printf_i+0x1ac>
 801221e:	07df      	lsls	r7, r3, #31
 8012220:	bf44      	itt	mi
 8012222:	f043 0320 	orrmi.w	r3, r3, #32
 8012226:	6023      	strmi	r3, [r4, #0]
 8012228:	b91e      	cbnz	r6, 8012232 <_printf_i+0x196>
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	f023 0320 	bic.w	r3, r3, #32
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	2310      	movs	r3, #16
 8012234:	e7b0      	b.n	8012198 <_printf_i+0xfc>
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	f043 0320 	orr.w	r3, r3, #32
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	2378      	movs	r3, #120	; 0x78
 8012240:	4828      	ldr	r0, [pc, #160]	; (80122e4 <_printf_i+0x248>)
 8012242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012246:	e7e3      	b.n	8012210 <_printf_i+0x174>
 8012248:	0659      	lsls	r1, r3, #25
 801224a:	bf48      	it	mi
 801224c:	b2b6      	uxthmi	r6, r6
 801224e:	e7e6      	b.n	801221e <_printf_i+0x182>
 8012250:	4615      	mov	r5, r2
 8012252:	e7bb      	b.n	80121cc <_printf_i+0x130>
 8012254:	682b      	ldr	r3, [r5, #0]
 8012256:	6826      	ldr	r6, [r4, #0]
 8012258:	6961      	ldr	r1, [r4, #20]
 801225a:	1d18      	adds	r0, r3, #4
 801225c:	6028      	str	r0, [r5, #0]
 801225e:	0635      	lsls	r5, r6, #24
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	d501      	bpl.n	8012268 <_printf_i+0x1cc>
 8012264:	6019      	str	r1, [r3, #0]
 8012266:	e002      	b.n	801226e <_printf_i+0x1d2>
 8012268:	0670      	lsls	r0, r6, #25
 801226a:	d5fb      	bpl.n	8012264 <_printf_i+0x1c8>
 801226c:	8019      	strh	r1, [r3, #0]
 801226e:	2300      	movs	r3, #0
 8012270:	6123      	str	r3, [r4, #16]
 8012272:	4615      	mov	r5, r2
 8012274:	e7ba      	b.n	80121ec <_printf_i+0x150>
 8012276:	682b      	ldr	r3, [r5, #0]
 8012278:	1d1a      	adds	r2, r3, #4
 801227a:	602a      	str	r2, [r5, #0]
 801227c:	681d      	ldr	r5, [r3, #0]
 801227e:	6862      	ldr	r2, [r4, #4]
 8012280:	2100      	movs	r1, #0
 8012282:	4628      	mov	r0, r5
 8012284:	f7ed ffb4 	bl	80001f0 <memchr>
 8012288:	b108      	cbz	r0, 801228e <_printf_i+0x1f2>
 801228a:	1b40      	subs	r0, r0, r5
 801228c:	6060      	str	r0, [r4, #4]
 801228e:	6863      	ldr	r3, [r4, #4]
 8012290:	6123      	str	r3, [r4, #16]
 8012292:	2300      	movs	r3, #0
 8012294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012298:	e7a8      	b.n	80121ec <_printf_i+0x150>
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	462a      	mov	r2, r5
 801229e:	4649      	mov	r1, r9
 80122a0:	4640      	mov	r0, r8
 80122a2:	47d0      	blx	sl
 80122a4:	3001      	adds	r0, #1
 80122a6:	d0ab      	beq.n	8012200 <_printf_i+0x164>
 80122a8:	6823      	ldr	r3, [r4, #0]
 80122aa:	079b      	lsls	r3, r3, #30
 80122ac:	d413      	bmi.n	80122d6 <_printf_i+0x23a>
 80122ae:	68e0      	ldr	r0, [r4, #12]
 80122b0:	9b03      	ldr	r3, [sp, #12]
 80122b2:	4298      	cmp	r0, r3
 80122b4:	bfb8      	it	lt
 80122b6:	4618      	movlt	r0, r3
 80122b8:	e7a4      	b.n	8012204 <_printf_i+0x168>
 80122ba:	2301      	movs	r3, #1
 80122bc:	4632      	mov	r2, r6
 80122be:	4649      	mov	r1, r9
 80122c0:	4640      	mov	r0, r8
 80122c2:	47d0      	blx	sl
 80122c4:	3001      	adds	r0, #1
 80122c6:	d09b      	beq.n	8012200 <_printf_i+0x164>
 80122c8:	3501      	adds	r5, #1
 80122ca:	68e3      	ldr	r3, [r4, #12]
 80122cc:	9903      	ldr	r1, [sp, #12]
 80122ce:	1a5b      	subs	r3, r3, r1
 80122d0:	42ab      	cmp	r3, r5
 80122d2:	dcf2      	bgt.n	80122ba <_printf_i+0x21e>
 80122d4:	e7eb      	b.n	80122ae <_printf_i+0x212>
 80122d6:	2500      	movs	r5, #0
 80122d8:	f104 0619 	add.w	r6, r4, #25
 80122dc:	e7f5      	b.n	80122ca <_printf_i+0x22e>
 80122de:	bf00      	nop
 80122e0:	080159c5 	.word	0x080159c5
 80122e4:	080159d6 	.word	0x080159d6

080122e8 <iprintf>:
 80122e8:	b40f      	push	{r0, r1, r2, r3}
 80122ea:	4b0a      	ldr	r3, [pc, #40]	; (8012314 <iprintf+0x2c>)
 80122ec:	b513      	push	{r0, r1, r4, lr}
 80122ee:	681c      	ldr	r4, [r3, #0]
 80122f0:	b124      	cbz	r4, 80122fc <iprintf+0x14>
 80122f2:	69a3      	ldr	r3, [r4, #24]
 80122f4:	b913      	cbnz	r3, 80122fc <iprintf+0x14>
 80122f6:	4620      	mov	r0, r4
 80122f8:	f000 fa76 	bl	80127e8 <__sinit>
 80122fc:	ab05      	add	r3, sp, #20
 80122fe:	9a04      	ldr	r2, [sp, #16]
 8012300:	68a1      	ldr	r1, [r4, #8]
 8012302:	9301      	str	r3, [sp, #4]
 8012304:	4620      	mov	r0, r4
 8012306:	f7ff fd2b 	bl	8011d60 <_vfiprintf_r>
 801230a:	b002      	add	sp, #8
 801230c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012310:	b004      	add	sp, #16
 8012312:	4770      	bx	lr
 8012314:	20000100 	.word	0x20000100

08012318 <_puts_r>:
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	460e      	mov	r6, r1
 801231c:	4605      	mov	r5, r0
 801231e:	b118      	cbz	r0, 8012328 <_puts_r+0x10>
 8012320:	6983      	ldr	r3, [r0, #24]
 8012322:	b90b      	cbnz	r3, 8012328 <_puts_r+0x10>
 8012324:	f000 fa60 	bl	80127e8 <__sinit>
 8012328:	69ab      	ldr	r3, [r5, #24]
 801232a:	68ac      	ldr	r4, [r5, #8]
 801232c:	b913      	cbnz	r3, 8012334 <_puts_r+0x1c>
 801232e:	4628      	mov	r0, r5
 8012330:	f000 fa5a 	bl	80127e8 <__sinit>
 8012334:	4b2c      	ldr	r3, [pc, #176]	; (80123e8 <_puts_r+0xd0>)
 8012336:	429c      	cmp	r4, r3
 8012338:	d120      	bne.n	801237c <_puts_r+0x64>
 801233a:	686c      	ldr	r4, [r5, #4]
 801233c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801233e:	07db      	lsls	r3, r3, #31
 8012340:	d405      	bmi.n	801234e <_puts_r+0x36>
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	0598      	lsls	r0, r3, #22
 8012346:	d402      	bmi.n	801234e <_puts_r+0x36>
 8012348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801234a:	f000 faeb 	bl	8012924 <__retarget_lock_acquire_recursive>
 801234e:	89a3      	ldrh	r3, [r4, #12]
 8012350:	0719      	lsls	r1, r3, #28
 8012352:	d51d      	bpl.n	8012390 <_puts_r+0x78>
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	b1db      	cbz	r3, 8012390 <_puts_r+0x78>
 8012358:	3e01      	subs	r6, #1
 801235a:	68a3      	ldr	r3, [r4, #8]
 801235c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012360:	3b01      	subs	r3, #1
 8012362:	60a3      	str	r3, [r4, #8]
 8012364:	bb39      	cbnz	r1, 80123b6 <_puts_r+0x9e>
 8012366:	2b00      	cmp	r3, #0
 8012368:	da38      	bge.n	80123dc <_puts_r+0xc4>
 801236a:	4622      	mov	r2, r4
 801236c:	210a      	movs	r1, #10
 801236e:	4628      	mov	r0, r5
 8012370:	f000 f858 	bl	8012424 <__swbuf_r>
 8012374:	3001      	adds	r0, #1
 8012376:	d011      	beq.n	801239c <_puts_r+0x84>
 8012378:	250a      	movs	r5, #10
 801237a:	e011      	b.n	80123a0 <_puts_r+0x88>
 801237c:	4b1b      	ldr	r3, [pc, #108]	; (80123ec <_puts_r+0xd4>)
 801237e:	429c      	cmp	r4, r3
 8012380:	d101      	bne.n	8012386 <_puts_r+0x6e>
 8012382:	68ac      	ldr	r4, [r5, #8]
 8012384:	e7da      	b.n	801233c <_puts_r+0x24>
 8012386:	4b1a      	ldr	r3, [pc, #104]	; (80123f0 <_puts_r+0xd8>)
 8012388:	429c      	cmp	r4, r3
 801238a:	bf08      	it	eq
 801238c:	68ec      	ldreq	r4, [r5, #12]
 801238e:	e7d5      	b.n	801233c <_puts_r+0x24>
 8012390:	4621      	mov	r1, r4
 8012392:	4628      	mov	r0, r5
 8012394:	f000 f898 	bl	80124c8 <__swsetup_r>
 8012398:	2800      	cmp	r0, #0
 801239a:	d0dd      	beq.n	8012358 <_puts_r+0x40>
 801239c:	f04f 35ff 	mov.w	r5, #4294967295
 80123a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123a2:	07da      	lsls	r2, r3, #31
 80123a4:	d405      	bmi.n	80123b2 <_puts_r+0x9a>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	059b      	lsls	r3, r3, #22
 80123aa:	d402      	bmi.n	80123b2 <_puts_r+0x9a>
 80123ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123ae:	f000 faba 	bl	8012926 <__retarget_lock_release_recursive>
 80123b2:	4628      	mov	r0, r5
 80123b4:	bd70      	pop	{r4, r5, r6, pc}
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	da04      	bge.n	80123c4 <_puts_r+0xac>
 80123ba:	69a2      	ldr	r2, [r4, #24]
 80123bc:	429a      	cmp	r2, r3
 80123be:	dc06      	bgt.n	80123ce <_puts_r+0xb6>
 80123c0:	290a      	cmp	r1, #10
 80123c2:	d004      	beq.n	80123ce <_puts_r+0xb6>
 80123c4:	6823      	ldr	r3, [r4, #0]
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	6022      	str	r2, [r4, #0]
 80123ca:	7019      	strb	r1, [r3, #0]
 80123cc:	e7c5      	b.n	801235a <_puts_r+0x42>
 80123ce:	4622      	mov	r2, r4
 80123d0:	4628      	mov	r0, r5
 80123d2:	f000 f827 	bl	8012424 <__swbuf_r>
 80123d6:	3001      	adds	r0, #1
 80123d8:	d1bf      	bne.n	801235a <_puts_r+0x42>
 80123da:	e7df      	b.n	801239c <_puts_r+0x84>
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	250a      	movs	r5, #10
 80123e0:	1c5a      	adds	r2, r3, #1
 80123e2:	6022      	str	r2, [r4, #0]
 80123e4:	701d      	strb	r5, [r3, #0]
 80123e6:	e7db      	b.n	80123a0 <_puts_r+0x88>
 80123e8:	08015a08 	.word	0x08015a08
 80123ec:	08015a28 	.word	0x08015a28
 80123f0:	080159e8 	.word	0x080159e8

080123f4 <puts>:
 80123f4:	4b02      	ldr	r3, [pc, #8]	; (8012400 <puts+0xc>)
 80123f6:	4601      	mov	r1, r0
 80123f8:	6818      	ldr	r0, [r3, #0]
 80123fa:	f7ff bf8d 	b.w	8012318 <_puts_r>
 80123fe:	bf00      	nop
 8012400:	20000100 	.word	0x20000100

08012404 <_sbrk_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d06      	ldr	r5, [pc, #24]	; (8012420 <_sbrk_r+0x1c>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	602b      	str	r3, [r5, #0]
 8012410:	f7f3 fa0a 	bl	8005828 <_sbrk>
 8012414:	1c43      	adds	r3, r0, #1
 8012416:	d102      	bne.n	801241e <_sbrk_r+0x1a>
 8012418:	682b      	ldr	r3, [r5, #0]
 801241a:	b103      	cbz	r3, 801241e <_sbrk_r+0x1a>
 801241c:	6023      	str	r3, [r4, #0]
 801241e:	bd38      	pop	{r3, r4, r5, pc}
 8012420:	2001ce98 	.word	0x2001ce98

08012424 <__swbuf_r>:
 8012424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012426:	460e      	mov	r6, r1
 8012428:	4614      	mov	r4, r2
 801242a:	4605      	mov	r5, r0
 801242c:	b118      	cbz	r0, 8012436 <__swbuf_r+0x12>
 801242e:	6983      	ldr	r3, [r0, #24]
 8012430:	b90b      	cbnz	r3, 8012436 <__swbuf_r+0x12>
 8012432:	f000 f9d9 	bl	80127e8 <__sinit>
 8012436:	4b21      	ldr	r3, [pc, #132]	; (80124bc <__swbuf_r+0x98>)
 8012438:	429c      	cmp	r4, r3
 801243a:	d12b      	bne.n	8012494 <__swbuf_r+0x70>
 801243c:	686c      	ldr	r4, [r5, #4]
 801243e:	69a3      	ldr	r3, [r4, #24]
 8012440:	60a3      	str	r3, [r4, #8]
 8012442:	89a3      	ldrh	r3, [r4, #12]
 8012444:	071a      	lsls	r2, r3, #28
 8012446:	d52f      	bpl.n	80124a8 <__swbuf_r+0x84>
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	b36b      	cbz	r3, 80124a8 <__swbuf_r+0x84>
 801244c:	6923      	ldr	r3, [r4, #16]
 801244e:	6820      	ldr	r0, [r4, #0]
 8012450:	1ac0      	subs	r0, r0, r3
 8012452:	6963      	ldr	r3, [r4, #20]
 8012454:	b2f6      	uxtb	r6, r6
 8012456:	4283      	cmp	r3, r0
 8012458:	4637      	mov	r7, r6
 801245a:	dc04      	bgt.n	8012466 <__swbuf_r+0x42>
 801245c:	4621      	mov	r1, r4
 801245e:	4628      	mov	r0, r5
 8012460:	f000 f92e 	bl	80126c0 <_fflush_r>
 8012464:	bb30      	cbnz	r0, 80124b4 <__swbuf_r+0x90>
 8012466:	68a3      	ldr	r3, [r4, #8]
 8012468:	3b01      	subs	r3, #1
 801246a:	60a3      	str	r3, [r4, #8]
 801246c:	6823      	ldr	r3, [r4, #0]
 801246e:	1c5a      	adds	r2, r3, #1
 8012470:	6022      	str	r2, [r4, #0]
 8012472:	701e      	strb	r6, [r3, #0]
 8012474:	6963      	ldr	r3, [r4, #20]
 8012476:	3001      	adds	r0, #1
 8012478:	4283      	cmp	r3, r0
 801247a:	d004      	beq.n	8012486 <__swbuf_r+0x62>
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	07db      	lsls	r3, r3, #31
 8012480:	d506      	bpl.n	8012490 <__swbuf_r+0x6c>
 8012482:	2e0a      	cmp	r6, #10
 8012484:	d104      	bne.n	8012490 <__swbuf_r+0x6c>
 8012486:	4621      	mov	r1, r4
 8012488:	4628      	mov	r0, r5
 801248a:	f000 f919 	bl	80126c0 <_fflush_r>
 801248e:	b988      	cbnz	r0, 80124b4 <__swbuf_r+0x90>
 8012490:	4638      	mov	r0, r7
 8012492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012494:	4b0a      	ldr	r3, [pc, #40]	; (80124c0 <__swbuf_r+0x9c>)
 8012496:	429c      	cmp	r4, r3
 8012498:	d101      	bne.n	801249e <__swbuf_r+0x7a>
 801249a:	68ac      	ldr	r4, [r5, #8]
 801249c:	e7cf      	b.n	801243e <__swbuf_r+0x1a>
 801249e:	4b09      	ldr	r3, [pc, #36]	; (80124c4 <__swbuf_r+0xa0>)
 80124a0:	429c      	cmp	r4, r3
 80124a2:	bf08      	it	eq
 80124a4:	68ec      	ldreq	r4, [r5, #12]
 80124a6:	e7ca      	b.n	801243e <__swbuf_r+0x1a>
 80124a8:	4621      	mov	r1, r4
 80124aa:	4628      	mov	r0, r5
 80124ac:	f000 f80c 	bl	80124c8 <__swsetup_r>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d0cb      	beq.n	801244c <__swbuf_r+0x28>
 80124b4:	f04f 37ff 	mov.w	r7, #4294967295
 80124b8:	e7ea      	b.n	8012490 <__swbuf_r+0x6c>
 80124ba:	bf00      	nop
 80124bc:	08015a08 	.word	0x08015a08
 80124c0:	08015a28 	.word	0x08015a28
 80124c4:	080159e8 	.word	0x080159e8

080124c8 <__swsetup_r>:
 80124c8:	4b32      	ldr	r3, [pc, #200]	; (8012594 <__swsetup_r+0xcc>)
 80124ca:	b570      	push	{r4, r5, r6, lr}
 80124cc:	681d      	ldr	r5, [r3, #0]
 80124ce:	4606      	mov	r6, r0
 80124d0:	460c      	mov	r4, r1
 80124d2:	b125      	cbz	r5, 80124de <__swsetup_r+0x16>
 80124d4:	69ab      	ldr	r3, [r5, #24]
 80124d6:	b913      	cbnz	r3, 80124de <__swsetup_r+0x16>
 80124d8:	4628      	mov	r0, r5
 80124da:	f000 f985 	bl	80127e8 <__sinit>
 80124de:	4b2e      	ldr	r3, [pc, #184]	; (8012598 <__swsetup_r+0xd0>)
 80124e0:	429c      	cmp	r4, r3
 80124e2:	d10f      	bne.n	8012504 <__swsetup_r+0x3c>
 80124e4:	686c      	ldr	r4, [r5, #4]
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124ec:	0719      	lsls	r1, r3, #28
 80124ee:	d42c      	bmi.n	801254a <__swsetup_r+0x82>
 80124f0:	06dd      	lsls	r5, r3, #27
 80124f2:	d411      	bmi.n	8012518 <__swsetup_r+0x50>
 80124f4:	2309      	movs	r3, #9
 80124f6:	6033      	str	r3, [r6, #0]
 80124f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124fc:	81a3      	strh	r3, [r4, #12]
 80124fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012502:	e03e      	b.n	8012582 <__swsetup_r+0xba>
 8012504:	4b25      	ldr	r3, [pc, #148]	; (801259c <__swsetup_r+0xd4>)
 8012506:	429c      	cmp	r4, r3
 8012508:	d101      	bne.n	801250e <__swsetup_r+0x46>
 801250a:	68ac      	ldr	r4, [r5, #8]
 801250c:	e7eb      	b.n	80124e6 <__swsetup_r+0x1e>
 801250e:	4b24      	ldr	r3, [pc, #144]	; (80125a0 <__swsetup_r+0xd8>)
 8012510:	429c      	cmp	r4, r3
 8012512:	bf08      	it	eq
 8012514:	68ec      	ldreq	r4, [r5, #12]
 8012516:	e7e6      	b.n	80124e6 <__swsetup_r+0x1e>
 8012518:	0758      	lsls	r0, r3, #29
 801251a:	d512      	bpl.n	8012542 <__swsetup_r+0x7a>
 801251c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801251e:	b141      	cbz	r1, 8012532 <__swsetup_r+0x6a>
 8012520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012524:	4299      	cmp	r1, r3
 8012526:	d002      	beq.n	801252e <__swsetup_r+0x66>
 8012528:	4630      	mov	r0, r6
 801252a:	f7ff fb0f 	bl	8011b4c <_free_r>
 801252e:	2300      	movs	r3, #0
 8012530:	6363      	str	r3, [r4, #52]	; 0x34
 8012532:	89a3      	ldrh	r3, [r4, #12]
 8012534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012538:	81a3      	strh	r3, [r4, #12]
 801253a:	2300      	movs	r3, #0
 801253c:	6063      	str	r3, [r4, #4]
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	f043 0308 	orr.w	r3, r3, #8
 8012548:	81a3      	strh	r3, [r4, #12]
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	b94b      	cbnz	r3, 8012562 <__swsetup_r+0x9a>
 801254e:	89a3      	ldrh	r3, [r4, #12]
 8012550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012558:	d003      	beq.n	8012562 <__swsetup_r+0x9a>
 801255a:	4621      	mov	r1, r4
 801255c:	4630      	mov	r0, r6
 801255e:	f000 fa09 	bl	8012974 <__smakebuf_r>
 8012562:	89a0      	ldrh	r0, [r4, #12]
 8012564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012568:	f010 0301 	ands.w	r3, r0, #1
 801256c:	d00a      	beq.n	8012584 <__swsetup_r+0xbc>
 801256e:	2300      	movs	r3, #0
 8012570:	60a3      	str	r3, [r4, #8]
 8012572:	6963      	ldr	r3, [r4, #20]
 8012574:	425b      	negs	r3, r3
 8012576:	61a3      	str	r3, [r4, #24]
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	b943      	cbnz	r3, 801258e <__swsetup_r+0xc6>
 801257c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012580:	d1ba      	bne.n	80124f8 <__swsetup_r+0x30>
 8012582:	bd70      	pop	{r4, r5, r6, pc}
 8012584:	0781      	lsls	r1, r0, #30
 8012586:	bf58      	it	pl
 8012588:	6963      	ldrpl	r3, [r4, #20]
 801258a:	60a3      	str	r3, [r4, #8]
 801258c:	e7f4      	b.n	8012578 <__swsetup_r+0xb0>
 801258e:	2000      	movs	r0, #0
 8012590:	e7f7      	b.n	8012582 <__swsetup_r+0xba>
 8012592:	bf00      	nop
 8012594:	20000100 	.word	0x20000100
 8012598:	08015a08 	.word	0x08015a08
 801259c:	08015a28 	.word	0x08015a28
 80125a0:	080159e8 	.word	0x080159e8

080125a4 <abort>:
 80125a4:	b508      	push	{r3, lr}
 80125a6:	2006      	movs	r0, #6
 80125a8:	f000 fa58 	bl	8012a5c <raise>
 80125ac:	2001      	movs	r0, #1
 80125ae:	f7f3 f8df 	bl	8005770 <_exit>
	...

080125b4 <__sflush_r>:
 80125b4:	898a      	ldrh	r2, [r1, #12]
 80125b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ba:	4605      	mov	r5, r0
 80125bc:	0710      	lsls	r0, r2, #28
 80125be:	460c      	mov	r4, r1
 80125c0:	d458      	bmi.n	8012674 <__sflush_r+0xc0>
 80125c2:	684b      	ldr	r3, [r1, #4]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	dc05      	bgt.n	80125d4 <__sflush_r+0x20>
 80125c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	dc02      	bgt.n	80125d4 <__sflush_r+0x20>
 80125ce:	2000      	movs	r0, #0
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125d6:	2e00      	cmp	r6, #0
 80125d8:	d0f9      	beq.n	80125ce <__sflush_r+0x1a>
 80125da:	2300      	movs	r3, #0
 80125dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125e0:	682f      	ldr	r7, [r5, #0]
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	d032      	beq.n	801264c <__sflush_r+0x98>
 80125e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	075a      	lsls	r2, r3, #29
 80125ec:	d505      	bpl.n	80125fa <__sflush_r+0x46>
 80125ee:	6863      	ldr	r3, [r4, #4]
 80125f0:	1ac0      	subs	r0, r0, r3
 80125f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125f4:	b10b      	cbz	r3, 80125fa <__sflush_r+0x46>
 80125f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125f8:	1ac0      	subs	r0, r0, r3
 80125fa:	2300      	movs	r3, #0
 80125fc:	4602      	mov	r2, r0
 80125fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012600:	6a21      	ldr	r1, [r4, #32]
 8012602:	4628      	mov	r0, r5
 8012604:	47b0      	blx	r6
 8012606:	1c43      	adds	r3, r0, #1
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	d106      	bne.n	801261a <__sflush_r+0x66>
 801260c:	6829      	ldr	r1, [r5, #0]
 801260e:	291d      	cmp	r1, #29
 8012610:	d82c      	bhi.n	801266c <__sflush_r+0xb8>
 8012612:	4a2a      	ldr	r2, [pc, #168]	; (80126bc <__sflush_r+0x108>)
 8012614:	40ca      	lsrs	r2, r1
 8012616:	07d6      	lsls	r6, r2, #31
 8012618:	d528      	bpl.n	801266c <__sflush_r+0xb8>
 801261a:	2200      	movs	r2, #0
 801261c:	6062      	str	r2, [r4, #4]
 801261e:	04d9      	lsls	r1, r3, #19
 8012620:	6922      	ldr	r2, [r4, #16]
 8012622:	6022      	str	r2, [r4, #0]
 8012624:	d504      	bpl.n	8012630 <__sflush_r+0x7c>
 8012626:	1c42      	adds	r2, r0, #1
 8012628:	d101      	bne.n	801262e <__sflush_r+0x7a>
 801262a:	682b      	ldr	r3, [r5, #0]
 801262c:	b903      	cbnz	r3, 8012630 <__sflush_r+0x7c>
 801262e:	6560      	str	r0, [r4, #84]	; 0x54
 8012630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012632:	602f      	str	r7, [r5, #0]
 8012634:	2900      	cmp	r1, #0
 8012636:	d0ca      	beq.n	80125ce <__sflush_r+0x1a>
 8012638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801263c:	4299      	cmp	r1, r3
 801263e:	d002      	beq.n	8012646 <__sflush_r+0x92>
 8012640:	4628      	mov	r0, r5
 8012642:	f7ff fa83 	bl	8011b4c <_free_r>
 8012646:	2000      	movs	r0, #0
 8012648:	6360      	str	r0, [r4, #52]	; 0x34
 801264a:	e7c1      	b.n	80125d0 <__sflush_r+0x1c>
 801264c:	6a21      	ldr	r1, [r4, #32]
 801264e:	2301      	movs	r3, #1
 8012650:	4628      	mov	r0, r5
 8012652:	47b0      	blx	r6
 8012654:	1c41      	adds	r1, r0, #1
 8012656:	d1c7      	bne.n	80125e8 <__sflush_r+0x34>
 8012658:	682b      	ldr	r3, [r5, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d0c4      	beq.n	80125e8 <__sflush_r+0x34>
 801265e:	2b1d      	cmp	r3, #29
 8012660:	d001      	beq.n	8012666 <__sflush_r+0xb2>
 8012662:	2b16      	cmp	r3, #22
 8012664:	d101      	bne.n	801266a <__sflush_r+0xb6>
 8012666:	602f      	str	r7, [r5, #0]
 8012668:	e7b1      	b.n	80125ce <__sflush_r+0x1a>
 801266a:	89a3      	ldrh	r3, [r4, #12]
 801266c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012670:	81a3      	strh	r3, [r4, #12]
 8012672:	e7ad      	b.n	80125d0 <__sflush_r+0x1c>
 8012674:	690f      	ldr	r7, [r1, #16]
 8012676:	2f00      	cmp	r7, #0
 8012678:	d0a9      	beq.n	80125ce <__sflush_r+0x1a>
 801267a:	0793      	lsls	r3, r2, #30
 801267c:	680e      	ldr	r6, [r1, #0]
 801267e:	bf08      	it	eq
 8012680:	694b      	ldreq	r3, [r1, #20]
 8012682:	600f      	str	r7, [r1, #0]
 8012684:	bf18      	it	ne
 8012686:	2300      	movne	r3, #0
 8012688:	eba6 0807 	sub.w	r8, r6, r7
 801268c:	608b      	str	r3, [r1, #8]
 801268e:	f1b8 0f00 	cmp.w	r8, #0
 8012692:	dd9c      	ble.n	80125ce <__sflush_r+0x1a>
 8012694:	6a21      	ldr	r1, [r4, #32]
 8012696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012698:	4643      	mov	r3, r8
 801269a:	463a      	mov	r2, r7
 801269c:	4628      	mov	r0, r5
 801269e:	47b0      	blx	r6
 80126a0:	2800      	cmp	r0, #0
 80126a2:	dc06      	bgt.n	80126b2 <__sflush_r+0xfe>
 80126a4:	89a3      	ldrh	r3, [r4, #12]
 80126a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126aa:	81a3      	strh	r3, [r4, #12]
 80126ac:	f04f 30ff 	mov.w	r0, #4294967295
 80126b0:	e78e      	b.n	80125d0 <__sflush_r+0x1c>
 80126b2:	4407      	add	r7, r0
 80126b4:	eba8 0800 	sub.w	r8, r8, r0
 80126b8:	e7e9      	b.n	801268e <__sflush_r+0xda>
 80126ba:	bf00      	nop
 80126bc:	20400001 	.word	0x20400001

080126c0 <_fflush_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	690b      	ldr	r3, [r1, #16]
 80126c4:	4605      	mov	r5, r0
 80126c6:	460c      	mov	r4, r1
 80126c8:	b913      	cbnz	r3, 80126d0 <_fflush_r+0x10>
 80126ca:	2500      	movs	r5, #0
 80126cc:	4628      	mov	r0, r5
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	b118      	cbz	r0, 80126da <_fflush_r+0x1a>
 80126d2:	6983      	ldr	r3, [r0, #24]
 80126d4:	b90b      	cbnz	r3, 80126da <_fflush_r+0x1a>
 80126d6:	f000 f887 	bl	80127e8 <__sinit>
 80126da:	4b14      	ldr	r3, [pc, #80]	; (801272c <_fflush_r+0x6c>)
 80126dc:	429c      	cmp	r4, r3
 80126de:	d11b      	bne.n	8012718 <_fflush_r+0x58>
 80126e0:	686c      	ldr	r4, [r5, #4]
 80126e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d0ef      	beq.n	80126ca <_fflush_r+0xa>
 80126ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80126ec:	07d0      	lsls	r0, r2, #31
 80126ee:	d404      	bmi.n	80126fa <_fflush_r+0x3a>
 80126f0:	0599      	lsls	r1, r3, #22
 80126f2:	d402      	bmi.n	80126fa <_fflush_r+0x3a>
 80126f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126f6:	f000 f915 	bl	8012924 <__retarget_lock_acquire_recursive>
 80126fa:	4628      	mov	r0, r5
 80126fc:	4621      	mov	r1, r4
 80126fe:	f7ff ff59 	bl	80125b4 <__sflush_r>
 8012702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012704:	07da      	lsls	r2, r3, #31
 8012706:	4605      	mov	r5, r0
 8012708:	d4e0      	bmi.n	80126cc <_fflush_r+0xc>
 801270a:	89a3      	ldrh	r3, [r4, #12]
 801270c:	059b      	lsls	r3, r3, #22
 801270e:	d4dd      	bmi.n	80126cc <_fflush_r+0xc>
 8012710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012712:	f000 f908 	bl	8012926 <__retarget_lock_release_recursive>
 8012716:	e7d9      	b.n	80126cc <_fflush_r+0xc>
 8012718:	4b05      	ldr	r3, [pc, #20]	; (8012730 <_fflush_r+0x70>)
 801271a:	429c      	cmp	r4, r3
 801271c:	d101      	bne.n	8012722 <_fflush_r+0x62>
 801271e:	68ac      	ldr	r4, [r5, #8]
 8012720:	e7df      	b.n	80126e2 <_fflush_r+0x22>
 8012722:	4b04      	ldr	r3, [pc, #16]	; (8012734 <_fflush_r+0x74>)
 8012724:	429c      	cmp	r4, r3
 8012726:	bf08      	it	eq
 8012728:	68ec      	ldreq	r4, [r5, #12]
 801272a:	e7da      	b.n	80126e2 <_fflush_r+0x22>
 801272c:	08015a08 	.word	0x08015a08
 8012730:	08015a28 	.word	0x08015a28
 8012734:	080159e8 	.word	0x080159e8

08012738 <std>:
 8012738:	2300      	movs	r3, #0
 801273a:	b510      	push	{r4, lr}
 801273c:	4604      	mov	r4, r0
 801273e:	e9c0 3300 	strd	r3, r3, [r0]
 8012742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012746:	6083      	str	r3, [r0, #8]
 8012748:	8181      	strh	r1, [r0, #12]
 801274a:	6643      	str	r3, [r0, #100]	; 0x64
 801274c:	81c2      	strh	r2, [r0, #14]
 801274e:	6183      	str	r3, [r0, #24]
 8012750:	4619      	mov	r1, r3
 8012752:	2208      	movs	r2, #8
 8012754:	305c      	adds	r0, #92	; 0x5c
 8012756:	f7ff f9f1 	bl	8011b3c <memset>
 801275a:	4b05      	ldr	r3, [pc, #20]	; (8012770 <std+0x38>)
 801275c:	6263      	str	r3, [r4, #36]	; 0x24
 801275e:	4b05      	ldr	r3, [pc, #20]	; (8012774 <std+0x3c>)
 8012760:	62a3      	str	r3, [r4, #40]	; 0x28
 8012762:	4b05      	ldr	r3, [pc, #20]	; (8012778 <std+0x40>)
 8012764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012766:	4b05      	ldr	r3, [pc, #20]	; (801277c <std+0x44>)
 8012768:	6224      	str	r4, [r4, #32]
 801276a:	6323      	str	r3, [r4, #48]	; 0x30
 801276c:	bd10      	pop	{r4, pc}
 801276e:	bf00      	nop
 8012770:	08012a95 	.word	0x08012a95
 8012774:	08012ab7 	.word	0x08012ab7
 8012778:	08012aef 	.word	0x08012aef
 801277c:	08012b13 	.word	0x08012b13

08012780 <_cleanup_r>:
 8012780:	4901      	ldr	r1, [pc, #4]	; (8012788 <_cleanup_r+0x8>)
 8012782:	f000 b8af 	b.w	80128e4 <_fwalk_reent>
 8012786:	bf00      	nop
 8012788:	080126c1 	.word	0x080126c1

0801278c <__sfmoreglue>:
 801278c:	b570      	push	{r4, r5, r6, lr}
 801278e:	2268      	movs	r2, #104	; 0x68
 8012790:	1e4d      	subs	r5, r1, #1
 8012792:	4355      	muls	r5, r2
 8012794:	460e      	mov	r6, r1
 8012796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801279a:	f7ff fa43 	bl	8011c24 <_malloc_r>
 801279e:	4604      	mov	r4, r0
 80127a0:	b140      	cbz	r0, 80127b4 <__sfmoreglue+0x28>
 80127a2:	2100      	movs	r1, #0
 80127a4:	e9c0 1600 	strd	r1, r6, [r0]
 80127a8:	300c      	adds	r0, #12
 80127aa:	60a0      	str	r0, [r4, #8]
 80127ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80127b0:	f7ff f9c4 	bl	8011b3c <memset>
 80127b4:	4620      	mov	r0, r4
 80127b6:	bd70      	pop	{r4, r5, r6, pc}

080127b8 <__sfp_lock_acquire>:
 80127b8:	4801      	ldr	r0, [pc, #4]	; (80127c0 <__sfp_lock_acquire+0x8>)
 80127ba:	f000 b8b3 	b.w	8012924 <__retarget_lock_acquire_recursive>
 80127be:	bf00      	nop
 80127c0:	2001ce95 	.word	0x2001ce95

080127c4 <__sfp_lock_release>:
 80127c4:	4801      	ldr	r0, [pc, #4]	; (80127cc <__sfp_lock_release+0x8>)
 80127c6:	f000 b8ae 	b.w	8012926 <__retarget_lock_release_recursive>
 80127ca:	bf00      	nop
 80127cc:	2001ce95 	.word	0x2001ce95

080127d0 <__sinit_lock_acquire>:
 80127d0:	4801      	ldr	r0, [pc, #4]	; (80127d8 <__sinit_lock_acquire+0x8>)
 80127d2:	f000 b8a7 	b.w	8012924 <__retarget_lock_acquire_recursive>
 80127d6:	bf00      	nop
 80127d8:	2001ce96 	.word	0x2001ce96

080127dc <__sinit_lock_release>:
 80127dc:	4801      	ldr	r0, [pc, #4]	; (80127e4 <__sinit_lock_release+0x8>)
 80127de:	f000 b8a2 	b.w	8012926 <__retarget_lock_release_recursive>
 80127e2:	bf00      	nop
 80127e4:	2001ce96 	.word	0x2001ce96

080127e8 <__sinit>:
 80127e8:	b510      	push	{r4, lr}
 80127ea:	4604      	mov	r4, r0
 80127ec:	f7ff fff0 	bl	80127d0 <__sinit_lock_acquire>
 80127f0:	69a3      	ldr	r3, [r4, #24]
 80127f2:	b11b      	cbz	r3, 80127fc <__sinit+0x14>
 80127f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127f8:	f7ff bff0 	b.w	80127dc <__sinit_lock_release>
 80127fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012800:	6523      	str	r3, [r4, #80]	; 0x50
 8012802:	4b13      	ldr	r3, [pc, #76]	; (8012850 <__sinit+0x68>)
 8012804:	4a13      	ldr	r2, [pc, #76]	; (8012854 <__sinit+0x6c>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	62a2      	str	r2, [r4, #40]	; 0x28
 801280a:	42a3      	cmp	r3, r4
 801280c:	bf04      	itt	eq
 801280e:	2301      	moveq	r3, #1
 8012810:	61a3      	streq	r3, [r4, #24]
 8012812:	4620      	mov	r0, r4
 8012814:	f000 f820 	bl	8012858 <__sfp>
 8012818:	6060      	str	r0, [r4, #4]
 801281a:	4620      	mov	r0, r4
 801281c:	f000 f81c 	bl	8012858 <__sfp>
 8012820:	60a0      	str	r0, [r4, #8]
 8012822:	4620      	mov	r0, r4
 8012824:	f000 f818 	bl	8012858 <__sfp>
 8012828:	2200      	movs	r2, #0
 801282a:	60e0      	str	r0, [r4, #12]
 801282c:	2104      	movs	r1, #4
 801282e:	6860      	ldr	r0, [r4, #4]
 8012830:	f7ff ff82 	bl	8012738 <std>
 8012834:	68a0      	ldr	r0, [r4, #8]
 8012836:	2201      	movs	r2, #1
 8012838:	2109      	movs	r1, #9
 801283a:	f7ff ff7d 	bl	8012738 <std>
 801283e:	68e0      	ldr	r0, [r4, #12]
 8012840:	2202      	movs	r2, #2
 8012842:	2112      	movs	r1, #18
 8012844:	f7ff ff78 	bl	8012738 <std>
 8012848:	2301      	movs	r3, #1
 801284a:	61a3      	str	r3, [r4, #24]
 801284c:	e7d2      	b.n	80127f4 <__sinit+0xc>
 801284e:	bf00      	nop
 8012850:	080159b0 	.word	0x080159b0
 8012854:	08012781 	.word	0x08012781

08012858 <__sfp>:
 8012858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285a:	4607      	mov	r7, r0
 801285c:	f7ff ffac 	bl	80127b8 <__sfp_lock_acquire>
 8012860:	4b1e      	ldr	r3, [pc, #120]	; (80128dc <__sfp+0x84>)
 8012862:	681e      	ldr	r6, [r3, #0]
 8012864:	69b3      	ldr	r3, [r6, #24]
 8012866:	b913      	cbnz	r3, 801286e <__sfp+0x16>
 8012868:	4630      	mov	r0, r6
 801286a:	f7ff ffbd 	bl	80127e8 <__sinit>
 801286e:	3648      	adds	r6, #72	; 0x48
 8012870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012874:	3b01      	subs	r3, #1
 8012876:	d503      	bpl.n	8012880 <__sfp+0x28>
 8012878:	6833      	ldr	r3, [r6, #0]
 801287a:	b30b      	cbz	r3, 80128c0 <__sfp+0x68>
 801287c:	6836      	ldr	r6, [r6, #0]
 801287e:	e7f7      	b.n	8012870 <__sfp+0x18>
 8012880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012884:	b9d5      	cbnz	r5, 80128bc <__sfp+0x64>
 8012886:	4b16      	ldr	r3, [pc, #88]	; (80128e0 <__sfp+0x88>)
 8012888:	60e3      	str	r3, [r4, #12]
 801288a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801288e:	6665      	str	r5, [r4, #100]	; 0x64
 8012890:	f000 f847 	bl	8012922 <__retarget_lock_init_recursive>
 8012894:	f7ff ff96 	bl	80127c4 <__sfp_lock_release>
 8012898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801289c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128a0:	6025      	str	r5, [r4, #0]
 80128a2:	61a5      	str	r5, [r4, #24]
 80128a4:	2208      	movs	r2, #8
 80128a6:	4629      	mov	r1, r5
 80128a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128ac:	f7ff f946 	bl	8011b3c <memset>
 80128b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80128b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80128b8:	4620      	mov	r0, r4
 80128ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128bc:	3468      	adds	r4, #104	; 0x68
 80128be:	e7d9      	b.n	8012874 <__sfp+0x1c>
 80128c0:	2104      	movs	r1, #4
 80128c2:	4638      	mov	r0, r7
 80128c4:	f7ff ff62 	bl	801278c <__sfmoreglue>
 80128c8:	4604      	mov	r4, r0
 80128ca:	6030      	str	r0, [r6, #0]
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d1d5      	bne.n	801287c <__sfp+0x24>
 80128d0:	f7ff ff78 	bl	80127c4 <__sfp_lock_release>
 80128d4:	230c      	movs	r3, #12
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	e7ee      	b.n	80128b8 <__sfp+0x60>
 80128da:	bf00      	nop
 80128dc:	080159b0 	.word	0x080159b0
 80128e0:	ffff0001 	.word	0xffff0001

080128e4 <_fwalk_reent>:
 80128e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128e8:	4606      	mov	r6, r0
 80128ea:	4688      	mov	r8, r1
 80128ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80128f0:	2700      	movs	r7, #0
 80128f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80128f6:	f1b9 0901 	subs.w	r9, r9, #1
 80128fa:	d505      	bpl.n	8012908 <_fwalk_reent+0x24>
 80128fc:	6824      	ldr	r4, [r4, #0]
 80128fe:	2c00      	cmp	r4, #0
 8012900:	d1f7      	bne.n	80128f2 <_fwalk_reent+0xe>
 8012902:	4638      	mov	r0, r7
 8012904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012908:	89ab      	ldrh	r3, [r5, #12]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d907      	bls.n	801291e <_fwalk_reent+0x3a>
 801290e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012912:	3301      	adds	r3, #1
 8012914:	d003      	beq.n	801291e <_fwalk_reent+0x3a>
 8012916:	4629      	mov	r1, r5
 8012918:	4630      	mov	r0, r6
 801291a:	47c0      	blx	r8
 801291c:	4307      	orrs	r7, r0
 801291e:	3568      	adds	r5, #104	; 0x68
 8012920:	e7e9      	b.n	80128f6 <_fwalk_reent+0x12>

08012922 <__retarget_lock_init_recursive>:
 8012922:	4770      	bx	lr

08012924 <__retarget_lock_acquire_recursive>:
 8012924:	4770      	bx	lr

08012926 <__retarget_lock_release_recursive>:
 8012926:	4770      	bx	lr

08012928 <__swhatbuf_r>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	460e      	mov	r6, r1
 801292c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012930:	2900      	cmp	r1, #0
 8012932:	b096      	sub	sp, #88	; 0x58
 8012934:	4614      	mov	r4, r2
 8012936:	461d      	mov	r5, r3
 8012938:	da08      	bge.n	801294c <__swhatbuf_r+0x24>
 801293a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801293e:	2200      	movs	r2, #0
 8012940:	602a      	str	r2, [r5, #0]
 8012942:	061a      	lsls	r2, r3, #24
 8012944:	d410      	bmi.n	8012968 <__swhatbuf_r+0x40>
 8012946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801294a:	e00e      	b.n	801296a <__swhatbuf_r+0x42>
 801294c:	466a      	mov	r2, sp
 801294e:	f000 f907 	bl	8012b60 <_fstat_r>
 8012952:	2800      	cmp	r0, #0
 8012954:	dbf1      	blt.n	801293a <__swhatbuf_r+0x12>
 8012956:	9a01      	ldr	r2, [sp, #4]
 8012958:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801295c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012960:	425a      	negs	r2, r3
 8012962:	415a      	adcs	r2, r3
 8012964:	602a      	str	r2, [r5, #0]
 8012966:	e7ee      	b.n	8012946 <__swhatbuf_r+0x1e>
 8012968:	2340      	movs	r3, #64	; 0x40
 801296a:	2000      	movs	r0, #0
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	b016      	add	sp, #88	; 0x58
 8012970:	bd70      	pop	{r4, r5, r6, pc}
	...

08012974 <__smakebuf_r>:
 8012974:	898b      	ldrh	r3, [r1, #12]
 8012976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012978:	079d      	lsls	r5, r3, #30
 801297a:	4606      	mov	r6, r0
 801297c:	460c      	mov	r4, r1
 801297e:	d507      	bpl.n	8012990 <__smakebuf_r+0x1c>
 8012980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012984:	6023      	str	r3, [r4, #0]
 8012986:	6123      	str	r3, [r4, #16]
 8012988:	2301      	movs	r3, #1
 801298a:	6163      	str	r3, [r4, #20]
 801298c:	b002      	add	sp, #8
 801298e:	bd70      	pop	{r4, r5, r6, pc}
 8012990:	ab01      	add	r3, sp, #4
 8012992:	466a      	mov	r2, sp
 8012994:	f7ff ffc8 	bl	8012928 <__swhatbuf_r>
 8012998:	9900      	ldr	r1, [sp, #0]
 801299a:	4605      	mov	r5, r0
 801299c:	4630      	mov	r0, r6
 801299e:	f7ff f941 	bl	8011c24 <_malloc_r>
 80129a2:	b948      	cbnz	r0, 80129b8 <__smakebuf_r+0x44>
 80129a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129a8:	059a      	lsls	r2, r3, #22
 80129aa:	d4ef      	bmi.n	801298c <__smakebuf_r+0x18>
 80129ac:	f023 0303 	bic.w	r3, r3, #3
 80129b0:	f043 0302 	orr.w	r3, r3, #2
 80129b4:	81a3      	strh	r3, [r4, #12]
 80129b6:	e7e3      	b.n	8012980 <__smakebuf_r+0xc>
 80129b8:	4b0d      	ldr	r3, [pc, #52]	; (80129f0 <__smakebuf_r+0x7c>)
 80129ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80129bc:	89a3      	ldrh	r3, [r4, #12]
 80129be:	6020      	str	r0, [r4, #0]
 80129c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129c4:	81a3      	strh	r3, [r4, #12]
 80129c6:	9b00      	ldr	r3, [sp, #0]
 80129c8:	6163      	str	r3, [r4, #20]
 80129ca:	9b01      	ldr	r3, [sp, #4]
 80129cc:	6120      	str	r0, [r4, #16]
 80129ce:	b15b      	cbz	r3, 80129e8 <__smakebuf_r+0x74>
 80129d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129d4:	4630      	mov	r0, r6
 80129d6:	f000 f8d5 	bl	8012b84 <_isatty_r>
 80129da:	b128      	cbz	r0, 80129e8 <__smakebuf_r+0x74>
 80129dc:	89a3      	ldrh	r3, [r4, #12]
 80129de:	f023 0303 	bic.w	r3, r3, #3
 80129e2:	f043 0301 	orr.w	r3, r3, #1
 80129e6:	81a3      	strh	r3, [r4, #12]
 80129e8:	89a0      	ldrh	r0, [r4, #12]
 80129ea:	4305      	orrs	r5, r0
 80129ec:	81a5      	strh	r5, [r4, #12]
 80129ee:	e7cd      	b.n	801298c <__smakebuf_r+0x18>
 80129f0:	08012781 	.word	0x08012781

080129f4 <__malloc_lock>:
 80129f4:	4801      	ldr	r0, [pc, #4]	; (80129fc <__malloc_lock+0x8>)
 80129f6:	f7ff bf95 	b.w	8012924 <__retarget_lock_acquire_recursive>
 80129fa:	bf00      	nop
 80129fc:	2001ce94 	.word	0x2001ce94

08012a00 <__malloc_unlock>:
 8012a00:	4801      	ldr	r0, [pc, #4]	; (8012a08 <__malloc_unlock+0x8>)
 8012a02:	f7ff bf90 	b.w	8012926 <__retarget_lock_release_recursive>
 8012a06:	bf00      	nop
 8012a08:	2001ce94 	.word	0x2001ce94

08012a0c <_raise_r>:
 8012a0c:	291f      	cmp	r1, #31
 8012a0e:	b538      	push	{r3, r4, r5, lr}
 8012a10:	4604      	mov	r4, r0
 8012a12:	460d      	mov	r5, r1
 8012a14:	d904      	bls.n	8012a20 <_raise_r+0x14>
 8012a16:	2316      	movs	r3, #22
 8012a18:	6003      	str	r3, [r0, #0]
 8012a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a22:	b112      	cbz	r2, 8012a2a <_raise_r+0x1e>
 8012a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a28:	b94b      	cbnz	r3, 8012a3e <_raise_r+0x32>
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f000 f830 	bl	8012a90 <_getpid_r>
 8012a30:	462a      	mov	r2, r5
 8012a32:	4601      	mov	r1, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a3a:	f000 b817 	b.w	8012a6c <_kill_r>
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d00a      	beq.n	8012a58 <_raise_r+0x4c>
 8012a42:	1c59      	adds	r1, r3, #1
 8012a44:	d103      	bne.n	8012a4e <_raise_r+0x42>
 8012a46:	2316      	movs	r3, #22
 8012a48:	6003      	str	r3, [r0, #0]
 8012a4a:	2001      	movs	r0, #1
 8012a4c:	e7e7      	b.n	8012a1e <_raise_r+0x12>
 8012a4e:	2400      	movs	r4, #0
 8012a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a54:	4628      	mov	r0, r5
 8012a56:	4798      	blx	r3
 8012a58:	2000      	movs	r0, #0
 8012a5a:	e7e0      	b.n	8012a1e <_raise_r+0x12>

08012a5c <raise>:
 8012a5c:	4b02      	ldr	r3, [pc, #8]	; (8012a68 <raise+0xc>)
 8012a5e:	4601      	mov	r1, r0
 8012a60:	6818      	ldr	r0, [r3, #0]
 8012a62:	f7ff bfd3 	b.w	8012a0c <_raise_r>
 8012a66:	bf00      	nop
 8012a68:	20000100 	.word	0x20000100

08012a6c <_kill_r>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4d07      	ldr	r5, [pc, #28]	; (8012a8c <_kill_r+0x20>)
 8012a70:	2300      	movs	r3, #0
 8012a72:	4604      	mov	r4, r0
 8012a74:	4608      	mov	r0, r1
 8012a76:	4611      	mov	r1, r2
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	f7f2 fe69 	bl	8005750 <_kill>
 8012a7e:	1c43      	adds	r3, r0, #1
 8012a80:	d102      	bne.n	8012a88 <_kill_r+0x1c>
 8012a82:	682b      	ldr	r3, [r5, #0]
 8012a84:	b103      	cbz	r3, 8012a88 <_kill_r+0x1c>
 8012a86:	6023      	str	r3, [r4, #0]
 8012a88:	bd38      	pop	{r3, r4, r5, pc}
 8012a8a:	bf00      	nop
 8012a8c:	2001ce98 	.word	0x2001ce98

08012a90 <_getpid_r>:
 8012a90:	f7f2 be56 	b.w	8005740 <_getpid>

08012a94 <__sread>:
 8012a94:	b510      	push	{r4, lr}
 8012a96:	460c      	mov	r4, r1
 8012a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9c:	f000 f894 	bl	8012bc8 <_read_r>
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	bfab      	itete	ge
 8012aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8012aa8:	181b      	addge	r3, r3, r0
 8012aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012aae:	bfac      	ite	ge
 8012ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ab2:	81a3      	strhlt	r3, [r4, #12]
 8012ab4:	bd10      	pop	{r4, pc}

08012ab6 <__swrite>:
 8012ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aba:	461f      	mov	r7, r3
 8012abc:	898b      	ldrh	r3, [r1, #12]
 8012abe:	05db      	lsls	r3, r3, #23
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	460c      	mov	r4, r1
 8012ac4:	4616      	mov	r6, r2
 8012ac6:	d505      	bpl.n	8012ad4 <__swrite+0x1e>
 8012ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012acc:	2302      	movs	r3, #2
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f000 f868 	bl	8012ba4 <_lseek_r>
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ade:	81a3      	strh	r3, [r4, #12]
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	463b      	mov	r3, r7
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aea:	f000 b817 	b.w	8012b1c <_write_r>

08012aee <__sseek>:
 8012aee:	b510      	push	{r4, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af6:	f000 f855 	bl	8012ba4 <_lseek_r>
 8012afa:	1c43      	adds	r3, r0, #1
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	bf15      	itete	ne
 8012b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b0a:	81a3      	strheq	r3, [r4, #12]
 8012b0c:	bf18      	it	ne
 8012b0e:	81a3      	strhne	r3, [r4, #12]
 8012b10:	bd10      	pop	{r4, pc}

08012b12 <__sclose>:
 8012b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b16:	f000 b813 	b.w	8012b40 <_close_r>
	...

08012b1c <_write_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d07      	ldr	r5, [pc, #28]	; (8012b3c <_write_r+0x20>)
 8012b20:	4604      	mov	r4, r0
 8012b22:	4608      	mov	r0, r1
 8012b24:	4611      	mov	r1, r2
 8012b26:	2200      	movs	r2, #0
 8012b28:	602a      	str	r2, [r5, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f7f0 fcc2 	bl	80034b4 <_write>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_write_r+0x1e>
 8012b34:	682b      	ldr	r3, [r5, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_write_r+0x1e>
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	2001ce98 	.word	0x2001ce98

08012b40 <_close_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d06      	ldr	r5, [pc, #24]	; (8012b5c <_close_r+0x1c>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	602b      	str	r3, [r5, #0]
 8012b4c:	f7f2 fe37 	bl	80057be <_close>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_close_r+0x1a>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_close_r+0x1a>
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	2001ce98 	.word	0x2001ce98

08012b60 <_fstat_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	; (8012b80 <_fstat_r+0x20>)
 8012b64:	2300      	movs	r3, #0
 8012b66:	4604      	mov	r4, r0
 8012b68:	4608      	mov	r0, r1
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	602b      	str	r3, [r5, #0]
 8012b6e:	f7f2 fe32 	bl	80057d6 <_fstat>
 8012b72:	1c43      	adds	r3, r0, #1
 8012b74:	d102      	bne.n	8012b7c <_fstat_r+0x1c>
 8012b76:	682b      	ldr	r3, [r5, #0]
 8012b78:	b103      	cbz	r3, 8012b7c <_fstat_r+0x1c>
 8012b7a:	6023      	str	r3, [r4, #0]
 8012b7c:	bd38      	pop	{r3, r4, r5, pc}
 8012b7e:	bf00      	nop
 8012b80:	2001ce98 	.word	0x2001ce98

08012b84 <_isatty_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d06      	ldr	r5, [pc, #24]	; (8012ba0 <_isatty_r+0x1c>)
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	4608      	mov	r0, r1
 8012b8e:	602b      	str	r3, [r5, #0]
 8012b90:	f7f2 fe31 	bl	80057f6 <_isatty>
 8012b94:	1c43      	adds	r3, r0, #1
 8012b96:	d102      	bne.n	8012b9e <_isatty_r+0x1a>
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	b103      	cbz	r3, 8012b9e <_isatty_r+0x1a>
 8012b9c:	6023      	str	r3, [r4, #0]
 8012b9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ba0:	2001ce98 	.word	0x2001ce98

08012ba4 <_lseek_r>:
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	4d07      	ldr	r5, [pc, #28]	; (8012bc4 <_lseek_r+0x20>)
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4608      	mov	r0, r1
 8012bac:	4611      	mov	r1, r2
 8012bae:	2200      	movs	r2, #0
 8012bb0:	602a      	str	r2, [r5, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	f7f2 fe2a 	bl	800580c <_lseek>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_lseek_r+0x1e>
 8012bbc:	682b      	ldr	r3, [r5, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_lseek_r+0x1e>
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	2001ce98 	.word	0x2001ce98

08012bc8 <_read_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4d07      	ldr	r5, [pc, #28]	; (8012be8 <_read_r+0x20>)
 8012bcc:	4604      	mov	r4, r0
 8012bce:	4608      	mov	r0, r1
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	602a      	str	r2, [r5, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	f7f2 fdd4 	bl	8005784 <_read>
 8012bdc:	1c43      	adds	r3, r0, #1
 8012bde:	d102      	bne.n	8012be6 <_read_r+0x1e>
 8012be0:	682b      	ldr	r3, [r5, #0]
 8012be2:	b103      	cbz	r3, 8012be6 <_read_r+0x1e>
 8012be4:	6023      	str	r3, [r4, #0]
 8012be6:	bd38      	pop	{r3, r4, r5, pc}
 8012be8:	2001ce98 	.word	0x2001ce98

08012bec <_init>:
 8012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bee:	bf00      	nop
 8012bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bf2:	bc08      	pop	{r3}
 8012bf4:	469e      	mov	lr, r3
 8012bf6:	4770      	bx	lr

08012bf8 <_fini>:
 8012bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bfa:	bf00      	nop
 8012bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bfe:	bc08      	pop	{r3}
 8012c00:	469e      	mov	lr, r3
 8012c02:	4770      	bx	lr
