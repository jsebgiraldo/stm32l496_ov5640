
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c8  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de3c  0800de3c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800de3c  0800de3c  0001de3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de44  0800de44  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de44  0800de44  0001de44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de48  0800de48  0001de48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800de4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c4f0  20000160  0800dfac  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c650  0800dfac  0002c650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e531  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040de  00000000  00000000  0003e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  000427a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00044138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec20  00000000  00000000  00045928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be64  00000000  00000000  00074548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010de07  00000000  00000000  000903ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e1b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f8  00000000  00000000  0019e204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b55c 	.word	0x0800b55c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	0800b55c 	.word	0x0800b55c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f009 ff1d 	bl	800a3e8 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	0800b574 	.word	0x0800b574
 800060c:	0800b830 	.word	0x0800b830
 8000610:	0800b578 	.word	0x0800b578

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f009 fedd 	bl	800a3e8 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800b574 	.word	0x0800b574
 8000658:	0800b844 	.word	0x0800b844
 800065c:	0800b578 	.word	0x0800b578

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f009 feb7 	bl	800a3e8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800b574 	.word	0x0800b574
 80006a4:	0800b858 	.word	0x0800b858
 80006a8:	0800b578 	.word	0x0800b578

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f009 fe8d 	bl	800a3e8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f009 fee4 	bl	800a49c <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f009 fe7f 	bl	800a3e8 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f009 fe6a 	bl	800a3e8 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0800b59c 	.word	0x0800b59c
 8000724:	0800b870 	.word	0x0800b870
 8000728:	0800b578 	.word	0x0800b578
 800072c:	0800b574 	.word	0x0800b574
 8000730:	0800b5ac 	.word	0x0800b5ac

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f009 fe4d 	bl	800a3e8 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800b574 	.word	0x0800b574
 800076c:	0800b884 	.word	0x0800b884
 8000770:	0800b578 	.word	0x0800b578

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f009 fe27 	bl	800a3e8 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800b5c8 	.word	0x0800b5c8
 80007bc:	0800b898 	.word	0x0800b898
 80007c0:	0800b578 	.word	0x0800b578

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f009 fdfd 	bl	800a3e8 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	0800b5dc 	.word	0x0800b5dc
 800082c:	0800b8a8 	.word	0x0800b8a8
 8000830:	0800b578 	.word	0x0800b578

08000834 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd1 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d10e      	bne.n	800086e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ffc9 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d806      	bhi.n	800086e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <mfxstm32l152_Init+0x58>)
 8000868:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800086a:	f001 fe87 	bl	800257c <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8db 	bl	8000a2e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8fc 	bl	8000a7a <mfxstm32l152_SetIrqOutPinType>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000017c 	.word	0x2000017c

08000890 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffc3 	bl	8001828 <mfxstm32l152_ReleaseInstance>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d001      	beq.n	80008b0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80008ac:	f001 fe76 	bl	800259c <MFX_IO_DeInit>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ff09 	bl	80026e0 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 ff48 	bl	8002764 <MFX_IO_Delay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fef7 	bl	80026e0 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80008f2:	f001 febd 	bl	8002670 <MFX_IO_EnableWakeupPin>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff6c 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d101      	bne.n	800091e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800091a:	f001 fea9 	bl	8002670 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800091e:	f001 fecb 	bl	80026b8 <MFX_IO_Wakeup>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 ff15 	bl	8002764 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800093a:	f001 fe1f 	bl	800257c <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fee0 	bl	8002708 <MFX_IO_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	b29b      	uxth	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2142      	movs	r1, #66	; 0x42
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fec9 	bl	8002708 <MFX_IO_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2142      	movs	r1, #66	; 0x42
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fea9 	bl	80026e0 <MFX_IO_Write>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2142      	movs	r1, #66	; 0x42
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 feaa 	bl	8002708 <MFX_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80009b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2142      	movs	r1, #66	; 0x42
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fe85 	bl	80026e0 <MFX_IO_Write>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2108      	movs	r1, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fe88 	bl	8002708 <MFX_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2144      	movs	r1, #68	; 0x44
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fe5d 	bl	80026e0 <MFX_IO_Write>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2141      	movs	r1, #65	; 0x41
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fe5e 	bl	8002708 <MFX_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2141      	movs	r1, #65	; 0x41
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fe3a 	bl	80026e0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fe79 	bl	8002764 <MFX_IO_Delay>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	460a      	mov	r2, r1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2141      	movs	r1, #65	; 0x41
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fe38 	bl	8002708 <MFX_IO_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2141      	movs	r1, #65	; 0x41
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe14 	bl	80026e0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 fe53 	bl	8002764 <MFX_IO_Delay>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fe16 	bl	8002708 <MFX_IO_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d304      	bcc.n	8000afa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e003      	b.n	8000b02 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fde9 	bl	80026e0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fe28 	bl	8002764 <MFX_IO_Delay>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	f200 82d4 	bhi.w	80010e0 <mfxstm32l152_IO_Config+0x5c4>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <mfxstm32l152_IO_Config+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000c61 	.word	0x08000c61
 8000b48:	08000d21 	.word	0x08000d21
 8000b4c:	08000e11 	.word	0x08000e11
 8000b50:	08000f01 	.word	0x08000f01
 8000b54:	08000ff1 	.word	0x08000ff1
 8000b58:	08000ba1 	.word	0x08000ba1
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000c31 	.word	0x08000c31
 8000b68:	080010e1 	.word	0x080010e1
 8000b6c:	08000cf1 	.word	0x08000cf1
 8000b70:	08000cc1 	.word	0x08000cc1
 8000b74:	080010e1 	.word	0x080010e1
 8000b78:	08000c91 	.word	0x08000c91
 8000b7c:	08000c61 	.word	0x08000c61
 8000b80:	08000d71 	.word	0x08000d71
 8000b84:	08000dc1 	.word	0x08000dc1
 8000b88:	08000e61 	.word	0x08000e61
 8000b8c:	08000eb1 	.word	0x08000eb1
 8000b90:	08000f51 	.word	0x08000f51
 8000b94:	08000fa1 	.word	0x08000fa1
 8000b98:	08001041 	.word	0x08001041
 8000b9c:	08001091 	.word	0x08001091
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fb67 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2200      	movs	r2, #0
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa9d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f000 fe57 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2168      	movs	r1, #104	; 0x68
 8000bca:	f000 fe51 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bce:	e28a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb4f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa85 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	2300      	movs	r3, #0
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	f000 fe3f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	2168      	movs	r1, #104	; 0x68
 8000bfa:	f000 fe39 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bfe:	e272      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb37 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa6d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	f000 fe27 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	2301      	movs	r3, #1
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	2168      	movs	r1, #104	; 0x68
 8000c2a:	f000 fe21 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c2e:	e25a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fb1f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa55 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	f000 fe0f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c52:	88f8      	ldrh	r0, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	f000 fe09 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c5e:	e242      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb07 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa3d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f000 fdf7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c82:	88f8      	ldrh	r0, [r7, #6]
 8000c84:	2300      	movs	r3, #0
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	2168      	movs	r1, #104	; 0x68
 8000c8a:	f000 fdf1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c8e:	e22a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 faef 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa25 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f000 fddf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2168      	movs	r1, #104	; 0x68
 8000cba:	f000 fdd9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cbe:	e212      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fad7 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa0d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f000 fdc7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	2168      	movs	r1, #104	; 0x68
 8000cea:	f000 fdc1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cee:	e1fa      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fabf 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9f5 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	f000 fdaf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	2301      	movs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	2168      	movs	r1, #104	; 0x68
 8000d1a:	f000 fda9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000d1e:	e1e2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa7a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9de 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	2300      	movs	r3, #0
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f000 fd98 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	2301      	movs	r3, #1
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	2168      	movs	r1, #104	; 0x68
 8000d48:	f000 fd92 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9de 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ed 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d6e:	e1ba      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa52 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9b6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	f000 fd70 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	2168      	movs	r1, #104	; 0x68
 8000d98:	f000 fd6a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f9b6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2201      	movs	r2, #1
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9c5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa4d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000dbe:	e192      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa2a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f98e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd4:	88f8      	ldrh	r0, [r7, #6]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	f000 fd48 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	2300      	movs	r3, #0
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2168      	movs	r1, #104	; 0x68
 8000de8:	f000 fd42 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f98e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f99d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa25 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e0e:	e16a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa02 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f966 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	2300      	movs	r3, #0
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2164      	movs	r1, #100	; 0x64
 8000e2c:	f000 fd20 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e30:	88f8      	ldrh	r0, [r7, #6]
 8000e32:	2301      	movs	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	2168      	movs	r1, #104	; 0x68
 8000e38:	f000 fd1a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f966 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f975 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f9fd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e5e:	e142      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9da 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e74:	88f8      	ldrh	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2164      	movs	r1, #100	; 0x64
 8000e7c:	f000 fcf8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	2301      	movs	r3, #1
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	2168      	movs	r1, #104	; 0x68
 8000e88:	f000 fcf2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f94d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9d5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000eae:	e11a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f916 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	f000 fcd0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	2168      	movs	r1, #104	; 0x68
 8000ed8:	f000 fcca 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f916 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2200      	movs	r2, #0
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f925 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9ad 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000efe:	e0f2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f8ee 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2164      	movs	r1, #100	; 0x64
 8000f1c:	f000 fca8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	2301      	movs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	2168      	movs	r1, #104	; 0x68
 8000f28:	f000 fca2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ee 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8fd 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f985 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f4e:	e0ca      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f962 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8c6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	2301      	movs	r3, #1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	f000 fc80 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	2301      	movs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	2168      	movs	r1, #104	; 0x68
 8000f78:	f000 fc7a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8c6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8d5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f95d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f9e:	e0a2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2200      	movs	r2, #0
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f000 fc58 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	2168      	movs	r1, #104	; 0x68
 8000fc8:	f000 fc52 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f89e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8ad 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f935 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000fee:	e07a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f912 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f876 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	f000 fc30 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	2301      	movs	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	2168      	movs	r1, #104	; 0x68
 8001018:	f000 fc2a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f876 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f885 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f90d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800103e:	e052      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8ea 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f84e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	2301      	movs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	f000 fc08 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001060:	88f8      	ldrh	r0, [r7, #6]
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	2168      	movs	r1, #104	; 0x68
 8001068:	f000 fc02 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f84e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f85d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8e5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800108e:	e02a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8c2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f826 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	2301      	movs	r3, #1
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	f000 fbe0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010b0:	88f8      	ldrh	r0, [r7, #6]
 80010b2:	2300      	movs	r3, #0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	2168      	movs	r1, #104	; 0x68
 80010b8:	f000 fbda 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	2200      	movs	r2, #0
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f826 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f835 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8bd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 80010de:	e002      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	bf00      	nop
  }

  return error_code;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4613      	mov	r3, r2
 80010fe:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	f000 fbb2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	214c      	movs	r1, #76	; 0x4c
 800112c:	f000 fba0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f001 fb17 	bl	8002764 <MFX_IO_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	f000 fb8b 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fb02 	bl	8002764 <MFX_IO_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	2301      	movs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	216c      	movs	r1, #108	; 0x6c
 8001186:	f000 fb73 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800118a:	e005      	b.n	8001198 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800118c:	88f8      	ldrh	r0, [r7, #6]
 800118e:	2301      	movs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	f000 fb6c 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	2110      	movs	r1, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fa9f 	bl	8002708 <MFX_IO_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2111      	movs	r1, #17
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fa93 	bl	8002708 <MFX_IO_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2112      	movs	r1, #18
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fa87 	bl	8002708 <MFX_IO_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4013      	ands	r3, r2
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001226:	f001 f9f5 	bl	8002614 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb92 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fba3 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2148      	movs	r1, #72	; 0x48
 800126c:	f000 fb00 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	2300      	movs	r3, #0
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2148      	movs	r1, #72	; 0x48
 800128c:	f000 faf0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	210c      	movs	r1, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fa23 	bl	8002708 <MFX_IO_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	210d      	movs	r1, #13
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fa15 	bl	8002708 <MFX_IO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	210e      	movs	r1, #14
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fa09 	bl	8002708 <MFX_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4013      	ands	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2154      	movs	r1, #84	; 0x54
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f9cc 	bl	80026e0 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2155      	movs	r1, #85	; 0x55
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f9c3 	bl	80026e0 <MFX_IO_Write>
  }
  if (pin_16_23)
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2156      	movs	r1, #86	; 0x56
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f9ba 	bl	80026e0 <MFX_IO_Write>
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4618      	mov	r0, r3
 800138c:	f001 f9bc 	bl	8002708 <MFX_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f99a 	bl	80026e0 <MFX_IO_Write>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f994 	bl	8002708 <MFX_IO_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f001 f96d 	bl	80026e0 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001406:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030e 	and.w	r3, r3, #14
 8001412:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f948 	bl	80026e0 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800145a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800145c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001466:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2181      	movs	r1, #129	; 0x81
 8001478:	4618      	mov	r0, r3
 800147a:	f001 f931 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800147e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2182      	movs	r1, #130	; 0x82
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f925 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	2183      	movs	r1, #131	; 0x83
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f91b 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80014aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	2184      	movs	r1, #132	; 0x84
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f90f 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	2185      	movs	r1, #133	; 0x85
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f905 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80014d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2186      	movs	r1, #134	; 0x86
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f8f9 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80014ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2187      	movs	r1, #135	; 0x87
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f8ef 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	2188      	movs	r1, #136	; 0x88
 8001514:	4618      	mov	r0, r3
 8001516:	f001 f8e3 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2189      	movs	r1, #137	; 0x89
 8001528:	4618      	mov	r0, r3
 800152a:	f001 f8d9 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800152e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	218a      	movs	r1, #138	; 0x8a
 8001540:	4618      	mov	r0, r3
 8001542:	f001 f8cd 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001548:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	218b      	movs	r1, #139	; 0x8b
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f8c3 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800155a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800155c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	2190      	movs	r1, #144	; 0x90
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f8b9 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800156e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001570:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	2191      	movs	r1, #145	; 0x91
 800157c:	4618      	mov	r0, r3
 800157e:	f001 f8af 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	2192      	movs	r1, #146	; 0x92
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f8a5 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001598:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2193      	movs	r1, #147	; 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f89b 	bl	80026e0 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80015aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 f891 	bl	80026e0 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	218c      	movs	r1, #140	; 0x8c
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 f885 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	218d      	movs	r1, #141	; 0x8d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 f87b 	bl	80026e0 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	218e      	movs	r1, #142	; 0x8e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 f86f 	bl	80026e0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	218f      	movs	r1, #143	; 0x8f
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f865 	bl	80026e0 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001616:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800161a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	2196      	movs	r1, #150	; 0x96
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f85a 	bl	80026e0 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800162c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001636:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001638:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	2197      	movs	r1, #151	; 0x97
 8001654:	4618      	mov	r0, r3
 8001656:	f001 f843 	bl	80026e0 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	2198      	movs	r1, #152	; 0x98
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f838 	bl	80026e0 <MFX_IO_Write>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2303      	movs	r3, #3
 8001696:	2114      	movs	r1, #20
 8001698:	f001 f84a 	bl	8002730 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016c2:	f000 ffa7 	bl	8002614 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f944 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f98f 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f96b 	bl	80009de <mfxstm32l152_GlobalITStatus>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f938 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	4618      	mov	r0, r3
 8001742:	f000 ffe1 	bl	8002708 <MFX_IO_Read>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f000 ffd0 	bl	8002708 <MFX_IO_Read>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800177c:	f000 ff4a 	bl	8002614 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f932 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f90e 	bl	80009de <mfxstm32l152_GlobalITStatus>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8db 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e00b      	b.n	8001810 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mfxstm32l152_GetInstance+0x3c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9f0      	bls.n	80017f8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001816:	23ff      	movs	r3, #255	; 0xff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	2000017c 	.word	0x2000017c

08001828 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00f      	b.n	8001858 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d105      	bne.n	8001852 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800184a:	2100      	movs	r1, #0
 800184c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d9ec      	bls.n	8001838 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	2000017c 	.word	0x2000017c

08001870 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	717b      	strb	r3, [r7, #5]
 8001882:	4613      	mov	r3, r2
 8001884:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80018a0:	797a      	ldrb	r2, [r7, #5]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 ff2e 	bl	8002708 <MFX_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e008      	b.n	80018d2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80018c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 ff01 	bl	80026e0 <MFX_IO_Write>
  }

  if (pin_8_15)
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 ff0a 	bl	8002708 <MFX_IO_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	4313      	orrs	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e008      	b.n	800191a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	3301      	adds	r3, #1
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fedb 	bl	80026e0 <MFX_IO_Write>
  }

  if (pin_16_23)
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3302      	adds	r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fee4 	bl	8002708 <MFX_IO_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e008      	b.n	8001966 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	b25a      	sxtb	r2, r3
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4013      	ands	r3, r2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	3302      	adds	r3, #2
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 feb5 	bl	80026e0 <MFX_IO_Write>
  }
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001984:	f000 fff6 	bl	8002974 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2010      	movs	r0, #16
 800198e:	f000 f9e4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001992:	200a      	movs	r0, #10
 8001994:	f001 f815 	bl	80029c2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f9dc 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019a2:	20c8      	movs	r0, #200	; 0xc8
 80019a4:	f001 f80d 	bl	80029c2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2011      	movs	r0, #17
 80019ae:	f000 f9d4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019b2:	2078      	movs	r0, #120	; 0x78
 80019b4:	f001 f805 	bl	80029c2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019b8:	2300      	movs	r3, #0
 80019ba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80019bc:	463b      	mov	r3, r7
 80019be:	2201      	movs	r2, #1
 80019c0:	4619      	mov	r1, r3
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f000 f9c9 	bl	8001d5a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80019c8:	2305      	movs	r3, #5
 80019ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80019cc:	463b      	mov	r3, r7
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	203a      	movs	r0, #58	; 0x3a
 80019d4:	f000 f9c1 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2021      	movs	r0, #33	; 0x21
 80019de:	f000 f9bc 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80019ee:	23ef      	movs	r3, #239	; 0xef
 80019f0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80019f2:	463b      	mov	r3, r7
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	202a      	movs	r0, #42	; 0x2a
 80019fa:	f000 f9ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a0a:	23ef      	movs	r3, #239	; 0xef
 8001a0c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2204      	movs	r2, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	202b      	movs	r0, #43	; 0x2b
 8001a16:	f000 f9a0 	bl	8001d5a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a26:	2333      	movs	r3, #51	; 0x33
 8001a28:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a2a:	2333      	movs	r3, #51	; 0x33
 8001a2c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2205      	movs	r2, #5
 8001a32:	4619      	mov	r1, r3
 8001a34:	20b2      	movs	r0, #178	; 0xb2
 8001a36:	f000 f990 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a3a:	2335      	movs	r3, #53	; 0x35
 8001a3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2201      	movs	r2, #1
 8001a42:	4619      	mov	r1, r3
 8001a44:	20b7      	movs	r0, #183	; 0xb7
 8001a46:	f000 f988 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	20bb      	movs	r0, #187	; 0xbb
 8001a56:	f000 f980 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001a5a:	232c      	movs	r3, #44	; 0x2c
 8001a5c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	f000 f978 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001a6e:	23c3      	movs	r3, #195	; 0xc3
 8001a70:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001a72:	463b      	mov	r3, r7
 8001a74:	2202      	movs	r2, #2
 8001a76:	4619      	mov	r1, r3
 8001a78:	20c2      	movs	r0, #194	; 0xc2
 8001a7a:	f000 f96e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001a7e:	2320      	movs	r3, #32
 8001a80:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001a82:	463b      	mov	r3, r7
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	20c4      	movs	r0, #196	; 0xc4
 8001a8a:	f000 f966 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001a8e:	230f      	movs	r3, #15
 8001a90:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001a92:	463b      	mov	r3, r7
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	20c6      	movs	r0, #198	; 0xc6
 8001a9a:	f000 f95e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001a9e:	23a4      	movs	r3, #164	; 0xa4
 8001aa0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001aa2:	23a1      	movs	r3, #161	; 0xa1
 8001aa4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	20d0      	movs	r0, #208	; 0xd0
 8001aae:	f000 f954 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ab2:	23d0      	movs	r3, #208	; 0xd0
 8001ab4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001aba:	2311      	movs	r3, #17
 8001abc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ac6:	2315      	movs	r3, #21
 8001ac8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001aca:	2339      	movs	r3, #57	; 0x39
 8001acc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001ace:	2333      	movs	r3, #51	; 0x33
 8001ad0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001ad2:	2350      	movs	r3, #80	; 0x50
 8001ad4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001ad6:	2336      	movs	r3, #54	; 0x36
 8001ad8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001ada:	2313      	movs	r3, #19
 8001adc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001ade:	2314      	movs	r3, #20
 8001ae0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001ae2:	2329      	movs	r3, #41	; 0x29
 8001ae4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001ae6:	232d      	movs	r3, #45	; 0x2d
 8001ae8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001aea:	463b      	mov	r3, r7
 8001aec:	220e      	movs	r2, #14
 8001aee:	4619      	mov	r1, r3
 8001af0:	20e0      	movs	r0, #224	; 0xe0
 8001af2:	f000 f932 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001af6:	23d0      	movs	r3, #208	; 0xd0
 8001af8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001afa:	2308      	movs	r3, #8
 8001afc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001afe:	2310      	movs	r3, #16
 8001b00:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b02:	2308      	movs	r3, #8
 8001b04:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b06:	2306      	movs	r3, #6
 8001b08:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b0e:	2339      	movs	r3, #57	; 0x39
 8001b10:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b12:	2344      	movs	r3, #68	; 0x44
 8001b14:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b16:	2351      	movs	r3, #81	; 0x51
 8001b18:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b1a:	230b      	movs	r3, #11
 8001b1c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b1e:	2316      	movs	r3, #22
 8001b20:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b22:	2314      	movs	r3, #20
 8001b24:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b26:	232f      	movs	r3, #47	; 0x2f
 8001b28:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b2a:	2331      	movs	r3, #49	; 0x31
 8001b2c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b2e:	463b      	mov	r3, r7
 8001b30:	220e      	movs	r2, #14
 8001b32:	4619      	mov	r1, r3
 8001b34:	20e1      	movs	r0, #225	; 0xe1
 8001b36:	f000 f910 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b3a:	f000 f847 	bl	8001bcc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b3e:	2300      	movs	r3, #0
 8001b40:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b42:	463b      	mov	r3, r7
 8001b44:	2201      	movs	r2, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	2035      	movs	r0, #53	; 0x35
 8001b4a:	f000 f906 	bl	8001d5a <ST7789H2_WriteReg>

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001b64:	2300      	movs	r3, #0
 8001b66:	723b      	strb	r3, [r7, #8]
 8001b68:	e025      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d120      	bne.n	8001bb2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001b7c:	23f0      	movs	r3, #240	; 0xf0
 8001b7e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001b84:	2300      	movs	r3, #0
 8001b86:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2033      	movs	r0, #51	; 0x33
 8001b92:	f000 f8e2 	bl	8001d5a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001b9a:	2350      	movs	r3, #80	; 0x50
 8001b9c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2037      	movs	r0, #55	; 0x37
 8001ba8:	f000 f8d7 	bl	8001d5a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	723b      	strb	r3, [r7, #8]
 8001bb0:	e001      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bb2:	2360      	movs	r3, #96	; 0x60
 8001bb4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2036      	movs	r0, #54	; 0x36
 8001bc0:	f000 f8cb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2029      	movs	r0, #41	; 0x29
 8001bd6:	f000 f8c0 	bl	8001d5a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2011      	movs	r0, #17
 8001be0:	f000 f8bb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001bee:	23fe      	movs	r3, #254	; 0xfe
 8001bf0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	20bd      	movs	r0, #189	; 0xbd
 8001bfa:	f000 f8ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 f8a9 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 feda 	bl	80029c2 <LCD_IO_Delay>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c1a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c2a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c3a:	f000 fe9b 	bl	8002974 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f000 f8ae 	bl	8001da0 <ST7789H2_ReadReg>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b11      	subs	r3, #17
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	202a      	movs	r0, #42	; 0x2a
 8001c7e:	f000 f86c 	bl	8001d5a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b11      	subs	r3, #17
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	202b      	movs	r0, #43	; 0x2b
 8001ca4:	f000 f859 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	80bb      	strh	r3, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cc2:	88ba      	ldrh	r2, [r7, #4]
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffbf 	bl	8001c4c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	f000 f841 	bl	8001d5a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fe50 	bl	8002980 <LCD_IO_WriteData>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cf8:	88ba      	ldrh	r2, [r7, #4]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffa4 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d04:	88ba      	ldrh	r2, [r7, #4]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9c0 	bl	8002090 <ST7789H2_ReadPixel_rgb888>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	733a      	strb	r2, [r7, #12]
 8001d16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d1a:	737a      	strb	r2, [r7, #13]
 8001d1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d20:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	02db      	lsls	r3, r3, #11
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7d7b      	ldrb	r3, [r7, #21]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d50:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	6039      	str	r1, [r7, #0]
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fe14 	bl	800299a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e00a      	b.n	8001d8e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fdfc 	bl	8002980 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3f0      	bcc.n	8001d78 <ST7789H2_WriteReg+0x1e>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fdf4 	bl	800299a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001db2:	f000 fdff 	bl	80029b4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001db6:	f000 fdfd 	bl	80029b4 <LCD_IO_ReadData>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2db      	uxtb	r3, r3
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001dc8:	b490      	push	{r4, r7}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2bef      	cmp	r3, #239	; 0xef
 8001dea:	d803      	bhi.n	8001df4 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	8013      	strh	r3, [r2, #0]
 8001df2:	e002      	b.n	8001dfa <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	2bef      	cmp	r3, #239	; 0xef
 8001dfe:	d803      	bhi.n	8001e08 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	8013      	strh	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4413      	add	r3, r2
 8001e14:	2bf0      	cmp	r3, #240	; 0xf0
 8001e16:	dc08      	bgt.n	8001e2a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e2c:	22ef      	movs	r2, #239	; 0xef
 8001e2e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e30:	883a      	ldrh	r2, [r7, #0]
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2bf0      	cmp	r3, #240	; 0xf0
 8001e38:	dc08      	bgt.n	8001e4c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e48:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e4a:	e002      	b.n	8001e52 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e4e:	22ef      	movs	r2, #239	; 0xef
 8001e50:	801a      	strh	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc90      	pop	{r4, r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000180 	.word	0x20000180
 8001e60:	20000182 	.word	0x20000182
 8001e64:	200000b0 	.word	0x200000b0
 8001e68:	200000b2 	.word	0x200000b2

08001e6c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80bb      	strh	r3, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]
 8001e86:	4613      	mov	r3, r2
 8001e88:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fedb 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff ff5d 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	81fb      	strh	r3, [r7, #14]
 8001ea4:	e006      	b.n	8001eb4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fd69 	bl	8002980 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	81fb      	strh	r3, [r7, #14]
 8001eb4:	89fa      	ldrh	r2, [r7, #14]
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3f4      	bcc.n	8001ea6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}

08001ec6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4608      	mov	r0, r1
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80bb      	strh	r3, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	88bb      	ldrh	r3, [r7, #4]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff feae 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	202c      	movs	r0, #44	; 0x2c
 8001ef6:	f7ff ff30 	bl	8001d5a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	e00b      	b.n	8001f18 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	4413      	add	r3, r2
 8001f06:	b299      	uxth	r1, r3
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fecf 	bl	8001cb0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	3301      	adds	r3, #1
 8001f16:	81fb      	strh	r3, [r7, #14]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	883b      	ldrh	r3, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3ef      	bcc.n	8001f00 <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
	...

08001f2c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	603a      	str	r2, [r7, #0]
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <ST7789H2_DrawBitmap+0xe0>)
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <ST7789H2_DrawBitmap+0xe4>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <ST7789H2_DrawBitmap+0xe8>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <ST7789H2_DrawBitmap+0xec>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3304      	adds	r3, #4
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	330a      	adds	r3, #10
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	461a      	mov	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4413      	add	r3, r2
 8001fb0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	89bb      	ldrh	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e01d      	b.n	8001ff8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe3f 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	89fa      	ldrh	r2, [r7, #14]
 8001fe6:	88f8      	ldrh	r0, [r7, #6]
 8001fe8:	f000 f89c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8dd      	bhi.n	8001fbc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200000b0 	.word	0x200000b0
 8002010:	20000180 	.word	0x20000180
 8002014:	200000b2 	.word	0x200000b2
 8002018:	20000182 	.word	0x20000182

0800201c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	4603      	mov	r3, r0
 8002030:	80bb      	strh	r3, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e019      	b.n	8002078 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdfd 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b299      	uxth	r1, r3
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	88f8      	ldrh	r0, [r7, #6]
 8002068:	f000 f85c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3301      	adds	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	88ba      	ldrh	r2, [r7, #4]
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4293      	cmp	r3, r2
 8002084:	d3de      	bcc.n	8002044 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fdd0 	bl	8001c4c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	202e      	movs	r0, #46	; 0x2e
 80020b2:	f7ff fe52 	bl	8001d5a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020b6:	f000 fc7d 	bl	80029b4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020ba:	f000 fc7b 	bl	80029b4 <LCD_IO_ReadData>
 80020be:	4603      	mov	r3, r0
 80020c0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80020c2:	f000 fc77 	bl	80029b4 <LCD_IO_ReadData>
 80020c6:	4603      	mov	r3, r0
 80020c8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	121b      	asrs	r3, r3, #8
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f023 0303 	bic.w	r3, r3, #3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	121b      	asrs	r3, r3, #8
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4611      	mov	r1, r2
 80020fe:	8019      	strh	r1, [r3, #0]
 8002100:	3302      	adds	r3, #2
 8002102:	0c12      	lsrs	r2, r2, #16
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	7c3a      	ldrb	r2, [r7, #16]
 800210a:	f362 0307 	bfi	r3, r2, #0, #8
 800210e:	7c7a      	ldrb	r2, [r7, #17]
 8002110:	f362 230f 	bfi	r3, r2, #8, #8
 8002114:	7cba      	ldrb	r2, [r7, #18]
 8002116:	f362 4317 	bfi	r3, r2, #16, #8
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4603      	mov	r3, r0
 800212e:	81fb      	strh	r3, [r7, #14]
 8002130:	460b      	mov	r3, r1
 8002132:	81bb      	strh	r3, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	202c      	movs	r0, #44	; 0x2c
 8002146:	f7ff fe08 	bl	8001d5a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	e029      	b.n	80021a4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <ST7789H2_DrawRGBHLine+0x98>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4293      	cmp	r3, r2
 800215a:	d320      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <ST7789H2_DrawRGBHLine+0x9c>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	89ba      	ldrh	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d31b      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <ST7789H2_DrawRGBHLine+0xa0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4293      	cmp	r3, r2
 8002170:	d815      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <ST7789H2_DrawRGBHLine+0xa4>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	89ba      	ldrh	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d810      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 800217c:	897a      	ldrh	r2, [r7, #10]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	441a      	add	r2, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	429a      	cmp	r2, r3
 8002186:	d007      	beq.n	8002198 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fbf4 	bl	8002980 <LCD_IO_WriteData>
      }      
      i++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	897a      	ldrh	r2, [r7, #10]
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3ce      	bcc.n	8002150 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000180 	.word	0x20000180
 80021c0:	20000182 	.word	0x20000182
 80021c4:	200000b0 	.word	0x200000b0
 80021c8:	200000b2 	.word	0x200000b2

080021cc <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  while (1);
 80021d0:	e7fe      	b.n	80021d0 <BSP_ErrorHandler+0x4>
	...

080021d4 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80021d8:	4812      	ldr	r0, [pc, #72]	; (8002224 <I2C2_Init+0x50>)
 80021da:	f005 f848 	bl	800726e <HAL_I2C_GetState>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11d      	bne.n	8002220 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <I2C2_Init+0x50>)
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <I2C2_Init+0x54>)
 80021e8:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <I2C2_Init+0x50>)
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <I2C2_Init+0x58>)
 80021ee:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <I2C2_Init+0x50>)
 80021f2:	2270      	movs	r2, #112	; 0x70
 80021f4:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <I2C2_Init+0x50>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <I2C2_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <I2C2_Init+0x50>)
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <I2C2_Init+0x50>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <I2C2_Init+0x50>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <I2C2_Init+0x50>)
 8002216:	f000 f80b 	bl	8002230 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800221a:	4802      	ldr	r0, [pc, #8]	; (8002224 <I2C2_Init+0x50>)
 800221c:	f004 fc20 	bl	8006a60 <HAL_I2C_Init>
  }
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000184 	.word	0x20000184
 8002228:	40005800 	.word	0x40005800
 800222c:	40403e5d 	.word	0x40403e5d

08002230 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0ae      	sub	sp, #184	; 0xb8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a37      	ldr	r2, [pc, #220]	; (800231c <I2C2_MspInit+0xec>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d168      	bne.n	8002314 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8002246:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800224a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4618      	mov	r0, r3
 8002252:	f006 f9a7 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <I2C2_MspInit+0xf0>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a31      	ldr	r2, [pc, #196]	; (8002320 <I2C2_MspInit+0xf0>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <I2C2_MspInit+0xf0>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <I2C2_MspInit+0xf0>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <I2C2_MspInit+0xf0>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <I2C2_MspInit+0xf0>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8002286:	2310      	movs	r3, #16
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8002292:	2301      	movs	r3, #1
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800229e:	2304      	movs	r3, #4
 80022a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80022a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022a8:	4619      	mov	r1, r3
 80022aa:	481e      	ldr	r0, [pc, #120]	; (8002324 <I2C2_MspInit+0xf4>)
 80022ac:	f004 f924 	bl	80064f8 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80022b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80022b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022bc:	4619      	mov	r1, r3
 80022be:	481a      	ldr	r0, [pc, #104]	; (8002328 <I2C2_MspInit+0xf8>)
 80022c0:	f004 f91a 	bl	80064f8 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <I2C2_MspInit+0xf0>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4a15      	ldr	r2, [pc, #84]	; (8002320 <I2C2_MspInit+0xf0>)
 80022ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ce:	6593      	str	r3, [r2, #88]	; 0x58
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <I2C2_MspInit+0xf0>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <I2C2_MspInit+0xf0>)
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <I2C2_MspInit+0xf0>)
 80022e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <I2C2_MspInit+0xf0>)
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <I2C2_MspInit+0xf0>)
 80022ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	2021      	movs	r0, #33	; 0x21
 80022fa:	f002 ff06 	bl	800510a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80022fe:	2021      	movs	r0, #33	; 0x21
 8002300:	f002 ff1f 	bl	8005142 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2022      	movs	r0, #34	; 0x22
 800230a:	f002 fefe 	bl	800510a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800230e:	2022      	movs	r0, #34	; 0x22
 8002310:	f002 ff17 	bl	8005142 <HAL_NVIC_EnableIRQ>
  }
}
 8002314:	bf00      	nop
 8002316:	37b8      	adds	r7, #184	; 0xb8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40005800 	.word	0x40005800
 8002320:	40021000 	.word	0x40021000
 8002324:	48001c00 	.word	0x48001c00
 8002328:	48000400 	.word	0x48000400

0800232c <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <I2C2_DeInit+0x20>)
 8002332:	f004 ff9c 	bl	800726e <HAL_I2C_GetState>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <I2C2_DeInit+0x20>)
 800233e:	f004 fc1e 	bl	8006b7e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8002342:	4802      	ldr	r0, [pc, #8]	; (800234c <I2C2_DeInit+0x20>)
 8002344:	f000 f804 	bl	8002350 <I2C2_MspDeInit>
  }
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000184 	.word	0x20000184

08002350 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <I2C2_MspDeInit+0x8c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d138      	bne.n	80023d4 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <I2C2_MspDeInit+0x90>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <I2C2_MspDeInit+0x90>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <I2C2_MspDeInit+0x90>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <I2C2_MspDeInit+0x90>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <I2C2_MspDeInit+0x90>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <I2C2_MspDeInit+0x90>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8002392:	2110      	movs	r1, #16
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <I2C2_MspDeInit+0x94>)
 8002396:	f004 fa41 	bl	800681c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800239a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239e:	4812      	ldr	r0, [pc, #72]	; (80023e8 <I2C2_MspDeInit+0x98>)
 80023a0:	f004 fa3c 	bl	800681c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ae:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <I2C2_MspDeInit+0x90>)
 80023c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80023c8:	2021      	movs	r0, #33	; 0x21
 80023ca:	f002 fec8 	bl	800515e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80023ce:	2022      	movs	r0, #34	; 0x22
 80023d0:	f002 fec5 	bl	800515e <HAL_NVIC_DisableIRQ>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40005800 	.word	0x40005800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48001c00 	.word	0x48001c00
 80023e8:	48000400 	.word	0x48000400

080023ec <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	4603      	mov	r3, r0
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240e:	b672      	cpsid	i
}
 8002410:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <I2C2_WriteData+0x5c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	8878      	ldrh	r0, [r7, #2]
 8002418:	88ba      	ldrh	r2, [r7, #4]
 800241a:	88f9      	ldrh	r1, [r7, #6]
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	1c7b      	adds	r3, r7, #1
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4603      	mov	r3, r0
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <I2C2_WriteData+0x60>)
 800242a:	f004 fbeb 	bl	8006c04 <HAL_I2C_Mem_Write>
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002432:	b662      	cpsie	i
}
 8002434:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800243c:	f000 f890 	bl	8002560 <I2C2_Error>
  }
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	200000b4 	.word	0x200000b4
 800244c:	20000184 	.word	0x20000184

08002450 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af04      	add	r7, sp, #16
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	460b      	mov	r3, r1
 800245c:	80bb      	strh	r3, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8002466:	2300      	movs	r3, #0
 8002468:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800246a:	b672      	cpsid	i
}
 800246c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <I2C2_ReadData+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	8878      	ldrh	r0, [r7, #2]
 8002474:	88ba      	ldrh	r2, [r7, #4]
 8002476:	88f9      	ldrh	r1, [r7, #6]
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2301      	movs	r3, #1
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f107 030e 	add.w	r3, r7, #14
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4603      	mov	r3, r0
 8002486:	480b      	ldr	r0, [pc, #44]	; (80024b4 <I2C2_ReadData+0x64>)
 8002488:	f004 fcd0 	bl	8006e2c <HAL_I2C_Mem_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002490:	b662      	cpsie	i
}
 8002492:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800249a:	f000 f861 	bl	8002560 <I2C2_Error>
    HAL_Delay(200);
 800249e:	20c8      	movs	r0, #200	; 0xc8
 80024a0:	f002 fd10 	bl	8004ec4 <HAL_Delay>
  }

  return value;
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200000b4 	.word	0x200000b4
 80024b4:	20000184 	.word	0x20000184

080024b8 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80024d0:	88f9      	ldrh	r1, [r7, #6]
 80024d2:	2332      	movs	r3, #50	; 0x32
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <I2C2_isDeviceReady+0x48>)
 80024d8:	f004 fdc2 	bl	8007060 <HAL_I2C_IsDeviceReady>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80024e0:	b662      	cpsie	i
}
 80024e2:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80024ea:	f000 f839 	bl	8002560 <I2C2_Error>
    HAL_Delay(200);
 80024ee:	20c8      	movs	r0, #200	; 0xc8
 80024f0:	f002 fce8 	bl	8004ec4 <HAL_Delay>
  }

  return value;
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000184 	.word	0x20000184

08002504 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af04      	add	r7, sp, #16
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	4603      	mov	r3, r0
 800250e:	81fb      	strh	r3, [r7, #14]
 8002510:	460b      	mov	r3, r1
 8002512:	81bb      	strh	r3, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <I2C2_ReadBuffer+0x54>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	8978      	ldrh	r0, [r7, #10]
 8002526:	89ba      	ldrh	r2, [r7, #12]
 8002528:	89f9      	ldrh	r1, [r7, #14]
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	8c3b      	ldrh	r3, [r7, #32]
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	4809      	ldr	r0, [pc, #36]	; (800255c <I2C2_ReadBuffer+0x58>)
 8002538:	f004 fc78 	bl	8006e2c <HAL_I2C_Mem_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8002540:	b662      	cpsie	i
}
 8002542:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800254a:	f000 f809 	bl	8002560 <I2C2_Error>
  }

  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200000b4 	.word	0x200000b4
 800255c:	20000184 	.word	0x20000184

08002560 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8002564:	f7ff fe32 	bl	80021cc <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <I2C2_Error+0x18>)
 800256a:	f004 fb08 	bl	8006b7e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800256e:	f7ff fe31 	bl	80021d4 <I2C2_Init>
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000184 	.word	0x20000184

0800257c <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8002580:	f7ff fe28 	bl	80021d4 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8002584:	2104      	movs	r1, #4
 8002586:	2084      	movs	r0, #132	; 0x84
 8002588:	f7ff ff96 	bl	80024b8 <I2C2_isDeviceReady>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8002592:	f7ff fe1b 	bl	80021cc <BSP_ErrorHandler>
  }
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80025ba:	2340      	movs	r3, #64	; 0x40
 80025bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	4619      	mov	r1, r3
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <MFX_IO_DeInit+0x70>)
 80025d2:	f003 ff91 	bl	80064f8 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80025d6:	2017      	movs	r0, #23
 80025d8:	f002 fdc1 	bl	800515e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MFX_IO_DeInit+0x6c>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 80025f4:	2120      	movs	r1, #32
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MFX_IO_DeInit+0x74>)
 80025f8:	f004 f910 	bl	800681c <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 80025fc:	f7ff fe96 	bl	800232c <I2C2_DeInit>
}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	48001c00 	.word	0x48001c00
 8002610:	48000800 	.word	0x48000800

08002614 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MFX_IO_ITConfig+0x54>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <MFX_IO_ITConfig+0x54>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MFX_IO_ITConfig+0x54>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8002632:	2320      	movs	r3, #32
 8002634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800263e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002642:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4808      	ldr	r0, [pc, #32]	; (800266c <MFX_IO_ITConfig+0x58>)
 800264a:	f003 ff55 	bl	80064f8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800264e:	220f      	movs	r2, #15
 8002650:	210f      	movs	r1, #15
 8002652:	2017      	movs	r0, #23
 8002654:	f002 fd59 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8002658:	2017      	movs	r0, #23
 800265a:	f002 fd72 	bl	8005142 <HAL_NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	48000800 	.word	0x48000800

08002670 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MFX_IO_EnableWakeupPin+0x40>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <MFX_IO_EnableWakeupPin+0x40>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MFX_IO_EnableWakeupPin+0x40>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002692:	2301      	movs	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <MFX_IO_EnableWakeupPin+0x44>)
 80026a4:	f003 ff28 	bl	80064f8 <HAL_GPIO_Init>
}
 80026a8:	bf00      	nop
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	48001c00 	.word	0x48001c00

080026b8 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	4806      	ldr	r0, [pc, #24]	; (80026dc <MFX_IO_Wakeup+0x24>)
 80026c2:	f004 f99d 	bl	8006a00 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f002 fbfc 	bl	8004ec4 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2140      	movs	r1, #64	; 0x40
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <MFX_IO_Wakeup+0x24>)
 80026d2:	f004 f995 	bl	8006a00 <HAL_GPIO_WritePin>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	48001c00 	.word	0x48001c00

080026e0 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
 80026ea:	460b      	mov	r3, r1
 80026ec:	717b      	strb	r3, [r7, #5]
 80026ee:	4613      	mov	r3, r2
 80026f0:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 80026f2:	797b      	ldrb	r3, [r7, #5]
 80026f4:	b299      	uxth	r1, r3
 80026f6:	793b      	ldrb	r3, [r7, #4]
 80026f8:	88f8      	ldrh	r0, [r7, #6]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f7ff fe76 	bl	80023ec <I2C2_WriteData>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	4613      	mov	r3, r2
 8002716:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8002718:	797b      	ldrb	r3, [r7, #5]
 800271a:	b299      	uxth	r1, r3
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2201      	movs	r2, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fe95 	bl	8002450 <I2C2_ReadData>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	461a      	mov	r2, r3
 800273a:	4603      	mov	r3, r0
 800273c:	81fb      	strh	r3, [r7, #14]
 800273e:	460b      	mov	r3, r1
 8002740:	737b      	strb	r3, [r7, #13]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002746:	7b7b      	ldrb	r3, [r7, #13]
 8002748:	b299      	uxth	r1, r3
 800274a:	89f8      	ldrh	r0, [r7, #14]
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2201      	movs	r2, #1
 8002754:	f7ff fed6 	bl	8002504 <I2C2_ReadBuffer>
 8002758:	4603      	mov	r3, r0
 800275a:	b29b      	uxth	r3, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f002 fba9 	bl	8004ec4 <HAL_Delay>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 8002784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002786:	4a37      	ldr	r2, [pc, #220]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6513      	str	r3, [r2, #80]	; 0x50
 800278e:	4b35      	ldr	r3, [pc, #212]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800279a:	4b32      	ldr	r3, [pc, #200]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a31      	ldr	r2, [pc, #196]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027b8:	f043 0310 	orr.w	r3, r3, #16
 80027bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	4a19      	ldr	r2, [pc, #100]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	; 0x58
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <FMC_BANK1_MspInit+0xe8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002812:	f005 f845 	bl	80078a0 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8002822:	230c      	movs	r3, #12
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8002826:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800282a:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <FMC_BANK1_MspInit+0xec>)
 8002834:	f003 fe60 	bl	80064f8 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8002838:	f64f 7380 	movw	r3, #65408	; 0xff80
 800283c:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <FMC_BANK1_MspInit+0xf0>)
 8002846:	f003 fe57 	bl	80064f8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800284a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800284e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4804      	ldr	r0, [pc, #16]	; (8002868 <FMC_BANK1_MspInit+0xec>)
 8002858:	f003 fe4e 	bl	80064f8 <HAL_GPIO_Init>

}
 800285c:	bf00      	nop
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	48000c00 	.word	0x48000c00
 800286c:	48001000 	.word	0x48001000

08002870 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0a4      	sub	sp, #144	; 0x90
 8002874:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8002876:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800287a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <FMC_BANK1_Init+0xa8>)
 800287e:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8002880:	2301      	movs	r3, #1
 8002882:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8002888:	2301      	movs	r3, #1
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8002890:	2302      	movs	r3, #2
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8002894:	2302      	movs	r3, #2
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8002898:	2300      	movs	r3, #0
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800289c:	2305      	movs	r3, #5
 800289e:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80028a4:	2303      	movs	r3, #3
 80028a6:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 80028c0:	2300      	movs	r3, #0
 80028c2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80028c4:	2310      	movs	r3, #16
 80028c6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 80028d0:	2300      	movs	r3, #0
 80028d2:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 80028f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80028f6:	2300      	movs	r3, #0
 80028f8:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 80028fa:	f7ff ff3f 	bl	800277c <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 80028fe:	463a      	mov	r2, r7
 8002900:	f107 0120 	add.w	r1, r7, #32
 8002904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002908:	4618      	mov	r0, r3
 800290a:	f006 fb15 	bl	8008f38 <HAL_SRAM_Init>

}
 800290e:	bf00      	nop
 8002910:	3790      	adds	r7, #144	; 0x90
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	a0000104 	.word	0xa0000104

0800291c <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <FMC_BANK1_WriteData+0x1c>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	8013      	strh	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	60080000 	.word	0x60080000

0800293c <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8002946:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	b292      	uxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <FMC_BANK1_ReadData+0x14>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	60080000 	.word	0x60080000

08002974 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8002978:	f7ff ff7a 	bl	8002870 <FMC_BANK1_Init>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ffc5 	bl	800291c <FMC_BANK1_WriteData>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ffc8 	bl	800293c <FMC_BANK1_WriteReg>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80029b8:	f7ff ffd0 	bl	800295c <FMC_BANK1_ReadData>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f002 fa7a 	bl	8004ec4 <HAL_Delay>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OV5640_IO_t              IOCtx;
	static OV5640_Object_t   OV5640Obj;

	/* Configure the audio driver */
	IOCtx.Address     = 0x78U; //# CAMERA_OV5640_ADDRESS
 80029e6:	2378      	movs	r3, #120	; 0x78
 80029e8:	833b      	strh	r3, [r7, #24]
	IOCtx.Init        = I2C2_Init;
 80029ea:	4b54      	ldr	r3, [pc, #336]	; (8002b3c <BSP_CAMERA_Init+0x164>)
 80029ec:	613b      	str	r3, [r7, #16]
	IOCtx.DeInit      = I2C2_DeInit;
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <BSP_CAMERA_Init+0x168>)
 80029f0:	617b      	str	r3, [r7, #20]

  /* Get the DCMI handle structure */
  phdcmi = &hdcmi;
 80029f2:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <BSP_CAMERA_Init+0x16c>)
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize the IO functionalities */
  BSP_IO_Init();
 80029f6:	f000 f9d5 	bl	8002da4 <BSP_IO_Init>


  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	609a      	str	r2, [r3, #8]
  phdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
  phdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  phdcmi->Init.JPEGMode			= DCMI_JPEG_ENABLE;
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	621a      	str	r2, [r3, #32]
  phdcmi->Instance              = DCMI;
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	4a45      	ldr	r2, [pc, #276]	; (8002b48 <BSP_CAMERA_Init+0x170>)
 8002a34:	601a      	str	r2, [r3, #0]

  /* Camera initialization */
  BSP_CAMERA_MspInit(&hdcmi, NULL);
 8002a36:	2100      	movs	r1, #0
 8002a38:	4842      	ldr	r0, [pc, #264]	; (8002b44 <BSP_CAMERA_Init+0x16c>)
 8002a3a:	f000 f8a5 	bl	8002b88 <BSP_CAMERA_MspInit>

  uint32_t CameraId;
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4619      	mov	r1, r3
 8002a44:	4841      	ldr	r0, [pc, #260]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002a46:	f001 f975 	bl	8003d34 <OV5640_RegisterBusIO>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <BSP_CAMERA_Init+0x7e>
  {
	  printf("OV5640_RegisterBusIO ERROR!\r\n");
 8002a50:	483f      	ldr	r0, [pc, #252]	; (8002b50 <BSP_CAMERA_Init+0x178>)
 8002a52:	f008 f987 	bl	800ad64 <puts>
  }
  /* Read ID of Camera module via I2C */
  if (OV5640_ReadID(&OV5640Obj, &CameraId) == OV5640_ID)
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	483b      	ldr	r0, [pc, #236]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002a5e:	f001 fc29 	bl	80042b4 <OV5640_ReadID>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f245 6240 	movw	r2, #22080	; 0x5640
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d15d      	bne.n	8002b28 <BSP_CAMERA_Init+0x150>
  {
    /* Initialize the camera driver structure */
    //camera_drv = &ov5640_drv;
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <BSP_CAMERA_Init+0x17c>)
 8002a6e:	2278      	movs	r2, #120	; 0x78
 8002a70:	601a      	str	r2, [r3, #0]
    /* DCMI Initialization */
    HAL_DCMI_Init(phdcmi);
 8002a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a74:	f002 fb8e 	bl	8005194 <HAL_DCMI_Init>
    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d12d      	bne.n	8002ada <BSP_CAMERA_Init+0x102>
    {
      /* For 240x240 resolution, the OV9655 sensor is set to QVGA resolution
       * as OV9655 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      OV5640_Init(&OV5640Obj, RESOLUTION_R320x240, OV5640_RGB565);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2101      	movs	r1, #1
 8002a82:	4832      	ldr	r0, [pc, #200]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002a84:	f001 f97c 	bl	8003d80 <OV5640_Init>


      HAL_DCMI_ConfigCROP(phdcmi,
 8002a88:	23ef      	movs	r3, #239	; 0xef
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f240 13df 	movw	r3, #479	; 0x1df
 8002a90:	2200      	movs	r2, #0
 8002a92:	2128      	movs	r1, #40	; 0x28
 8002a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a96:	f002 fdcb 	bl	8005630 <HAL_DCMI_ConfigCrop>
                          40,                 /* Crop in the middle of the VGA picture */
                          0,                 /* Same height (same number of lines: no need to crop vertically) */
                          (240 * 2) - 1,     /* 2 pixels clock needed to capture one pixel */
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9c:	f002 fe34 	bl	8005708 <HAL_DCMI_EnableCrop>


      /* Set the RGB565 mode */
      MFX_IO_Write(CameraHwAddress, 0x12 /*OV9655_COM7*/, 0x63);
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <BSP_CAMERA_Init+0x17c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2263      	movs	r2, #99	; 0x63
 8002aa8:	2112      	movs	r1, #18
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fe18 	bl	80026e0 <MFX_IO_Write>
      MFX_IO_Write(CameraHwAddress, 0x40 /*OV9655_COM15*/, 0x10);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <BSP_CAMERA_Init+0x17c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	2140      	movs	r1, #64	; 0x40
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe10 	bl	80026e0 <MFX_IO_Write>
      /* Invert the HRef signal */
      MFX_IO_Write(CameraHwAddress, 0x15 /*OV9655_COM10*/, 0x08);
 8002ac0:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <BSP_CAMERA_Init+0x17c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	2115      	movs	r1, #21
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fe08 	bl	80026e0 <MFX_IO_Write>
      HAL_Delay(500);
 8002ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad4:	f002 f9f6 	bl	8004ec4 <HAL_Delay>
 8002ad8:	e00b      	b.n	8002af2 <BSP_CAMERA_Init+0x11a>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <BSP_CAMERA_Init+0x180>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <BSP_CAMERA_Init+0x17c>)
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 8002aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aee:	f002 fde1 	bl	80056b4 <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <BSP_CAMERA_Init+0x184>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6013      	str	r3, [r2, #0]

    OV5640_SetLightMode(&OV5640Obj, OV5640_LIGHT_AUTO);
 8002af8:	2100      	movs	r1, #0
 8002afa:	4814      	ldr	r0, [pc, #80]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002afc:	f001 fc08 	bl	8004310 <OV5640_SetLightMode>
    OV5640_SetSaturation(&OV5640Obj, 0);
 8002b00:	2100      	movs	r1, #0
 8002b02:	4812      	ldr	r0, [pc, #72]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002b04:	f001 fd54 	bl	80045b0 <OV5640_SetSaturation>
    OV5640_SetBrightness(&OV5640Obj, 0);
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4810      	ldr	r0, [pc, #64]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002b0c:	f001 fd08 	bl	8004520 <OV5640_SetBrightness>
    OV5640_SetHueDegree(&OV5640Obj, 1);
 8002b10:	2101      	movs	r1, #1
 8002b12:	480e      	ldr	r0, [pc, #56]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002b14:	f001 fd92 	bl	800463c <OV5640_SetHueDegree>

    OV5640_SetPixelFormat(&OV5640Obj, OV5640_RGB565);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	480c      	ldr	r0, [pc, #48]	; (8002b4c <BSP_CAMERA_Init+0x174>)
 8002b1c:	f001 f9a0 	bl	8003e60 <OV5640_SetPixelFormat>



    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b26:	e002      	b.n	8002b2e <BSP_CAMERA_Init+0x156>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return status;
 8002b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080021d5 	.word	0x080021d5
 8002b40:	0800232d 	.word	0x0800232d
 8002b44:	20000270 	.word	0x20000270
 8002b48:	50050000 	.word	0x50050000
 8002b4c:	200001e4 	.word	0x200001e4
 8002b50:	0800b614 	.word	0x0800b614
 8002b54:	200001e0 	.word	0x200001e0
 8002b58:	200001d8 	.word	0x200001d8
 8002b5c:	200001dc 	.word	0x200001dc

08002b60 <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Suspend(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Suspend the Camera Capture */
  HAL_DCMI_Suspend(&hdcmi);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <BSP_CAMERA_Suspend+0x10>)
 8002b66:	f002 fc6d 	bl	8005444 <HAL_DCMI_Suspend>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000270 	.word	0x20000270

08002b74 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Resume(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Start the Camera Capture */
  HAL_DCMI_Resume(&hdcmi);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <BSP_CAMERA_Resume+0x10>)
 8002b7a:	f002 fcb0 	bl	80054de <HAL_DCMI_Resume>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000270 	.word	0x20000270

08002b88 <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8002b92:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	4a63      	ldr	r2, [pc, #396]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	623b      	str	r3, [r7, #32]
 8002ba8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6493      	str	r3, [r2, #72]	; 0x48
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	4a57      	ldr	r2, [pc, #348]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002be0:	f043 0310 	orr.w	r3, r3, #16
 8002be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be6:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b49      	ldr	r3, [pc, #292]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 8002c22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c26:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f005 fb62 	bl	80082f4 <HAL_RCC_MCOConfig>
  __HAL_RCC_HSI48_ENABLE();
 8002c30:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c36:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <BSP_CAMERA_MspInit+0x19c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  HAL_Delay(10); // HSI48 should start in 10ms
 8002c40:	200a      	movs	r0, #10
 8002c42:	f002 f93f 	bl	8004ec4 <HAL_Delay>


  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_5;
 8002c46:	2320      	movs	r3, #32
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002c56:	230a      	movs	r3, #10
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4831      	ldr	r0, [pc, #196]	; (8002d28 <BSP_CAMERA_MspInit+0x1a0>)
 8002c62:	f003 fc49 	bl	80064f8 <HAL_GPIO_Init>


  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | \
 8002c66:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002c78:	230a      	movs	r3, #10
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	482a      	ldr	r0, [pc, #168]	; (8002d2c <BSP_CAMERA_MspInit+0x1a4>)
 8002c84:	f003 fc38 	bl	80064f8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8002c88:	23b0      	movs	r3, #176	; 0xb0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002c98:	230a      	movs	r3, #10
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4823      	ldr	r0, [pc, #140]	; (8002d30 <BSP_CAMERA_MspInit+0x1a8>)
 8002ca4:	f003 fc28 	bl	80064f8 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <BSP_CAMERA_MspInit+0x1b0>)
 8002cac:	601a      	str	r2, [r3, #0]

  hdma_handler.Init.Request             = DMA_REQUEST_0;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd4:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cd8:	2220      	movs	r2, #32
 8002cda:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <BSP_CAMERA_MspInit+0x1ac>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6293      	str	r3, [r2, #40]	; 0x28

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	2055      	movs	r0, #85	; 0x55
 8002cf6:	f002 fa08 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002cfa:	2055      	movs	r0, #85	; 0x55
 8002cfc:	f002 fa21 	bl	8005142 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	210f      	movs	r1, #15
 8002d04:	2044      	movs	r0, #68	; 0x44
 8002d06:	f002 fa00 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002d0a:	2044      	movs	r0, #68	; 0x44
 8002d0c:	f002 fa19 	bl	8005142 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fea3 	bl	8005a60 <HAL_DMA_Init>
}
 8002d1a:	bf00      	nop
 8002d1c:	3738      	adds	r7, #56	; 0x38
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48001000 	.word	0x48001000
 8002d2c:	48001c00 	.word	0x48001c00
 8002d30:	48002000 	.word	0x48002000
 8002d34:	2000020c 	.word	0x2000020c
 8002d38:	4002046c 	.word	0x4002046c

08002d3c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8002d44:	f000 f804 	bl	8002d50 <BSP_CAMERA_LineEventCallback>
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8002d66:	f000 f804 	bl	8002d72 <BSP_CAMERA_VsyncEventCallback>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8002d88:	f000 f804 	bl	8002d94 <BSP_CAMERA_ErrorCallback>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <BSP_IO_Init+0x78>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d128      	bne.n	8002e0c <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <BSP_IO_Init+0x7c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2084      	movs	r0, #132	; 0x84
 8002dc0:	4798      	blx	r3

    HAL_Delay(10);
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f002 f87e 	bl	8004ec4 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <BSP_IO_Init+0x80>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2084      	movs	r0, #132	; 0x84
 8002dce:	4798      	blx	r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	2b7b      	cmp	r3, #123	; 0x7b
 8002dd8:	d002      	beq.n	8002de0 <BSP_IO_Init+0x3c>
 8002dda:	79bb      	ldrb	r3, [r7, #6]
 8002ddc:	2b79      	cmp	r3, #121	; 0x79
 8002dde:	d117      	bne.n	8002e10 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <BSP_IO_Init+0x78>)
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <BSP_IO_Init+0x80>)
 8002de4:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <BSP_IO_Init+0x78>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00f      	beq.n	8002e10 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <BSP_IO_Init+0x78>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2084      	movs	r0, #132	; 0x84
 8002df8:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <BSP_IO_Init+0x78>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <BSP_IO_Init+0x84>)
 8002e02:	2084      	movs	r0, #132	; 0x84
 8002e04:	4798      	blx	r3

        ret = IO_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	71fb      	strb	r3, [r7, #7]
 8002e0a:	e001      	b.n	8002e10 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8002e10:	79fb      	ldrb	r3, [r7, #7]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000254 	.word	0x20000254
 8002e20:	2000002c 	.word	0x2000002c
 8002e24:	20000000 	.word	0x20000000
 8002e28:	000301ff 	.word	0x000301ff

08002e2c <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <BSP_IO_ConfigPin+0x30>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <BSP_IO_ConfigPin+0x34>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	2084      	movs	r0, #132	; 0x84
 8002e50:	4798      	blx	r3

  return IO_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	000301ff 	.word	0x000301ff
 8002e60:	20000254 	.word	0x20000254

08002e64 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <BSP_IO_WritePin+0x30>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <BSP_IO_WritePin+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	2084      	movs	r0, #132	; 0x84
 8002e88:	4798      	blx	r3

}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	000301ff 	.word	0x000301ff
 8002e98:	20000254 	.word	0x20000254

08002e9c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f000 f803 	bl	8002eac <BSP_LCD_InitEx>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8002ebc:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <BSP_LCD_InitEx+0xd4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e054      	b.n	8002f74 <BSP_LCD_InitEx+0xc8>
  }
  else
  {
    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8002eca:	f000 f8b3 	bl	8003034 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	482c      	ldr	r0, [pc, #176]	; (8002f84 <BSP_LCD_InitEx+0xd8>)
 8002ed4:	f003 fd94 	bl	8006a00 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <BSP_LCD_InitEx+0xdc>)
 8002eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ede:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <BSP_LCD_InitEx+0xdc>)
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <BSP_LCD_InitEx+0xe0>)
 8002ee4:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <BSP_LCD_InitEx+0xdc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <BSP_LCD_InitEx+0xe4>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <BSP_LCD_InitEx+0x5a>
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <BSP_LCD_InitEx+0xe8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <BSP_LCD_InitEx+0x5a>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002efc:	2201      	movs	r2, #1
 8002efe:	2101      	movs	r1, #1
 8002f00:	4825      	ldr	r0, [pc, #148]	; (8002f98 <BSP_LCD_InitEx+0xec>)
 8002f02:	f003 fd7d 	bl	8006a00 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8002f06:	f000 f851 	bl	8002fac <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <BSP_LCD_InitEx+0xf0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4798      	blx	r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b85      	cmp	r3, #133	; 0x85
 8002f14:	d12e      	bne.n	8002f74 <BSP_LCD_InitEx+0xc8>
    {
      LcdDrv = &ST7789H2_drv;
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <BSP_LCD_InitEx+0xf4>)
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <BSP_LCD_InitEx+0xf0>)
 8002f1a:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <BSP_LCD_InitEx+0xf4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8002f24:	2200      	movs	r2, #0
 8002f26:	2100      	movs	r1, #0
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	f7fe ff16 	bl	8001d5a <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	e006      	b.n	8002f42 <BSP_LCD_InitEx+0x96>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8002f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f38:	f7ff fd22 	bl	8002980 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8002f48:	d3f4      	bcc.n	8002f34 <BSP_LCD_InitEx+0x88>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d106      	bne.n	8002f5e <BSP_LCD_InitEx+0xb2>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fe fe00 	bl	8001b56 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <BSP_LCD_InitEx+0xf8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <BSP_LCD_InitEx+0xb8>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <BSP_LCD_InitEx+0xf8>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f64:	4810      	ldr	r0, [pc, #64]	; (8002fa8 <BSP_LCD_InitEx+0xfc>)
 8002f66:	f000 f841 	bl	8002fec <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <BSP_LCD_InitEx+0xd4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000258 	.word	0x20000258
 8002f84:	48001c00 	.word	0x48001c00
 8002f88:	20000260 	.word	0x20000260
 8002f8c:	200000b8 	.word	0x200000b8
 8002f90:	2000025c 	.word	0x2000025c
 8002f94:	2000025d 	.word	0x2000025d
 8002f98:	48002000 	.word	0x48002000
 8002f9c:	20000078 	.word	0x20000078
 8002fa0:	2000026c 	.word	0x2000026c
 8002fa4:	200000c8 	.word	0x200000c8
 8002fa8:	200000c0 	.word	0x200000c0

08002fac <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2004      	movs	r0, #4
 8002fb4:	f7ff ff56 	bl	8002e64 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002fb8:	2005      	movs	r0, #5
 8002fba:	f001 ff83 	bl	8004ec4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2004      	movs	r0, #4
 8002fc2:	f7ff ff4f 	bl	8002e64 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002fc6:	200a      	movs	r0, #10
 8002fc8:	f001 ff7c 	bl	8004ec4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2004      	movs	r0, #4
 8002fd0:	f7ff ff48 	bl	8002e64 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002fd4:	2014      	movs	r0, #20
 8002fd6:	f001 ff75 	bl	8004ec4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2004      	movs	r0, #4
 8002fde:	f7ff ff41 	bl	8002e64 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002fe2:	200a      	movs	r0, #10
 8002fe4:	f001 ff6e 	bl	8004ec4 <HAL_Delay>
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}

08002fec <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <BSP_LCD_SetFont+0x1c>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6093      	str	r3, [r2, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000260 	.word	0x20000260

0800300c <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <BSP_LCD_DisplayOn+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4798      	blx	r3
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	2000026c 	.word	0x2000026c

08003020 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <BSP_LCD_DisplayOff+0x10>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4798      	blx	r3
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	2000026c 	.word	0x2000026c

08003034 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8003082:	f7ff fe8f 	bl	8002da4 <BSP_IO_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800308c:	f7ff f89e 	bl	80021cc <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8003090:	2101      	movs	r1, #1
 8003092:	2004      	movs	r0, #4
 8003094:	f7ff feca 	bl	8002e2c <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003098:	2301      	movs	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800309c:	2301      	movs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	4619      	mov	r1, r3
 80030b2:	480c      	ldr	r0, [pc, #48]	; (80030e4 <BSP_LCD_MspInit+0xb0>)
 80030b4:	f003 fa20 	bl	80064f8 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4619      	mov	r1, r3
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <BSP_LCD_MspInit+0xb4>)
 80030d4:	f003 fa10 	bl	80064f8 <HAL_GPIO_Init>
}
 80030d8:	bf00      	nop
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	48002000 	.word	0x48002000
 80030e8:	48001c00 	.word	0x48001c00

080030ec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Error_Handler(void);

int _write(int file, char *ptr, int len) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	2364      	movs	r3, #100	; 0x64
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <_write+0x24>)
 8003102:	f005 ffaf 	bl	8009064 <HAL_UART_Transmit>
 8003106:	4603      	mov	r3, r0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000374 	.word	0x20000374

08003114 <print_startup_msg>:

static void print_startup_msg(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <print_startup_msg+0x2c>)
 800311a:	f007 fe23 	bl	800ad64 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 800311e:	4909      	ldr	r1, [pc, #36]	; (8003144 <print_startup_msg+0x30>)
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <print_startup_msg+0x34>)
 8003122:	f007 fd99 	bl	800ac58 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 8003126:	4909      	ldr	r1, [pc, #36]	; (800314c <print_startup_msg+0x38>)
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <print_startup_msg+0x3c>)
 800312a:	f007 fd95 	bl	800ac58 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 800312e:	4909      	ldr	r1, [pc, #36]	; (8003154 <print_startup_msg+0x40>)
 8003130:	4809      	ldr	r0, [pc, #36]	; (8003158 <print_startup_msg+0x44>)
 8003132:	f007 fd91 	bl	800ac58 <iprintf>
  printf("******************************************\r\n");
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <print_startup_msg+0x2c>)
 8003138:	f007 fe14 	bl	800ad64 <puts>
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	0800b680 	.word	0x0800b680
 8003144:	0800b6ac 	.word	0x0800b6ac
 8003148:	0800b6b8 	.word	0x0800b6b8
 800314c:	0800b6d4 	.word	0x0800b6d4
 8003150:	0800b6d8 	.word	0x0800b6d8
 8003154:	0800b6f8 	.word	0x0800b6f8
 8003158:	0800b704 	.word	0x0800b704

0800315c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 8003166:	f001 fea1 	bl	8004eac <HAL_GetTick>
 800316a:	4603      	mov	r3, r0
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_GPIO_EXTI_Callback+0x40>)
 800316e:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_GPIO_EXTI_Callback+0x40>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2bfa      	cmp	r3, #250	; 0xfa
 800317c:	d90a      	bls.n	8003194 <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd faf4 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GPIO_EXTI_Callback+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8003192:	6013      	str	r3, [r2, #0]
	}


}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2001c628 	.word	0x2001c628
 80031a0:	2001c62c 	.word	0x2001c62c
 80031a4:	200003fc 	.word	0x200003fc

080031a8 <LCD_ImagePreparation>:
  * @param  xSize: image width (in pixels)
  * @param  ySize: image height (in pixels)
  * @retval None
  */
static void LCD_ImagePreparation(uint16_t x0, uint16_t y0, uint16_t xSize, uint16_t ySize)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	4603      	mov	r3, r0
 80031bc:	80bb      	strh	r3, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
 80031c2:	4613      	mov	r3, r2
 80031c4:	803b      	strh	r3, [r7, #0]
  /* CASET: Column Address Set */
  LCD_IO_WriteReg(ST7789H2_CASET);
 80031c6:	202a      	movs	r0, #42	; 0x2a
 80031c8:	f7ff fbe7 	bl	800299a <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff fbd7 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fbd3 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff fbd0 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0 + xSize -1);
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	4413      	add	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fbc7 	bl	8002980 <LCD_IO_WriteData>
  /* RASET: Row Address Set */
  LCD_IO_WriteReg(ST7789H2_RASET);
 80031f2:	202b      	movs	r0, #43	; 0x2b
 80031f4:	f7ff fbd1 	bl	800299a <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff fbc1 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0);
 80031fe:	88bb      	ldrh	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fbbd 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 8003206:	2000      	movs	r0, #0
 8003208:	f7ff fbba 	bl	8002980 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0 + ySize -1);
 800320c:	88ba      	ldrh	r2, [r7, #4]
 800320e:	883b      	ldrh	r3, [r7, #0]
 8003210:	4413      	add	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fbb1 	bl	8002980 <LCD_IO_WriteData>

  /* Prepare to write to LCD RAM */
  LCD_IO_WriteReg(ST7789H2_WRITE_RAM);
 800321e:	202c      	movs	r0, #44	; 0x2c
 8003220:	f7ff fbbb 	bl	800299a <LCD_IO_WriteReg>
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <LCD_Write>:
  * @param  DestAddress: LCD RAM address
  * @param  TransferSize: image size (in pixels)
  * @retval HAL status
  */
static HAL_StatusTypeDef LCD_Write(uint32_t OrigAddress, uint32_t DestAddress, uint32_t TransferSize)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Force 1 pixel per line and width in pixels x height in pixels   */
  /* as number of lines to align DMA2D transfer to LCD configuration */
  if (HAL_OK != HAL_DMA2D_Start_IT(&hdma2d, OrigAddress, DestAddress, 1, TransferSize))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2301      	movs	r3, #1
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <LCD_Write+0x30>)
 8003244:	f002 fedb 	bl	8005ffe <HAL_DMA2D_Start_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <LCD_Write+0x26>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LCD_Write+0x28>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000031c 	.word	0x2000031c

08003260 <HAL_DCMI_FrameEventCallback>:
  * @param  None
  * @retval None
  */

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	//printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
	LCD_ImagePreparation(0, 0, ST7789H2_LCD_PIXEL_WIDTH, ST7789H2_LCD_PIXEL_HEIGHT);
 8003268:	23f0      	movs	r3, #240	; 0xf0
 800326a:	22f0      	movs	r2, #240	; 0xf0
 800326c:	2100      	movs	r1, #0
 800326e:	2000      	movs	r0, #0
 8003270:	f7ff ff9a 	bl	80031a8 <LCD_ImagePreparation>

	/* Write data (through DMA2D) */
	hal_status = LCD_Write((uint32_t) (&pBuffer), (uint32_t)&(LCD_ADDR->REG), ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT);
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_DCMI_FrameEventCallback+0x40>)
 8003276:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800327a:	490a      	ldr	r1, [pc, #40]	; (80032a4 <HAL_DCMI_FrameEventCallback+0x44>)
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffd5 	bl	800322c <LCD_Write>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_DCMI_FrameEventCallback+0x48>)
 8003288:	701a      	strb	r2, [r3, #0]
	if(hal_status != HAL_OK)Error_Handler();
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_DCMI_FrameEventCallback+0x48>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_DCMI_FrameEventCallback+0x36>
 8003292:	f000 fd31 	bl	8003cf8 <Error_Handler>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000428 	.word	0x20000428
 80032a4:	60080000 	.word	0x60080000
 80032a8:	200003f8 	.word	0x200003f8

080032ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032b2:	f001 fd92 	bl	8004dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b6:	f000 f93d 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032ba:	f000 fa21 	bl	8003700 <MX_GPIO_Init>
  //MX_DMA_Init();
  MX_USART2_UART_Init();
 80032be:	f000 f9ef 	bl	80036a0 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 80032c2:	f000 f9b5 	bl	8003630 <MX_DMA2D_Init>
  //MX_FMC_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 80032c6:	f000 f98e 	bl	80035e6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 80032ca:	2114      	movs	r1, #20
 80032cc:	4888      	ldr	r0, [pc, #544]	; (80034f0 <main+0x244>)
 80032ce:	f7fd f9ed 	bl	80006ac <ring_buffer_init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <main+0x248>)
 80032d6:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 80032d8:	f7ff ff1c 	bl	8003114 <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 80032dc:	f7ff fd62 	bl	8002da4 <BSP_IO_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  if(ret != IO_OK)  printf_dbg("Expander Error!!\r\n");
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <main+0x62>
 80032ea:	4b83      	ldr	r3, [pc, #524]	; (80034f8 <main+0x24c>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f007 fcb2 	bl	800ac58 <iprintf>
 80032f4:	4b81      	ldr	r3, [pc, #516]	; (80034fc <main+0x250>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f007 fcad 	bl	800ac58 <iprintf>
 80032fe:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <main+0x24c>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4618      	mov	r0, r3
 8003304:	f007 fca8 	bl	800ac58 <iprintf>
 8003308:	487d      	ldr	r0, [pc, #500]	; (8003500 <main+0x254>)
 800330a:	f007 fd2b 	bl	800ad64 <puts>

  /* LCD initialization */
  ret =BSP_LCD_Init();
 800330e:	f7ff fdc5 	bl	8002e9c <BSP_LCD_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if(ret != LCD_OK) printf_dbg("LCD Error!!\r\n");
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <main+0x94>
 800331c:	4b76      	ldr	r3, [pc, #472]	; (80034f8 <main+0x24c>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4618      	mov	r0, r3
 8003322:	f007 fc99 	bl	800ac58 <iprintf>
 8003326:	4b75      	ldr	r3, [pc, #468]	; (80034fc <main+0x250>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f007 fc94 	bl	800ac58 <iprintf>
 8003330:	4b71      	ldr	r3, [pc, #452]	; (80034f8 <main+0x24c>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4618      	mov	r0, r3
 8003336:	f007 fc8f 	bl	800ac58 <iprintf>
 800333a:	4872      	ldr	r0, [pc, #456]	; (8003504 <main+0x258>)
 800333c:	f007 fd12 	bl	800ad64 <puts>

  BSP_CAMERA_Init(RESOLUTION_R320x240);
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff fb49 	bl	80029d8 <BSP_CAMERA_Init>
  if(ret != CAMERA_OK) printf_dbg("Camera Error!\r\n");
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d011      	beq.n	8003370 <main+0xc4>
 800334c:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <main+0x24c>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4618      	mov	r0, r3
 8003352:	f007 fc81 	bl	800ac58 <iprintf>
 8003356:	4b69      	ldr	r3, [pc, #420]	; (80034fc <main+0x250>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f007 fc7c 	bl	800ac58 <iprintf>
 8003360:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <main+0x24c>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4618      	mov	r0, r3
 8003366:	f007 fc77 	bl	800ac58 <iprintf>
 800336a:	4867      	ldr	r0, [pc, #412]	; (8003508 <main+0x25c>)
 800336c:	f007 fcfa 	bl	800ad64 <puts>

  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
    HAL_Delay(1000);
 8003370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003374:	f001 fda6 	bl	8004ec4 <HAL_Delay>

    /*##-4- Camera Continuous capture start in QVGA resolution ############################*/
    /* Disable unwanted HSYNC (IT_LINE)/VSYNC interrupts */
    __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <main+0x260>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b63      	ldr	r3, [pc, #396]	; (800350c <main+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0218 	bic.w	r2, r2, #24
 8003386:	60da      	str	r2, [r3, #12]

    hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,  (uint32_t)pBuffer , (ST7789H2_LCD_PIXEL_WIDTH*ST7789H2_LCD_PIXEL_HEIGHT)/2 );
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <main+0x264>)
 800338a:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 800338e:	2100      	movs	r1, #0
 8003390:	485e      	ldr	r0, [pc, #376]	; (800350c <main+0x260>)
 8003392:	f001 ff85 	bl	80052a0 <HAL_DCMI_Start_DMA>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <main+0x268>)
 800339c:	701a      	strb	r2, [r3, #0]
    if(hal_status != HAL_OK)Error_Handler();
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <main+0x268>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <main+0xfe>
 80033a6:	f000 fca7 	bl	8003cf8 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 80033aa:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <main+0x248>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	495a      	ldr	r1, [pc, #360]	; (8003518 <main+0x26c>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd fa07 	bl	80007c4 <ring_buffer_get>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8094 	beq.w	80034e6 <main+0x23a>
	  {

		  switch (IRQ_event) {
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <main+0x26c>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d077      	beq.n	80034b8 <main+0x20c>
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033cc:	f300 808d 	bgt.w	80034ea <main+0x23e>
 80033d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d4:	d05b      	beq.n	800348e <main+0x1e2>
 80033d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033da:	f300 8086 	bgt.w	80034ea <main+0x23e>
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d039      	beq.n	8003458 <main+0x1ac>
 80033e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e8:	dc7f      	bgt.n	80034ea <main+0x23e>
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d003      	beq.n	80033f8 <main+0x14c>
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f4:	d01b      	beq.n	800342e <main+0x182>
				printf_dbg("JOY_SEL was pressed!\r\n");
				BSP_CAMERA_Resume();
				BSP_LCD_DisplayOn();
				break;
			default:
				break;
 80033f6:	e078      	b.n	80034ea <main+0x23e>
				printf_dbg("JOY_UP was pressed!\r\n");
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <main+0x24c>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f007 fc2b 	bl	800ac58 <iprintf>
 8003402:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <main+0x250>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f007 fc26 	bl	800ac58 <iprintf>
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <main+0x24c>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4618      	mov	r0, r3
 8003412:	f007 fc21 	bl	800ac58 <iprintf>
 8003416:	4841      	ldr	r0, [pc, #260]	; (800351c <main+0x270>)
 8003418:	f007 fca4 	bl	800ad64 <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003422:	483f      	ldr	r0, [pc, #252]	; (8003520 <main+0x274>)
 8003424:	f003 faec 	bl	8006a00 <HAL_GPIO_WritePin>
				  BSP_LCD_DisplayOn();
 8003428:	f7ff fdf0 	bl	800300c <BSP_LCD_DisplayOn>
				break;
 800342c:	e05e      	b.n	80034ec <main+0x240>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <main+0x24c>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4618      	mov	r0, r3
 8003434:	f007 fc10 	bl	800ac58 <iprintf>
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <main+0x250>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f007 fc0b 	bl	800ac58 <iprintf>
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <main+0x24c>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4618      	mov	r0, r3
 8003448:	f007 fc06 	bl	800ac58 <iprintf>
 800344c:	4835      	ldr	r0, [pc, #212]	; (8003524 <main+0x278>)
 800344e:	f007 fc89 	bl	800ad64 <puts>
				BSP_CAMERA_Resume();
 8003452:	f7ff fb8f 	bl	8002b74 <BSP_CAMERA_Resume>
				break;
 8003456:	e049      	b.n	80034ec <main+0x240>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <main+0x24c>)
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	4618      	mov	r0, r3
 800345e:	f007 fbfb 	bl	800ac58 <iprintf>
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <main+0x250>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f007 fbf6 	bl	800ac58 <iprintf>
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <main+0x24c>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4618      	mov	r0, r3
 8003472:	f007 fbf1 	bl	800ac58 <iprintf>
 8003476:	482c      	ldr	r0, [pc, #176]	; (8003528 <main+0x27c>)
 8003478:	f007 fc74 	bl	800ad64 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 800347c:	2201      	movs	r2, #1
 800347e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003482:	4827      	ldr	r0, [pc, #156]	; (8003520 <main+0x274>)
 8003484:	f003 fabc 	bl	8006a00 <HAL_GPIO_WritePin>
				BSP_LCD_DisplayOff();
 8003488:	f7ff fdca 	bl	8003020 <BSP_LCD_DisplayOff>
				break;
 800348c:	e02e      	b.n	80034ec <main+0x240>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <main+0x24c>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4618      	mov	r0, r3
 8003494:	f007 fbe0 	bl	800ac58 <iprintf>
 8003498:	4b18      	ldr	r3, [pc, #96]	; (80034fc <main+0x250>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f007 fbdb 	bl	800ac58 <iprintf>
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <main+0x24c>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f007 fbd6 	bl	800ac58 <iprintf>
 80034ac:	481f      	ldr	r0, [pc, #124]	; (800352c <main+0x280>)
 80034ae:	f007 fc59 	bl	800ad64 <puts>
				BSP_CAMERA_Suspend();
 80034b2:	f7ff fb55 	bl	8002b60 <BSP_CAMERA_Suspend>
				break;
 80034b6:	e019      	b.n	80034ec <main+0x240>
				printf_dbg("JOY_SEL was pressed!\r\n");
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <main+0x24c>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4618      	mov	r0, r3
 80034be:	f007 fbcb 	bl	800ac58 <iprintf>
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <main+0x250>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f007 fbc6 	bl	800ac58 <iprintf>
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <main+0x24c>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f007 fbc1 	bl	800ac58 <iprintf>
 80034d6:	4816      	ldr	r0, [pc, #88]	; (8003530 <main+0x284>)
 80034d8:	f007 fc44 	bl	800ad64 <puts>
				BSP_CAMERA_Resume();
 80034dc:	f7ff fb4a 	bl	8002b74 <BSP_CAMERA_Resume>
				BSP_LCD_DisplayOn();
 80034e0:	f7ff fd94 	bl	800300c <BSP_LCD_DisplayOn>
				break;
 80034e4:	e002      	b.n	80034ec <main+0x240>
		}

	  }
 80034e6:	bf00      	nop
 80034e8:	e75f      	b.n	80033aa <main+0xfe>
				break;
 80034ea:	bf00      	nop
  {
 80034ec:	e75d      	b.n	80033aa <main+0xfe>
 80034ee:	bf00      	nop
 80034f0:	20000400 	.word	0x20000400
 80034f4:	200003fc 	.word	0x200003fc
 80034f8:	200000cc 	.word	0x200000cc
 80034fc:	200000ec 	.word	0x200000ec
 8003500:	0800b71c 	.word	0x0800b71c
 8003504:	0800b730 	.word	0x0800b730
 8003508:	0800b740 	.word	0x0800b740
 800350c:	20000270 	.word	0x20000270
 8003510:	20000428 	.word	0x20000428
 8003514:	200003f8 	.word	0x200003f8
 8003518:	2001c630 	.word	0x2001c630
 800351c:	0800b750 	.word	0x0800b750
 8003520:	48000400 	.word	0x48000400
 8003524:	0800b768 	.word	0x0800b768
 8003528:	0800b780 	.word	0x0800b780
 800352c:	0800b798 	.word	0x0800b798
 8003530:	0800b7b0 	.word	0x0800b7b0

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b096      	sub	sp, #88	; 0x58
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	2244      	movs	r2, #68	; 0x44
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f006 ffb2 	bl	800a4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003548:	463b      	mov	r3, r7
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003556:	f44f 7000 	mov.w	r0, #512	; 0x200
 800355a:	f004 f94b 	bl	80077f4 <HAL_PWREx_ControlVoltageScaling>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003564:	f000 fbc8 	bl	8003cf8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8003568:	2322      	movs	r3, #34	; 0x22
 800356a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800356c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003570:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003572:	2301      	movs	r3, #1
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357a:	2302      	movs	r3, #2
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800357e:	2302      	movs	r3, #2
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003586:	230a      	movs	r3, #10
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800358a:	2302      	movs	r3, #2
 800358c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800358e:	2302      	movs	r3, #2
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	4618      	mov	r0, r3
 800359c:	f004 f990 	bl	80078c0 <HAL_RCC_OscConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0x76>
  {
    Error_Handler();
 80035a6:	f000 fba7 	bl	8003cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035aa:	230f      	movs	r3, #15
 80035ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ae:	2303      	movs	r3, #3
 80035b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2104      	movs	r1, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fd96 	bl	80080f4 <HAL_RCC_ClockConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80035ce:	f000 fb93 	bl	8003cf8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 80035d2:	2200      	movs	r2, #0
 80035d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80035d8:	2000      	movs	r0, #0
 80035da:	f004 fe8b 	bl	80082f4 <HAL_RCC_MCOConfig>
}
 80035de:	bf00      	nop
 80035e0:	3758      	adds	r7, #88	; 0x58
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	2055      	movs	r0, #85	; 0x55
 80035f0:	f001 fd8b 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80035f4:	2055      	movs	r0, #85	; 0x55
 80035f6:	f001 fda4 	bl	8005142 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2028      	movs	r0, #40	; 0x28
 8003600:	f001 fd83 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003604:	2028      	movs	r0, #40	; 0x28
 8003606:	f001 fd9c 	bl	8005142 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	2017      	movs	r0, #23
 8003610:	f001 fd7b 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003614:	2017      	movs	r0, #23
 8003616:	f001 fd94 	bl	8005142 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	2026      	movs	r0, #38	; 0x26
 8003620:	f001 fd73 	bl	800510a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003624:	2026      	movs	r0, #38	; 0x26
 8003626:	f001 fd8c 	bl	8005142 <HAL_NVIC_EnableIRQ>
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <MX_DMA2D_Init+0x6c>)
 8003638:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <MX_DMA2D_Init+0x68>)
 800363c:	2200      	movs	r2, #0
 800363e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003642:	2202      	movs	r2, #2
 8003644:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <MX_DMA2D_Init+0x68>)
 800364e:	2200      	movs	r2, #0
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003654:	2202      	movs	r2, #2
 8003656:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <MX_DMA2D_Init+0x68>)
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <MX_DMA2D_Init+0x68>)
 800366c:	2200      	movs	r2, #0
 800366e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003670:	4809      	ldr	r0, [pc, #36]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003672:	f002 fc6b 	bl	8005f4c <HAL_DMA2D_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800367c:	f000 fb3c 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003680:	2101      	movs	r1, #1
 8003682:	4805      	ldr	r0, [pc, #20]	; (8003698 <MX_DMA2D_Init+0x68>)
 8003684:	f002 fdfe 	bl	8006284 <HAL_DMA2D_ConfigLayer>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800368e:	f000 fb33 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000031c 	.word	0x2000031c
 800369c:	4002b000 	.word	0x4002b000

080036a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <MX_USART2_UART_Init+0x5c>)
 80036a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036c6:	220c      	movs	r2, #12
 80036c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036de:	2200      	movs	r2, #0
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036e2:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_USART2_UART_Init+0x58>)
 80036e4:	f005 fc70 	bl	8008fc8 <HAL_UART_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036ee:	f000 fb03 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000374 	.word	0x20000374
 80036fc:	40004400 	.word	0x40004400

08003700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	; 0x38
 8003704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003716:	4bb1      	ldr	r3, [pc, #708]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	4ab0      	ldr	r2, [pc, #704]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003722:	4bae      	ldr	r3, [pc, #696]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800372e:	4bab      	ldr	r3, [pc, #684]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	4aaa      	ldr	r2, [pc, #680]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800373a:	4ba8      	ldr	r3, [pc, #672]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003746:	4ba5      	ldr	r3, [pc, #660]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	4aa4      	ldr	r2, [pc, #656]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003752:	4ba2      	ldr	r3, [pc, #648]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	4b9f      	ldr	r3, [pc, #636]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	4a9e      	ldr	r2, [pc, #632]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800376a:	4b9c      	ldr	r3, [pc, #624]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	4b99      	ldr	r3, [pc, #612]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	4a98      	ldr	r2, [pc, #608]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003782:	4b96      	ldr	r3, [pc, #600]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800378e:	4b93      	ldr	r3, [pc, #588]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	4a92      	ldr	r2, [pc, #584]	; (80039dc <MX_GPIO_Init+0x2dc>)
 8003794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379a:	4b90      	ldr	r3, [pc, #576]	; (80039dc <MX_GPIO_Init+0x2dc>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80037a6:	f004 f87b 	bl	80078a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037aa:	4b8c      	ldr	r3, [pc, #560]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	4a8b      	ldr	r2, [pc, #556]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b6:	4b89      	ldr	r3, [pc, #548]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c2:	4b86      	ldr	r3, [pc, #536]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	4a85      	ldr	r2, [pc, #532]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ce:	4b83      	ldr	r3, [pc, #524]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037da:	4b80      	ldr	r3, [pc, #512]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	4a7f      	ldr	r2, [pc, #508]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037e0:	f043 0320 	orr.w	r3, r3, #32
 80037e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e6:	4b7d      	ldr	r3, [pc, #500]	; (80039dc <MX_GPIO_Init+0x2dc>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 80037f2:	2201      	movs	r2, #1
 80037f4:	2114      	movs	r1, #20
 80037f6:	487a      	ldr	r0, [pc, #488]	; (80039e0 <MX_GPIO_Init+0x2e0>)
 80037f8:	f003 f902 	bl	8006a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2101      	movs	r1, #1
 8003800:	4878      	ldr	r0, [pc, #480]	; (80039e4 <MX_GPIO_Init+0x2e4>)
 8003802:	f003 f8fd 	bl	8006a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8003806:	2200      	movs	r2, #0
 8003808:	2143      	movs	r1, #67	; 0x43
 800380a:	4875      	ldr	r0, [pc, #468]	; (80039e0 <MX_GPIO_Init+0x2e0>)
 800380c:	f003 f8f8 	bl	8006a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	4874      	ldr	r0, [pc, #464]	; (80039e8 <MX_GPIO_Init+0x2e8>)
 8003816:	f003 f8f3 	bl	8006a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 800381a:	2201      	movs	r2, #1
 800381c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003820:	4872      	ldr	r0, [pc, #456]	; (80039ec <MX_GPIO_Init+0x2ec>)
 8003822:	f003 f8ed 	bl	8006a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8003826:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003832:	2302      	movs	r3, #2
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383a:	4619      	mov	r1, r3
 800383c:	4869      	ldr	r0, [pc, #420]	; (80039e4 <MX_GPIO_Init+0x2e4>)
 800383e:	f002 fe5b 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8003842:	2304      	movs	r3, #4
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003846:	2301      	movs	r3, #1
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800384e:	2302      	movs	r3, #2
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	4861      	ldr	r0, [pc, #388]	; (80039e0 <MX_GPIO_Init+0x2e0>)
 800385a:	f002 fe4d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800385e:	2330      	movs	r3, #48	; 0x30
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800386e:	2305      	movs	r3, #5
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	4619      	mov	r1, r3
 8003878:	485c      	ldr	r0, [pc, #368]	; (80039ec <MX_GPIO_Init+0x2ec>)
 800387a:	f002 fe3d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800387e:	f248 0320 	movw	r3, #32800	; 0x8020
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388c:	2303      	movs	r3, #3
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003890:	2305      	movs	r3, #5
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389e:	f002 fe2b 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80038b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b6:	4619      	mov	r1, r3
 80038b8:	484a      	ldr	r0, [pc, #296]	; (80039e4 <MX_GPIO_Init+0x2e4>)
 80038ba:	f002 fe1d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	2300      	movs	r3, #0
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038ce:	2303      	movs	r3, #3
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80038d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d6:	4619      	mov	r1, r3
 80038d8:	4842      	ldr	r0, [pc, #264]	; (80039e4 <MX_GPIO_Init+0x2e4>)
 80038da:	f002 fe0d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80038de:	2306      	movs	r3, #6
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038ee:	2305      	movs	r3, #5
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f6:	4619      	mov	r1, r3
 80038f8:	483a      	ldr	r0, [pc, #232]	; (80039e4 <MX_GPIO_Init+0x2e4>)
 80038fa:	f002 fdfd 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80038fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003904:	2302      	movs	r3, #2
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003910:	2303      	movs	r3, #3
 8003912:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003918:	4619      	mov	r1, r3
 800391a:	4831      	ldr	r0, [pc, #196]	; (80039e0 <MX_GPIO_Init+0x2e0>)
 800391c:	f002 fdec 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003920:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003926:	2312      	movs	r3, #18
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	2301      	movs	r3, #1
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	2303      	movs	r3, #3
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003932:	2304      	movs	r3, #4
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393a:	4619      	mov	r1, r3
 800393c:	482b      	ldr	r0, [pc, #172]	; (80039ec <MX_GPIO_Init+0x2ec>)
 800393e:	f002 fddb 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003952:	2307      	movs	r3, #7
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395a:	4619      	mov	r1, r3
 800395c:	4823      	ldr	r0, [pc, #140]	; (80039ec <MX_GPIO_Init+0x2ec>)
 800395e:	f002 fdcb 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8003962:	235c      	movs	r3, #92	; 0x5c
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003972:	230d      	movs	r3, #13
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397a:	4619      	mov	r1, r3
 800397c:	481c      	ldr	r0, [pc, #112]	; (80039f0 <MX_GPIO_Init+0x2f0>)
 800397e:	f002 fdbb 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8003982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003994:	2302      	movs	r3, #2
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399c:	4619      	mov	r1, r3
 800399e:	4813      	ldr	r0, [pc, #76]	; (80039ec <MX_GPIO_Init+0x2ec>)
 80039a0:	f002 fdaa 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80039a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b6:	2307      	movs	r3, #7
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039be:	4619      	mov	r1, r3
 80039c0:	480c      	ldr	r0, [pc, #48]	; (80039f4 <MX_GPIO_Init+0x2f4>)
 80039c2:	f002 fd99 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80039c6:	2304      	movs	r3, #4
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039d6:	230c      	movs	r3, #12
 80039d8:	e00e      	b.n	80039f8 <MX_GPIO_Init+0x2f8>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	48001c00 	.word	0x48001c00
 80039e4:	48002000 	.word	0x48002000
 80039e8:	48000800 	.word	0x48000800
 80039ec:	48000400 	.word	0x48000400
 80039f0:	48001000 	.word	0x48001000
 80039f4:	48001800 	.word	0x48001800
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80039fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fe:	4619      	mov	r1, r3
 8003a00:	48b7      	ldr	r0, [pc, #732]	; (8003ce0 <MX_GPIO_Init+0x5e0>)
 8003a02:	f002 fd79 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8003a06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a18:	230c      	movs	r3, #12
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a20:	4619      	mov	r1, r3
 8003a22:	48b0      	ldr	r0, [pc, #704]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003a24:	f002 fd68 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8003a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a38:	4619      	mov	r1, r3
 8003a3a:	48ab      	ldr	r0, [pc, #684]	; (8003ce8 <MX_GPIO_Init+0x5e8>)
 8003a3c:	f002 fd5c 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8003a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a52:	230a      	movs	r3, #10
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f002 fd4a 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a70:	2302      	movs	r3, #2
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8003a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a78:	4619      	mov	r1, r3
 8003a7a:	489a      	ldr	r0, [pc, #616]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003a7c:	f002 fd3c 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8003a80:	2343      	movs	r3, #67	; 0x43
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	4894      	ldr	r0, [pc, #592]	; (8003ce8 <MX_GPIO_Init+0x5e8>)
 8003a98:	f002 fd2e 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8003aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	488c      	ldr	r0, [pc, #560]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003ab4:	f002 fd20 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8003ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003acc:	4619      	mov	r1, r3
 8003ace:	4887      	ldr	r0, [pc, #540]	; (8003cec <MX_GPIO_Init+0x5ec>)
 8003ad0:	f002 fd12 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aee:	4619      	mov	r1, r3
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af4:	f002 fd00 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8003af8:	2384      	movs	r3, #132	; 0x84
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003b08:	2306      	movs	r3, #6
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b10:	4619      	mov	r1, r3
 8003b12:	4874      	ldr	r0, [pc, #464]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003b14:	f002 fcf0 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8003b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b1e:	230b      	movs	r3, #11
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8003b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4870      	ldr	r0, [pc, #448]	; (8003cf0 <MX_GPIO_Init+0x5f0>)
 8003b2e:	f002 fce3 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8003b32:	231b      	movs	r3, #27
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b36:	230b      	movs	r3, #11
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b42:	4619      	mov	r1, r3
 8003b44:	4867      	ldr	r0, [pc, #412]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003b46:	f002 fcd7 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8003b4a:	f640 0303 	movw	r3, #2051	; 0x803
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b5c:	230a      	movs	r3, #10
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b64:	4619      	mov	r1, r3
 8003b66:	4863      	ldr	r0, [pc, #396]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003b68:	f002 fcc6 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003b6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b86:	4619      	mov	r1, r3
 8003b88:	4858      	ldr	r0, [pc, #352]	; (8003cec <MX_GPIO_Init+0x5ec>)
 8003b8a:	f002 fcb5 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4850      	ldr	r0, [pc, #320]	; (8003ce4 <MX_GPIO_Init+0x5e4>)
 8003ba4:	f002 fca8 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 8003ba8:	2310      	movs	r3, #16
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bac:	2311      	movs	r3, #17
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 8003bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	484a      	ldr	r0, [pc, #296]	; (8003ce8 <MX_GPIO_Init+0x5e8>)
 8003bc0:	f002 fc9a 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8003bc4:	2312      	movs	r3, #18
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003bc8:	230b      	movs	r3, #11
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bda:	f002 fc8d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8003bde:	23c8      	movs	r3, #200	; 0xc8
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bea:	2303      	movs	r3, #3
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003bee:	230a      	movs	r3, #10
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfc:	f002 fc7c 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8003c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8003c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c14:	4619      	mov	r1, r3
 8003c16:	4836      	ldr	r0, [pc, #216]	; (8003cf0 <MX_GPIO_Init+0x5f0>)
 8003c18:	f002 fc6e 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c2e:	2305      	movs	r3, #5
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c36:	4619      	mov	r1, r3
 8003c38:	482e      	ldr	r0, [pc, #184]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003c3a:	f002 fc5d 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8003c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c44:	2311      	movs	r3, #17
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8003c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c54:	4619      	mov	r1, r3
 8003c56:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003c58:	f002 fc4e 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8003c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4821      	ldr	r0, [pc, #132]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003c70:	f002 fc42 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003c86:	230d      	movs	r3, #13
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4818      	ldr	r0, [pc, #96]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003c92:	f002 fc31 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8003c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003ca8:	2306      	movs	r3, #6
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8003cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4810      	ldr	r0, [pc, #64]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003cb4:	f002 fc20 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003cbe:	2311      	movs	r3, #17
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4808      	ldr	r0, [pc, #32]	; (8003cf4 <MX_GPIO_Init+0x5f4>)
 8003cd2:	f002 fc11 	bl	80064f8 <HAL_GPIO_Init>

}
 8003cd6:	bf00      	nop
 8003cd8:	3738      	adds	r7, #56	; 0x38
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	48000c00 	.word	0x48000c00
 8003ce4:	48000800 	.word	0x48000800
 8003ce8:	48001c00 	.word	0x48001c00
 8003cec:	48001800 	.word	0x48001800
 8003cf0:	48001400 	.word	0x48001400
 8003cf4:	48000400 	.word	0x48000400

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <Error_Handler+0x30>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f006 ffa9 	bl	800ac58 <iprintf>
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <Error_Handler+0x34>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f006 ffa4 	bl	800ac58 <iprintf>
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <Error_Handler+0x30>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f006 ff9f 	bl	800ac58 <iprintf>
 8003d1a:	4805      	ldr	r0, [pc, #20]	; (8003d30 <Error_Handler+0x38>)
 8003d1c:	f006 ff9c 	bl	800ac58 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
  __disable_irq();
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <Error_Handler+0x2c>
 8003d26:	bf00      	nop
 8003d28:	200000cc 	.word	0x200000cc
 8003d2c:	200000ec 	.word	0x200000ec
 8003d30:	0800b7c8 	.word	0x0800b7c8

08003d34 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]

  if (pObj == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <OV5640_RegisterBusIO+0x16>
  {
    return OV5640_ERROR;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	e016      	b.n	8003d78 <OV5640_RegisterBusIO+0x44>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	891a      	ldrh	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	811a      	strh	r2, [r3, #8]

    if (pObj->IO.Init != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <OV5640_RegisterBusIO+0x40>
    {
      pObj->IO.Init();
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4798      	blx	r3
      return OV5640_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e001      	b.n	8003d78 <OV5640_RegisterBusIO+0x44>
    }

  }

  return OV5640_ERROR;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };


  if (pObj->IsInitialized == 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15a      	bne.n	8003e50 <OV5640_Init+0xd0>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d80e      	bhi.n	8003dbe <OV5640_Init+0x3e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00f      	beq.n	8003dc6 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d00c      	beq.n	8003dc6 <OV5640_Init+0x46>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d009      	beq.n	8003dc6 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	d006      	beq.n	8003dc6 <OV5640_Init+0x46>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d003      	beq.n	8003dc6 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e044      	b.n	8003e50 <OV5640_Init+0xd0>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e014      	b.n	8003df6 <OV5640_Init+0x76>
      {
        if (ret != OV5640_ERROR)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d00d      	beq.n	8003df0 <OV5640_Init+0x70>
        {

          I2C2_WriteData(OV5640_ADDR, OV5640_Common[index][0], 2, (uint8_t)OV5640_Common[index][1]);
 8003dd4:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <OV5640_Init+0xdc>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <OV5640_Init+0xdc>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	885b      	ldrh	r3, [r3, #2]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2202      	movs	r2, #2
 8003dea:	2078      	movs	r0, #120	; 0x78
 8003dec:	f7fe fafe 	bl	80023ec <I2C2_WriteData>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3301      	adds	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2bfd      	cmp	r3, #253	; 0xfd
 8003dfa:	d9e7      	bls.n	8003dcc <OV5640_Init+0x4c>

        }
      }

      if (ret == OV5640_OK)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d126      	bne.n	8003e50 <OV5640_Init+0xd0>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f92d 	bl	8004064 <OV5640_SetResolution>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <OV5640_Init+0x98>
        {
          ret = OV5640_ERROR;
 8003e10:	f04f 33ff 	mov.w	r3, #4294967295
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	e01b      	b.n	8003e50 <OV5640_Init+0xd0>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f820 	bl	8003e60 <OV5640_SetPixelFormat>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e010      	b.n	8003e50 <OV5640_Init+0xd0>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_LOW, OV5640_POLARITY_HREF_HIGH,
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2201      	movs	r2, #1
 8003e32:	2100      	movs	r1, #0
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fa01 	bl	800423c <OV5640_SetPolarities>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <OV5640_Init+0xc8>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e003      	b.n	8003e50 <OV5640_Init+0xd0>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8003e50:	693b      	ldr	r3, [r7, #16]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800d7e4 	.word	0x0800d7e4

08003e60 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <OV5640_SetPixelFormat+0x34>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d00c      	beq.n	8003e94 <OV5640_SetPixelFormat+0x34>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d009      	beq.n	8003e94 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	d006      	beq.n	8003e94 <OV5640_SetPixelFormat+0x34>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d003      	beq.n	8003e94 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	e0d7      	b.n	8004044 <OV5640_SetPixelFormat+0x1e4>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	2b07      	cmp	r3, #7
 8003e9a:	d87f      	bhi.n	8003f9c <OV5640_SetPixelFormat+0x13c>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <OV5640_SetPixelFormat+0x44>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ef7 	.word	0x08003ef7
 8003ea8:	08003ec5 	.word	0x08003ec5
 8003eac:	08003f9d 	.word	0x08003f9d
 8003eb0:	08003f9d 	.word	0x08003f9d
 8003eb4:	08003f9d 	.word	0x08003f9d
 8003eb8:	08003f9d 	.word	0x08003f9d
 8003ebc:	08003f31 	.word	0x08003f31
 8003ec0:	08003f6b 	.word	0x08003f6b
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e011      	b.n	8003eee <OV5640_SetPixelFormat+0x8e>
        {

            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8003eca:	4a61      	ldr	r2, [pc, #388]	; (8004050 <OV5640_SetPixelFormat+0x1f0>)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	885b      	ldrh	r3, [r3, #2]
 8003ed4:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_YUV422[index][0], 2, tmp);
 8003ed6:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <OV5640_SetPixelFormat+0x1f0>)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	2078      	movs	r0, #120	; 0x78
 8003ee4:	f7fe fa82 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d9ea      	bls.n	8003eca <OV5640_SetPixelFormat+0x6a>


        }
        break;
 8003ef4:	e06a      	b.n	8003fcc <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e015      	b.n	8003f28 <OV5640_SetPixelFormat+0xc8>
        {
          if (ret != OV5640_ERROR)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d00e      	beq.n	8003f22 <OV5640_SetPixelFormat+0xc2>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003f04:	4a53      	ldr	r2, [pc, #332]	; (8004054 <OV5640_SetPixelFormat+0x1f4>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	885b      	ldrh	r3, [r3, #2]
 8003f0e:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB888[index][0], 2, tmp);
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <OV5640_SetPixelFormat+0x1f4>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	2078      	movs	r0, #120	; 0x78
 8003f1e:	f7fe fa65 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	3301      	adds	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d9e6      	bls.n	8003efc <OV5640_SetPixelFormat+0x9c>
          }
        }
        break;
 8003f2e:	e04d      	b.n	8003fcc <OV5640_SetPixelFormat+0x16c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e015      	b.n	8003f62 <OV5640_SetPixelFormat+0x102>
        {
          if (ret != OV5640_ERROR)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d00e      	beq.n	8003f5c <OV5640_SetPixelFormat+0xfc>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <OV5640_SetPixelFormat+0x1f8>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	885b      	ldrh	r3, [r3, #2]
 8003f48:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_Y8[index][0], 2, tmp);
 8003f4a:	4a43      	ldr	r2, [pc, #268]	; (8004058 <OV5640_SetPixelFormat+0x1f8>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2202      	movs	r2, #2
 8003f56:	2078      	movs	r0, #120	; 0x78
 8003f58:	f7fe fa48 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d9e6      	bls.n	8003f36 <OV5640_SetPixelFormat+0xd6>
          }
        }
        break;
 8003f68:	e030      	b.n	8003fcc <OV5640_SetPixelFormat+0x16c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e011      	b.n	8003f94 <OV5640_SetPixelFormat+0x134>
        {
			tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8003f70:	4a3a      	ldr	r2, [pc, #232]	; (800405c <OV5640_SetPixelFormat+0x1fc>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	885b      	ldrh	r3, [r3, #2]
 8003f7a:	73fb      	strb	r3, [r7, #15]
			I2C2_WriteData(OV5640_ADDR, OV5640_PF_JPEG[index][0], 2, tmp);
 8003f7c:	4a37      	ldr	r2, [pc, #220]	; (800405c <OV5640_SetPixelFormat+0x1fc>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2202      	movs	r2, #2
 8003f88:	2078      	movs	r0, #120	; 0x78
 8003f8a:	f7fe fa2f 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d9ea      	bls.n	8003f70 <OV5640_SetPixelFormat+0x110>
        }
        break;
 8003f9a:	e017      	b.n	8003fcc <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	e010      	b.n	8003fc4 <OV5640_SetPixelFormat+0x164>
        {

            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB565[index][0], 2, (uint8_t)OV5640_PF_RGB565[index][1]);
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <OV5640_SetPixelFormat+0x200>)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003faa:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <OV5640_SetPixelFormat+0x200>)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	885b      	ldrh	r3, [r3, #2]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	2078      	movs	r0, #120	; 0x78
 8003fba:	f7fe fa17 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d9eb      	bls.n	8003fa2 <OV5640_SetPixelFormat+0x142>

        }
        break;
 8003fca:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d138      	bne.n	8004044 <OV5640_SetPixelFormat+0x1e4>
    {

    	tmp = I2C2_ReadData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2);
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f643 0121 	movw	r1, #14369	; 0x3821
 8003fd8:	2078      	movs	r0, #120	; 0x78
 8003fda:	f7fe fa39 	bl	8002450 <I2C2_ReadData>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
        tmp |= (1 << 5);
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2, tmp);
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f643 0121 	movw	r1, #14369	; 0x3821
 8003ff2:	2078      	movs	r0, #120	; 0x78
 8003ff4:	f7fe f9fa 	bl	80023ec <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2);
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f243 0102 	movw	r1, #12290	; 0x3002
 8003ffe:	2078      	movs	r0, #120	; 0x78
 8004000:	f7fe fa26 	bl	8002450 <I2C2_ReadData>
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]
        tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	f023 031c 	bic.w	r3, r3, #28
 800400e:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2, tmp);
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2202      	movs	r2, #2
 8004014:	f243 0102 	movw	r1, #12290	; 0x3002
 8004018:	2078      	movs	r0, #120	; 0x78
 800401a:	f7fe f9e7 	bl	80023ec <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2);
 800401e:	2202      	movs	r2, #2
 8004020:	f243 0106 	movw	r1, #12294	; 0x3006
 8004024:	2078      	movs	r0, #120	; 0x78
 8004026:	f7fe fa13 	bl	8002450 <I2C2_ReadData>
 800402a:	4603      	mov	r3, r0
 800402c:	73fb      	strb	r3, [r7, #15]
        tmp |= ((1 << 5) | (1 << 3));
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004034:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2, tmp);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2202      	movs	r2, #2
 800403a:	f243 0106 	movw	r1, #12294	; 0x3006
 800403e:	2078      	movs	r0, #120	; 0x78
 8004040:	f7fe f9d4 	bl	80023ec <I2C2_WriteData>


      }

  }
  return 1;
 8004044:	2301      	movs	r3, #1
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	0800dbdc 	.word	0x0800dbdc
 8004054:	0800dbe4 	.word	0x0800dbe4
 8004058:	0800dbec 	.word	0x0800dbec
 800405c:	0800dbf4 	.word	0x0800dbf4
 8004060:	0800dbfc 	.word	0x0800dbfc

08004064 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d903      	bls.n	8004080 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8004078:	f04f 33ff 	mov.w	r3, #4294967295
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e0cd      	b.n	800421c <OV5640_SetResolution+0x1b8>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b04      	cmp	r3, #4
 8004084:	f200 80c6 	bhi.w	8004214 <OV5640_SetResolution+0x1b0>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <OV5640_SetResolution+0x2c>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a5 	.word	0x080040a5
 8004094:	080040f3 	.word	0x080040f3
 8004098:	0800412b 	.word	0x0800412b
 800409c:	08004179 	.word	0x08004179
 80040a0:	080041c7 	.word	0x080041c7
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e01f      	b.n	80040ea <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d018      	beq.n	80040e4 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80040b2:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <OV5640_SetResolution+0x1c4>)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	885b      	ldrh	r3, [r3, #2]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0018 	add.w	r0, r3, #24
 80040c6:	4a58      	ldr	r2, [pc, #352]	; (8004228 <OV5640_SetResolution+0x1c4>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80040ce:	f107 020f 	add.w	r2, r7, #15
 80040d2:	2301      	movs	r3, #1
 80040d4:	f000 fb1a 	bl	800470c <ov5640_write_reg>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	3301      	adds	r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d9dc      	bls.n	80040aa <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80040f0:	e094      	b.n	800421c <OV5640_SetResolution+0x1b8>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	e014      	b.n	8004122 <OV5640_SetResolution+0xbe>
        {
          if (ret != OV5640_ERROR)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d00d      	beq.n	800411c <OV5640_SetResolution+0xb8>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_QVGA[index][0], 2, (uint8_t)OV5640_QVGA[index][1]);
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <OV5640_SetResolution+0x1c8>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004108:	4a48      	ldr	r2, [pc, #288]	; (800422c <OV5640_SetResolution+0x1c8>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	885b      	ldrh	r3, [r3, #2]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2202      	movs	r2, #2
 8004116:	2078      	movs	r0, #120	; 0x78
 8004118:	f7fe f968 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3301      	adds	r3, #1
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d9e7      	bls.n	80040f8 <OV5640_SetResolution+0x94>

          }
        }
        break;
 8004128:	e078      	b.n	800421c <OV5640_SetResolution+0x1b8>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	e01f      	b.n	8004170 <OV5640_SetResolution+0x10c>
        {
          if (ret != OV5640_ERROR)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d018      	beq.n	800416a <OV5640_SetResolution+0x106>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8004138:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <OV5640_SetResolution+0x1cc>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	885b      	ldrh	r3, [r3, #2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 0018 	add.w	r0, r3, #24
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <OV5640_SetResolution+0x1cc>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004154:	f107 020f 	add.w	r2, r7, #15
 8004158:	2301      	movs	r3, #1
 800415a:	f000 fad7 	bl	800470c <ov5640_write_reg>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <OV5640_SetResolution+0x106>
            {
              ret = OV5640_ERROR;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d9dc      	bls.n	8004130 <OV5640_SetResolution+0xcc>
            }
          }
        }
        break;
 8004176:	e051      	b.n	800421c <OV5640_SetResolution+0x1b8>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	e01f      	b.n	80041be <OV5640_SetResolution+0x15a>
        {
          if (ret != OV5640_ERROR)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d018      	beq.n	80041b8 <OV5640_SetResolution+0x154>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8004186:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <OV5640_SetResolution+0x1d0>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	885b      	ldrh	r3, [r3, #2]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f103 0018 	add.w	r0, r3, #24
 800419a:	4a26      	ldr	r2, [pc, #152]	; (8004234 <OV5640_SetResolution+0x1d0>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80041a2:	f107 020f 	add.w	r2, r7, #15
 80041a6:	2301      	movs	r3, #1
 80041a8:	f000 fab0 	bl	800470c <ov5640_write_reg>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <OV5640_SetResolution+0x154>
            {
              ret = OV5640_ERROR;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3301      	adds	r3, #1
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d9dc      	bls.n	800417e <OV5640_SetResolution+0x11a>
            }
          }
        }
        break;
 80041c4:	e02a      	b.n	800421c <OV5640_SetResolution+0x1b8>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e01f      	b.n	800420c <OV5640_SetResolution+0x1a8>
        {
          if (ret != OV5640_ERROR)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d018      	beq.n	8004206 <OV5640_SetResolution+0x1a2>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <OV5640_SetResolution+0x1d4>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	885b      	ldrh	r3, [r3, #2]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f103 0018 	add.w	r0, r3, #24
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <OV5640_SetResolution+0x1d4>)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80041f0:	f107 020f 	add.w	r2, r7, #15
 80041f4:	2301      	movs	r3, #1
 80041f6:	f000 fa89 	bl	800470c <ov5640_write_reg>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <OV5640_SetResolution+0x1a2>
            {
              ret = OV5640_ERROR;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3301      	adds	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d9dc      	bls.n	80041cc <OV5640_SetResolution+0x168>
            }
          }
        }
        break;
 8004212:	e003      	b.n	800421c <OV5640_SetResolution+0x1b8>
      default:
        ret = OV5640_ERROR;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295
 8004218:	617b      	str	r3, [r7, #20]
        break;
 800421a:	bf00      	nop
    }
  }

  return ret;
 800421c:	697b      	ldr	r3, [r7, #20]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	0800dc04 	.word	0x0800dc04
 800422c:	0800dc14 	.word	0x0800dc14
 8004230:	0800dc24 	.word	0x0800dc24
 8004234:	0800dc34 	.word	0x0800dc34
 8004238:	0800dc44 	.word	0x0800dc44

0800423c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <OV5640_SetPolarities+0x3c>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <OV5640_SetPolarities+0x24>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10b      	bne.n	8004278 <OV5640_SetPolarities+0x3c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <OV5640_SetPolarities+0x3c>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d006      	beq.n	8004280 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e014      	b.n	80042aa <OV5640_SetPolarities+0x6e>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	015b      	lsls	r3, r3, #5
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	b2da      	uxtb	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	74fb      	strb	r3, [r7, #19]
    I2C2_WriteData(OV5640_ADDR, OV5640_POLARITY_CTRL, 2, tmp);
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2202      	movs	r2, #2
 80042a0:	f244 7140 	movw	r1, #18240	; 0x4740
 80042a4:	2078      	movs	r0, #120	; 0x78
 80042a6:	f7fe f8a1 	bl	80023ec <I2C2_WriteData>

  }

  return ret;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint16_t reg;

  /* Initialize I2C */
  pObj->IO.Init();
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4798      	blx	r3

  /* Prepare the camera to be configured */
  I2C2_WriteData(OV5640_ADDR, OV5640_SYSTEM_CTROL0, 2,0x80);
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	2202      	movs	r2, #2
 80042c8:	f243 0108 	movw	r1, #12296	; 0x3008
 80042cc:	2078      	movs	r0, #120	; 0x78
 80042ce:	f7fe f88d 	bl	80023ec <I2C2_WriteData>
  HAL_Delay(500);
 80042d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042d6:	f000 fdf5 	bl	8004ec4 <HAL_Delay>

  reg = I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_HIGH_BYTE, 2);
 80042da:	2202      	movs	r2, #2
 80042dc:	f243 010a 	movw	r1, #12298	; 0x300a
 80042e0:	2078      	movs	r0, #120	; 0x78
 80042e2:	f7fe f8b5 	bl	8002450 <I2C2_ReadData>
 80042e6:	4603      	mov	r3, r0
 80042e8:	81fb      	strh	r3, [r7, #14]
  reg <<= 8;
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	81fb      	strh	r3, [r7, #14]
  reg |= I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_LOW_BYTE, 2);
 80042f0:	2202      	movs	r2, #2
 80042f2:	f243 010b 	movw	r1, #12299	; 0x300b
 80042f6:	2078      	movs	r0, #120	; 0x78
 80042f8:	f7fe f8aa 	bl	8002450 <I2C2_ReadData>
 80042fc:	4603      	mov	r3, r0
 80042fe:	b29a      	uxth	r2, r3
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	4313      	orrs	r3, r2
 8004304:	81fb      	strh	r3, [r7, #14]

 return reg;
 8004306:	89fb      	ldrh	r3, [r7, #14]

}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_MANUAL_CONTROL, 2, tmp);
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2202      	movs	r2, #2
 8004322:	f243 4106 	movw	r1, #13318	; 0x3406
 8004326:	2078      	movs	r0, #120	; 0x78
 8004328:	f7fe f860 	bl	80023ec <I2C2_WriteData>
  tmp = 0x46;
 800432c:	2346      	movs	r3, #70	; 0x46
 800432e:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL16, 2, tmp);
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2202      	movs	r2, #2
 8004334:	f245 1190 	movw	r1, #20880	; 0x5190
 8004338:	2078      	movs	r0, #120	; 0x78
 800433a:	f7fe f857 	bl	80023ec <I2C2_WriteData>
  tmp = 0xF8;
 800433e:	23f8      	movs	r3, #248	; 0xf8
 8004340:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL17, 2, tmp);
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	2202      	movs	r2, #2
 8004346:	f245 1191 	movw	r1, #20881	; 0x5191
 800434a:	2078      	movs	r0, #120	; 0x78
 800434c:	f7fe f84e 	bl	80023ec <I2C2_WriteData>
  tmp = 0x04;
 8004350:	2304      	movs	r3, #4
 8004352:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL18, 2, tmp);
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2202      	movs	r2, #2
 8004358:	f245 1192 	movw	r1, #20882	; 0x5192
 800435c:	2078      	movs	r0, #120	; 0x78
 800435e:	f7fe f845 	bl	80023ec <I2C2_WriteData>


    switch (LightMode)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3b01      	subs	r3, #1
 8004366:	2b07      	cmp	r3, #7
 8004368:	f200 80b0 	bhi.w	80044cc <OV5640_SetLightMode+0x1bc>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <OV5640_SetLightMode+0x64>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004395 	.word	0x08004395
 8004378:	080043e3 	.word	0x080043e3
 800437c:	080044cd 	.word	0x080044cd
 8004380:	0800447f 	.word	0x0800447f
 8004384:	080044cd 	.word	0x080044cd
 8004388:	080044cd 	.word	0x080044cd
 800438c:	080044cd 	.word	0x080044cd
 8004390:	08004431 	.word	0x08004431
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e01f      	b.n	80043da <OV5640_SetLightMode+0xca>
        {
          if (ret != OV5640_ERROR)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d018      	beq.n	80043d4 <OV5640_SetLightMode+0xc4>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80043a2:	4a5a      	ldr	r2, [pc, #360]	; (800450c <OV5640_SetLightMode+0x1fc>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	885b      	ldrh	r3, [r3, #2]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f103 0018 	add.w	r0, r3, #24
 80043b6:	4a55      	ldr	r2, [pc, #340]	; (800450c <OV5640_SetLightMode+0x1fc>)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80043be:	f107 020f 	add.w	r2, r7, #15
 80043c2:	2301      	movs	r3, #1
 80043c4:	f000 f9a2 	bl	800470c <ov5640_write_reg>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <OV5640_SetLightMode+0xc4>
            {
              ret = OV5640_ERROR;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3301      	adds	r3, #1
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d9dc      	bls.n	800439a <OV5640_SetLightMode+0x8a>
            }
          }
        }
        break;
 80043e0:	e08e      	b.n	8004500 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e01f      	b.n	8004428 <OV5640_SetLightMode+0x118>
        {
          if (ret != OV5640_ERROR)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d018      	beq.n	8004422 <OV5640_SetLightMode+0x112>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80043f0:	4a47      	ldr	r2, [pc, #284]	; (8004510 <OV5640_SetLightMode+0x200>)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	885b      	ldrh	r3, [r3, #2]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f103 0018 	add.w	r0, r3, #24
 8004404:	4a42      	ldr	r2, [pc, #264]	; (8004510 <OV5640_SetLightMode+0x200>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800440c:	f107 020f 	add.w	r2, r7, #15
 8004410:	2301      	movs	r3, #1
 8004412:	f000 f97b 	bl	800470c <ov5640_write_reg>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <OV5640_SetLightMode+0x112>
            {
              ret = OV5640_ERROR;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b06      	cmp	r3, #6
 800442c:	d9dc      	bls.n	80043e8 <OV5640_SetLightMode+0xd8>
            }
          }
        }
        break;
 800442e:	e067      	b.n	8004500 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e01f      	b.n	8004476 <OV5640_SetLightMode+0x166>
        {
          if (ret != OV5640_ERROR)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d018      	beq.n	8004470 <OV5640_SetLightMode+0x160>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800443e:	4a35      	ldr	r2, [pc, #212]	; (8004514 <OV5640_SetLightMode+0x204>)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	885b      	ldrh	r3, [r3, #2]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f103 0018 	add.w	r0, r3, #24
 8004452:	4a30      	ldr	r2, [pc, #192]	; (8004514 <OV5640_SetLightMode+0x204>)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800445a:	f107 020f 	add.w	r2, r7, #15
 800445e:	2301      	movs	r3, #1
 8004460:	f000 f954 	bl	800470c <ov5640_write_reg>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <OV5640_SetLightMode+0x160>
            {
              ret = OV5640_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3301      	adds	r3, #1
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d9dc      	bls.n	8004436 <OV5640_SetLightMode+0x126>
            }
          }
        }
        break;
 800447c:	e040      	b.n	8004500 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e01f      	b.n	80044c4 <OV5640_SetLightMode+0x1b4>
        {
          if (ret != OV5640_ERROR)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d018      	beq.n	80044be <OV5640_SetLightMode+0x1ae>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <OV5640_SetLightMode+0x208>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	885b      	ldrh	r3, [r3, #2]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f103 0018 	add.w	r0, r3, #24
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <OV5640_SetLightMode+0x208>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80044a8:	f107 020f 	add.w	r2, r7, #15
 80044ac:	2301      	movs	r3, #1
 80044ae:	f000 f92d 	bl	800470c <ov5640_write_reg>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <OV5640_SetLightMode+0x1ae>
            {
              ret = OV5640_ERROR;
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
 80044bc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3301      	adds	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d9dc      	bls.n	8004484 <OV5640_SetLightMode+0x174>
            }
          }
        }
        break;
 80044ca:	e019      	b.n	8004500 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e012      	b.n	80044f8 <OV5640_SetLightMode+0x1e8>
        {

            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80044d2:	4a12      	ldr	r2, [pc, #72]	; (800451c <OV5640_SetLightMode+0x20c>)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	885b      	ldrh	r3, [r3, #2]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	73fb      	strb	r3, [r7, #15]

            I2C2_WriteData(OV5640_ADDR, OV5640_LightModeAuto[index][0], 2, tmp);
 80044e0:	4a0e      	ldr	r2, [pc, #56]	; (800451c <OV5640_SetLightMode+0x20c>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2202      	movs	r2, #2
 80044ec:	2078      	movs	r0, #120	; 0x78
 80044ee:	f7fd ff7d 	bl	80023ec <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3301      	adds	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d9e9      	bls.n	80044d2 <OV5640_SetLightMode+0x1c2>

        }
        break;
 80044fe:	bf00      	nop
    }

  return ret;
 8004500:	697b      	ldr	r3, [r7, #20]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	0800dc54 	.word	0x0800dc54
 8004510:	0800dc70 	.word	0x0800dc70
 8004514:	0800dc8c 	.word	0x0800dc8c
 8004518:	0800dca8 	.word	0x0800dca8
 800451c:	0800dcc4 	.word	0x0800dcc4

08004520 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <OV5640_SetBrightness+0x8c>)
 800452c:	f107 030c 	add.w	r3, r7, #12
 8004530:	ca07      	ldmia	r2, {r0, r1, r2}
 8004532:	c303      	stmia	r3!, {r0, r1}
 8004534:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004536:	23ff      	movs	r3, #255	; 0xff
 8004538:	75fb      	strb	r3, [r7, #23]
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2202      	movs	r2, #2
 800453e:	f245 0101 	movw	r1, #20481	; 0x5001
 8004542:	2078      	movs	r0, #120	; 0x78
 8004544:	f7fd ff52 	bl	80023ec <I2C2_WriteData>


	tmp = brightness_level[Level + 4];
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	3304      	adds	r3, #4
 800454c:	3318      	adds	r3, #24
 800454e:	443b      	add	r3, r7
 8004550:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004554:	75fb      	strb	r3, [r7, #23]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL7, 2, tmp);
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2202      	movs	r2, #2
 800455a:	f245 5187 	movw	r1, #21895	; 0x5587
 800455e:	2078      	movs	r0, #120	; 0x78
 8004560:	f7fd ff44 	bl	80023ec <I2C2_WriteData>


    tmp = 0x04;
 8004564:	2304      	movs	r3, #4
 8004566:	75fb      	strb	r3, [r7, #23]
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2202      	movs	r2, #2
 800456c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004570:	2078      	movs	r0, #120	; 0x78
 8004572:	f7fd ff3b 	bl	80023ec <I2C2_WriteData>


    if (Level < 0)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	da09      	bge.n	8004590 <OV5640_SetBrightness+0x70>
    {
      tmp = 0x01;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2202      	movs	r2, #2
 8004584:	f245 5188 	movw	r1, #21896	; 0x5588
 8004588:	2078      	movs	r0, #120	; 0x78
 800458a:	f7fd ff2f 	bl	80023ec <I2C2_WriteData>
 800458e:	e008      	b.n	80045a2 <OV5640_SetBrightness+0x82>

    }
    else
    {
      tmp = 0x09;
 8004590:	2309      	movs	r3, #9
 8004592:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2202      	movs	r2, #2
 8004598:	f245 5188 	movw	r1, #21896	; 0x5588
 800459c:	2078      	movs	r0, #120	; 0x78
 800459e:	f7fd ff25 	bl	80023ec <I2C2_WriteData>
    }


  return 1;
 80045a2:	2301      	movs	r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0800b7e8 	.word	0x0800b7e8

080045b0 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <OV5640_SetSaturation+0x88>)
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c2:	c303      	stmia	r3!, {r0, r1}
 80045c4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80045c6:	23ff      	movs	r3, #255	; 0xff
 80045c8:	77fb      	strb	r3, [r7, #31]


	I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 80045ca:	7ffb      	ldrb	r3, [r7, #31]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f245 0101 	movw	r1, #20481	; 0x5001
 80045d2:	2078      	movs	r0, #120	; 0x78
 80045d4:	f7fd ff0a 	bl	80023ec <I2C2_WriteData>


	tmp = saturation_level[Level + 4];
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	3320      	adds	r3, #32
 80045de:	443b      	add	r3, r7
 80045e0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80045e4:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL3, 2, tmp);
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80045ee:	2078      	movs	r0, #120	; 0x78
 80045f0:	f7fd fefc 	bl	80023ec <I2C2_WriteData>


	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL4, 2, tmp);
 80045f4:	7ffb      	ldrb	r3, [r7, #31]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f245 5184 	movw	r1, #21892	; 0x5584
 80045fc:	2078      	movs	r0, #120	; 0x78
 80045fe:	f7fd fef5 	bl	80023ec <I2C2_WriteData>


	tmp = 0x02;
 8004602:	2302      	movs	r3, #2
 8004604:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	2202      	movs	r2, #2
 800460a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800460e:	2078      	movs	r0, #120	; 0x78
 8004610:	f7fd feec 	bl	80023ec <I2C2_WriteData>



	tmp = 0x41;
 8004614:	2341      	movs	r3, #65	; 0x41
 8004616:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8004618:	7ffb      	ldrb	r3, [r7, #31]
 800461a:	2202      	movs	r2, #2
 800461c:	f245 5188 	movw	r1, #21896	; 0x5588
 8004620:	2078      	movs	r0, #120	; 0x78
 8004622:	f7fd fee3 	bl	80023ec <I2C2_WriteData>




    ret = OV5640_ERROR;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	61bb      	str	r3, [r7, #24]


  return ret;
 800462c:	69bb      	ldr	r3, [r7, #24]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	0800b7f4 	.word	0x0800b7f4

0800463c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	; 0x30
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8004646:	4a2e      	ldr	r2, [pc, #184]	; (8004700 <OV5640_SetHueDegree+0xc4>)
 8004648:	f107 0320 	add.w	r3, r7, #32
 800464c:	ca07      	ldmia	r2, {r0, r1, r2}
 800464e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <OV5640_SetHueDegree+0xc8>)
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	ca07      	ldmia	r2, {r0, r1, r2}
 800465a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <OV5640_SetHueDegree+0xcc>)
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	ca07      	ldmia	r2, {r0, r1, r2}
 8004666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 800466a:	23ff      	movs	r3, #255	; 0xff
 800466c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8004670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004674:	2202      	movs	r2, #2
 8004676:	f245 0101 	movw	r1, #20481	; 0x5001
 800467a:	2078      	movs	r0, #120	; 0x78
 800467c:	f7fd feb6 	bl	80023ec <I2C2_WriteData>


    tmp = 0x01;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8004686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800468a:	2202      	movs	r2, #2
 800468c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004690:	2078      	movs	r0, #120	; 0x78
 8004692:	f7fd feab 	bl	80023ec <I2C2_WriteData>


    tmp = hue_degree_ctrl1[Degree + 6];
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3306      	adds	r3, #6
 800469a:	3330      	adds	r3, #48	; 0x30
 800469c:	443b      	add	r3, r7
 800469e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80046a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL1, 2, tmp);
 80046a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046aa:	2202      	movs	r2, #2
 80046ac:	f245 5181 	movw	r1, #21889	; 0x5581
 80046b0:	2078      	movs	r0, #120	; 0x78
 80046b2:	f7fd fe9b 	bl	80023ec <I2C2_WriteData>


    tmp = hue_degree_ctrl2[Degree + 6];
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	3306      	adds	r3, #6
 80046ba:	3330      	adds	r3, #48	; 0x30
 80046bc:	443b      	add	r3, r7
 80046be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80046c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL2, 2, tmp);
 80046c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ca:	2202      	movs	r2, #2
 80046cc:	f245 5182 	movw	r1, #21890	; 0x5582
 80046d0:	2078      	movs	r0, #120	; 0x78
 80046d2:	f7fd fe8b 	bl	80023ec <I2C2_WriteData>


    tmp = hue_degree_ctrl8[Degree + 6];
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	3306      	adds	r3, #6
 80046da:	3330      	adds	r3, #48	; 0x30
 80046dc:	443b      	add	r3, r7
 80046de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 80046e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ea:	2202      	movs	r2, #2
 80046ec:	f245 5188 	movw	r1, #21896	; 0x5588
 80046f0:	2078      	movs	r0, #120	; 0x78
 80046f2:	f7fd fe7b 	bl	80023ec <I2C2_WriteData>

  return 1;
 80046f6:	2301      	movs	r3, #1
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3730      	adds	r7, #48	; 0x30
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0800b80c 	.word	0x0800b80c
 8004704:	0800b818 	.word	0x0800b818
 8004708:	0800b824 	.word	0x0800b824

0800470c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	817b      	strh	r3, [r7, #10]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681c      	ldr	r4, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6898      	ldr	r0, [r3, #8]
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	47a0      	blx	r4
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}
	...

0800473c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_MspInit+0x44>)
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <HAL_MspInit+0x44>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6613      	str	r3, [r2, #96]	; 0x60
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_MspInit+0x44>)
 8004750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_MspInit+0x44>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_MspInit+0x44>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_MspInit+0x44>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 031c 	add.w	r3, r7, #28
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_DCMI_MspInit+0x148>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f040 808d 	bne.w	80048c2 <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80047a8:	4b49      	ldr	r3, [pc, #292]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ac:	4a48      	ldr	r2, [pc, #288]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80047c0:	4b43      	ldr	r3, [pc, #268]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	4a42      	ldr	r2, [pc, #264]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047d8:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047dc:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e4:	4b3a      	ldr	r3, [pc, #232]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047f0:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	4a36      	ldr	r2, [pc, #216]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047f6:	f043 0310 	orr.w	r3, r3, #16
 80047fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047fc:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_DCMI_MspInit+0x14c>)
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8004808:	f645 7320 	movw	r3, #24352	; 0x5f20
 800480c:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	2302      	movs	r3, #2
 8004810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004816:	2302      	movs	r3, #2
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800481a:	230a      	movs	r3, #10
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	482b      	ldr	r0, [pc, #172]	; (80048d4 <HAL_DCMI_MspInit+0x150>)
 8004826:	f001 fe67 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800482a:	23b0      	movs	r3, #176	; 0xb0
 800482c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482e:	2302      	movs	r3, #2
 8004830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004836:	2302      	movs	r3, #2
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800483a:	230a      	movs	r3, #10
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800483e:	f107 031c 	add.w	r3, r7, #28
 8004842:	4619      	mov	r1, r3
 8004844:	4824      	ldr	r0, [pc, #144]	; (80048d8 <HAL_DCMI_MspInit+0x154>)
 8004846:	f001 fe57 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800484a:	2320      	movs	r3, #32
 800484c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004856:	2302      	movs	r3, #2
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800485a:	230a      	movs	r3, #10
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800485e:	f107 031c 	add.w	r3, r7, #28
 8004862:	4619      	mov	r1, r3
 8004864:	481d      	ldr	r0, [pc, #116]	; (80048dc <HAL_DCMI_MspInit+0x158>)
 8004866:	f001 fe47 	bl	80064f8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_DCMI_MspInit+0x160>)
 800486e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 8004872:	2200      	movs	r2, #0
 8004874:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 8004892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004896:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 800489a:	2220      	movs	r2, #32
 800489c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 80048a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80048a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80048a6:	480e      	ldr	r0, [pc, #56]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 80048a8:	f001 f8da 	bl	8005a60 <HAL_DMA_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 80048b2:	f7ff fa21 	bl	8003cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 80048ba:	651a      	str	r2, [r3, #80]	; 0x50
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <HAL_DCMI_MspInit+0x15c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80048c2:	bf00      	nop
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	50050000 	.word	0x50050000
 80048d0:	40021000 	.word	0x40021000
 80048d4:	48001c00 	.word	0x48001c00
 80048d8:	48002000 	.word	0x48002000
 80048dc:	48001000 	.word	0x48001000
 80048e0:	200002d4 	.word	0x200002d4
 80048e4:	4002046c 	.word	0x4002046c

080048e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_DMA2D_MspInit+0x44>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d113      	bne.n	8004922 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_DMA2D_MspInit+0x48>)
 80048fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fe:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <HAL_DMA2D_MspInit+0x48>)
 8004900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004904:	6493      	str	r3, [r2, #72]	; 0x48
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_DMA2D_MspInit+0x48>)
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004912:	2200      	movs	r2, #0
 8004914:	2100      	movs	r1, #0
 8004916:	205a      	movs	r0, #90	; 0x5a
 8004918:	f000 fbf7 	bl	800510a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800491c:	205a      	movs	r0, #90	; 0x5a
 800491e:	f000 fc10 	bl	8005142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	4002b000 	.word	0x4002b000
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b0ae      	sub	sp, #184	; 0xb8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800494c:	f107 0318 	add.w	r3, r7, #24
 8004950:	228c      	movs	r2, #140	; 0x8c
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f005 fda9 	bl	800a4ac <memset>
  if(huart->Instance==USART2)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <HAL_UART_MspInit+0xf4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d15c      	bne.n	8004a1e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004964:	2302      	movs	r3, #2
 8004966:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004968:	2300      	movs	r3, #0
 800496a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800496c:	f107 0318 	add.w	r3, r7, #24
 8004970:	4618      	mov	r0, r3
 8004972:	f003 fe17 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800497c:	f7ff f9bc 	bl	8003cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004980:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 8004986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498a:	6593      	str	r3, [r2, #88]	; 0x58
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_UART_MspInit+0xf8>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80049c8:	2340      	movs	r3, #64	; 0x40
 80049ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ce:	2302      	movs	r3, #2
 80049d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049e0:	2307      	movs	r3, #7
 80049e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80049e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4810      	ldr	r0, [pc, #64]	; (8004a30 <HAL_UART_MspInit+0xfc>)
 80049ee:	f001 fd83 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80049f2:	2304      	movs	r3, #4
 80049f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a04:	2303      	movs	r3, #3
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004a14:	4619      	mov	r1, r3
 8004a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a1a:	f001 fd6d 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a1e:	bf00      	nop
 8004a20:	37b8      	adds	r7, #184	; 0xb8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40004400 	.word	0x40004400
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	48000c00 	.word	0x48000c00

08004a34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004a3a:	1d3b      	adds	r3, r7, #4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_FMC_MspInit+0xc4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d14f      	bne.n	8004af0 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_FMC_MspInit+0xc4>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <HAL_FMC_MspInit+0xc8>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_FMC_MspInit+0xc8>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6513      	str	r3, [r2, #80]	; 0x50
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_FMC_MspInit+0xc8>)
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8004a6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004a72:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a74:	2302      	movs	r3, #2
 8004a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a80:	230c      	movs	r3, #12
 8004a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	481d      	ldr	r0, [pc, #116]	; (8004b00 <HAL_FMC_MspInit+0xcc>)
 8004a8a:	f001 fd35 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8004a8e:	f240 233f 	movw	r3, #575	; 0x23f
 8004a92:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4816      	ldr	r0, [pc, #88]	; (8004b04 <HAL_FMC_MspInit+0xd0>)
 8004aaa:	f001 fd25 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8004aae:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 8004ab2:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004abc:	2303      	movs	r3, #3
 8004abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ac4:	1d3b      	adds	r3, r7, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	480f      	ldr	r0, [pc, #60]	; (8004b08 <HAL_FMC_MspInit+0xd4>)
 8004aca:	f001 fd15 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8004ace:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004ad2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004adc:	2303      	movs	r3, #3
 8004ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <HAL_FMC_MspInit+0xd8>)
 8004aea:	f001 fd05 	bl	80064f8 <HAL_GPIO_Init>
 8004aee:	e000      	b.n	8004af2 <HAL_FMC_MspInit+0xbe>
    return;
 8004af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	2001c634 	.word	0x2001c634
 8004afc:	40021000 	.word	0x40021000
 8004b00:	48001000 	.word	0x48001000
 8004b04:	48001800 	.word	0x48001800
 8004b08:	48000c00 	.word	0x48000c00
 8004b0c:	48001400 	.word	0x48001400

08004b10 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004b18:	f7ff ff8c 	bl	8004a34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b28:	e7fe      	b.n	8004b28 <NMI_Handler+0x4>

08004b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b2e:	e7fe      	b.n	8004b2e <HardFault_Handler+0x4>

08004b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b34:	e7fe      	b.n	8004b34 <MemManage_Handler+0x4>

08004b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b3a:	e7fe      	b.n	8004b3a <BusFault_Handler+0x4>

08004b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <UsageFault_Handler+0x4>

08004b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b70:	f000 f988 	bl	8004e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8004b7c:	2020      	movs	r0, #32
 8004b7e:	f001 ff57 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8004b82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b86:	f001 ff53 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 8004b8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b8e:	f001 ff4f 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <USART2_IRQHandler+0x10>)
 8004b9e:	f004 faf5 	bl	800918c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000374 	.word	0x20000374

08004bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8004bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004bb4:	f001 ff3c 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8004bb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bbc:	f001 ff38 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 8004bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bc4:	f001 ff34 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8004bc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bcc:	f001 ff30 	bl	8006a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004bd8:	4802      	ldr	r0, [pc, #8]	; (8004be4 <DMA2_Channel6_IRQHandler+0x10>)
 8004bda:	f001 f8d8 	bl	8005d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200002d4 	.word	0x200002d4

08004be8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004bec:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <DCMI_IRQHandler+0x10>)
 8004bee:	f000 fca3 	bl	8005538 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000270 	.word	0x20000270

08004bfc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004c00:	4802      	ldr	r0, [pc, #8]	; (8004c0c <DMA2D_IRQHandler+0x10>)
 8004c02:	f001 fa2f 	bl	8006064 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000031c 	.word	0x2000031c

08004c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	return 1;
 8004c14:	2301      	movs	r3, #1
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <_kill>:

int _kill(int pid, int sig)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c2a:	f005 fbfb 	bl	800a424 <__errno>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2216      	movs	r2, #22
 8004c32:	601a      	str	r2, [r3, #0]
	return -1;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_exit>:

void _exit (int status)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c48:	f04f 31ff 	mov.w	r1, #4294967295
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ffe7 	bl	8004c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c52:	e7fe      	b.n	8004c52 <_exit+0x12>

08004c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e00a      	b.n	8004c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c66:	f3af 8000 	nop.w
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	60ba      	str	r2, [r7, #8]
 8004c72:	b2ca      	uxtb	r2, r1
 8004c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	dbf0      	blt.n	8004c66 <_read+0x12>
	}

return len;
 8004c84:	687b      	ldr	r3, [r7, #4]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	return -1;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <_isatty>:

int _isatty(int file)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8004cce:	2301      	movs	r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <_sbrk+0x5c>)
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <_sbrk+0x60>)
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <_sbrk+0x64>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <_sbrk+0x64>)
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <_sbrk+0x68>)
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <_sbrk+0x64>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d207      	bcs.n	8004d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d28:	f005 fb7c 	bl	800a424 <__errno>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	220c      	movs	r2, #12
 8004d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	e009      	b.n	8004d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <_sbrk+0x64>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <_sbrk+0x64>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <_sbrk+0x64>)
 8004d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20050000 	.word	0x20050000
 8004d58:	00000400 	.word	0x00000400
 8004d5c:	2001c638 	.word	0x2001c638
 8004d60:	2001c650 	.word	0x2001c650

08004d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <SystemInit+0x20>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <SystemInit+0x20>)
 8004d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d8c:	f7ff ffea 	bl	8004d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d90:	480c      	ldr	r0, [pc, #48]	; (8004dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d92:	490d      	ldr	r1, [pc, #52]	; (8004dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <LoopForever+0xe>)
  movs r3, #0
 8004d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d98:	e002      	b.n	8004da0 <LoopCopyDataInit>

08004d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d9e:	3304      	adds	r3, #4

08004da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004da4:	d3f9      	bcc.n	8004d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004da8:	4c0a      	ldr	r4, [pc, #40]	; (8004dd4 <LoopForever+0x16>)
  movs r3, #0
 8004daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dac:	e001      	b.n	8004db2 <LoopFillZerobss>

08004dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004db0:	3204      	adds	r2, #4

08004db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004db4:	d3fb      	bcc.n	8004dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004db6:	f005 fb4d 	bl	800a454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004dba:	f7fe fa77 	bl	80032ac <main>

08004dbe <LoopForever>:

LoopForever:
    b LoopForever
 8004dbe:	e7fe      	b.n	8004dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004dc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dc8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8004dcc:	0800de4c 	.word	0x0800de4c
  ldr r2, =_sbss
 8004dd0:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8004dd4:	2001c650 	.word	0x2001c650

08004dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004dd8:	e7fe      	b.n	8004dd8 <ADC1_2_IRQHandler>

08004dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004de4:	2003      	movs	r0, #3
 8004de6:	f000 f985 	bl	80050f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dea:	2000      	movs	r0, #0
 8004dec:	f000 f80e 	bl	8004e0c <HAL_InitTick>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	e001      	b.n	8004e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dfc:	f7ff fc9e 	bl	800473c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e00:	79fb      	ldrb	r3, [r7, #7]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_InitTick+0x6c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_InitTick+0x70>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <HAL_InitTick+0x6c>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f99f 	bl	800517a <HAL_SYSTICK_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b0f      	cmp	r3, #15
 8004e46:	d809      	bhi.n	8004e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	f000 f95b 	bl	800510a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e54:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <HAL_InitTick+0x74>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e007      	b.n	8004e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e004      	b.n	8004e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	e001      	b.n	8004e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200000f8 	.word	0x200000f8
 8004e7c:	200000f0 	.word	0x200000f0
 8004e80:	200000f4 	.word	0x200000f4

08004e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_IncTick+0x20>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_IncTick+0x24>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <HAL_IncTick+0x24>)
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	200000f8 	.word	0x200000f8
 8004ea8:	2001c63c 	.word	0x2001c63c

08004eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return uwTick;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_GetTick+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2001c63c 	.word	0x2001c63c

08004ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ecc:	f7ff ffee 	bl	8004eac <HAL_GetTick>
 8004ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d005      	beq.n	8004eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <HAL_Delay+0x44>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eea:	bf00      	nop
 8004eec:	f7ff ffde 	bl	8004eac <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d8f7      	bhi.n	8004eec <HAL_Delay+0x28>
  {
  }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200000f8 	.word	0x200000f8

08004f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <__NVIC_SetPriorityGrouping+0x44>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f3e:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <__NVIC_SetPriorityGrouping+0x44>)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	60d3      	str	r3, [r2, #12]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <__NVIC_GetPriorityGrouping+0x18>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	0a1b      	lsrs	r3, r3, #8
 8004f5e:	f003 0307 	and.w	r3, r3, #7
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db0b      	blt.n	8004f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	4907      	ldr	r1, [pc, #28]	; (8004fa8 <__NVIC_EnableIRQ+0x38>)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2001      	movs	r0, #1
 8004f92:	fa00 f202 	lsl.w	r2, r0, r2
 8004f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000e100 	.word	0xe000e100

08004fac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db12      	blt.n	8004fe4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f003 021f 	and.w	r2, r3, #31
 8004fc4:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <__NVIC_DisableIRQ+0x44>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2001      	movs	r0, #1
 8004fce:	fa00 f202 	lsl.w	r2, r0, r2
 8004fd2:	3320      	adds	r3, #32
 8004fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd8:	f3bf 8f4f 	dsb	sy
}
 8004fdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fde:	f3bf 8f6f 	isb	sy
}
 8004fe2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000e100 	.word	0xe000e100

08004ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db0a      	blt.n	800501e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	490c      	ldr	r1, [pc, #48]	; (8005040 <__NVIC_SetPriority+0x4c>)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	0112      	lsls	r2, r2, #4
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	440b      	add	r3, r1
 8005018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800501c:	e00a      	b.n	8005034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	4908      	ldr	r1, [pc, #32]	; (8005044 <__NVIC_SetPriority+0x50>)
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	3b04      	subs	r3, #4
 800502c:	0112      	lsls	r2, r2, #4
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	440b      	add	r3, r1
 8005032:	761a      	strb	r2, [r3, #24]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000e100 	.word	0xe000e100
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	; 0x24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f1c3 0307 	rsb	r3, r3, #7
 8005062:	2b04      	cmp	r3, #4
 8005064:	bf28      	it	cs
 8005066:	2304      	movcs	r3, #4
 8005068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	3304      	adds	r3, #4
 800506e:	2b06      	cmp	r3, #6
 8005070:	d902      	bls.n	8005078 <NVIC_EncodePriority+0x30>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3b03      	subs	r3, #3
 8005076:	e000      	b.n	800507a <NVIC_EncodePriority+0x32>
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	401a      	ands	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005090:	f04f 31ff 	mov.w	r1, #4294967295
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	43d9      	mvns	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a0:	4313      	orrs	r3, r2
         );
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3724      	adds	r7, #36	; 0x24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c0:	d301      	bcc.n	80050c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050c2:	2301      	movs	r3, #1
 80050c4:	e00f      	b.n	80050e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <SysTick_Config+0x40>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ce:	210f      	movs	r1, #15
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	f7ff ff8e 	bl	8004ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <SysTick_Config+0x40>)
 80050da:	2200      	movs	r2, #0
 80050dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <SysTick_Config+0x40>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000e010 	.word	0xe000e010

080050f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff05 	bl	8004f0c <__NVIC_SetPriorityGrouping>
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	4603      	mov	r3, r0
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800511c:	f7ff ff1a 	bl	8004f54 <__NVIC_GetPriorityGrouping>
 8005120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff ff8e 	bl	8005048 <NVIC_EncodePriority>
 800512c:	4602      	mov	r2, r0
 800512e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff ff5d 	bl	8004ff4 <__NVIC_SetPriority>
}
 800513a:	bf00      	nop
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	4603      	mov	r3, r0
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800514c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff0d 	bl	8004f70 <__NVIC_EnableIRQ>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff ff1d 	bl	8004fac <__NVIC_DisableIRQ>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ff94 	bl	80050b0 <SysTick_Config>
 8005188:	4603      	mov	r3, r0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e075      	b.n	8005292 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fae2 	bl	8004784 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051d6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6819      	ldr	r1, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_DCMI_Init+0x108>)
 80051f2:	400b      	ands	r3, r1
 80051f4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6819      	ldr	r1, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800520a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005216:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005222:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800522e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800523a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b10      	cmp	r3, #16
 800524a:	d112      	bne.n	8005272 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	7f1b      	ldrb	r3, [r3, #28]
 8005250:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7f5b      	ldrb	r3, [r3, #29]
 8005256:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005258:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7f9b      	ldrb	r3, [r3, #30]
 800525e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005260:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7fdb      	ldrb	r3, [r3, #31]
 8005268:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800526e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005270:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 021f 	orr.w	r2, r2, #31
 8005280:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	ffe0f007 	.word	0xffe0f007

080052a0 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_DCMI_Start_DMA+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0b8      	b.n	800542e <HAL_DCMI_Start_DMA+0x18e>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d6:	f023 0302 	bic.w	r3, r3, #2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	431a      	orrs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	4a52      	ldr	r2, [pc, #328]	; (8005438 <HAL_DCMI_Start_DMA+0x198>)
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	4a51      	ldr	r2, [pc, #324]	; (800543c <HAL_DCMI_Start_DMA+0x19c>)
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	2200      	movs	r2, #0
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d21f      	bcs.n	8005348 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3328      	adds	r3, #40	; 0x28
 8005318:	4619      	mov	r1, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	f000 fc57 	bl	8005bd0 <HAL_DMA_Start_IT>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d075      	beq.n	8005414 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e072      	b.n	800542e <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	2220      	movs	r2, #32
 800534e:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_DCMI_Start_DMA+0x1a0>)
 8005356:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8005364:	6838      	ldr	r0, [r7, #0]
 8005366:	f000 faf5 	bl	8005954 <DCMI_TransferSize>
 800536a:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e053      	b.n	800542e <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	005a      	lsls	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	085a      	lsrs	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3328      	adds	r3, #40	; 0x28
 80053e2:	4619      	mov	r1, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f000 fbf1 	bl	8005bd0 <HAL_DMA_Start_IT>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00f      	beq.n	8005414 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e00c      	b.n	800542e <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	0800575d 	.word	0x0800575d
 800543c:	08005925 	.word	0x08005925
 8005440:	0800588d 	.word	0x0800588d

08005444 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_DCMI_Suspend+0x16>
 8005456:	2302      	movs	r3, #2
 8005458:	e03d      	b.n	80054d6 <HAL_DCMI_Suspend+0x92>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d12e      	bne.n	80054cc <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2205      	movs	r2, #5
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005486:	f7ff fd11 	bl	8004eac <HAL_GetTick>
 800548a:	60f8      	str	r0, [r7, #12]

    /* Check if the DCMI capture is effectively disabled */
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800548c:	e017      	b.n	80054be <HAL_DCMI_Suspend+0x7a>
    {
      if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 800548e:	f7ff fd0d 	bl	8004eac <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549c:	d90f      	bls.n	80054be <HAL_DCMI_Suspend+0x7a>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e00b      	b.n	80054d6 <HAL_DCMI_Suspend+0x92>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e0      	bne.n	800548e <HAL_DCMI_Suspend+0x4a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_DCMI_Resume+0x16>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e01a      	b.n	800552a <HAL_DCMI_Resume+0x4c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b05      	cmp	r3, #5
 8005506:	d10b      	bne.n	8005520 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2204      	movs	r2, #4
 8005558:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2202      	movs	r2, #2
 8005576:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	f043 0201 	orr.w	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	2b00      	cmp	r3, #0
 800558a:	d014      	beq.n	80055b6 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	4a24      	ldr	r2, [pc, #144]	; (800562c <HAL_DCMI_IRQHandler+0xf4>)
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fbb3 	bl	8005d0c <HAL_DMA_Abort_IT>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f9b7 	bl	8005924 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2210      	movs	r2, #16
 80055c6:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fd fbb7 	bl	8002d3c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2208      	movs	r2, #8
 80055de:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fd fbbc 	bl	8002d5e <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d10b      	bne.n	8005616 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 021e 	bic.w	r2, r2, #30
 800560c:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2201      	movs	r2, #1
 800561c:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd fe1e 	bl	8003260 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	08005925 	.word	0x08005925

08005630 <HAL_DCMI_ConfigCrop>:
  * @note For all the parameters, the actual value is the input data + 1 (e.g. YSize = 0x0 means 1 line,
  *       YSize = 0x1 means 2 lines, ...)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_DCMI_ConfigCrop+0x1c>
 8005648:	2302      	movs	r3, #2
 800564a:	e02a      	b.n	80056a2 <HAL_DCMI_ConfigCrop+0x72>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure CROP */
  MODIFY_REG(hdcmi->Instance->CWSIZER, (DCMI_CWSIZE_VLINE|DCMI_CWSIZE_CAPCNT), (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos)));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 21c0 	and.w	r1, r3, #3221274624	; 0xc000c000
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	041a      	lsls	r2, r3, #16
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(hdcmi->Instance->CWSTRTR, (DCMI_CWSTRT_VST|DCMI_CWSTRT_HOFFCNT), (X0 | (Y0 << DCMI_CWSTRT_VST_Pos)));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_DCMI_ConfigCrop+0x80>)
 800567e:	4013      	ands	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	0411      	lsls	r1, r2, #16
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4311      	orrs	r1, r2
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	430b      	orrs	r3, r1
 800568e:	6213      	str	r3, [r2, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	e000c000 	.word	0xe000c000

080056b4 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_DCMI_DisableCrop+0x16>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e018      	b.n	80056fc <HAL_DCMI_DisableCrop+0x48>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0204 	bic.w	r2, r2, #4
 80056e8:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_DCMI_EnableCrop+0x16>
 800571a:	2302      	movs	r3, #2
 800571c:	e018      	b.n	8005750 <HAL_DCMI_EnableCrop+0x48>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI Crop feature */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0204 	orr.w	r2, r2, #4
 800573c:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05c      	beq.n	800582c <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005796:	e075      	b.n	8005884 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	1e5a      	subs	r2, r3, #1
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ac:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f000 f9e7 	bl	8005bd0 <HAL_DMA_Start_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d03d      	beq.n	8005884 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8005824:	69f8      	ldr	r0, [r7, #28]
 8005826:	f7fd faab 	bl	8002d80 <HAL_DCMI_ErrorCallback>
}
 800582a:	e02b      	b.n	8005884 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d124      	bne.n	8005884 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01d      	beq.n	8005884 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d10f      	bne.n	800587e <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 021e 	bic.w	r2, r2, #30
 800586c:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 800587e:	69f8      	ldr	r0, [r7, #28]
 8005880:	f7fd fcee 	bl	8003260 <HAL_DCMI_FrameEventCallback>
}
 8005884:	bf00      	nop
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03c      	beq.n	800591c <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d036      	beq.n	800591c <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c8:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	1ad2      	subs	r2, r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f000 f96e 	bl	8005bd0 <HAL_DMA_Start_IT>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d010      	beq.n	800591c <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7fd fa32 	bl	8002d80 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7fd fa1a 	bl	8002d80 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b096      	sub	sp, #88	; 0x58
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 800595c:	2301      	movs	r3, #1
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f004 fd9d 	bl	800a4ac <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8005972:	2302      	movs	r3, #2
 8005974:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 8005976:	e02b      	b.n	80059d0 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 8005978:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <DCMI_TransferSize+0x108>)
 800597a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005982:	429a      	cmp	r2, r3
 8005984:	d328      	bcc.n	80059d8 <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 8005986:	e014      	b.n	80059b2 <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 8005988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3358      	adds	r3, #88	; 0x58
 800598e:	443b      	add	r3, r7
 8005990:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3358      	adds	r3, #88	; 0x58
 800599c:	443b      	add	r3, r7
 800599e:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 80059a2:	4a2e      	ldr	r2, [pc, #184]	; (8005a5c <DCMI_TransferSize+0x108>)
 80059a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <DCMI_TransferSize+0x108>)
 80059b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80059c0:	fb01 f202 	mul.w	r2, r1, r2
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0de      	beq.n	8005988 <DCMI_TransferSize+0x34>
    }
    j++;
 80059ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059cc:	3301      	adds	r3, #1
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d9d0      	bls.n	8005978 <DCMI_TransferSize+0x24>
 80059d6:	e000      	b.n	80059da <DCMI_TransferSize+0x86>
      break;
 80059d8:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3b01      	subs	r3, #1
 80059de:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 80059e0:	230f      	movs	r3, #15
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80059e4:	e02c      	b.n	8005a40 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 80059e6:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <DCMI_TransferSize+0x108>)
 80059e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d81d      	bhi.n	8005a38 <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <DCMI_TransferSize+0x108>)
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	3358      	adds	r3, #88	; 0x58
 8005a12:	443b      	add	r3, r7
 8005a14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	3358      	adds	r3, #88	; 0x58
 8005a20:	443b      	add	r3, r7
 8005a22:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 8005a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	3358      	adds	r3, #88	; 0x58
 8005a2c:	443b      	add	r3, r7
 8005a2e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1d7      	bne.n	80059e6 <DCMI_TransferSize+0x92>
 8005a36:	e000      	b.n	8005a3a <DCMI_TransferSize+0xe6>
        break;
 8005a38:	bf00      	nop
      }
    }
    j--;
 8005a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <DCMI_TransferSize+0xfc>
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d9ea      	bls.n	8005a26 <DCMI_TransferSize+0xd2>
  }



  return output;
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3758      	adds	r7, #88	; 0x58
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0800dd28 	.word	0x0800dd28

08005a60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e098      	b.n	8005ba4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <HAL_DMA_Init+0x150>)
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d80f      	bhi.n	8005a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <HAL_DMA_Init+0x154>)
 8005a86:	4413      	add	r3, r2
 8005a88:	4a4b      	ldr	r2, [pc, #300]	; (8005bb8 <HAL_DMA_Init+0x158>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	009a      	lsls	r2, r3, #2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a48      	ldr	r2, [pc, #288]	; (8005bbc <HAL_DMA_Init+0x15c>)
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a9c:	e00e      	b.n	8005abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <HAL_DMA_Init+0x160>)
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_DMA_Init+0x158>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	009a      	lsls	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <HAL_DMA_Init+0x164>)
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b16:	d039      	beq.n	8005b8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	4a27      	ldr	r2, [pc, #156]	; (8005bbc <HAL_DMA_Init+0x15c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d11a      	bne.n	8005b58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b22:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <HAL_DMA_Init+0x168>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f003 031c 	and.w	r3, r3, #28
 8005b2e:	210f      	movs	r1, #15
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	4924      	ldr	r1, [pc, #144]	; (8005bc8 <HAL_DMA_Init+0x168>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b3c:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_DMA_Init+0x168>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	f003 031c 	and.w	r3, r3, #28
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	491d      	ldr	r1, [pc, #116]	; (8005bc8 <HAL_DMA_Init+0x168>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]
 8005b56:	e019      	b.n	8005b8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b58:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <HAL_DMA_Init+0x16c>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	f003 031c 	and.w	r3, r3, #28
 8005b64:	210f      	movs	r1, #15
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	4917      	ldr	r1, [pc, #92]	; (8005bcc <HAL_DMA_Init+0x16c>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <HAL_DMA_Init+0x16c>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f003 031c 	and.w	r3, r3, #28
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	4911      	ldr	r1, [pc, #68]	; (8005bcc <HAL_DMA_Init+0x16c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40020407 	.word	0x40020407
 8005bb4:	bffdfff8 	.word	0xbffdfff8
 8005bb8:	cccccccd 	.word	0xcccccccd
 8005bbc:	40020000 	.word	0x40020000
 8005bc0:	bffdfbf8 	.word	0xbffdfbf8
 8005bc4:	40020400 	.word	0x40020400
 8005bc8:	400200a8 	.word	0x400200a8
 8005bcc:	400204a8 	.word	0x400204a8

08005bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_DMA_Start_IT+0x20>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e04b      	b.n	8005c88 <HAL_DMA_Start_IT+0xb8>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d13a      	bne.n	8005c7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f95f 	bl	8005eec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 020e 	orr.w	r2, r2, #14
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e00f      	b.n	8005c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0204 	bic.w	r2, r2, #4
 8005c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 020a 	orr.w	r2, r2, #10
 8005c66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e005      	b.n	8005c86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
 8005c84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d008      	beq.n	8005cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2204      	movs	r2, #4
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e022      	b.n	8005d00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 020e 	bic.w	r2, r2, #14
 8005cc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f003 021c 	and.w	r2, r3, #28
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d005      	beq.n	8005d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2204      	movs	r2, #4
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e029      	b.n	8005d84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 020e 	bic.w	r2, r2, #14
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d54:	f003 021c 	and.w	r2, r3, #28
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
    }
  }
  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f003 031c 	and.w	r3, r3, #28
 8005dae:	2204      	movs	r2, #4
 8005db0:	409a      	lsls	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d026      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x7a>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d021      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0204 	bic.w	r2, r2, #4
 8005de0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	f003 021c 	and.w	r2, r3, #28
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2104      	movs	r1, #4
 8005df0:	fa01 f202 	lsl.w	r2, r1, r2
 8005df4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d071      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005e06:	e06c      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	f003 031c 	and.w	r3, r3, #28
 8005e10:	2202      	movs	r2, #2
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02e      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xec>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d029      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 020a 	bic.w	r2, r2, #10
 8005e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	f003 021c 	and.w	r2, r3, #28
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2102      	movs	r1, #2
 8005e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d038      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e78:	e033      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	f003 031c 	and.w	r3, r3, #28
 8005e82:	2208      	movs	r2, #8
 8005e84:	409a      	lsls	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02a      	beq.n	8005ee4 <HAL_DMA_IRQHandler+0x156>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d025      	beq.n	8005ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 020e 	bic.w	r2, r2, #14
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	f003 021c 	and.w	r2, r3, #28
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
}
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f003 021c 	and.w	r2, r3, #28
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2101      	movs	r1, #1
 8005f08:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d108      	bne.n	8005f30 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f2e:	e007      	b.n	8005f40 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e04b      	b.n	8005ff6 <HAL_DMA2D_Init+0xaa>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fe fcb8 	bl	80048e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
#else
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]
  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	f023 0107 	bic.w	r1, r3, #7
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005fb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68d1      	ldr	r1, [r2, #12]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	051a      	lsls	r2, r3, #20
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	055b      	lsls	r3, r3, #21
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_DMA2D_Start_IT>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                     uint32_t Height)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af02      	add	r7, sp, #8
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_DMA2D_Start_IT+0x1c>
 8006016:	2302      	movs	r3, #2
 8006018:	e020      	b.n	800605c <HAL_DMA2D_Start_IT+0x5e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f9c3 	bl	80063c0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8006048:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d026      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800609e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f043 0201 	orr.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d026      	beq.n	800612c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d021      	beq.n	800612c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2220      	movs	r2, #32
 80060fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f043 0202 	orr.w	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d026      	beq.n	8006184 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800613c:	2b00      	cmp	r3, #0
 800613e:	d021      	beq.n	8006184 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800614e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	f043 0204 	orr.w	r2, r3, #4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2204      	movs	r2, #4
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d013      	beq.n	80061b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2204      	movs	r2, #4
 80061ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f853 	bl	800625c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d024      	beq.n	800620a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01f      	beq.n	800620a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2202      	movs	r2, #2
 80061e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01f      	beq.n	8006254 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01a      	beq.n	8006254 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800622c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2210      	movs	r2, #16
 8006234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f80e 	bl	8006270 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_DMA2D_ConfigLayer+0x20>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e084      	b.n	80063ae <HAL_DMA2D_ConfigLayer+0x12a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	3320      	adds	r3, #32
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80062e4:	4b35      	ldr	r3, [pc, #212]	; (80063bc <HAL_DMA2D_ConfigLayer+0x138>)
 80062e6:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b0a      	cmp	r3, #10
 80062ee:	d003      	beq.n	80062f8 <HAL_DMA2D_ConfigLayer+0x74>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b09      	cmp	r3, #9
 80062f6:	d107      	bne.n	8006308 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e005      	b.n	8006314 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d120      	bne.n	800635c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	43db      	mvns	r3, r3
 8006324:	ea02 0103 	and.w	r1, r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	430a      	orrs	r2, r1
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b0a      	cmp	r3, #10
 8006342:	d003      	beq.n	800634c <HAL_DMA2D_ConfigLayer+0xc8>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b09      	cmp	r3, #9
 800634a:	d127      	bne.n	800639c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
 800635a:	e01f      	b.n	800639c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69da      	ldr	r2, [r3, #28]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	43db      	mvns	r3, r3
 8006366:	ea02 0103 	and.w	r1, r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	430a      	orrs	r2, r1
 8006372:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b0a      	cmp	r3, #10
 8006384:	d003      	beq.n	800638e <HAL_DMA2D_ConfigLayer+0x10a>
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b09      	cmp	r3, #9
 800638c:	d106      	bne.n	800639c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800639a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	ff33000f 	.word	0xff33000f

080063c0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b08b      	sub	sp, #44	; 0x2c
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	041a      	lsls	r2, r3, #16
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063f8:	d174      	bne.n	80064e4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006400:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006408:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006410:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d108      	bne.n	8006432 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	431a      	orrs	r2, r3
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	4313      	orrs	r3, r2
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
 8006430:	e053      	b.n	80064da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d106      	bne.n	8006448 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4313      	orrs	r3, r2
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	e048      	b.n	80064da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d111      	bne.n	8006474 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	0cdb      	lsrs	r3, r3, #19
 8006454:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	0a9b      	lsrs	r3, r3, #10
 800645a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	08db      	lsrs	r3, r3, #3
 8006460:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	02db      	lsls	r3, r3, #11
 800646a:	4313      	orrs	r3, r2
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	e032      	b.n	80064da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b03      	cmp	r3, #3
 800647a:	d117      	bne.n	80064ac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	0fdb      	lsrs	r3, r3, #31
 8006480:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	0cdb      	lsrs	r3, r3, #19
 8006486:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	0adb      	lsrs	r3, r3, #11
 800648c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	08db      	lsrs	r3, r3, #3
 8006492:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	029b      	lsls	r3, r3, #10
 800649c:	431a      	orrs	r2, r3
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	03db      	lsls	r3, r3, #15
 80064a2:	4313      	orrs	r3, r2
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
 80064aa:	e016      	b.n	80064da <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	0f1b      	lsrs	r3, r3, #28
 80064b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	0b1b      	lsrs	r3, r3, #12
 80064bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	011a      	lsls	r2, r3, #4
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	431a      	orrs	r2, r3
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	031b      	lsls	r3, r3, #12
 80064d2:	4313      	orrs	r3, r2
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80064e2:	e003      	b.n	80064ec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	60da      	str	r2, [r3, #12]
}
 80064ec:	bf00      	nop
 80064ee:	372c      	adds	r7, #44	; 0x2c
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006506:	e166      	b.n	80067d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2101      	movs	r1, #1
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8158 	beq.w	80067d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d005      	beq.n	8006538 <HAL_GPIO_Init+0x40>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d130      	bne.n	800659a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	2203      	movs	r2, #3
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800656e:	2201      	movs	r2, #1
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	f003 0201 	and.w	r2, r3, #1
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d017      	beq.n	80065d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	2203      	movs	r2, #3
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4013      	ands	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d123      	bne.n	800662a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	08da      	lsrs	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3208      	adds	r2, #8
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	08da      	lsrs	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3208      	adds	r2, #8
 8006624:	6939      	ldr	r1, [r7, #16]
 8006626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	2203      	movs	r2, #3
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0203 	and.w	r2, r3, #3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80b2 	beq.w	80067d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800666c:	4b61      	ldr	r3, [pc, #388]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	4a60      	ldr	r2, [pc, #384]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	6613      	str	r3, [r2, #96]	; 0x60
 8006678:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006684:	4a5c      	ldr	r2, [pc, #368]	; (80067f8 <HAL_GPIO_Init+0x300>)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	3302      	adds	r3, #2
 800668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	220f      	movs	r2, #15
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066ae:	d02b      	beq.n	8006708 <HAL_GPIO_Init+0x210>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a52      	ldr	r2, [pc, #328]	; (80067fc <HAL_GPIO_Init+0x304>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d025      	beq.n	8006704 <HAL_GPIO_Init+0x20c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a51      	ldr	r2, [pc, #324]	; (8006800 <HAL_GPIO_Init+0x308>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01f      	beq.n	8006700 <HAL_GPIO_Init+0x208>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a50      	ldr	r2, [pc, #320]	; (8006804 <HAL_GPIO_Init+0x30c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d019      	beq.n	80066fc <HAL_GPIO_Init+0x204>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a4f      	ldr	r2, [pc, #316]	; (8006808 <HAL_GPIO_Init+0x310>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_GPIO_Init+0x200>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a4e      	ldr	r2, [pc, #312]	; (800680c <HAL_GPIO_Init+0x314>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00d      	beq.n	80066f4 <HAL_GPIO_Init+0x1fc>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a4d      	ldr	r2, [pc, #308]	; (8006810 <HAL_GPIO_Init+0x318>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <HAL_GPIO_Init+0x1f8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a4c      	ldr	r2, [pc, #304]	; (8006814 <HAL_GPIO_Init+0x31c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d101      	bne.n	80066ec <HAL_GPIO_Init+0x1f4>
 80066e8:	2307      	movs	r3, #7
 80066ea:	e00e      	b.n	800670a <HAL_GPIO_Init+0x212>
 80066ec:	2308      	movs	r3, #8
 80066ee:	e00c      	b.n	800670a <HAL_GPIO_Init+0x212>
 80066f0:	2306      	movs	r3, #6
 80066f2:	e00a      	b.n	800670a <HAL_GPIO_Init+0x212>
 80066f4:	2305      	movs	r3, #5
 80066f6:	e008      	b.n	800670a <HAL_GPIO_Init+0x212>
 80066f8:	2304      	movs	r3, #4
 80066fa:	e006      	b.n	800670a <HAL_GPIO_Init+0x212>
 80066fc:	2303      	movs	r3, #3
 80066fe:	e004      	b.n	800670a <HAL_GPIO_Init+0x212>
 8006700:	2302      	movs	r3, #2
 8006702:	e002      	b.n	800670a <HAL_GPIO_Init+0x212>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_GPIO_Init+0x212>
 8006708:	2300      	movs	r3, #0
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f002 0203 	and.w	r2, r2, #3
 8006710:	0092      	lsls	r2, r2, #2
 8006712:	4093      	lsls	r3, r2
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800671a:	4937      	ldr	r1, [pc, #220]	; (80067f8 <HAL_GPIO_Init+0x300>)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	3302      	adds	r3, #2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006728:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <HAL_GPIO_Init+0x320>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	43db      	mvns	r3, r3
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4013      	ands	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800674c:	4a32      	ldr	r2, [pc, #200]	; (8006818 <HAL_GPIO_Init+0x320>)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	43db      	mvns	r3, r3
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4013      	ands	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006776:	4a28      	ldr	r2, [pc, #160]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800677c:	4b26      	ldr	r3, [pc, #152]	; (8006818 <HAL_GPIO_Init+0x320>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	43db      	mvns	r3, r3
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4013      	ands	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067a0:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	43db      	mvns	r3, r3
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4013      	ands	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067ca:	4a13      	ldr	r2, [pc, #76]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	3301      	adds	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f47f ae91 	bne.w	8006508 <HAL_GPIO_Init+0x10>
  }
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40010000 	.word	0x40010000
 80067fc:	48000400 	.word	0x48000400
 8006800:	48000800 	.word	0x48000800
 8006804:	48000c00 	.word	0x48000c00
 8006808:	48001000 	.word	0x48001000
 800680c:	48001400 	.word	0x48001400
 8006810:	48001800 	.word	0x48001800
 8006814:	48001c00 	.word	0x48001c00
 8006818:	40010400 	.word	0x40010400

0800681c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800682a:	e0c9      	b.n	80069c0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800682c:	2201      	movs	r2, #1
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80bc 	beq.w	80069ba <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006842:	4a66      	ldr	r2, [pc, #408]	; (80069dc <HAL_GPIO_DeInit+0x1c0>)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	3302      	adds	r3, #2
 800684a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	220f      	movs	r2, #15
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800686a:	d02b      	beq.n	80068c4 <HAL_GPIO_DeInit+0xa8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a5c      	ldr	r2, [pc, #368]	; (80069e0 <HAL_GPIO_DeInit+0x1c4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d025      	beq.n	80068c0 <HAL_GPIO_DeInit+0xa4>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a5b      	ldr	r2, [pc, #364]	; (80069e4 <HAL_GPIO_DeInit+0x1c8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d01f      	beq.n	80068bc <HAL_GPIO_DeInit+0xa0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a5a      	ldr	r2, [pc, #360]	; (80069e8 <HAL_GPIO_DeInit+0x1cc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d019      	beq.n	80068b8 <HAL_GPIO_DeInit+0x9c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a59      	ldr	r2, [pc, #356]	; (80069ec <HAL_GPIO_DeInit+0x1d0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <HAL_GPIO_DeInit+0x98>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a58      	ldr	r2, [pc, #352]	; (80069f0 <HAL_GPIO_DeInit+0x1d4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00d      	beq.n	80068b0 <HAL_GPIO_DeInit+0x94>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a57      	ldr	r2, [pc, #348]	; (80069f4 <HAL_GPIO_DeInit+0x1d8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <HAL_GPIO_DeInit+0x90>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a56      	ldr	r2, [pc, #344]	; (80069f8 <HAL_GPIO_DeInit+0x1dc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d101      	bne.n	80068a8 <HAL_GPIO_DeInit+0x8c>
 80068a4:	2307      	movs	r3, #7
 80068a6:	e00e      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068a8:	2308      	movs	r3, #8
 80068aa:	e00c      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068ac:	2306      	movs	r3, #6
 80068ae:	e00a      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068b0:	2305      	movs	r3, #5
 80068b2:	e008      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068b4:	2304      	movs	r3, #4
 80068b6:	e006      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068b8:	2303      	movs	r3, #3
 80068ba:	e004      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068bc:	2302      	movs	r3, #2
 80068be:	e002      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_GPIO_DeInit+0xaa>
 80068c4:	2300      	movs	r3, #0
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	f002 0203 	and.w	r2, r2, #3
 80068cc:	0092      	lsls	r2, r2, #2
 80068ce:	4093      	lsls	r3, r2
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d132      	bne.n	800693c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068d6:	4b49      	ldr	r3, [pc, #292]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	43db      	mvns	r3, r3
 80068de:	4947      	ldr	r1, [pc, #284]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068e4:	4b45      	ldr	r3, [pc, #276]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	43db      	mvns	r3, r3
 80068ec:	4943      	ldr	r1, [pc, #268]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068f2:	4b42      	ldr	r3, [pc, #264]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	4940      	ldr	r1, [pc, #256]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006900:	4b3e      	ldr	r3, [pc, #248]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	43db      	mvns	r3, r3
 8006908:	493c      	ldr	r1, [pc, #240]	; (80069fc <HAL_GPIO_DeInit+0x1e0>)
 800690a:	4013      	ands	r3, r2
 800690c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	220f      	movs	r2, #15
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800691e:	4a2f      	ldr	r2, [pc, #188]	; (80069dc <HAL_GPIO_DeInit+0x1c0>)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3302      	adds	r3, #2
 8006926:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	43da      	mvns	r2, r3
 800692e:	482b      	ldr	r0, [pc, #172]	; (80069dc <HAL_GPIO_DeInit+0x1c0>)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	400a      	ands	r2, r1
 8006936:	3302      	adds	r3, #2
 8006938:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	2103      	movs	r1, #3
 8006946:	fa01 f303 	lsl.w	r3, r1, r3
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	08da      	lsrs	r2, r3, #3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3208      	adds	r2, #8
 8006958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	220f      	movs	r2, #15
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	08d2      	lsrs	r2, r2, #3
 8006970:	4019      	ands	r1, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3208      	adds	r2, #8
 8006976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	2103      	movs	r1, #3
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	2101      	movs	r1, #1
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2103      	movs	r1, #3
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	401a      	ands	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3301      	adds	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f47f af2f 	bne.w	800682c <HAL_GPIO_DeInit+0x10>
  }
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40010000 	.word	0x40010000
 80069e0:	48000400 	.word	0x48000400
 80069e4:	48000800 	.word	0x48000800
 80069e8:	48000c00 	.word	0x48000c00
 80069ec:	48001000 	.word	0x48001000
 80069f0:	48001400 	.word	0x48001400
 80069f4:	48001800 	.word	0x48001800
 80069f8:	48001c00 	.word	0x48001c00
 80069fc:	40010400 	.word	0x40010400

08006a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	807b      	strh	r3, [r7, #2]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a10:	787b      	ldrb	r3, [r7, #1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a16:	887a      	ldrh	r2, [r7, #2]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a1c:	e002      	b.n	8006a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a1e:	887a      	ldrh	r2, [r7, #2]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a46:	4a05      	ldr	r2, [pc, #20]	; (8006a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fc fb84 	bl	800315c <HAL_GPIO_EXTI_Callback>
  }
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40010400 	.word	0x40010400

08006a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e081      	b.n	8006b76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8a8 	bl	8006bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	; 0x24
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ab0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d107      	bne.n	8006ada <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	e006      	b.n	8006ae8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ae6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d104      	bne.n	8006afa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69d9      	ldr	r1, [r3, #28]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e021      	b.n	8006bd4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2224      	movs	r2, #36	; 0x24
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f821 	bl	8006bf0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	817b      	strh	r3, [r7, #10]
 8006c16:	460b      	mov	r3, r1
 8006c18:	813b      	strh	r3, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	f040 80f9 	bne.w	8006e1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x34>
 8006c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0ed      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_I2C_Mem_Write+0x4e>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e0e6      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c5a:	f7fe f927 	bl	8004eac <HAL_GetTick>
 8006c5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2319      	movs	r3, #25
 8006c66:	2201      	movs	r2, #1
 8006c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fbd9 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0d1      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2221      	movs	r2, #33	; 0x21
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ca4:	88f8      	ldrh	r0, [r7, #6]
 8006ca6:	893a      	ldrh	r2, [r7, #8]
 8006ca8:	8979      	ldrh	r1, [r7, #10]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fae9 	bl	800728c <I2C_RequestMemoryWrite>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0a9      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2bff      	cmp	r3, #255	; 0xff
 8006cd4:	d90e      	bls.n	8006cf4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	22ff      	movs	r2, #255	; 0xff
 8006cda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	8979      	ldrh	r1, [r7, #10]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fd41 	bl	8007774 <I2C_TransferConfig>
 8006cf2:	e00f      	b.n	8006d14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	8979      	ldrh	r1, [r7, #10]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fd30 	bl	8007774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fbc3 	bl	80074a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e07b      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d034      	beq.n	8006dcc <HAL_I2C_Mem_Write+0x1c8>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d130      	bne.n	8006dcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	2200      	movs	r2, #0
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fb55 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e04d      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2bff      	cmp	r3, #255	; 0xff
 8006d8c:	d90e      	bls.n	8006dac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	22ff      	movs	r2, #255	; 0xff
 8006d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	8979      	ldrh	r1, [r7, #10]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fce5 	bl	8007774 <I2C_TransferConfig>
 8006daa:	e00f      	b.n	8006dcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	8979      	ldrh	r1, [r7, #10]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fcd4 	bl	8007774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d19e      	bne.n	8006d14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fba2 	bl	8007524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e01a      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2220      	movs	r2, #32
 8006df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <HAL_I2C_Mem_Write+0x224>)
 8006dfe:	400b      	ands	r3, r1
 8006e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e000      	b.n	8006e20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	fe00e800 	.word	0xfe00e800

08006e2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	817b      	strh	r3, [r7, #10]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	813b      	strh	r3, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	f040 80fd 	bne.w	800704e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_I2C_Mem_Read+0x34>
 8006e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d105      	bne.n	8006e6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0f1      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_I2C_Mem_Read+0x4e>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e0ea      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e82:	f7fe f813 	bl	8004eac <HAL_GetTick>
 8006e86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2319      	movs	r3, #25
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fac5 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0d5      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2222      	movs	r2, #34	; 0x22
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2240      	movs	r2, #64	; 0x40
 8006eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ecc:	88f8      	ldrh	r0, [r7, #6]
 8006ece:	893a      	ldrh	r2, [r7, #8]
 8006ed0:	8979      	ldrh	r1, [r7, #10]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4603      	mov	r3, r0
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fa29 	bl	8007334 <I2C_RequestMemoryRead>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0ad      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2bff      	cmp	r3, #255	; 0xff
 8006efc:	d90e      	bls.n	8006f1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	22ff      	movs	r2, #255	; 0xff
 8006f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	8979      	ldrh	r1, [r7, #10]
 8006f0c:	4b52      	ldr	r3, [pc, #328]	; (8007058 <HAL_I2C_Mem_Read+0x22c>)
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fc2d 	bl	8007774 <I2C_TransferConfig>
 8006f1a:	e00f      	b.n	8006f3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	8979      	ldrh	r1, [r7, #10]
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	; (8007058 <HAL_I2C_Mem_Read+0x22c>)
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fc1c 	bl	8007774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	2200      	movs	r2, #0
 8006f44:	2104      	movs	r1, #4
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fa6c 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e07c      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d034      	beq.n	8006ffc <HAL_I2C_Mem_Read+0x1d0>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d130      	bne.n	8006ffc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fa3d 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e04d      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2bff      	cmp	r3, #255	; 0xff
 8006fbc:	d90e      	bls.n	8006fdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	22ff      	movs	r2, #255	; 0xff
 8006fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	8979      	ldrh	r1, [r7, #10]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fbcd 	bl	8007774 <I2C_TransferConfig>
 8006fda:	e00f      	b.n	8006ffc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	8979      	ldrh	r1, [r7, #10]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fbbc 	bl	8007774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d19a      	bne.n	8006f3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa8a 	bl	8007524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e01a      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2220      	movs	r2, #32
 8007020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6859      	ldr	r1, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_I2C_Mem_Read+0x230>)
 800702e:	400b      	ands	r3, r1
 8007030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	80002400 	.word	0x80002400
 800705c:	fe00e800 	.word	0xfe00e800

08007060 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b20      	cmp	r3, #32
 800707e:	f040 80f1 	bne.w	8007264 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800708c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007090:	d101      	bne.n	8007096 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
 8007094:	e0e7      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_I2C_IsDeviceReady+0x44>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e0e0      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2224      	movs	r2, #36	; 0x24
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d107      	bne.n	80070d2 <HAL_I2C_IsDeviceReady+0x72>
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070d0:	e004      	b.n	80070dc <HAL_I2C_IsDeviceReady+0x7c>
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80070e2:	f7fd fee3 	bl	8004eac <HAL_GetTick>
 80070e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b10      	cmp	r3, #16
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007114:	e034      	b.n	8007180 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d01a      	beq.n	8007154 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800711e:	f7fd fec5 	bl	8004eac <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <HAL_I2C_IsDeviceReady+0xd4>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007140:	f043 0220 	orr.w	r2, r3, #32
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e088      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b20      	cmp	r3, #32
 8007160:	bf0c      	ite	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	2300      	movne	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007180:	7ffb      	ldrb	r3, [r7, #31]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <HAL_I2C_IsDeviceReady+0x12c>
 8007186:	7fbb      	ldrb	r3, [r7, #30]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0c4      	beq.n	8007116 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b10      	cmp	r3, #16
 8007198:	d01a      	beq.n	80071d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2120      	movs	r1, #32
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f93d 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e058      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e04a      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2120      	movs	r1, #32
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f922 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e03d      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2210      	movs	r2, #16
 80071f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2220      	movs	r2, #32
 80071f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d118      	bne.n	8007234 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007210:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2200      	movs	r2, #0
 800721a:	2120      	movs	r1, #32
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f901 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e01c      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2220      	movs	r2, #32
 8007232:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	f63f af3b 	bhi.w	80070ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007264:	2302      	movs	r3, #2
  }
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727c:	b2db      	uxtb	r3, r3
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	817b      	strh	r3, [r7, #10]
 800729e:	460b      	mov	r3, r1
 80072a0:	813b      	strh	r3, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	8979      	ldrh	r1, [r7, #10]
 80072ac:	4b20      	ldr	r3, [pc, #128]	; (8007330 <I2C_RequestMemoryWrite+0xa4>)
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa5d 	bl	8007774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	69b9      	ldr	r1, [r7, #24]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f8f0 	bl	80074a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e02c      	b.n	8007328 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072d4:	893b      	ldrh	r3, [r7, #8]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	629a      	str	r2, [r3, #40]	; 0x28
 80072de:	e015      	b.n	800730c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	69b9      	ldr	r1, [r7, #24]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f8d6 	bl	80074a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e012      	b.n	8007328 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007302:	893b      	ldrh	r3, [r7, #8]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	2200      	movs	r2, #0
 8007314:	2180      	movs	r1, #128	; 0x80
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f884 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	80002000 	.word	0x80002000

08007334 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	817b      	strh	r3, [r7, #10]
 8007346:	460b      	mov	r3, r1
 8007348:	813b      	strh	r3, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	8979      	ldrh	r1, [r7, #10]
 8007354:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <I2C_RequestMemoryRead+0xa4>)
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fa0a 	bl	8007774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	69b9      	ldr	r1, [r7, #24]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f89d 	bl	80074a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e02c      	b.n	80073ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d105      	bne.n	8007386 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	629a      	str	r2, [r3, #40]	; 0x28
 8007384:	e015      	b.n	80073b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	b29b      	uxth	r3, r3
 800738c:	b2da      	uxtb	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	69b9      	ldr	r1, [r7, #24]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f883 	bl	80074a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e012      	b.n	80073ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073a8:	893b      	ldrh	r3, [r7, #8]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2140      	movs	r1, #64	; 0x40
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f831 	bl	8007424 <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	80002000 	.word	0x80002000

080073dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d103      	bne.n	80073fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	d007      	beq.n	8007418 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	619a      	str	r2, [r3, #24]
  }
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007434:	e022      	b.n	800747c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d01e      	beq.n	800747c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743e:	f7fd fd35 	bl	8004eac <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d113      	bne.n	800747c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e00f      	b.n	800749c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4013      	ands	r3, r2
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	429a      	cmp	r2, r3
 8007498:	d0cd      	beq.n	8007436 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074b0:	e02c      	b.n	800750c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f870 	bl	800759c <I2C_IsErrorOccurred>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e02a      	b.n	800751c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d01e      	beq.n	800750c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fd fced 	bl	8004eac <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d113      	bne.n	800750c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e8:	f043 0220 	orr.w	r2, r3, #32
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e007      	b.n	800751c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d1cb      	bne.n	80074b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007530:	e028      	b.n	8007584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f830 	bl	800759c <I2C_IsErrorOccurred>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e026      	b.n	8007594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007546:	f7fd fcb1 	bl	8004eac <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	d302      	bcc.n	800755c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d113      	bne.n	8007584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007560:	f043 0220 	orr.w	r2, r3, #32
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e007      	b.n	8007594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b20      	cmp	r3, #32
 8007590:	d1cf      	bne.n	8007532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08a      	sub	sp, #40	; 0x28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d075      	beq.n	80076b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2210      	movs	r2, #16
 80075ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075d0:	e056      	b.n	8007680 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d052      	beq.n	8007680 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80075da:	f7fd fc67 	bl	8004eac <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <I2C_IsErrorOccurred+0x54>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d147      	bne.n	8007680 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007612:	d12e      	bne.n	8007672 <I2C_IsErrorOccurred+0xd6>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800761a:	d02a      	beq.n	8007672 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800761c:	7cfb      	ldrb	r3, [r7, #19]
 800761e:	2b20      	cmp	r3, #32
 8007620:	d027      	beq.n	8007672 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007632:	f7fd fc3b 	bl	8004eac <HAL_GetTick>
 8007636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007638:	e01b      	b.n	8007672 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800763a:	f7fd fc37 	bl	8004eac <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b19      	cmp	r3, #25
 8007646:	d914      	bls.n	8007672 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b20      	cmp	r3, #32
 800767e:	d1dc      	bne.n	800763a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b20      	cmp	r3, #32
 800768c:	d003      	beq.n	8007696 <I2C_IsErrorOccurred+0xfa>
 800768e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007692:	2b00      	cmp	r3, #0
 8007694:	d09d      	beq.n	80075d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2220      	movs	r2, #32
 80076a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f043 0304 	orr.w	r3, r3, #4
 80076ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	f043 0308 	orr.w	r3, r3, #8
 80076ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800771a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01c      	beq.n	8007764 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fe56 	bl	80073dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <I2C_IsErrorOccurred+0x1d4>)
 800773c:	400b      	ands	r3, r1
 800773e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007768:	4618      	mov	r0, r3
 800776a:	3728      	adds	r7, #40	; 0x28
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	fe00e800 	.word	0xfe00e800

08007774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	817b      	strh	r3, [r7, #10]
 8007782:	4613      	mov	r3, r2
 8007784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007786:	897b      	ldrh	r3, [r7, #10]
 8007788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800778c:	7a7b      	ldrb	r3, [r7, #9]
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	4313      	orrs	r3, r2
 800779e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	0d5b      	lsrs	r3, r3, #21
 80077ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80077b2:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <I2C_TransferConfig+0x60>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	43db      	mvns	r3, r3
 80077b8:	ea02 0103 	and.w	r1, r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	03ff63ff 	.word	0x03ff63ff

080077d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40007000 	.word	0x40007000

080077f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007802:	d130      	bne.n	8007866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007804:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800780c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007810:	d038      	beq.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007812:	4b20      	ldr	r3, [pc, #128]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800781a:	4a1e      	ldr	r2, [pc, #120]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800781c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007822:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2232      	movs	r2, #50	; 0x32
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	4a1b      	ldr	r2, [pc, #108]	; (800789c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007838:	e002      	b.n	8007840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b01      	subs	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007840:	4b14      	ldr	r3, [pc, #80]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784c:	d102      	bne.n	8007854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f2      	bne.n	800783a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800785c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007860:	d110      	bne.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e00f      	b.n	8007886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800786e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007872:	d007      	beq.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007874:	4b07      	ldr	r3, [pc, #28]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800787c:	4a05      	ldr	r2, [pc, #20]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800787e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40007000 	.word	0x40007000
 8007898:	200000f0 	.word	0x200000f0
 800789c:	431bde83 	.word	0x431bde83

080078a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4a04      	ldr	r2, [pc, #16]	; (80078bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80078aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078ae:	6053      	str	r3, [r2, #4]
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40007000 	.word	0x40007000

080078c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f000 bc08 	b.w	80080e4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d4:	4b96      	ldr	r3, [pc, #600]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 030c 	and.w	r3, r3, #12
 80078dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078de:	4b94      	ldr	r3, [pc, #592]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80e4 	beq.w	8007abe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_RCC_OscConfig+0x4c>
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b0c      	cmp	r3, #12
 8007900:	f040 808b 	bne.w	8007a1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b01      	cmp	r3, #1
 8007908:	f040 8087 	bne.w	8007a1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800790c:	4b88      	ldr	r3, [pc, #544]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_OscConfig+0x64>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e3df      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1a      	ldr	r2, [r3, #32]
 8007928:	4b81      	ldr	r3, [pc, #516]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <HAL_RCC_OscConfig+0x7e>
 8007934:	4b7e      	ldr	r3, [pc, #504]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800793c:	e005      	b.n	800794a <HAL_RCC_OscConfig+0x8a>
 800793e:	4b7c      	ldr	r3, [pc, #496]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800794a:	4293      	cmp	r3, r2
 800794c:	d223      	bcs.n	8007996 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fdc6 	bl	80084e4 <RCC_SetFlashLatencyFromMSIRange>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e3c0      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007962:	4b73      	ldr	r3, [pc, #460]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a72      	ldr	r2, [pc, #456]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007968:	f043 0308 	orr.w	r3, r3, #8
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	4b70      	ldr	r3, [pc, #448]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	496d      	ldr	r1, [pc, #436]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 800797c:	4313      	orrs	r3, r2
 800797e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007980:	4b6b      	ldr	r3, [pc, #428]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	4968      	ldr	r1, [pc, #416]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007990:	4313      	orrs	r3, r2
 8007992:	604b      	str	r3, [r1, #4]
 8007994:	e025      	b.n	80079e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007996:	4b66      	ldr	r3, [pc, #408]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a65      	ldr	r2, [pc, #404]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 800799c:	f043 0308 	orr.w	r3, r3, #8
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	4b63      	ldr	r3, [pc, #396]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	4960      	ldr	r1, [pc, #384]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079b4:	4b5e      	ldr	r3, [pc, #376]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	495b      	ldr	r1, [pc, #364]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fd86 	bl	80084e4 <RCC_SetFlashLatencyFromMSIRange>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e380      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079e2:	f000 fcbb 	bl	800835c <HAL_RCC_GetSysClockFreq>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b51      	ldr	r3, [pc, #324]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	4950      	ldr	r1, [pc, #320]	; (8007b34 <HAL_RCC_OscConfig+0x274>)
 80079f4:	5ccb      	ldrb	r3, [r1, r3]
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	4a4e      	ldr	r2, [pc, #312]	; (8007b38 <HAL_RCC_OscConfig+0x278>)
 8007a00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007a02:	4b4e      	ldr	r3, [pc, #312]	; (8007b3c <HAL_RCC_OscConfig+0x27c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd fa00 	bl	8004e0c <HAL_InitTick>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d052      	beq.n	8007abc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	e364      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d032      	beq.n	8007a88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a22:	4b43      	ldr	r3, [pc, #268]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a42      	ldr	r2, [pc, #264]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a2e:	f7fd fa3d 	bl	8004eac <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a36:	f7fd fa39 	bl	8004eac <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e34d      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a48:	4b39      	ldr	r3, [pc, #228]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f0      	beq.n	8007a36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a54:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a35      	ldr	r2, [pc, #212]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a5a:	f043 0308 	orr.w	r3, r3, #8
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4b33      	ldr	r3, [pc, #204]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	4930      	ldr	r1, [pc, #192]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a72:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	492b      	ldr	r1, [pc, #172]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	604b      	str	r3, [r1, #4]
 8007a86:	e01a      	b.n	8007abe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a88:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a94:	f7fd fa0a 	bl	8004eac <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a9c:	f7fd fa06 	bl	8004eac <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e31a      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007aae:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0x1dc>
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d073      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d005      	beq.n	8007adc <HAL_RCC_OscConfig+0x21c>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	d10e      	bne.n	8007af4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d10b      	bne.n	8007af4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d063      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x2f0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d15f      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e2f7      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afc:	d106      	bne.n	8007b0c <HAL_RCC_OscConfig+0x24c>
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	e025      	b.n	8007b58 <HAL_RCC_OscConfig+0x298>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b14:	d114      	bne.n	8007b40 <HAL_RCC_OscConfig+0x280>
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a02      	ldr	r2, [pc, #8]	; (8007b30 <HAL_RCC_OscConfig+0x270>)
 8007b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e013      	b.n	8007b58 <HAL_RCC_OscConfig+0x298>
 8007b30:	40021000 	.word	0x40021000
 8007b34:	0800dce0 	.word	0x0800dce0
 8007b38:	200000f0 	.word	0x200000f0
 8007b3c:	200000f4 	.word	0x200000f4
 8007b40:	4ba0      	ldr	r3, [pc, #640]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a9f      	ldr	r2, [pc, #636]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	4b9d      	ldr	r3, [pc, #628]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a9c      	ldr	r2, [pc, #624]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d013      	beq.n	8007b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fd f9a4 	bl	8004eac <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b68:	f7fd f9a0 	bl	8004eac <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e2b4      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b7a:	4b92      	ldr	r3, [pc, #584]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x2a8>
 8007b86:	e014      	b.n	8007bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fd f990 	bl	8004eac <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b90:	f7fd f98c 	bl	8004eac <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b64      	cmp	r3, #100	; 0x64
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e2a0      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ba2:	4b88      	ldr	r3, [pc, #544]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x2d0>
 8007bae:	e000      	b.n	8007bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d060      	beq.n	8007c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d005      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x310>
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b0c      	cmp	r3, #12
 8007bc8:	d119      	bne.n	8007bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d116      	bne.n	8007bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bd0:	4b7c      	ldr	r3, [pc, #496]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_RCC_OscConfig+0x328>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e27d      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be8:	4b76      	ldr	r3, [pc, #472]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	4973      	ldr	r1, [pc, #460]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bfc:	e040      	b.n	8007c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d023      	beq.n	8007c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c06:	4b6f      	ldr	r3, [pc, #444]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6e      	ldr	r2, [pc, #440]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c12:	f7fd f94b 	bl	8004eac <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c1a:	f7fd f947 	bl	8004eac <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e25b      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c2c:	4b65      	ldr	r3, [pc, #404]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c38:	4b62      	ldr	r3, [pc, #392]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	495f      	ldr	r1, [pc, #380]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	604b      	str	r3, [r1, #4]
 8007c4c:	e018      	b.n	8007c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c4e:	4b5d      	ldr	r3, [pc, #372]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a5c      	ldr	r2, [pc, #368]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5a:	f7fd f927 	bl	8004eac <HAL_GetTick>
 8007c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c60:	e008      	b.n	8007c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c62:	f7fd f923 	bl	8004eac <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e237      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c74:	4b53      	ldr	r3, [pc, #332]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f0      	bne.n	8007c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d03c      	beq.n	8007d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01c      	beq.n	8007cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c94:	4b4b      	ldr	r3, [pc, #300]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9a:	4a4a      	ldr	r2, [pc, #296]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca4:	f7fd f902 	bl	8004eac <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cac:	f7fd f8fe 	bl	8004eac <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e212      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007cbe:	4b41      	ldr	r3, [pc, #260]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0ef      	beq.n	8007cac <HAL_RCC_OscConfig+0x3ec>
 8007ccc:	e01b      	b.n	8007d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cce:	4b3d      	ldr	r3, [pc, #244]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cd4:	4a3b      	ldr	r2, [pc, #236]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cde:	f7fd f8e5 	bl	8004eac <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ce6:	f7fd f8e1 	bl	8004eac <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e1f5      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cf8:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1ef      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80a6 	beq.w	8007e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d14:	2300      	movs	r3, #0
 8007d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007d18:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d24:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d28:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8007d30:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d40:	4b21      	ldr	r3, [pc, #132]	; (8007dc8 <HAL_RCC_OscConfig+0x508>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d118      	bne.n	8007d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d4c:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <HAL_RCC_OscConfig+0x508>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_RCC_OscConfig+0x508>)
 8007d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d58:	f7fd f8a8 	bl	8004eac <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d60:	f7fd f8a4 	bl	8004eac <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e1b8      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d72:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <HAL_RCC_OscConfig+0x508>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d108      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4d8>
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	4a0d      	ldr	r2, [pc, #52]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d96:	e029      	b.n	8007dec <HAL_RCC_OscConfig+0x52c>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d115      	bne.n	8007dcc <HAL_RCC_OscConfig+0x50c>
 8007da0:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007da8:	f043 0304 	orr.w	r3, r3, #4
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db6:	4a03      	ldr	r2, [pc, #12]	; (8007dc4 <HAL_RCC_OscConfig+0x504>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007dc0:	e014      	b.n	8007dec <HAL_RCC_OscConfig+0x52c>
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	40007000 	.word	0x40007000
 8007dcc:	4b9d      	ldr	r3, [pc, #628]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd2:	4a9c      	ldr	r2, [pc, #624]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007dd4:	f023 0301 	bic.w	r3, r3, #1
 8007dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ddc:	4b99      	ldr	r3, [pc, #612]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de2:	4a98      	ldr	r2, [pc, #608]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d016      	beq.n	8007e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df4:	f7fd f85a 	bl	8004eac <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dfa:	e00a      	b.n	8007e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfc:	f7fd f856 	bl	8004eac <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e168      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e12:	4b8c      	ldr	r3, [pc, #560]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0ed      	beq.n	8007dfc <HAL_RCC_OscConfig+0x53c>
 8007e20:	e015      	b.n	8007e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e22:	f7fd f843 	bl	8004eac <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2a:	f7fd f83f 	bl	8004eac <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e151      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e40:	4b80      	ldr	r3, [pc, #512]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1ed      	bne.n	8007e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e4e:	7ffb      	ldrb	r3, [r7, #31]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d105      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e54:	4b7b      	ldr	r3, [pc, #492]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e58:	4a7a      	ldr	r2, [pc, #488]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d03c      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01c      	beq.n	8007eae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e74:	4b73      	ldr	r3, [pc, #460]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e7a:	4a72      	ldr	r2, [pc, #456]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e84:	f7fd f812 	bl	8004eac <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e8c:	f7fd f80e 	bl	8004eac <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e122      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e9e:	4b69      	ldr	r3, [pc, #420]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0ef      	beq.n	8007e8c <HAL_RCC_OscConfig+0x5cc>
 8007eac:	e01b      	b.n	8007ee6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007eae:	4b65      	ldr	r3, [pc, #404]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb4:	4a63      	ldr	r2, [pc, #396]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007eb6:	f023 0301 	bic.w	r3, r3, #1
 8007eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ebe:	f7fc fff5 	bl	8004eac <HAL_GetTick>
 8007ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ec6:	f7fc fff1 	bl	8004eac <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e105      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ed8:	4b5a      	ldr	r3, [pc, #360]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1ef      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80f9 	beq.w	80080e2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	f040 80cf 	bne.w	8008098 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007efa:	4b52      	ldr	r3, [pc, #328]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f003 0203 	and.w	r2, r3, #3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d12c      	bne.n	8007f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d123      	bne.n	8007f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d11b      	bne.n	8007f68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d113      	bne.n	8007f68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d109      	bne.n	8007f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	3b01      	subs	r3, #1
 8007f62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d071      	beq.n	800804c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b0c      	cmp	r3, #12
 8007f6c:	d068      	beq.n	8008040 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f6e:	4b35      	ldr	r3, [pc, #212]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007f7a:	4b32      	ldr	r3, [pc, #200]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e0ac      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f96:	f7fc ff89 	bl	8004eac <HAL_GetTick>
 8007f9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f9e:	f7fc ff85 	bl	8004eac <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e099      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f0      	bne.n	8007f9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fbc:	4b21      	ldr	r3, [pc, #132]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCC_OscConfig+0x788>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fcc:	3a01      	subs	r2, #1
 8007fce:	0112      	lsls	r2, r2, #4
 8007fd0:	4311      	orrs	r1, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fd6:	0212      	lsls	r2, r2, #8
 8007fd8:	4311      	orrs	r1, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fde:	0852      	lsrs	r2, r2, #1
 8007fe0:	3a01      	subs	r2, #1
 8007fe2:	0552      	lsls	r2, r2, #21
 8007fe4:	4311      	orrs	r1, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fea:	0852      	lsrs	r2, r2, #1
 8007fec:	3a01      	subs	r2, #1
 8007fee:	0652      	lsls	r2, r2, #25
 8007ff0:	4311      	orrs	r1, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ff6:	06d2      	lsls	r2, r2, #27
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	4912      	ldr	r1, [pc, #72]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0f      	ldr	r2, [pc, #60]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8008006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800800a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8008012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008018:	f7fc ff48 	bl	8004eac <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008020:	f7fc ff44 	bl	8004eac <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e058      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008032:	4b04      	ldr	r3, [pc, #16]	; (8008044 <HAL_RCC_OscConfig+0x784>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f0      	beq.n	8008020 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800803e:	e050      	b.n	80080e2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e04f      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
 8008044:	40021000 	.word	0x40021000
 8008048:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800804c:	4b27      	ldr	r3, [pc, #156]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d144      	bne.n	80080e2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008058:	4b24      	ldr	r3, [pc, #144]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a23      	ldr	r2, [pc, #140]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 800805e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008062:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4a20      	ldr	r2, [pc, #128]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 800806a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800806e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008070:	f7fc ff1c 	bl	8004eac <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008078:	f7fc ff18 	bl	8004eac <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e02c      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800808a:	4b18      	ldr	r3, [pc, #96]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0x7b8>
 8008096:	e024      	b.n	80080e2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b0c      	cmp	r3, #12
 800809c:	d01f      	beq.n	80080de <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a12      	ldr	r2, [pc, #72]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 80080a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080aa:	f7fc feff 	bl	8004eac <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b2:	f7fc fefb 	bl	8004eac <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e00f      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80080d0:	4b06      	ldr	r3, [pc, #24]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	4905      	ldr	r1, [pc, #20]	; (80080ec <HAL_RCC_OscConfig+0x82c>)
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <HAL_RCC_OscConfig+0x830>)
 80080d8:	4013      	ands	r3, r2
 80080da:	60cb      	str	r3, [r1, #12]
 80080dc:	e001      	b.n	80080e2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3720      	adds	r7, #32
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	40021000 	.word	0x40021000
 80080f0:	feeefffc 	.word	0xfeeefffc

080080f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e0e7      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008108:	4b75      	ldr	r3, [pc, #468]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d910      	bls.n	8008138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008116:	4b72      	ldr	r3, [pc, #456]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f023 0207 	bic.w	r2, r3, #7
 800811e:	4970      	ldr	r1, [pc, #448]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	4313      	orrs	r3, r2
 8008124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008126:	4b6e      	ldr	r3, [pc, #440]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d001      	beq.n	8008138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e0cf      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	4b66      	ldr	r3, [pc, #408]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008150:	429a      	cmp	r2, r3
 8008152:	d908      	bls.n	8008166 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008154:	4b63      	ldr	r3, [pc, #396]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	4960      	ldr	r1, [pc, #384]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008162:	4313      	orrs	r3, r2
 8008164:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d04c      	beq.n	800820c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d107      	bne.n	800818a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800817a:	4b5a      	ldr	r3, [pc, #360]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d121      	bne.n	80081ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e0a6      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d107      	bne.n	80081a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008192:	4b54      	ldr	r3, [pc, #336]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d115      	bne.n	80081ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e09a      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d107      	bne.n	80081ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80081aa:	4b4e      	ldr	r3, [pc, #312]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e08e      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081ba:	4b4a      	ldr	r3, [pc, #296]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e086      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081ca:	4b46      	ldr	r3, [pc, #280]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f023 0203 	bic.w	r2, r3, #3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4943      	ldr	r1, [pc, #268]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081dc:	f7fc fe66 	bl	8004eac <HAL_GetTick>
 80081e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e2:	e00a      	b.n	80081fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081e4:	f7fc fe62 	bl	8004eac <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e06e      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081fa:	4b3a      	ldr	r3, [pc, #232]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 020c 	and.w	r2, r3, #12
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	429a      	cmp	r2, r3
 800820a:	d1eb      	bne.n	80081e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d010      	beq.n	800823a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	4b31      	ldr	r3, [pc, #196]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008224:	429a      	cmp	r2, r3
 8008226:	d208      	bcs.n	800823a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008228:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	492b      	ldr	r1, [pc, #172]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008236:	4313      	orrs	r3, r2
 8008238:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800823a:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d210      	bcs.n	800826a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f023 0207 	bic.w	r2, r3, #7
 8008250:	4923      	ldr	r1, [pc, #140]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	4313      	orrs	r3, r2
 8008256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008258:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <HAL_RCC_ClockConfig+0x1ec>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d001      	beq.n	800826a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e036      	b.n	80082d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4918      	ldr	r1, [pc, #96]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008284:	4313      	orrs	r3, r2
 8008286:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008294:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	4910      	ldr	r1, [pc, #64]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082a8:	f000 f858 	bl	800835c <HAL_RCC_GetSysClockFreq>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <HAL_RCC_ClockConfig+0x1f0>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	490b      	ldr	r1, [pc, #44]	; (80082e8 <HAL_RCC_ClockConfig+0x1f4>)
 80082ba:	5ccb      	ldrb	r3, [r1, r3]
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <HAL_RCC_ClockConfig+0x1f8>)
 80082c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <HAL_RCC_ClockConfig+0x1fc>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fc fd9d 	bl	8004e0c <HAL_InitTick>
 80082d2:	4603      	mov	r3, r0
 80082d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80082d6:	7afb      	ldrb	r3, [r7, #11]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40022000 	.word	0x40022000
 80082e4:	40021000 	.word	0x40021000
 80082e8:	0800dce0 	.word	0x0800dce0
 80082ec:	200000f0 	.word	0x200000f0
 80082f0:	200000f4 	.word	0x200000f4

080082f4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	; 0x28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8008300:	4b15      	ldr	r3, [pc, #84]	; (8008358 <HAL_RCC_MCOConfig+0x64>)
 8008302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008304:	4a14      	ldr	r2, [pc, #80]	; (8008358 <HAL_RCC_MCOConfig+0x64>)
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <HAL_RCC_MCOConfig+0x64>)
 800830e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800831c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831e:	2302      	movs	r3, #2
 8008320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008322:	2302      	movs	r3, #2
 8008324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800832a:	2300      	movs	r3, #0
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	4619      	mov	r1, r3
 8008334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008338:	f7fe f8de 	bl	80064f8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <HAL_RCC_MCOConfig+0x64>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	430b      	orrs	r3, r1
 800834a:	4903      	ldr	r1, [pc, #12]	; (8008358 <HAL_RCC_MCOConfig+0x64>)
 800834c:	4313      	orrs	r3, r2
 800834e:	608b      	str	r3, [r1, #8]
}
 8008350:	bf00      	nop
 8008352:	3728      	adds	r7, #40	; 0x28
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40021000 	.word	0x40021000

0800835c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800835c:	b480      	push	{r7}
 800835e:	b089      	sub	sp, #36	; 0x24
 8008360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
 8008366:	2300      	movs	r3, #0
 8008368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800836a:	4b3e      	ldr	r3, [pc, #248]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 030c 	and.w	r3, r3, #12
 8008372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008374:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x34>
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b0c      	cmp	r3, #12
 8008388:	d121      	bne.n	80083ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d11e      	bne.n	80083ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008390:	4b34      	ldr	r3, [pc, #208]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d107      	bne.n	80083ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800839c:	4b31      	ldr	r3, [pc, #196]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 800839e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e005      	b.n	80083b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	091b      	lsrs	r3, r3, #4
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80083b8:	4a2b      	ldr	r2, [pc, #172]	; (8008468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083cc:	e00a      	b.n	80083e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d102      	bne.n	80083da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80083d4:	4b25      	ldr	r3, [pc, #148]	; (800846c <HAL_RCC_GetSysClockFreq+0x110>)
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e004      	b.n	80083e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d101      	bne.n	80083e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80083e0:	4b23      	ldr	r3, [pc, #140]	; (8008470 <HAL_RCC_GetSysClockFreq+0x114>)
 80083e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2b0c      	cmp	r3, #12
 80083e8:	d134      	bne.n	8008454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083ea:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d003      	beq.n	8008402 <HAL_RCC_GetSysClockFreq+0xa6>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d003      	beq.n	8008408 <HAL_RCC_GetSysClockFreq+0xac>
 8008400:	e005      	b.n	800840e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008402:	4b1a      	ldr	r3, [pc, #104]	; (800846c <HAL_RCC_GetSysClockFreq+0x110>)
 8008404:	617b      	str	r3, [r7, #20]
      break;
 8008406:	e005      	b.n	8008414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <HAL_RCC_GetSysClockFreq+0x114>)
 800840a:	617b      	str	r3, [r7, #20]
      break;
 800840c:	e002      	b.n	8008414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	617b      	str	r3, [r7, #20]
      break;
 8008412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	3301      	adds	r3, #1
 8008420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008422:	4b10      	ldr	r3, [pc, #64]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	fb03 f202 	mul.w	r2, r3, r2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	fbb2 f3f3 	udiv	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <HAL_RCC_GetSysClockFreq+0x108>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	0e5b      	lsrs	r3, r3, #25
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	3301      	adds	r3, #1
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008454:	69bb      	ldr	r3, [r7, #24]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3724      	adds	r7, #36	; 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40021000 	.word	0x40021000
 8008468:	0800dcf8 	.word	0x0800dcf8
 800846c:	00f42400 	.word	0x00f42400
 8008470:	007a1200 	.word	0x007a1200

08008474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <HAL_RCC_GetHCLKFreq+0x14>)
 800847a:	681b      	ldr	r3, [r3, #0]
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	200000f0 	.word	0x200000f0

0800848c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008490:	f7ff fff0 	bl	8008474 <HAL_RCC_GetHCLKFreq>
 8008494:	4602      	mov	r2, r0
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	4904      	ldr	r1, [pc, #16]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084a2:	5ccb      	ldrb	r3, [r1, r3]
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40021000 	.word	0x40021000
 80084b4:	0800dcf0 	.word	0x0800dcf0

080084b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80084bc:	f7ff ffda 	bl	8008474 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0adb      	lsrs	r3, r3, #11
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4904      	ldr	r1, [pc, #16]	; (80084e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40021000 	.word	0x40021000
 80084e0:	0800dcf0 	.word	0x0800dcf0

080084e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80084f0:	4b2a      	ldr	r3, [pc, #168]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80084fc:	f7ff f96c 	bl	80077d8 <HAL_PWREx_GetVoltageRange>
 8008500:	6178      	str	r0, [r7, #20]
 8008502:	e014      	b.n	800852e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008504:	4b25      	ldr	r3, [pc, #148]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008508:	4a24      	ldr	r2, [pc, #144]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800850a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800850e:	6593      	str	r3, [r2, #88]	; 0x58
 8008510:	4b22      	ldr	r3, [pc, #136]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800851c:	f7ff f95c 	bl	80077d8 <HAL_PWREx_GetVoltageRange>
 8008520:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008522:	4b1e      	ldr	r3, [pc, #120]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008526:	4a1d      	ldr	r2, [pc, #116]	; (800859c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800852c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008534:	d10b      	bne.n	800854e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b80      	cmp	r3, #128	; 0x80
 800853a:	d919      	bls.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2ba0      	cmp	r3, #160	; 0xa0
 8008540:	d902      	bls.n	8008548 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008542:	2302      	movs	r3, #2
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	e013      	b.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008548:	2301      	movs	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	e010      	b.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b80      	cmp	r3, #128	; 0x80
 8008552:	d902      	bls.n	800855a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008554:	2303      	movs	r3, #3
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	e00a      	b.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d102      	bne.n	8008566 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008560:	2302      	movs	r3, #2
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	e004      	b.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b70      	cmp	r3, #112	; 0x70
 800856a:	d101      	bne.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800856c:	2301      	movs	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f023 0207 	bic.w	r2, r3, #7
 8008578:	4909      	ldr	r1, [pc, #36]	; (80085a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	d001      	beq.n	8008592 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e000      	b.n	8008594 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40021000 	.word	0x40021000
 80085a0:	40022000 	.word	0x40022000

080085a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085ac:	2300      	movs	r3, #0
 80085ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085b0:	2300      	movs	r3, #0
 80085b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d041      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085c8:	d02a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80085ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085ce:	d824      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085d4:	d008      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085da:	d81e      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085e4:	d010      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085e6:	e018      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80085e8:	4b86      	ldr	r3, [pc, #536]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a85      	ldr	r2, [pc, #532]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085f4:	e015      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3304      	adds	r3, #4
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 facd 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008606:	e00c      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3320      	adds	r3, #32
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fbb6 	bl	8008d80 <RCCEx_PLLSAI2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	74fb      	strb	r3, [r7, #19]
      break;
 800861e:	e000      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008622:	7cfb      	ldrb	r3, [r7, #19]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008628:	4b76      	ldr	r3, [pc, #472]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800862a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008636:	4973      	ldr	r1, [pc, #460]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008638:	4313      	orrs	r3, r2
 800863a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800863e:	e001      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d041      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008658:	d02a      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800865a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800865e:	d824      	bhi.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008664:	d008      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800866a:	d81e      	bhi.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008674:	d010      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008676:	e018      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008678:	4b62      	ldr	r3, [pc, #392]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4a61      	ldr	r2, [pc, #388]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800867e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008682:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008684:	e015      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	2100      	movs	r1, #0
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fa85 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008692:	4603      	mov	r3, r0
 8008694:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008696:	e00c      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3320      	adds	r3, #32
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fb6e 	bl	8008d80 <RCCEx_PLLSAI2_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80086a8:	e003      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	74fb      	strb	r3, [r7, #19]
      break;
 80086ae:	e000      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80086b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b2:	7cfb      	ldrb	r3, [r7, #19]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10b      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80086b8:	4b52      	ldr	r3, [pc, #328]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c6:	494f      	ldr	r1, [pc, #316]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80086ce:	e001      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d0:	7cfb      	ldrb	r3, [r7, #19]
 80086d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a0 	beq.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086e2:	2300      	movs	r3, #0
 80086e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086e6:	4b47      	ldr	r3, [pc, #284]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00d      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086fc:	4b41      	ldr	r3, [pc, #260]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008700:	4a40      	ldr	r2, [pc, #256]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008706:	6593      	str	r3, [r2, #88]	; 0x58
 8008708:	4b3e      	ldr	r3, [pc, #248]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800870a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008714:	2301      	movs	r3, #1
 8008716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008718:	4b3b      	ldr	r3, [pc, #236]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a3a      	ldr	r2, [pc, #232]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800871e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008724:	f7fc fbc2 	bl	8004eac <HAL_GetTick>
 8008728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800872a:	e009      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872c:	f7fc fbbe 	bl	8004eac <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d902      	bls.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	74fb      	strb	r3, [r7, #19]
        break;
 800873e:	e005      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008740:	4b31      	ldr	r3, [pc, #196]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0ef      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d15c      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008752:	4b2c      	ldr	r3, [pc, #176]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01f      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	429a      	cmp	r2, r3
 800876e:	d019      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008770:	4b24      	ldr	r3, [pc, #144]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800877c:	4b21      	ldr	r3, [pc, #132]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008782:	4a20      	ldr	r2, [pc, #128]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800878c:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008792:	4a1c      	ldr	r2, [pc, #112]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800879c:	4a19      	ldr	r2, [pc, #100]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ae:	f7fc fb7d 	bl	8004eac <HAL_GetTick>
 80087b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087b4:	e00b      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b6:	f7fc fb79 	bl	8004eac <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d902      	bls.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	74fb      	strb	r3, [r7, #19]
            break;
 80087cc:	e006      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ce:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0ec      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80087dc:	7cfb      	ldrb	r3, [r7, #19]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f2:	4904      	ldr	r1, [pc, #16]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087fa:	e009      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087fc:	7cfb      	ldrb	r3, [r7, #19]
 80087fe:	74bb      	strb	r3, [r7, #18]
 8008800:	e006      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008802:	bf00      	nop
 8008804:	40021000 	.word	0x40021000
 8008808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880c:	7cfb      	ldrb	r3, [r7, #19]
 800880e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008810:	7c7b      	ldrb	r3, [r7, #17]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d105      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008816:	4ba6      	ldr	r3, [pc, #664]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881a:	4aa5      	ldr	r2, [pc, #660]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800881c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800882e:	4ba0      	ldr	r3, [pc, #640]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008834:	f023 0203 	bic.w	r2, r3, #3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	499c      	ldr	r1, [pc, #624]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008850:	4b97      	ldr	r3, [pc, #604]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008856:	f023 020c 	bic.w	r2, r3, #12
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	4994      	ldr	r1, [pc, #592]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008872:	4b8f      	ldr	r3, [pc, #572]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008878:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	498b      	ldr	r1, [pc, #556]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008894:	4b86      	ldr	r3, [pc, #536]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	4983      	ldr	r1, [pc, #524]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088b6:	4b7e      	ldr	r3, [pc, #504]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c4:	497a      	ldr	r1, [pc, #488]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088d8:	4b75      	ldr	r3, [pc, #468]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e6:	4972      	ldr	r1, [pc, #456]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088fa:	4b6d      	ldr	r3, [pc, #436]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	4969      	ldr	r1, [pc, #420]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800890a:	4313      	orrs	r3, r2
 800890c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800891c:	4b64      	ldr	r3, [pc, #400]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800892a:	4961      	ldr	r1, [pc, #388]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800893e:	4b5c      	ldr	r3, [pc, #368]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	4958      	ldr	r1, [pc, #352]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800894e:	4313      	orrs	r3, r2
 8008950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008960:	4b53      	ldr	r3, [pc, #332]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	4950      	ldr	r1, [pc, #320]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008982:	4b4b      	ldr	r3, [pc, #300]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008990:	4947      	ldr	r1, [pc, #284]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089a4:	4b42      	ldr	r3, [pc, #264]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089aa:	f023 0203 	bic.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b2:	493f      	ldr	r1, [pc, #252]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d028      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089c6:	4b3a      	ldr	r3, [pc, #232]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	4936      	ldr	r1, [pc, #216]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e4:	d106      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089e6:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	4a31      	ldr	r2, [pc, #196]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80089ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f0:	60d3      	str	r3, [r2, #12]
 80089f2:	e011      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089fc:	d10c      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	2101      	movs	r1, #1
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 f8c9 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008a0e:	7cfb      	ldrb	r3, [r7, #19]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008a14:	7cfb      	ldrb	r3, [r7, #19]
 8008a16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d028      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a24:	4b22      	ldr	r3, [pc, #136]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a32:	491f      	ldr	r1, [pc, #124]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a42:	d106      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a4e:	60d3      	str	r3, [r2, #12]
 8008a50:	e011      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a5a:	d10c      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	2101      	movs	r1, #1
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f89a 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a6c:	7cfb      	ldrb	r3, [r7, #19]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8008a72:	7cfb      	ldrb	r3, [r7, #19]
 8008a74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d02a      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a90:	4907      	ldr	r1, [pc, #28]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aa0:	d108      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	4a02      	ldr	r2, [pc, #8]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aac:	60d3      	str	r3, [r2, #12]
 8008aae:	e013      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8008ab0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f869 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ace:	7cfb      	ldrb	r3, [r7, #19]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8008ad4:	7cfb      	ldrb	r3, [r7, #19]
 8008ad6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02f      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ae4:	4b2c      	ldr	r3, [pc, #176]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af2:	4929      	ldr	r1, [pc, #164]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b02:	d10d      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3304      	adds	r3, #4
 8008b08:	2102      	movs	r1, #2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f846 	bl	8008b9c <RCCEx_PLLSAI1_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b14:	7cfb      	ldrb	r3, [r7, #19]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d014      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	74bb      	strb	r3, [r7, #18]
 8008b1e:	e011      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b28:	d10c      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3320      	adds	r3, #32
 8008b2e:	2102      	movs	r1, #2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f925 	bl	8008d80 <RCCEx_PLLSAI2_Config>
 8008b36:	4603      	mov	r3, r0
 8008b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b3a:	7cfb      	ldrb	r3, [r7, #19]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008b40:	7cfb      	ldrb	r3, [r7, #19]
 8008b42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b50:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b60:	490d      	ldr	r1, [pc, #52]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b74:	4b08      	ldr	r3, [pc, #32]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b84:	4904      	ldr	r1, [pc, #16]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40021000 	.word	0x40021000

08008b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008baa:	4b74      	ldr	r3, [pc, #464]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d018      	beq.n	8008be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008bb6:	4b71      	ldr	r3, [pc, #452]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f003 0203 	and.w	r2, r3, #3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d10d      	bne.n	8008be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008bce:	4b6b      	ldr	r3, [pc, #428]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d047      	beq.n	8008c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e044      	b.n	8008c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d018      	beq.n	8008c22 <RCCEx_PLLSAI1_Config+0x86>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d825      	bhi.n	8008c40 <RCCEx_PLLSAI1_Config+0xa4>
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d002      	beq.n	8008bfe <RCCEx_PLLSAI1_Config+0x62>
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d009      	beq.n	8008c10 <RCCEx_PLLSAI1_Config+0x74>
 8008bfc:	e020      	b.n	8008c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008bfe:	4b5f      	ldr	r3, [pc, #380]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11d      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c0e:	e01a      	b.n	8008c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c10:	4b5a      	ldr	r3, [pc, #360]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d116      	bne.n	8008c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c20:	e013      	b.n	8008c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c22:	4b56      	ldr	r3, [pc, #344]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10f      	bne.n	8008c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c2e:	4b53      	ldr	r3, [pc, #332]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c3e:	e006      	b.n	8008c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
      break;
 8008c44:	e004      	b.n	8008c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c46:	bf00      	nop
 8008c48:	e002      	b.n	8008c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c4a:	bf00      	nop
 8008c4c:	e000      	b.n	8008c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c56:	4b49      	ldr	r3, [pc, #292]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6819      	ldr	r1, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	4943      	ldr	r1, [pc, #268]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d17c      	bne.n	8008d72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c78:	4b40      	ldr	r3, [pc, #256]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a3f      	ldr	r2, [pc, #252]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c84:	f7fc f912 	bl	8004eac <HAL_GetTick>
 8008c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c8a:	e009      	b.n	8008ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c8c:	f7fc f90e 	bl	8004eac <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d902      	bls.n	8008ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c9e:	e005      	b.n	8008cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008ca0:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1ef      	bne.n	8008c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d15f      	bne.n	8008d72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d110      	bne.n	8008cda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cb8:	4b30      	ldr	r3, [pc, #192]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6892      	ldr	r2, [r2, #8]
 8008cc8:	0211      	lsls	r1, r2, #8
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	68d2      	ldr	r2, [r2, #12]
 8008cce:	06d2      	lsls	r2, r2, #27
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	492a      	ldr	r1, [pc, #168]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	610b      	str	r3, [r1, #16]
 8008cd8:	e027      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d112      	bne.n	8008d06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ce0:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6892      	ldr	r2, [r2, #8]
 8008cf0:	0211      	lsls	r1, r2, #8
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6912      	ldr	r2, [r2, #16]
 8008cf6:	0852      	lsrs	r2, r2, #1
 8008cf8:	3a01      	subs	r2, #1
 8008cfa:	0552      	lsls	r2, r2, #21
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	491f      	ldr	r1, [pc, #124]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	610b      	str	r3, [r1, #16]
 8008d04:	e011      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6892      	ldr	r2, [r2, #8]
 8008d16:	0211      	lsls	r1, r2, #8
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6952      	ldr	r2, [r2, #20]
 8008d1c:	0852      	lsrs	r2, r2, #1
 8008d1e:	3a01      	subs	r2, #1
 8008d20:	0652      	lsls	r2, r2, #25
 8008d22:	430a      	orrs	r2, r1
 8008d24:	4915      	ldr	r1, [pc, #84]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a13      	ldr	r2, [pc, #76]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d36:	f7fc f8b9 	bl	8004eac <HAL_GetTick>
 8008d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d3c:	e009      	b.n	8008d52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d3e:	f7fc f8b5 	bl	8004eac <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d902      	bls.n	8008d52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8008d50:	e005      	b.n	8008d5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0ef      	beq.n	8008d3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	4903      	ldr	r1, [pc, #12]	; (8008d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	40021000 	.word	0x40021000

08008d80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d8e:	4b69      	ldr	r3, [pc, #420]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d018      	beq.n	8008dcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008d9a:	4b66      	ldr	r3, [pc, #408]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f003 0203 	and.w	r2, r3, #3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d10d      	bne.n	8008dc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
       ||
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008db2:	4b60      	ldr	r3, [pc, #384]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d047      	beq.n	8008e56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	73fb      	strb	r3, [r7, #15]
 8008dca:	e044      	b.n	8008e56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d018      	beq.n	8008e06 <RCCEx_PLLSAI2_Config+0x86>
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d825      	bhi.n	8008e24 <RCCEx_PLLSAI2_Config+0xa4>
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d002      	beq.n	8008de2 <RCCEx_PLLSAI2_Config+0x62>
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d009      	beq.n	8008df4 <RCCEx_PLLSAI2_Config+0x74>
 8008de0:	e020      	b.n	8008e24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008de2:	4b54      	ldr	r3, [pc, #336]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11d      	bne.n	8008e2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008df2:	e01a      	b.n	8008e2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008df4:	4b4f      	ldr	r3, [pc, #316]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d116      	bne.n	8008e2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e04:	e013      	b.n	8008e2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e06:	4b4b      	ldr	r3, [pc, #300]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10f      	bne.n	8008e32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e12:	4b48      	ldr	r3, [pc, #288]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e22:	e006      	b.n	8008e32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]
      break;
 8008e28:	e004      	b.n	8008e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10d      	bne.n	8008e56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e3a:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6819      	ldr	r1, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	4938      	ldr	r1, [pc, #224]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d166      	bne.n	8008f2a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a34      	ldr	r2, [pc, #208]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e68:	f7fc f820 	bl	8004eac <HAL_GetTick>
 8008e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e6e:	e009      	b.n	8008e84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e70:	f7fc f81c 	bl	8004eac <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d902      	bls.n	8008e84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	73fb      	strb	r3, [r7, #15]
        break;
 8008e82:	e005      	b.n	8008e90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e84:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1ef      	bne.n	8008e70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d149      	bne.n	8008f2a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d110      	bne.n	8008ebe <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6892      	ldr	r2, [r2, #8]
 8008eac:	0211      	lsls	r1, r2, #8
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68d2      	ldr	r2, [r2, #12]
 8008eb2:	06d2      	lsls	r2, r2, #27
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	491f      	ldr	r1, [pc, #124]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	614b      	str	r3, [r1, #20]
 8008ebc:	e011      	b.n	8008ee2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ec6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6892      	ldr	r2, [r2, #8]
 8008ece:	0211      	lsls	r1, r2, #8
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6912      	ldr	r2, [r2, #16]
 8008ed4:	0852      	lsrs	r2, r2, #1
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	0652      	lsls	r2, r2, #25
 8008eda:	430a      	orrs	r2, r1
 8008edc:	4915      	ldr	r1, [pc, #84]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ee2:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eee:	f7fb ffdd 	bl	8004eac <HAL_GetTick>
 8008ef2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ef4:	e009      	b.n	8008f0a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ef6:	f7fb ffd9 	bl	8004eac <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d902      	bls.n	8008f0a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	73fb      	strb	r3, [r7, #15]
          break;
 8008f08:	e005      	b.n	8008f16 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0ef      	beq.n	8008ef6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008f1c:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008f1e:	695a      	ldr	r2, [r3, #20]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	4903      	ldr	r1, [pc, #12]	; (8008f34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40021000 	.word	0x40021000

08008f38 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e038      	b.n	8008fc0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7fb fdd4 	bl	8004b10 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f001 f920 	bl	800a1b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	461a      	mov	r2, r3
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	f001 f9a8 	bl	800a2d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6858      	ldr	r0, [r3, #4]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	f001 f9ef 	bl	800a378 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	6892      	ldr	r2, [r2, #8]
 8008fa2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	6892      	ldr	r2, [r2, #8]
 8008fae:	f041 0101 	orr.w	r1, r1, #1
 8008fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e040      	b.n	800905c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fb fca2 	bl	8004934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	; 0x24
 8008ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fbc2 	bl	8009790 <UART_SetConfig>
 800900c:	4603      	mov	r3, r0
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e022      	b.n	800905c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fe6e 	bl	8009d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fef5 	bl	8009e44 <UART_CheckIdleState>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	; 0x28
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009078:	2b20      	cmp	r3, #32
 800907a:	f040 8082 	bne.w	8009182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <HAL_UART_Transmit+0x26>
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e07a      	b.n	8009184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_UART_Transmit+0x38>
 8009098:	2302      	movs	r3, #2
 800909a:	e073      	b.n	8009184 <HAL_UART_Transmit+0x120>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2221      	movs	r2, #33	; 0x21
 80090b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090b2:	f7fb fefb 	bl	8004eac <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d0:	d108      	bne.n	80090e4 <HAL_UART_Transmit+0x80>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	e003      	b.n	80090ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80090f4:	e02d      	b.n	8009152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2200      	movs	r2, #0
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 fee8 	bl	8009ed6 <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e039      	b.n	8009184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	881a      	ldrh	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009122:	b292      	uxth	r2, r2
 8009124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	3302      	adds	r3, #2
 800912a:	61bb      	str	r3, [r7, #24]
 800912c:	e008      	b.n	8009140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	b292      	uxth	r2, r2
 8009138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009146:	b29b      	uxth	r3, r3
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009158:	b29b      	uxth	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1cb      	bne.n	80090f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	2140      	movs	r1, #64	; 0x40
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 feb4 	bl	8009ed6 <UART_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e005      	b.n	8009184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2220      	movs	r2, #32
 800917c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e000      	b.n	8009184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009182:	2302      	movs	r3, #2
  }
}
 8009184:	4618      	mov	r0, r3
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b0ba      	sub	sp, #232	; 0xe8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80091ba:	4013      	ands	r3, r2
 80091bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d115      	bne.n	80091f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00f      	beq.n	80091f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 82a6 	beq.w	8009736 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
      }
      return;
 80091f2:	e2a0      	b.n	8009736 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80091f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8117 	beq.w	800942c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80091fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800920a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800920e:	4b85      	ldr	r3, [pc, #532]	; (8009424 <HAL_UART_IRQHandler+0x298>)
 8009210:	4013      	ands	r3, r2
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 810a 	beq.w	800942c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <HAL_UART_IRQHandler+0xbc>
 8009224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2201      	movs	r2, #1
 8009236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923e:	f043 0201 	orr.w	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d011      	beq.n	8009278 <HAL_UART_IRQHandler+0xec>
 8009254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2202      	movs	r2, #2
 8009266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800926e:	f043 0204 	orr.w	r2, r3, #4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d011      	beq.n	80092a8 <HAL_UART_IRQHandler+0x11c>
 8009284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2204      	movs	r2, #4
 8009296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800929e:	f043 0202 	orr.w	r2, r3, #2
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d017      	beq.n	80092e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d105      	bne.n	80092cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2208      	movs	r2, #8
 80092d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092da:	f043 0208 	orr.w	r2, r3, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d012      	beq.n	8009316 <HAL_UART_IRQHandler+0x18a>
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00c      	beq.n	8009316 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800930c:	f043 0220 	orr.w	r2, r3, #32
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 820c 	beq.w	800973a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00d      	beq.n	800934a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800932e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d007      	beq.n	800934a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d005      	beq.n	800936e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009366:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800936a:	2b00      	cmp	r3, #0
 800936c:	d04f      	beq.n	800940e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fe75 	bl	800a05e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d141      	bne.n	8009406 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800939c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3308      	adds	r3, #8
 80093aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1d9      	bne.n	8009382 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d013      	beq.n	80093fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a13      	ldr	r2, [pc, #76]	; (8009428 <HAL_UART_IRQHandler+0x29c>)
 80093dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fc fc92 	bl	8005d0c <HAL_DMA_Abort_IT>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d017      	beq.n	800941e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fc:	e00f      	b.n	800941e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9b0 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009404:	e00b      	b.n	800941e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f9ac 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940c:	e007      	b.n	800941e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f9a8 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800941c:	e18d      	b.n	800973a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941e:	bf00      	nop
    return;
 8009420:	e18b      	b.n	800973a <HAL_UART_IRQHandler+0x5ae>
 8009422:	bf00      	nop
 8009424:	04000120 	.word	0x04000120
 8009428:	0800a125 	.word	0x0800a125

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009430:	2b01      	cmp	r3, #1
 8009432:	f040 8146 	bne.w	80096c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943a:	f003 0310 	and.w	r3, r3, #16
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 813f 	beq.w	80096c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 8138 	beq.w	80096c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2210      	movs	r2, #16
 8009458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	f040 80b4 	bne.w	80095d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009476:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 815f 	beq.w	800973e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800948a:	429a      	cmp	r2, r3
 800948c:	f080 8157 	bcs.w	800973e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009496:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f040 8085 	bne.w	80095b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1da      	bne.n	80094ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800951a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800951e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800952c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e1      	bne.n	80094f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800955c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e3      	bne.n	8009532 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009586:	f023 0310 	bic.w	r3, r3, #16
 800958a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009598:	65bb      	str	r3, [r7, #88]	; 0x58
 800959a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800959e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e4      	bne.n	8009576 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fc fb6d 	bl	8005c90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f8d4 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095d0:	e0b5      	b.n	800973e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80a7 	beq.w	8009742 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80095f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80a2 	beq.w	8009742 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	e853 3f00 	ldrex	r3, [r3]
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009620:	647b      	str	r3, [r7, #68]	; 0x44
 8009622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e4      	bne.n	80095fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3308      	adds	r3, #8
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	623b      	str	r3, [r7, #32]
   return(result);
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009658:	633a      	str	r2, [r7, #48]	; 0x30
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800965e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e3      	bne.n	8009634 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	60fb      	str	r3, [r7, #12]
   return(result);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f023 0310 	bic.w	r3, r3, #16
 8009692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	69b9      	ldr	r1, [r7, #24]
 80096a6:	69fa      	ldr	r2, [r7, #28]
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	617b      	str	r3, [r7, #20]
   return(result);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e4      	bne.n	800967e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f85c 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096c0:	e03f      	b.n	8009742 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00e      	beq.n	80096ec <HAL_UART_IRQHandler+0x560>
 80096ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fd5d 	bl	800a1a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ea:	e02d      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00e      	beq.n	8009716 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009700:	2b00      	cmp	r3, #0
 8009702:	d008      	beq.n	8009716 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01c      	beq.n	8009746 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
    }
    return;
 8009714:	e017      	b.n	8009746 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	d012      	beq.n	8009748 <HAL_UART_IRQHandler+0x5bc>
 8009722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fd0e 	bl	800a150 <UART_EndTransmit_IT>
    return;
 8009734:	e008      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009736:	bf00      	nop
 8009738:	e006      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
    return;
 800973a:	bf00      	nop
 800973c:	e004      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
      return;
 800973e:	bf00      	nop
 8009740:	e002      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009742:	bf00      	nop
 8009744:	e000      	b.n	8009748 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009746:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009748:	37e8      	adds	r7, #232	; 0xe8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop

08009750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009794:	b08a      	sub	sp, #40	; 0x28
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4ba4      	ldr	r3, [pc, #656]	; (8009a50 <UART_SetConfig+0x2c0>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a99      	ldr	r2, [pc, #612]	; (8009a54 <UART_SetConfig+0x2c4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f8:	4313      	orrs	r3, r2
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a90      	ldr	r2, [pc, #576]	; (8009a58 <UART_SetConfig+0x2c8>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d126      	bne.n	8009868 <UART_SetConfig+0xd8>
 800981a:	4b90      	ldr	r3, [pc, #576]	; (8009a5c <UART_SetConfig+0x2cc>)
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	2b03      	cmp	r3, #3
 8009826:	d81b      	bhi.n	8009860 <UART_SetConfig+0xd0>
 8009828:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <UART_SetConfig+0xa0>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009841 	.word	0x08009841
 8009834:	08009851 	.word	0x08009851
 8009838:	08009849 	.word	0x08009849
 800983c:	08009859 	.word	0x08009859
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009846:	e116      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009848:	2302      	movs	r3, #2
 800984a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800984e:	e112      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009856:	e10e      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800985e:	e10a      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009866:	e106      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a7c      	ldr	r2, [pc, #496]	; (8009a60 <UART_SetConfig+0x2d0>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d138      	bne.n	80098e4 <UART_SetConfig+0x154>
 8009872:	4b7a      	ldr	r3, [pc, #488]	; (8009a5c <UART_SetConfig+0x2cc>)
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009878:	f003 030c 	and.w	r3, r3, #12
 800987c:	2b0c      	cmp	r3, #12
 800987e:	d82d      	bhi.n	80098dc <UART_SetConfig+0x14c>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <UART_SetConfig+0xf8>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	080098bd 	.word	0x080098bd
 800988c:	080098dd 	.word	0x080098dd
 8009890:	080098dd 	.word	0x080098dd
 8009894:	080098dd 	.word	0x080098dd
 8009898:	080098cd 	.word	0x080098cd
 800989c:	080098dd 	.word	0x080098dd
 80098a0:	080098dd 	.word	0x080098dd
 80098a4:	080098dd 	.word	0x080098dd
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	080098dd 	.word	0x080098dd
 80098b0:	080098dd 	.word	0x080098dd
 80098b4:	080098dd 	.word	0x080098dd
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098c2:	e0d8      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80098c4:	2302      	movs	r3, #2
 80098c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ca:	e0d4      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80098cc:	2304      	movs	r3, #4
 80098ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098d2:	e0d0      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80098d4:	2308      	movs	r3, #8
 80098d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098da:	e0cc      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80098dc:	2310      	movs	r3, #16
 80098de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098e2:	e0c8      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a5e      	ldr	r2, [pc, #376]	; (8009a64 <UART_SetConfig+0x2d4>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d125      	bne.n	800993a <UART_SetConfig+0x1aa>
 80098ee:	4b5b      	ldr	r3, [pc, #364]	; (8009a5c <UART_SetConfig+0x2cc>)
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098f8:	2b30      	cmp	r3, #48	; 0x30
 80098fa:	d016      	beq.n	800992a <UART_SetConfig+0x19a>
 80098fc:	2b30      	cmp	r3, #48	; 0x30
 80098fe:	d818      	bhi.n	8009932 <UART_SetConfig+0x1a2>
 8009900:	2b20      	cmp	r3, #32
 8009902:	d00a      	beq.n	800991a <UART_SetConfig+0x18a>
 8009904:	2b20      	cmp	r3, #32
 8009906:	d814      	bhi.n	8009932 <UART_SetConfig+0x1a2>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <UART_SetConfig+0x182>
 800990c:	2b10      	cmp	r3, #16
 800990e:	d008      	beq.n	8009922 <UART_SetConfig+0x192>
 8009910:	e00f      	b.n	8009932 <UART_SetConfig+0x1a2>
 8009912:	2300      	movs	r3, #0
 8009914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009918:	e0ad      	b.n	8009a76 <UART_SetConfig+0x2e6>
 800991a:	2302      	movs	r3, #2
 800991c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009920:	e0a9      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009922:	2304      	movs	r3, #4
 8009924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009928:	e0a5      	b.n	8009a76 <UART_SetConfig+0x2e6>
 800992a:	2308      	movs	r3, #8
 800992c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009930:	e0a1      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009932:	2310      	movs	r3, #16
 8009934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009938:	e09d      	b.n	8009a76 <UART_SetConfig+0x2e6>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a4a      	ldr	r2, [pc, #296]	; (8009a68 <UART_SetConfig+0x2d8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d125      	bne.n	8009990 <UART_SetConfig+0x200>
 8009944:	4b45      	ldr	r3, [pc, #276]	; (8009a5c <UART_SetConfig+0x2cc>)
 8009946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800994e:	2bc0      	cmp	r3, #192	; 0xc0
 8009950:	d016      	beq.n	8009980 <UART_SetConfig+0x1f0>
 8009952:	2bc0      	cmp	r3, #192	; 0xc0
 8009954:	d818      	bhi.n	8009988 <UART_SetConfig+0x1f8>
 8009956:	2b80      	cmp	r3, #128	; 0x80
 8009958:	d00a      	beq.n	8009970 <UART_SetConfig+0x1e0>
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d814      	bhi.n	8009988 <UART_SetConfig+0x1f8>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <UART_SetConfig+0x1d8>
 8009962:	2b40      	cmp	r3, #64	; 0x40
 8009964:	d008      	beq.n	8009978 <UART_SetConfig+0x1e8>
 8009966:	e00f      	b.n	8009988 <UART_SetConfig+0x1f8>
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800996e:	e082      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009970:	2302      	movs	r3, #2
 8009972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009976:	e07e      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800997e:	e07a      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009986:	e076      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998e:	e072      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a35      	ldr	r2, [pc, #212]	; (8009a6c <UART_SetConfig+0x2dc>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d12a      	bne.n	80099f0 <UART_SetConfig+0x260>
 800999a:	4b30      	ldr	r3, [pc, #192]	; (8009a5c <UART_SetConfig+0x2cc>)
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099a8:	d01a      	beq.n	80099e0 <UART_SetConfig+0x250>
 80099aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ae:	d81b      	bhi.n	80099e8 <UART_SetConfig+0x258>
 80099b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b4:	d00c      	beq.n	80099d0 <UART_SetConfig+0x240>
 80099b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ba:	d815      	bhi.n	80099e8 <UART_SetConfig+0x258>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <UART_SetConfig+0x238>
 80099c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c4:	d008      	beq.n	80099d8 <UART_SetConfig+0x248>
 80099c6:	e00f      	b.n	80099e8 <UART_SetConfig+0x258>
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ce:	e052      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80099d0:	2302      	movs	r3, #2
 80099d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d6:	e04e      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80099d8:	2304      	movs	r3, #4
 80099da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099de:	e04a      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099e6:	e046      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ee:	e042      	b.n	8009a76 <UART_SetConfig+0x2e6>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <UART_SetConfig+0x2c4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d13a      	bne.n	8009a70 <UART_SetConfig+0x2e0>
 80099fa:	4b18      	ldr	r3, [pc, #96]	; (8009a5c <UART_SetConfig+0x2cc>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a08:	d01a      	beq.n	8009a40 <UART_SetConfig+0x2b0>
 8009a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a0e:	d81b      	bhi.n	8009a48 <UART_SetConfig+0x2b8>
 8009a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a14:	d00c      	beq.n	8009a30 <UART_SetConfig+0x2a0>
 8009a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a1a:	d815      	bhi.n	8009a48 <UART_SetConfig+0x2b8>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <UART_SetConfig+0x298>
 8009a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a24:	d008      	beq.n	8009a38 <UART_SetConfig+0x2a8>
 8009a26:	e00f      	b.n	8009a48 <UART_SetConfig+0x2b8>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a2e:	e022      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a36:	e01e      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a3e:	e01a      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a46:	e016      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a4e:	e012      	b.n	8009a76 <UART_SetConfig+0x2e6>
 8009a50:	efff69f3 	.word	0xefff69f3
 8009a54:	40008000 	.word	0x40008000
 8009a58:	40013800 	.word	0x40013800
 8009a5c:	40021000 	.word	0x40021000
 8009a60:	40004400 	.word	0x40004400
 8009a64:	40004800 	.word	0x40004800
 8009a68:	40004c00 	.word	0x40004c00
 8009a6c:	40005000 	.word	0x40005000
 8009a70:	2310      	movs	r3, #16
 8009a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a9f      	ldr	r2, [pc, #636]	; (8009cf8 <UART_SetConfig+0x568>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d17a      	bne.n	8009b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d824      	bhi.n	8009ad2 <UART_SetConfig+0x342>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <UART_SetConfig+0x300>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009ad3 	.word	0x08009ad3
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ad3 	.word	0x08009ad3
 8009aa0:	08009ac3 	.word	0x08009ac3
 8009aa4:	08009ad3 	.word	0x08009ad3
 8009aa8:	08009ad3 	.word	0x08009ad3
 8009aac:	08009ad3 	.word	0x08009ad3
 8009ab0:	08009acb 	.word	0x08009acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab4:	f7fe fcea 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 8009ab8:	61f8      	str	r0, [r7, #28]
        break;
 8009aba:	e010      	b.n	8009ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009abc:	4b8f      	ldr	r3, [pc, #572]	; (8009cfc <UART_SetConfig+0x56c>)
 8009abe:	61fb      	str	r3, [r7, #28]
        break;
 8009ac0:	e00d      	b.n	8009ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ac2:	f7fe fc4b 	bl	800835c <HAL_RCC_GetSysClockFreq>
 8009ac6:	61f8      	str	r0, [r7, #28]
        break;
 8009ac8:	e009      	b.n	8009ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ace:	61fb      	str	r3, [r7, #28]
        break;
 8009ad0:	e005      	b.n	8009ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 80fb 	beq.w	8009cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d305      	bcc.n	8009b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d903      	bls.n	8009b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b08:	e0e8      	b.n	8009cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	461c      	mov	r4, r3
 8009b10:	4615      	mov	r5, r2
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	022b      	lsls	r3, r5, #8
 8009b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b20:	0222      	lsls	r2, r4, #8
 8009b22:	68f9      	ldr	r1, [r7, #12]
 8009b24:	6849      	ldr	r1, [r1, #4]
 8009b26:	0849      	lsrs	r1, r1, #1
 8009b28:	2000      	movs	r0, #0
 8009b2a:	4688      	mov	r8, r1
 8009b2c:	4681      	mov	r9, r0
 8009b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8009b32:	eb43 0b09 	adc.w	fp, r3, r9
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b44:	4650      	mov	r0, sl
 8009b46:	4659      	mov	r1, fp
 8009b48:	f7f6 fba2 	bl	8000290 <__aeabi_uldivmod>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4613      	mov	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b5a:	d308      	bcc.n	8009b6e <UART_SetConfig+0x3de>
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b62:	d204      	bcs.n	8009b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	60da      	str	r2, [r3, #12]
 8009b6c:	e0b6      	b.n	8009cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b74:	e0b2      	b.n	8009cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b7e:	d15e      	bne.n	8009c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d828      	bhi.n	8009bda <UART_SetConfig+0x44a>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x400>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bc5 	.word	0x08009bc5
 8009b9c:	08009bdb 	.word	0x08009bdb
 8009ba0:	08009bcb 	.word	0x08009bcb
 8009ba4:	08009bdb 	.word	0x08009bdb
 8009ba8:	08009bdb 	.word	0x08009bdb
 8009bac:	08009bdb 	.word	0x08009bdb
 8009bb0:	08009bd3 	.word	0x08009bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fe fc6a 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 8009bb8:	61f8      	str	r0, [r7, #28]
        break;
 8009bba:	e014      	b.n	8009be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bbc:	f7fe fc7c 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 8009bc0:	61f8      	str	r0, [r7, #28]
        break;
 8009bc2:	e010      	b.n	8009be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc4:	4b4d      	ldr	r3, [pc, #308]	; (8009cfc <UART_SetConfig+0x56c>)
 8009bc6:	61fb      	str	r3, [r7, #28]
        break;
 8009bc8:	e00d      	b.n	8009be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bca:	f7fe fbc7 	bl	800835c <HAL_RCC_GetSysClockFreq>
 8009bce:	61f8      	str	r0, [r7, #28]
        break;
 8009bd0:	e009      	b.n	8009be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd6:	61fb      	str	r3, [r7, #28]
        break;
 8009bd8:	e005      	b.n	8009be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d077      	beq.n	8009cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	005a      	lsls	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	085b      	lsrs	r3, r3, #1
 8009bf6:	441a      	add	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b0f      	cmp	r3, #15
 8009c06:	d916      	bls.n	8009c36 <UART_SetConfig+0x4a6>
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0e:	d212      	bcs.n	8009c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f023 030f 	bic.w	r3, r3, #15
 8009c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	8afb      	ldrh	r3, [r7, #22]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	8afa      	ldrh	r2, [r7, #22]
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	e052      	b.n	8009cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c3c:	e04e      	b.n	8009cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	d827      	bhi.n	8009c96 <UART_SetConfig+0x506>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <UART_SetConfig+0x4bc>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c71 	.word	0x08009c71
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c81 	.word	0x08009c81
 8009c58:	08009c97 	.word	0x08009c97
 8009c5c:	08009c87 	.word	0x08009c87
 8009c60:	08009c97 	.word	0x08009c97
 8009c64:	08009c97 	.word	0x08009c97
 8009c68:	08009c97 	.word	0x08009c97
 8009c6c:	08009c8f 	.word	0x08009c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c70:	f7fe fc0c 	bl	800848c <HAL_RCC_GetPCLK1Freq>
 8009c74:	61f8      	str	r0, [r7, #28]
        break;
 8009c76:	e014      	b.n	8009ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c78:	f7fe fc1e 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 8009c7c:	61f8      	str	r0, [r7, #28]
        break;
 8009c7e:	e010      	b.n	8009ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c80:	4b1e      	ldr	r3, [pc, #120]	; (8009cfc <UART_SetConfig+0x56c>)
 8009c82:	61fb      	str	r3, [r7, #28]
        break;
 8009c84:	e00d      	b.n	8009ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c86:	f7fe fb69 	bl	800835c <HAL_RCC_GetSysClockFreq>
 8009c8a:	61f8      	str	r0, [r7, #28]
        break;
 8009c8c:	e009      	b.n	8009ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c92:	61fb      	str	r3, [r7, #28]
        break;
 8009c94:	e005      	b.n	8009ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d019      	beq.n	8009cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	085a      	lsrs	r2, r3, #1
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	441a      	add	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	d909      	bls.n	8009cd6 <UART_SetConfig+0x546>
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc8:	d205      	bcs.n	8009cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60da      	str	r2, [r3, #12]
 8009cd4:	e002      	b.n	8009cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3728      	adds	r7, #40	; 0x28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cf6:	bf00      	nop
 8009cf8:	40008000 	.word	0x40008000
 8009cfc:	00f42400 	.word	0x00f42400

08009d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01a      	beq.n	8009e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfe:	d10a      	bne.n	8009e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  }
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e54:	f7fb f82a 	bl	8004eac <HAL_GetTick>
 8009e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0308 	and.w	r3, r3, #8
 8009e64:	2b08      	cmp	r3, #8
 8009e66:	d10e      	bne.n	8009e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f82d 	bl	8009ed6 <UART_WaitOnFlagUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e023      	b.n	8009ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d10e      	bne.n	8009eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f817 	bl	8009ed6 <UART_WaitOnFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e00d      	b.n	8009ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b09c      	sub	sp, #112	; 0x70
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	603b      	str	r3, [r7, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee6:	e0a5      	b.n	800a034 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eee:	f000 80a1 	beq.w	800a034 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef2:	f7fa ffdb 	bl	8004eac <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d302      	bcc.n	8009f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d13e      	bne.n	8009f86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e6      	bne.n	8009f08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	f023 0301 	bic.w	r3, r3, #1
 8009f50:	663b      	str	r3, [r7, #96]	; 0x60
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e5      	bne.n	8009f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2220      	movs	r2, #32
 8009f72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e067      	b.n	800a056 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d04f      	beq.n	800a034 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa2:	d147      	bne.n	800a034 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e6      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f023 0301 	bic.w	r3, r3, #1
 8009ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a000:	623a      	str	r2, [r7, #32]
 800a002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	69f9      	ldr	r1, [r7, #28]
 800a006:	6a3a      	ldr	r2, [r7, #32]
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e5      	bne.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2220      	movs	r2, #32
 800a01e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e010      	b.n	800a056 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69da      	ldr	r2, [r3, #28]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4013      	ands	r3, r2
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	429a      	cmp	r2, r3
 800a050:	f43f af4a 	beq.w	8009ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3770      	adds	r7, #112	; 0x70
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a05e:	b480      	push	{r7}
 800a060:	b095      	sub	sp, #84	; 0x54
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a07a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a084:	643b      	str	r3, [r7, #64]	; 0x40
 800a086:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a08a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e6      	bne.n	800a066 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	f023 0301 	bic.w	r3, r3, #1
 800a0ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e5      	bne.n	800a098 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d118      	bne.n	800a106 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f023 0310 	bic.w	r3, r3, #16
 800a0e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0f2:	61bb      	str	r3, [r7, #24]
 800a0f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6979      	ldr	r1, [r7, #20]
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e6      	bne.n	800a0d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a118:	bf00      	nop
 800a11a:	3754      	adds	r7, #84	; 0x54
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fb0e 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a148:	bf00      	nop
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	60bb      	str	r3, [r7, #8]
   return(result);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	61bb      	str	r3, [r7, #24]
 800a178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6979      	ldr	r1, [r7, #20]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	613b      	str	r3, [r7, #16]
   return(result);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e6      	bne.n	800a158 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff fada 	bl	8009750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a19c:	bf00      	nop
 800a19e:	3720      	adds	r7, #32
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	6812      	ldr	r2, [r2, #0]
 800a1d0:	f023 0101 	bic.w	r1, r3, #1
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d102      	bne.n	800a1e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	e001      	b.n	800a1ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a1f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a1fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a204:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a20a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a210:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a216:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a21c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a222:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a228:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a250:	4b20      	ldr	r3, [pc, #128]	; (800a2d4 <FMC_NORSRAM_Init+0x11c>)
 800a252:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a25a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a262:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a26a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	43db      	mvns	r3, r3
 800a27a:	ea02 0103 	and.w	r1, r2, r3
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	4319      	orrs	r1, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a294:	d10c      	bne.n	800a2b0 <FMC_NORSRAM_Init+0xf8>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d008      	beq.n	800a2b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	0008fb7f 	.word	0x0008fb7f

0800a2d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	431a      	orrs	r2, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	041b      	lsls	r3, r3, #16
 800a30c:	431a      	orrs	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	3b01      	subs	r3, #1
 800a314:	051b      	lsls	r3, r3, #20
 800a316:	431a      	orrs	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	3b02      	subs	r3, #2
 800a31e:	061b      	lsls	r3, r3, #24
 800a320:	431a      	orrs	r2, r3
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	4313      	orrs	r3, r2
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	3201      	adds	r2, #1
 800a32c:	4319      	orrs	r1, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a33c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a340:	d113      	bne.n	800a36a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a34a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	3b01      	subs	r3, #1
 800a352:	051b      	lsls	r3, r3, #20
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	431a      	orrs	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	371c      	adds	r7, #28
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a38c:	d11d      	bne.n	800a3ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a396:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a398:	4013      	ands	r3, r2
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	6811      	ldr	r1, [r2, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	6852      	ldr	r2, [r2, #4]
 800a3a2:	0112      	lsls	r2, r2, #4
 800a3a4:	4311      	orrs	r1, r2
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	6892      	ldr	r2, [r2, #8]
 800a3aa:	0212      	lsls	r2, r2, #8
 800a3ac:	4311      	orrs	r1, r2
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	69d2      	ldr	r2, [r2, #28]
 800a3b2:	4311      	orrs	r1, r2
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	6912      	ldr	r2, [r2, #16]
 800a3b8:	0412      	lsls	r2, r2, #16
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	ea43 0102 	orr.w	r1, r3, r2
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a3c8:	e005      	b.n	800a3d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a3d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	cff00000 	.word	0xcff00000

0800a3e8 <__assert_func>:
 800a3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <__assert_func+0x2c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	68d8      	ldr	r0, [r3, #12]
 800a3f6:	b14c      	cbz	r4, 800a40c <__assert_func+0x24>
 800a3f8:	4b07      	ldr	r3, [pc, #28]	; (800a418 <__assert_func+0x30>)
 800a3fa:	9100      	str	r1, [sp, #0]
 800a3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a400:	4906      	ldr	r1, [pc, #24]	; (800a41c <__assert_func+0x34>)
 800a402:	462b      	mov	r3, r5
 800a404:	f000 f814 	bl	800a430 <fiprintf>
 800a408:	f000 fd84 	bl	800af14 <abort>
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <__assert_func+0x38>)
 800a40e:	461c      	mov	r4, r3
 800a410:	e7f3      	b.n	800a3fa <__assert_func+0x12>
 800a412:	bf00      	nop
 800a414:	200000fc 	.word	0x200000fc
 800a418:	0800dd68 	.word	0x0800dd68
 800a41c:	0800dd75 	.word	0x0800dd75
 800a420:	0800dda3 	.word	0x0800dda3

0800a424 <__errno>:
 800a424:	4b01      	ldr	r3, [pc, #4]	; (800a42c <__errno+0x8>)
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	200000fc 	.word	0x200000fc

0800a430 <fiprintf>:
 800a430:	b40e      	push	{r1, r2, r3}
 800a432:	b503      	push	{r0, r1, lr}
 800a434:	4601      	mov	r1, r0
 800a436:	ab03      	add	r3, sp, #12
 800a438:	4805      	ldr	r0, [pc, #20]	; (800a450 <fiprintf+0x20>)
 800a43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	f000 f945 	bl	800a6d0 <_vfiprintf_r>
 800a446:	b002      	add	sp, #8
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	200000fc 	.word	0x200000fc

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4d0d      	ldr	r5, [pc, #52]	; (800a48c <__libc_init_array+0x38>)
 800a458:	4c0d      	ldr	r4, [pc, #52]	; (800a490 <__libc_init_array+0x3c>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	2600      	movs	r6, #0
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	4d0b      	ldr	r5, [pc, #44]	; (800a494 <__libc_init_array+0x40>)
 800a466:	4c0c      	ldr	r4, [pc, #48]	; (800a498 <__libc_init_array+0x44>)
 800a468:	f001 f878 	bl	800b55c <_init>
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	2600      	movs	r6, #0
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800de44 	.word	0x0800de44
 800a490:	0800de44 	.word	0x0800de44
 800a494:	0800de44 	.word	0x0800de44
 800a498:	0800de48 	.word	0x0800de48

0800a49c <malloc>:
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <malloc+0xc>)
 800a49e:	4601      	mov	r1, r0
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	f000 b877 	b.w	800a594 <_malloc_r>
 800a4a6:	bf00      	nop
 800a4a8:	200000fc 	.word	0x200000fc

0800a4ac <memset>:
 800a4ac:	4402      	add	r2, r0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d100      	bne.n	800a4b6 <memset+0xa>
 800a4b4:	4770      	bx	lr
 800a4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ba:	e7f9      	b.n	800a4b0 <memset+0x4>

0800a4bc <_free_r>:
 800a4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d044      	beq.n	800a54c <_free_r+0x90>
 800a4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c6:	9001      	str	r0, [sp, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ce:	bfb8      	it	lt
 800a4d0:	18e4      	addlt	r4, r4, r3
 800a4d2:	f000 ff47 	bl	800b364 <__malloc_lock>
 800a4d6:	4a1e      	ldr	r2, [pc, #120]	; (800a550 <_free_r+0x94>)
 800a4d8:	9801      	ldr	r0, [sp, #4]
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	b933      	cbnz	r3, 800a4ec <_free_r+0x30>
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	6014      	str	r4, [r2, #0]
 800a4e2:	b003      	add	sp, #12
 800a4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e8:	f000 bf42 	b.w	800b370 <__malloc_unlock>
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d908      	bls.n	800a502 <_free_r+0x46>
 800a4f0:	6825      	ldr	r5, [r4, #0]
 800a4f2:	1961      	adds	r1, r4, r5
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	bf01      	itttt	eq
 800a4f8:	6819      	ldreq	r1, [r3, #0]
 800a4fa:	685b      	ldreq	r3, [r3, #4]
 800a4fc:	1949      	addeq	r1, r1, r5
 800a4fe:	6021      	streq	r1, [r4, #0]
 800a500:	e7ed      	b.n	800a4de <_free_r+0x22>
 800a502:	461a      	mov	r2, r3
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	b10b      	cbz	r3, 800a50c <_free_r+0x50>
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d9fa      	bls.n	800a502 <_free_r+0x46>
 800a50c:	6811      	ldr	r1, [r2, #0]
 800a50e:	1855      	adds	r5, r2, r1
 800a510:	42a5      	cmp	r5, r4
 800a512:	d10b      	bne.n	800a52c <_free_r+0x70>
 800a514:	6824      	ldr	r4, [r4, #0]
 800a516:	4421      	add	r1, r4
 800a518:	1854      	adds	r4, r2, r1
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	d1e0      	bne.n	800a4e2 <_free_r+0x26>
 800a520:	681c      	ldr	r4, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	6053      	str	r3, [r2, #4]
 800a526:	4421      	add	r1, r4
 800a528:	6011      	str	r1, [r2, #0]
 800a52a:	e7da      	b.n	800a4e2 <_free_r+0x26>
 800a52c:	d902      	bls.n	800a534 <_free_r+0x78>
 800a52e:	230c      	movs	r3, #12
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	e7d6      	b.n	800a4e2 <_free_r+0x26>
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	1961      	adds	r1, r4, r5
 800a538:	428b      	cmp	r3, r1
 800a53a:	bf04      	itt	eq
 800a53c:	6819      	ldreq	r1, [r3, #0]
 800a53e:	685b      	ldreq	r3, [r3, #4]
 800a540:	6063      	str	r3, [r4, #4]
 800a542:	bf04      	itt	eq
 800a544:	1949      	addeq	r1, r1, r5
 800a546:	6021      	streq	r1, [r4, #0]
 800a548:	6054      	str	r4, [r2, #4]
 800a54a:	e7ca      	b.n	800a4e2 <_free_r+0x26>
 800a54c:	b003      	add	sp, #12
 800a54e:	bd30      	pop	{r4, r5, pc}
 800a550:	2001c640 	.word	0x2001c640

0800a554 <sbrk_aligned>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	4e0e      	ldr	r6, [pc, #56]	; (800a590 <sbrk_aligned+0x3c>)
 800a558:	460c      	mov	r4, r1
 800a55a:	6831      	ldr	r1, [r6, #0]
 800a55c:	4605      	mov	r5, r0
 800a55e:	b911      	cbnz	r1, 800a566 <sbrk_aligned+0x12>
 800a560:	f000 fc08 	bl	800ad74 <_sbrk_r>
 800a564:	6030      	str	r0, [r6, #0]
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 fc03 	bl	800ad74 <_sbrk_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d00a      	beq.n	800a588 <sbrk_aligned+0x34>
 800a572:	1cc4      	adds	r4, r0, #3
 800a574:	f024 0403 	bic.w	r4, r4, #3
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d007      	beq.n	800a58c <sbrk_aligned+0x38>
 800a57c:	1a21      	subs	r1, r4, r0
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 fbf8 	bl	800ad74 <_sbrk_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d101      	bne.n	800a58c <sbrk_aligned+0x38>
 800a588:	f04f 34ff 	mov.w	r4, #4294967295
 800a58c:	4620      	mov	r0, r4
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	2001c644 	.word	0x2001c644

0800a594 <_malloc_r>:
 800a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	1ccd      	adds	r5, r1, #3
 800a59a:	f025 0503 	bic.w	r5, r5, #3
 800a59e:	3508      	adds	r5, #8
 800a5a0:	2d0c      	cmp	r5, #12
 800a5a2:	bf38      	it	cc
 800a5a4:	250c      	movcc	r5, #12
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	db01      	blt.n	800a5b0 <_malloc_r+0x1c>
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	d905      	bls.n	800a5bc <_malloc_r+0x28>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	4e2e      	ldr	r6, [pc, #184]	; (800a678 <_malloc_r+0xe4>)
 800a5be:	f000 fed1 	bl	800b364 <__malloc_lock>
 800a5c2:	6833      	ldr	r3, [r6, #0]
 800a5c4:	461c      	mov	r4, r3
 800a5c6:	bb34      	cbnz	r4, 800a616 <_malloc_r+0x82>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7ff ffc2 	bl	800a554 <sbrk_aligned>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	d14d      	bne.n	800a672 <_malloc_r+0xde>
 800a5d6:	6834      	ldr	r4, [r6, #0]
 800a5d8:	4626      	mov	r6, r4
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d140      	bne.n	800a660 <_malloc_r+0xcc>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	eb04 0803 	add.w	r8, r4, r3
 800a5e8:	f000 fbc4 	bl	800ad74 <_sbrk_r>
 800a5ec:	4580      	cmp	r8, r0
 800a5ee:	d13a      	bne.n	800a666 <_malloc_r+0xd2>
 800a5f0:	6821      	ldr	r1, [r4, #0]
 800a5f2:	3503      	adds	r5, #3
 800a5f4:	1a6d      	subs	r5, r5, r1
 800a5f6:	f025 0503 	bic.w	r5, r5, #3
 800a5fa:	3508      	adds	r5, #8
 800a5fc:	2d0c      	cmp	r5, #12
 800a5fe:	bf38      	it	cc
 800a600:	250c      	movcc	r5, #12
 800a602:	4629      	mov	r1, r5
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff ffa5 	bl	800a554 <sbrk_aligned>
 800a60a:	3001      	adds	r0, #1
 800a60c:	d02b      	beq.n	800a666 <_malloc_r+0xd2>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	442b      	add	r3, r5
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	e00e      	b.n	800a634 <_malloc_r+0xa0>
 800a616:	6822      	ldr	r2, [r4, #0]
 800a618:	1b52      	subs	r2, r2, r5
 800a61a:	d41e      	bmi.n	800a65a <_malloc_r+0xc6>
 800a61c:	2a0b      	cmp	r2, #11
 800a61e:	d916      	bls.n	800a64e <_malloc_r+0xba>
 800a620:	1961      	adds	r1, r4, r5
 800a622:	42a3      	cmp	r3, r4
 800a624:	6025      	str	r5, [r4, #0]
 800a626:	bf18      	it	ne
 800a628:	6059      	strne	r1, [r3, #4]
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	bf08      	it	eq
 800a62e:	6031      	streq	r1, [r6, #0]
 800a630:	5162      	str	r2, [r4, r5]
 800a632:	604b      	str	r3, [r1, #4]
 800a634:	4638      	mov	r0, r7
 800a636:	f104 060b 	add.w	r6, r4, #11
 800a63a:	f000 fe99 	bl	800b370 <__malloc_unlock>
 800a63e:	f026 0607 	bic.w	r6, r6, #7
 800a642:	1d23      	adds	r3, r4, #4
 800a644:	1af2      	subs	r2, r6, r3
 800a646:	d0b6      	beq.n	800a5b6 <_malloc_r+0x22>
 800a648:	1b9b      	subs	r3, r3, r6
 800a64a:	50a3      	str	r3, [r4, r2]
 800a64c:	e7b3      	b.n	800a5b6 <_malloc_r+0x22>
 800a64e:	6862      	ldr	r2, [r4, #4]
 800a650:	42a3      	cmp	r3, r4
 800a652:	bf0c      	ite	eq
 800a654:	6032      	streq	r2, [r6, #0]
 800a656:	605a      	strne	r2, [r3, #4]
 800a658:	e7ec      	b.n	800a634 <_malloc_r+0xa0>
 800a65a:	4623      	mov	r3, r4
 800a65c:	6864      	ldr	r4, [r4, #4]
 800a65e:	e7b2      	b.n	800a5c6 <_malloc_r+0x32>
 800a660:	4634      	mov	r4, r6
 800a662:	6876      	ldr	r6, [r6, #4]
 800a664:	e7b9      	b.n	800a5da <_malloc_r+0x46>
 800a666:	230c      	movs	r3, #12
 800a668:	603b      	str	r3, [r7, #0]
 800a66a:	4638      	mov	r0, r7
 800a66c:	f000 fe80 	bl	800b370 <__malloc_unlock>
 800a670:	e7a1      	b.n	800a5b6 <_malloc_r+0x22>
 800a672:	6025      	str	r5, [r4, #0]
 800a674:	e7de      	b.n	800a634 <_malloc_r+0xa0>
 800a676:	bf00      	nop
 800a678:	2001c640 	.word	0x2001c640

0800a67c <__sfputc_r>:
 800a67c:	6893      	ldr	r3, [r2, #8]
 800a67e:	3b01      	subs	r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	b410      	push	{r4}
 800a684:	6093      	str	r3, [r2, #8]
 800a686:	da08      	bge.n	800a69a <__sfputc_r+0x1e>
 800a688:	6994      	ldr	r4, [r2, #24]
 800a68a:	42a3      	cmp	r3, r4
 800a68c:	db01      	blt.n	800a692 <__sfputc_r+0x16>
 800a68e:	290a      	cmp	r1, #10
 800a690:	d103      	bne.n	800a69a <__sfputc_r+0x1e>
 800a692:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a696:	f000 bb7d 	b.w	800ad94 <__swbuf_r>
 800a69a:	6813      	ldr	r3, [r2, #0]
 800a69c:	1c58      	adds	r0, r3, #1
 800a69e:	6010      	str	r0, [r2, #0]
 800a6a0:	7019      	strb	r1, [r3, #0]
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <__sfputs_r>:
 800a6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	18d5      	adds	r5, r2, r3
 800a6b4:	42ac      	cmp	r4, r5
 800a6b6:	d101      	bne.n	800a6bc <__sfputs_r+0x12>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e007      	b.n	800a6cc <__sfputs_r+0x22>
 800a6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c0:	463a      	mov	r2, r7
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ffda 	bl	800a67c <__sfputc_r>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d1f3      	bne.n	800a6b4 <__sfputs_r+0xa>
 800a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6d0 <_vfiprintf_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	b09d      	sub	sp, #116	; 0x74
 800a6d8:	4614      	mov	r4, r2
 800a6da:	4698      	mov	r8, r3
 800a6dc:	4606      	mov	r6, r0
 800a6de:	b118      	cbz	r0, 800a6e8 <_vfiprintf_r+0x18>
 800a6e0:	6983      	ldr	r3, [r0, #24]
 800a6e2:	b90b      	cbnz	r3, 800a6e8 <_vfiprintf_r+0x18>
 800a6e4:	f000 fd38 	bl	800b158 <__sinit>
 800a6e8:	4b89      	ldr	r3, [pc, #548]	; (800a910 <_vfiprintf_r+0x240>)
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	d11b      	bne.n	800a726 <_vfiprintf_r+0x56>
 800a6ee:	6875      	ldr	r5, [r6, #4]
 800a6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f2:	07d9      	lsls	r1, r3, #31
 800a6f4:	d405      	bmi.n	800a702 <_vfiprintf_r+0x32>
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	059a      	lsls	r2, r3, #22
 800a6fa:	d402      	bmi.n	800a702 <_vfiprintf_r+0x32>
 800a6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fe:	f000 fdc9 	bl	800b294 <__retarget_lock_acquire_recursive>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	071b      	lsls	r3, r3, #28
 800a706:	d501      	bpl.n	800a70c <_vfiprintf_r+0x3c>
 800a708:	692b      	ldr	r3, [r5, #16]
 800a70a:	b9eb      	cbnz	r3, 800a748 <_vfiprintf_r+0x78>
 800a70c:	4629      	mov	r1, r5
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 fb92 	bl	800ae38 <__swsetup_r>
 800a714:	b1c0      	cbz	r0, 800a748 <_vfiprintf_r+0x78>
 800a716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a718:	07dc      	lsls	r4, r3, #31
 800a71a:	d50e      	bpl.n	800a73a <_vfiprintf_r+0x6a>
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	b01d      	add	sp, #116	; 0x74
 800a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a726:	4b7b      	ldr	r3, [pc, #492]	; (800a914 <_vfiprintf_r+0x244>)
 800a728:	429d      	cmp	r5, r3
 800a72a:	d101      	bne.n	800a730 <_vfiprintf_r+0x60>
 800a72c:	68b5      	ldr	r5, [r6, #8]
 800a72e:	e7df      	b.n	800a6f0 <_vfiprintf_r+0x20>
 800a730:	4b79      	ldr	r3, [pc, #484]	; (800a918 <_vfiprintf_r+0x248>)
 800a732:	429d      	cmp	r5, r3
 800a734:	bf08      	it	eq
 800a736:	68f5      	ldreq	r5, [r6, #12]
 800a738:	e7da      	b.n	800a6f0 <_vfiprintf_r+0x20>
 800a73a:	89ab      	ldrh	r3, [r5, #12]
 800a73c:	0598      	lsls	r0, r3, #22
 800a73e:	d4ed      	bmi.n	800a71c <_vfiprintf_r+0x4c>
 800a740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a742:	f000 fda8 	bl	800b296 <__retarget_lock_release_recursive>
 800a746:	e7e9      	b.n	800a71c <_vfiprintf_r+0x4c>
 800a748:	2300      	movs	r3, #0
 800a74a:	9309      	str	r3, [sp, #36]	; 0x24
 800a74c:	2320      	movs	r3, #32
 800a74e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a752:	f8cd 800c 	str.w	r8, [sp, #12]
 800a756:	2330      	movs	r3, #48	; 0x30
 800a758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a91c <_vfiprintf_r+0x24c>
 800a75c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a760:	f04f 0901 	mov.w	r9, #1
 800a764:	4623      	mov	r3, r4
 800a766:	469a      	mov	sl, r3
 800a768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a76c:	b10a      	cbz	r2, 800a772 <_vfiprintf_r+0xa2>
 800a76e:	2a25      	cmp	r2, #37	; 0x25
 800a770:	d1f9      	bne.n	800a766 <_vfiprintf_r+0x96>
 800a772:	ebba 0b04 	subs.w	fp, sl, r4
 800a776:	d00b      	beq.n	800a790 <_vfiprintf_r+0xc0>
 800a778:	465b      	mov	r3, fp
 800a77a:	4622      	mov	r2, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ff93 	bl	800a6aa <__sfputs_r>
 800a784:	3001      	adds	r0, #1
 800a786:	f000 80aa 	beq.w	800a8de <_vfiprintf_r+0x20e>
 800a78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a78c:	445a      	add	r2, fp
 800a78e:	9209      	str	r2, [sp, #36]	; 0x24
 800a790:	f89a 3000 	ldrb.w	r3, [sl]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80a2 	beq.w	800a8de <_vfiprintf_r+0x20e>
 800a79a:	2300      	movs	r3, #0
 800a79c:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a4:	f10a 0a01 	add.w	sl, sl, #1
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	9307      	str	r3, [sp, #28]
 800a7ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7b0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7b2:	4654      	mov	r4, sl
 800a7b4:	2205      	movs	r2, #5
 800a7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ba:	4858      	ldr	r0, [pc, #352]	; (800a91c <_vfiprintf_r+0x24c>)
 800a7bc:	f7f5 fd18 	bl	80001f0 <memchr>
 800a7c0:	9a04      	ldr	r2, [sp, #16]
 800a7c2:	b9d8      	cbnz	r0, 800a7fc <_vfiprintf_r+0x12c>
 800a7c4:	06d1      	lsls	r1, r2, #27
 800a7c6:	bf44      	itt	mi
 800a7c8:	2320      	movmi	r3, #32
 800a7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ce:	0713      	lsls	r3, r2, #28
 800a7d0:	bf44      	itt	mi
 800a7d2:	232b      	movmi	r3, #43	; 0x2b
 800a7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7de:	d015      	beq.n	800a80c <_vfiprintf_r+0x13c>
 800a7e0:	9a07      	ldr	r2, [sp, #28]
 800a7e2:	4654      	mov	r4, sl
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	f04f 0c0a 	mov.w	ip, #10
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f0:	3b30      	subs	r3, #48	; 0x30
 800a7f2:	2b09      	cmp	r3, #9
 800a7f4:	d94e      	bls.n	800a894 <_vfiprintf_r+0x1c4>
 800a7f6:	b1b0      	cbz	r0, 800a826 <_vfiprintf_r+0x156>
 800a7f8:	9207      	str	r2, [sp, #28]
 800a7fa:	e014      	b.n	800a826 <_vfiprintf_r+0x156>
 800a7fc:	eba0 0308 	sub.w	r3, r0, r8
 800a800:	fa09 f303 	lsl.w	r3, r9, r3
 800a804:	4313      	orrs	r3, r2
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	46a2      	mov	sl, r4
 800a80a:	e7d2      	b.n	800a7b2 <_vfiprintf_r+0xe2>
 800a80c:	9b03      	ldr	r3, [sp, #12]
 800a80e:	1d19      	adds	r1, r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	9103      	str	r1, [sp, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	bfbb      	ittet	lt
 800a818:	425b      	neglt	r3, r3
 800a81a:	f042 0202 	orrlt.w	r2, r2, #2
 800a81e:	9307      	strge	r3, [sp, #28]
 800a820:	9307      	strlt	r3, [sp, #28]
 800a822:	bfb8      	it	lt
 800a824:	9204      	strlt	r2, [sp, #16]
 800a826:	7823      	ldrb	r3, [r4, #0]
 800a828:	2b2e      	cmp	r3, #46	; 0x2e
 800a82a:	d10c      	bne.n	800a846 <_vfiprintf_r+0x176>
 800a82c:	7863      	ldrb	r3, [r4, #1]
 800a82e:	2b2a      	cmp	r3, #42	; 0x2a
 800a830:	d135      	bne.n	800a89e <_vfiprintf_r+0x1ce>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	1d1a      	adds	r2, r3, #4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	9203      	str	r2, [sp, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfb8      	it	lt
 800a83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a842:	3402      	adds	r4, #2
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a92c <_vfiprintf_r+0x25c>
 800a84a:	7821      	ldrb	r1, [r4, #0]
 800a84c:	2203      	movs	r2, #3
 800a84e:	4650      	mov	r0, sl
 800a850:	f7f5 fcce 	bl	80001f0 <memchr>
 800a854:	b140      	cbz	r0, 800a868 <_vfiprintf_r+0x198>
 800a856:	2340      	movs	r3, #64	; 0x40
 800a858:	eba0 000a 	sub.w	r0, r0, sl
 800a85c:	fa03 f000 	lsl.w	r0, r3, r0
 800a860:	9b04      	ldr	r3, [sp, #16]
 800a862:	4303      	orrs	r3, r0
 800a864:	3401      	adds	r4, #1
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86c:	482c      	ldr	r0, [pc, #176]	; (800a920 <_vfiprintf_r+0x250>)
 800a86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a872:	2206      	movs	r2, #6
 800a874:	f7f5 fcbc 	bl	80001f0 <memchr>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d03f      	beq.n	800a8fc <_vfiprintf_r+0x22c>
 800a87c:	4b29      	ldr	r3, [pc, #164]	; (800a924 <_vfiprintf_r+0x254>)
 800a87e:	bb1b      	cbnz	r3, 800a8c8 <_vfiprintf_r+0x1f8>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	3307      	adds	r3, #7
 800a884:	f023 0307 	bic.w	r3, r3, #7
 800a888:	3308      	adds	r3, #8
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88e:	443b      	add	r3, r7
 800a890:	9309      	str	r3, [sp, #36]	; 0x24
 800a892:	e767      	b.n	800a764 <_vfiprintf_r+0x94>
 800a894:	fb0c 3202 	mla	r2, ip, r2, r3
 800a898:	460c      	mov	r4, r1
 800a89a:	2001      	movs	r0, #1
 800a89c:	e7a5      	b.n	800a7ea <_vfiprintf_r+0x11a>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	3401      	adds	r4, #1
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f04f 0c0a 	mov.w	ip, #10
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b0:	3a30      	subs	r2, #48	; 0x30
 800a8b2:	2a09      	cmp	r2, #9
 800a8b4:	d903      	bls.n	800a8be <_vfiprintf_r+0x1ee>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0c5      	beq.n	800a846 <_vfiprintf_r+0x176>
 800a8ba:	9105      	str	r1, [sp, #20]
 800a8bc:	e7c3      	b.n	800a846 <_vfiprintf_r+0x176>
 800a8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e7f0      	b.n	800a8aa <_vfiprintf_r+0x1da>
 800a8c8:	ab03      	add	r3, sp, #12
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	462a      	mov	r2, r5
 800a8ce:	4b16      	ldr	r3, [pc, #88]	; (800a928 <_vfiprintf_r+0x258>)
 800a8d0:	a904      	add	r1, sp, #16
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f3af 8000 	nop.w
 800a8d8:	4607      	mov	r7, r0
 800a8da:	1c78      	adds	r0, r7, #1
 800a8dc:	d1d6      	bne.n	800a88c <_vfiprintf_r+0x1bc>
 800a8de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e0:	07d9      	lsls	r1, r3, #31
 800a8e2:	d405      	bmi.n	800a8f0 <_vfiprintf_r+0x220>
 800a8e4:	89ab      	ldrh	r3, [r5, #12]
 800a8e6:	059a      	lsls	r2, r3, #22
 800a8e8:	d402      	bmi.n	800a8f0 <_vfiprintf_r+0x220>
 800a8ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ec:	f000 fcd3 	bl	800b296 <__retarget_lock_release_recursive>
 800a8f0:	89ab      	ldrh	r3, [r5, #12]
 800a8f2:	065b      	lsls	r3, r3, #25
 800a8f4:	f53f af12 	bmi.w	800a71c <_vfiprintf_r+0x4c>
 800a8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8fa:	e711      	b.n	800a720 <_vfiprintf_r+0x50>
 800a8fc:	ab03      	add	r3, sp, #12
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	462a      	mov	r2, r5
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <_vfiprintf_r+0x258>)
 800a904:	a904      	add	r1, sp, #16
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f880 	bl	800aa0c <_printf_i>
 800a90c:	e7e4      	b.n	800a8d8 <_vfiprintf_r+0x208>
 800a90e:	bf00      	nop
 800a910:	0800ddfc 	.word	0x0800ddfc
 800a914:	0800de1c 	.word	0x0800de1c
 800a918:	0800dddc 	.word	0x0800dddc
 800a91c:	0800dda8 	.word	0x0800dda8
 800a920:	0800ddb2 	.word	0x0800ddb2
 800a924:	00000000 	.word	0x00000000
 800a928:	0800a6ab 	.word	0x0800a6ab
 800a92c:	0800ddae 	.word	0x0800ddae

0800a930 <_printf_common>:
 800a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	4616      	mov	r6, r2
 800a936:	4699      	mov	r9, r3
 800a938:	688a      	ldr	r2, [r1, #8]
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a940:	4293      	cmp	r3, r2
 800a942:	bfb8      	it	lt
 800a944:	4613      	movlt	r3, r2
 800a946:	6033      	str	r3, [r6, #0]
 800a948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a94c:	4607      	mov	r7, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	b10a      	cbz	r2, 800a956 <_printf_common+0x26>
 800a952:	3301      	adds	r3, #1
 800a954:	6033      	str	r3, [r6, #0]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	0699      	lsls	r1, r3, #26
 800a95a:	bf42      	ittt	mi
 800a95c:	6833      	ldrmi	r3, [r6, #0]
 800a95e:	3302      	addmi	r3, #2
 800a960:	6033      	strmi	r3, [r6, #0]
 800a962:	6825      	ldr	r5, [r4, #0]
 800a964:	f015 0506 	ands.w	r5, r5, #6
 800a968:	d106      	bne.n	800a978 <_printf_common+0x48>
 800a96a:	f104 0a19 	add.w	sl, r4, #25
 800a96e:	68e3      	ldr	r3, [r4, #12]
 800a970:	6832      	ldr	r2, [r6, #0]
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	42ab      	cmp	r3, r5
 800a976:	dc26      	bgt.n	800a9c6 <_printf_common+0x96>
 800a978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a97c:	1e13      	subs	r3, r2, #0
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	bf18      	it	ne
 800a982:	2301      	movne	r3, #1
 800a984:	0692      	lsls	r2, r2, #26
 800a986:	d42b      	bmi.n	800a9e0 <_printf_common+0xb0>
 800a988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a98c:	4649      	mov	r1, r9
 800a98e:	4638      	mov	r0, r7
 800a990:	47c0      	blx	r8
 800a992:	3001      	adds	r0, #1
 800a994:	d01e      	beq.n	800a9d4 <_printf_common+0xa4>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	68e5      	ldr	r5, [r4, #12]
 800a99a:	6832      	ldr	r2, [r6, #0]
 800a99c:	f003 0306 	and.w	r3, r3, #6
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	bf08      	it	eq
 800a9a4:	1aad      	subeq	r5, r5, r2
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	6922      	ldr	r2, [r4, #16]
 800a9aa:	bf0c      	ite	eq
 800a9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b0:	2500      	movne	r5, #0
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	bfc4      	itt	gt
 800a9b6:	1a9b      	subgt	r3, r3, r2
 800a9b8:	18ed      	addgt	r5, r5, r3
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	341a      	adds	r4, #26
 800a9be:	42b5      	cmp	r5, r6
 800a9c0:	d11a      	bne.n	800a9f8 <_printf_common+0xc8>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e008      	b.n	800a9d8 <_printf_common+0xa8>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	47c0      	blx	r8
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d103      	bne.n	800a9dc <_printf_common+0xac>
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9dc:	3501      	adds	r5, #1
 800a9de:	e7c6      	b.n	800a96e <_printf_common+0x3e>
 800a9e0:	18e1      	adds	r1, r4, r3
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	2030      	movs	r0, #48	; 0x30
 800a9e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ea:	4422      	add	r2, r4
 800a9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	e7c7      	b.n	800a988 <_printf_common+0x58>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	4638      	mov	r0, r7
 800aa00:	47c0      	blx	r8
 800aa02:	3001      	adds	r0, #1
 800aa04:	d0e6      	beq.n	800a9d4 <_printf_common+0xa4>
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7d9      	b.n	800a9be <_printf_common+0x8e>
	...

0800aa0c <_printf_i>:
 800aa0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	7e0f      	ldrb	r7, [r1, #24]
 800aa12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa14:	2f78      	cmp	r7, #120	; 0x78
 800aa16:	4691      	mov	r9, r2
 800aa18:	4680      	mov	r8, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	469a      	mov	sl, r3
 800aa1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa22:	d807      	bhi.n	800aa34 <_printf_i+0x28>
 800aa24:	2f62      	cmp	r7, #98	; 0x62
 800aa26:	d80a      	bhi.n	800aa3e <_printf_i+0x32>
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	f000 80d8 	beq.w	800abde <_printf_i+0x1d2>
 800aa2e:	2f58      	cmp	r7, #88	; 0x58
 800aa30:	f000 80a3 	beq.w	800ab7a <_printf_i+0x16e>
 800aa34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa3c:	e03a      	b.n	800aab4 <_printf_i+0xa8>
 800aa3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa42:	2b15      	cmp	r3, #21
 800aa44:	d8f6      	bhi.n	800aa34 <_printf_i+0x28>
 800aa46:	a101      	add	r1, pc, #4	; (adr r1, 800aa4c <_printf_i+0x40>)
 800aa48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa4c:	0800aaa5 	.word	0x0800aaa5
 800aa50:	0800aab9 	.word	0x0800aab9
 800aa54:	0800aa35 	.word	0x0800aa35
 800aa58:	0800aa35 	.word	0x0800aa35
 800aa5c:	0800aa35 	.word	0x0800aa35
 800aa60:	0800aa35 	.word	0x0800aa35
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800aa35 	.word	0x0800aa35
 800aa6c:	0800aa35 	.word	0x0800aa35
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800abc5 	.word	0x0800abc5
 800aa7c:	0800aae9 	.word	0x0800aae9
 800aa80:	0800aba7 	.word	0x0800aba7
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abe7 	.word	0x0800abe7
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aae9 	.word	0x0800aae9
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800abaf 	.word	0x0800abaf
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	602a      	str	r2, [r5, #0]
 800aaac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab4:	2301      	movs	r3, #1
 800aab6:	e0a3      	b.n	800ac00 <_printf_i+0x1f4>
 800aab8:	6820      	ldr	r0, [r4, #0]
 800aaba:	6829      	ldr	r1, [r5, #0]
 800aabc:	0606      	lsls	r6, r0, #24
 800aabe:	f101 0304 	add.w	r3, r1, #4
 800aac2:	d50a      	bpl.n	800aada <_printf_i+0xce>
 800aac4:	680e      	ldr	r6, [r1, #0]
 800aac6:	602b      	str	r3, [r5, #0]
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	da03      	bge.n	800aad4 <_printf_i+0xc8>
 800aacc:	232d      	movs	r3, #45	; 0x2d
 800aace:	4276      	negs	r6, r6
 800aad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad4:	485e      	ldr	r0, [pc, #376]	; (800ac50 <_printf_i+0x244>)
 800aad6:	230a      	movs	r3, #10
 800aad8:	e019      	b.n	800ab0e <_printf_i+0x102>
 800aada:	680e      	ldr	r6, [r1, #0]
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aae2:	bf18      	it	ne
 800aae4:	b236      	sxthne	r6, r6
 800aae6:	e7ef      	b.n	800aac8 <_printf_i+0xbc>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	1d19      	adds	r1, r3, #4
 800aaee:	6029      	str	r1, [r5, #0]
 800aaf0:	0601      	lsls	r1, r0, #24
 800aaf2:	d501      	bpl.n	800aaf8 <_printf_i+0xec>
 800aaf4:	681e      	ldr	r6, [r3, #0]
 800aaf6:	e002      	b.n	800aafe <_printf_i+0xf2>
 800aaf8:	0646      	lsls	r6, r0, #25
 800aafa:	d5fb      	bpl.n	800aaf4 <_printf_i+0xe8>
 800aafc:	881e      	ldrh	r6, [r3, #0]
 800aafe:	4854      	ldr	r0, [pc, #336]	; (800ac50 <_printf_i+0x244>)
 800ab00:	2f6f      	cmp	r7, #111	; 0x6f
 800ab02:	bf0c      	ite	eq
 800ab04:	2308      	moveq	r3, #8
 800ab06:	230a      	movne	r3, #10
 800ab08:	2100      	movs	r1, #0
 800ab0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab0e:	6865      	ldr	r5, [r4, #4]
 800ab10:	60a5      	str	r5, [r4, #8]
 800ab12:	2d00      	cmp	r5, #0
 800ab14:	bfa2      	ittt	ge
 800ab16:	6821      	ldrge	r1, [r4, #0]
 800ab18:	f021 0104 	bicge.w	r1, r1, #4
 800ab1c:	6021      	strge	r1, [r4, #0]
 800ab1e:	b90e      	cbnz	r6, 800ab24 <_printf_i+0x118>
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	d04d      	beq.n	800abc0 <_printf_i+0x1b4>
 800ab24:	4615      	mov	r5, r2
 800ab26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab2e:	5dc7      	ldrb	r7, [r0, r7]
 800ab30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab34:	4637      	mov	r7, r6
 800ab36:	42bb      	cmp	r3, r7
 800ab38:	460e      	mov	r6, r1
 800ab3a:	d9f4      	bls.n	800ab26 <_printf_i+0x11a>
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d10b      	bne.n	800ab58 <_printf_i+0x14c>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	07de      	lsls	r6, r3, #31
 800ab44:	d508      	bpl.n	800ab58 <_printf_i+0x14c>
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6861      	ldr	r1, [r4, #4]
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	bfde      	ittt	le
 800ab4e:	2330      	movle	r3, #48	; 0x30
 800ab50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab58:	1b52      	subs	r2, r2, r5
 800ab5a:	6122      	str	r2, [r4, #16]
 800ab5c:	f8cd a000 	str.w	sl, [sp]
 800ab60:	464b      	mov	r3, r9
 800ab62:	aa03      	add	r2, sp, #12
 800ab64:	4621      	mov	r1, r4
 800ab66:	4640      	mov	r0, r8
 800ab68:	f7ff fee2 	bl	800a930 <_printf_common>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d14c      	bne.n	800ac0a <_printf_i+0x1fe>
 800ab70:	f04f 30ff 	mov.w	r0, #4294967295
 800ab74:	b004      	add	sp, #16
 800ab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7a:	4835      	ldr	r0, [pc, #212]	; (800ac50 <_printf_i+0x244>)
 800ab7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab80:	6829      	ldr	r1, [r5, #0]
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab88:	6029      	str	r1, [r5, #0]
 800ab8a:	061d      	lsls	r5, r3, #24
 800ab8c:	d514      	bpl.n	800abb8 <_printf_i+0x1ac>
 800ab8e:	07df      	lsls	r7, r3, #31
 800ab90:	bf44      	itt	mi
 800ab92:	f043 0320 	orrmi.w	r3, r3, #32
 800ab96:	6023      	strmi	r3, [r4, #0]
 800ab98:	b91e      	cbnz	r6, 800aba2 <_printf_i+0x196>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	f023 0320 	bic.w	r3, r3, #32
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	2310      	movs	r3, #16
 800aba4:	e7b0      	b.n	800ab08 <_printf_i+0xfc>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	f043 0320 	orr.w	r3, r3, #32
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	2378      	movs	r3, #120	; 0x78
 800abb0:	4828      	ldr	r0, [pc, #160]	; (800ac54 <_printf_i+0x248>)
 800abb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abb6:	e7e3      	b.n	800ab80 <_printf_i+0x174>
 800abb8:	0659      	lsls	r1, r3, #25
 800abba:	bf48      	it	mi
 800abbc:	b2b6      	uxthmi	r6, r6
 800abbe:	e7e6      	b.n	800ab8e <_printf_i+0x182>
 800abc0:	4615      	mov	r5, r2
 800abc2:	e7bb      	b.n	800ab3c <_printf_i+0x130>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	6826      	ldr	r6, [r4, #0]
 800abc8:	6961      	ldr	r1, [r4, #20]
 800abca:	1d18      	adds	r0, r3, #4
 800abcc:	6028      	str	r0, [r5, #0]
 800abce:	0635      	lsls	r5, r6, #24
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	d501      	bpl.n	800abd8 <_printf_i+0x1cc>
 800abd4:	6019      	str	r1, [r3, #0]
 800abd6:	e002      	b.n	800abde <_printf_i+0x1d2>
 800abd8:	0670      	lsls	r0, r6, #25
 800abda:	d5fb      	bpl.n	800abd4 <_printf_i+0x1c8>
 800abdc:	8019      	strh	r1, [r3, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	6123      	str	r3, [r4, #16]
 800abe2:	4615      	mov	r5, r2
 800abe4:	e7ba      	b.n	800ab5c <_printf_i+0x150>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	602a      	str	r2, [r5, #0]
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	6862      	ldr	r2, [r4, #4]
 800abf0:	2100      	movs	r1, #0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f7f5 fafc 	bl	80001f0 <memchr>
 800abf8:	b108      	cbz	r0, 800abfe <_printf_i+0x1f2>
 800abfa:	1b40      	subs	r0, r0, r5
 800abfc:	6060      	str	r0, [r4, #4]
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac08:	e7a8      	b.n	800ab5c <_printf_i+0x150>
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	47d0      	blx	sl
 800ac14:	3001      	adds	r0, #1
 800ac16:	d0ab      	beq.n	800ab70 <_printf_i+0x164>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	d413      	bmi.n	800ac46 <_printf_i+0x23a>
 800ac1e:	68e0      	ldr	r0, [r4, #12]
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	4298      	cmp	r0, r3
 800ac24:	bfb8      	it	lt
 800ac26:	4618      	movlt	r0, r3
 800ac28:	e7a4      	b.n	800ab74 <_printf_i+0x168>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d09b      	beq.n	800ab70 <_printf_i+0x164>
 800ac38:	3501      	adds	r5, #1
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	9903      	ldr	r1, [sp, #12]
 800ac3e:	1a5b      	subs	r3, r3, r1
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dcf2      	bgt.n	800ac2a <_printf_i+0x21e>
 800ac44:	e7eb      	b.n	800ac1e <_printf_i+0x212>
 800ac46:	2500      	movs	r5, #0
 800ac48:	f104 0619 	add.w	r6, r4, #25
 800ac4c:	e7f5      	b.n	800ac3a <_printf_i+0x22e>
 800ac4e:	bf00      	nop
 800ac50:	0800ddb9 	.word	0x0800ddb9
 800ac54:	0800ddca 	.word	0x0800ddca

0800ac58 <iprintf>:
 800ac58:	b40f      	push	{r0, r1, r2, r3}
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <iprintf+0x2c>)
 800ac5c:	b513      	push	{r0, r1, r4, lr}
 800ac5e:	681c      	ldr	r4, [r3, #0]
 800ac60:	b124      	cbz	r4, 800ac6c <iprintf+0x14>
 800ac62:	69a3      	ldr	r3, [r4, #24]
 800ac64:	b913      	cbnz	r3, 800ac6c <iprintf+0x14>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 fa76 	bl	800b158 <__sinit>
 800ac6c:	ab05      	add	r3, sp, #20
 800ac6e:	9a04      	ldr	r2, [sp, #16]
 800ac70:	68a1      	ldr	r1, [r4, #8]
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7ff fd2b 	bl	800a6d0 <_vfiprintf_r>
 800ac7a:	b002      	add	sp, #8
 800ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac80:	b004      	add	sp, #16
 800ac82:	4770      	bx	lr
 800ac84:	200000fc 	.word	0x200000fc

0800ac88 <_puts_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	460e      	mov	r6, r1
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	b118      	cbz	r0, 800ac98 <_puts_r+0x10>
 800ac90:	6983      	ldr	r3, [r0, #24]
 800ac92:	b90b      	cbnz	r3, 800ac98 <_puts_r+0x10>
 800ac94:	f000 fa60 	bl	800b158 <__sinit>
 800ac98:	69ab      	ldr	r3, [r5, #24]
 800ac9a:	68ac      	ldr	r4, [r5, #8]
 800ac9c:	b913      	cbnz	r3, 800aca4 <_puts_r+0x1c>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 fa5a 	bl	800b158 <__sinit>
 800aca4:	4b2c      	ldr	r3, [pc, #176]	; (800ad58 <_puts_r+0xd0>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d120      	bne.n	800acec <_puts_r+0x64>
 800acaa:	686c      	ldr	r4, [r5, #4]
 800acac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acae:	07db      	lsls	r3, r3, #31
 800acb0:	d405      	bmi.n	800acbe <_puts_r+0x36>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	0598      	lsls	r0, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_puts_r+0x36>
 800acb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acba:	f000 faeb 	bl	800b294 <__retarget_lock_acquire_recursive>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	0719      	lsls	r1, r3, #28
 800acc2:	d51d      	bpl.n	800ad00 <_puts_r+0x78>
 800acc4:	6923      	ldr	r3, [r4, #16]
 800acc6:	b1db      	cbz	r3, 800ad00 <_puts_r+0x78>
 800acc8:	3e01      	subs	r6, #1
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800acd0:	3b01      	subs	r3, #1
 800acd2:	60a3      	str	r3, [r4, #8]
 800acd4:	bb39      	cbnz	r1, 800ad26 <_puts_r+0x9e>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da38      	bge.n	800ad4c <_puts_r+0xc4>
 800acda:	4622      	mov	r2, r4
 800acdc:	210a      	movs	r1, #10
 800acde:	4628      	mov	r0, r5
 800ace0:	f000 f858 	bl	800ad94 <__swbuf_r>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d011      	beq.n	800ad0c <_puts_r+0x84>
 800ace8:	250a      	movs	r5, #10
 800acea:	e011      	b.n	800ad10 <_puts_r+0x88>
 800acec:	4b1b      	ldr	r3, [pc, #108]	; (800ad5c <_puts_r+0xd4>)
 800acee:	429c      	cmp	r4, r3
 800acf0:	d101      	bne.n	800acf6 <_puts_r+0x6e>
 800acf2:	68ac      	ldr	r4, [r5, #8]
 800acf4:	e7da      	b.n	800acac <_puts_r+0x24>
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <_puts_r+0xd8>)
 800acf8:	429c      	cmp	r4, r3
 800acfa:	bf08      	it	eq
 800acfc:	68ec      	ldreq	r4, [r5, #12]
 800acfe:	e7d5      	b.n	800acac <_puts_r+0x24>
 800ad00:	4621      	mov	r1, r4
 800ad02:	4628      	mov	r0, r5
 800ad04:	f000 f898 	bl	800ae38 <__swsetup_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0dd      	beq.n	800acc8 <_puts_r+0x40>
 800ad0c:	f04f 35ff 	mov.w	r5, #4294967295
 800ad10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad12:	07da      	lsls	r2, r3, #31
 800ad14:	d405      	bmi.n	800ad22 <_puts_r+0x9a>
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	059b      	lsls	r3, r3, #22
 800ad1a:	d402      	bmi.n	800ad22 <_puts_r+0x9a>
 800ad1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad1e:	f000 faba 	bl	800b296 <__retarget_lock_release_recursive>
 800ad22:	4628      	mov	r0, r5
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da04      	bge.n	800ad34 <_puts_r+0xac>
 800ad2a:	69a2      	ldr	r2, [r4, #24]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	dc06      	bgt.n	800ad3e <_puts_r+0xb6>
 800ad30:	290a      	cmp	r1, #10
 800ad32:	d004      	beq.n	800ad3e <_puts_r+0xb6>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	6022      	str	r2, [r4, #0]
 800ad3a:	7019      	strb	r1, [r3, #0]
 800ad3c:	e7c5      	b.n	800acca <_puts_r+0x42>
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 f827 	bl	800ad94 <__swbuf_r>
 800ad46:	3001      	adds	r0, #1
 800ad48:	d1bf      	bne.n	800acca <_puts_r+0x42>
 800ad4a:	e7df      	b.n	800ad0c <_puts_r+0x84>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	250a      	movs	r5, #10
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	6022      	str	r2, [r4, #0]
 800ad54:	701d      	strb	r5, [r3, #0]
 800ad56:	e7db      	b.n	800ad10 <_puts_r+0x88>
 800ad58:	0800ddfc 	.word	0x0800ddfc
 800ad5c:	0800de1c 	.word	0x0800de1c
 800ad60:	0800dddc 	.word	0x0800dddc

0800ad64 <puts>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <puts+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f7ff bf8d 	b.w	800ac88 <_puts_r>
 800ad6e:	bf00      	nop
 800ad70:	200000fc 	.word	0x200000fc

0800ad74 <_sbrk_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d06      	ldr	r5, [pc, #24]	; (800ad90 <_sbrk_r+0x1c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f9 ffba 	bl	8004cf8 <_sbrk>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_sbrk_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_sbrk_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	2001c64c 	.word	0x2001c64c

0800ad94 <__swbuf_r>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	460e      	mov	r6, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	b118      	cbz	r0, 800ada6 <__swbuf_r+0x12>
 800ad9e:	6983      	ldr	r3, [r0, #24]
 800ada0:	b90b      	cbnz	r3, 800ada6 <__swbuf_r+0x12>
 800ada2:	f000 f9d9 	bl	800b158 <__sinit>
 800ada6:	4b21      	ldr	r3, [pc, #132]	; (800ae2c <__swbuf_r+0x98>)
 800ada8:	429c      	cmp	r4, r3
 800adaa:	d12b      	bne.n	800ae04 <__swbuf_r+0x70>
 800adac:	686c      	ldr	r4, [r5, #4]
 800adae:	69a3      	ldr	r3, [r4, #24]
 800adb0:	60a3      	str	r3, [r4, #8]
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	071a      	lsls	r2, r3, #28
 800adb6:	d52f      	bpl.n	800ae18 <__swbuf_r+0x84>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	b36b      	cbz	r3, 800ae18 <__swbuf_r+0x84>
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	6820      	ldr	r0, [r4, #0]
 800adc0:	1ac0      	subs	r0, r0, r3
 800adc2:	6963      	ldr	r3, [r4, #20]
 800adc4:	b2f6      	uxtb	r6, r6
 800adc6:	4283      	cmp	r3, r0
 800adc8:	4637      	mov	r7, r6
 800adca:	dc04      	bgt.n	800add6 <__swbuf_r+0x42>
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f92e 	bl	800b030 <_fflush_r>
 800add4:	bb30      	cbnz	r0, 800ae24 <__swbuf_r+0x90>
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	3b01      	subs	r3, #1
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	6022      	str	r2, [r4, #0]
 800ade2:	701e      	strb	r6, [r3, #0]
 800ade4:	6963      	ldr	r3, [r4, #20]
 800ade6:	3001      	adds	r0, #1
 800ade8:	4283      	cmp	r3, r0
 800adea:	d004      	beq.n	800adf6 <__swbuf_r+0x62>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	07db      	lsls	r3, r3, #31
 800adf0:	d506      	bpl.n	800ae00 <__swbuf_r+0x6c>
 800adf2:	2e0a      	cmp	r6, #10
 800adf4:	d104      	bne.n	800ae00 <__swbuf_r+0x6c>
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 f919 	bl	800b030 <_fflush_r>
 800adfe:	b988      	cbnz	r0, 800ae24 <__swbuf_r+0x90>
 800ae00:	4638      	mov	r0, r7
 800ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <__swbuf_r+0x9c>)
 800ae06:	429c      	cmp	r4, r3
 800ae08:	d101      	bne.n	800ae0e <__swbuf_r+0x7a>
 800ae0a:	68ac      	ldr	r4, [r5, #8]
 800ae0c:	e7cf      	b.n	800adae <__swbuf_r+0x1a>
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <__swbuf_r+0xa0>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	bf08      	it	eq
 800ae14:	68ec      	ldreq	r4, [r5, #12]
 800ae16:	e7ca      	b.n	800adae <__swbuf_r+0x1a>
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f000 f80c 	bl	800ae38 <__swsetup_r>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d0cb      	beq.n	800adbc <__swbuf_r+0x28>
 800ae24:	f04f 37ff 	mov.w	r7, #4294967295
 800ae28:	e7ea      	b.n	800ae00 <__swbuf_r+0x6c>
 800ae2a:	bf00      	nop
 800ae2c:	0800ddfc 	.word	0x0800ddfc
 800ae30:	0800de1c 	.word	0x0800de1c
 800ae34:	0800dddc 	.word	0x0800dddc

0800ae38 <__swsetup_r>:
 800ae38:	4b32      	ldr	r3, [pc, #200]	; (800af04 <__swsetup_r+0xcc>)
 800ae3a:	b570      	push	{r4, r5, r6, lr}
 800ae3c:	681d      	ldr	r5, [r3, #0]
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	b125      	cbz	r5, 800ae4e <__swsetup_r+0x16>
 800ae44:	69ab      	ldr	r3, [r5, #24]
 800ae46:	b913      	cbnz	r3, 800ae4e <__swsetup_r+0x16>
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 f985 	bl	800b158 <__sinit>
 800ae4e:	4b2e      	ldr	r3, [pc, #184]	; (800af08 <__swsetup_r+0xd0>)
 800ae50:	429c      	cmp	r4, r3
 800ae52:	d10f      	bne.n	800ae74 <__swsetup_r+0x3c>
 800ae54:	686c      	ldr	r4, [r5, #4]
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae5c:	0719      	lsls	r1, r3, #28
 800ae5e:	d42c      	bmi.n	800aeba <__swsetup_r+0x82>
 800ae60:	06dd      	lsls	r5, r3, #27
 800ae62:	d411      	bmi.n	800ae88 <__swsetup_r+0x50>
 800ae64:	2309      	movs	r3, #9
 800ae66:	6033      	str	r3, [r6, #0]
 800ae68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae72:	e03e      	b.n	800aef2 <__swsetup_r+0xba>
 800ae74:	4b25      	ldr	r3, [pc, #148]	; (800af0c <__swsetup_r+0xd4>)
 800ae76:	429c      	cmp	r4, r3
 800ae78:	d101      	bne.n	800ae7e <__swsetup_r+0x46>
 800ae7a:	68ac      	ldr	r4, [r5, #8]
 800ae7c:	e7eb      	b.n	800ae56 <__swsetup_r+0x1e>
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <__swsetup_r+0xd8>)
 800ae80:	429c      	cmp	r4, r3
 800ae82:	bf08      	it	eq
 800ae84:	68ec      	ldreq	r4, [r5, #12]
 800ae86:	e7e6      	b.n	800ae56 <__swsetup_r+0x1e>
 800ae88:	0758      	lsls	r0, r3, #29
 800ae8a:	d512      	bpl.n	800aeb2 <__swsetup_r+0x7a>
 800ae8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8e:	b141      	cbz	r1, 800aea2 <__swsetup_r+0x6a>
 800ae90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__swsetup_r+0x66>
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff fb0f 	bl	800a4bc <_free_r>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	6363      	str	r3, [r4, #52]	; 0x34
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f043 0308 	orr.w	r3, r3, #8
 800aeb8:	81a3      	strh	r3, [r4, #12]
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	b94b      	cbnz	r3, 800aed2 <__swsetup_r+0x9a>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec8:	d003      	beq.n	800aed2 <__swsetup_r+0x9a>
 800aeca:	4621      	mov	r1, r4
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 fa09 	bl	800b2e4 <__smakebuf_r>
 800aed2:	89a0      	ldrh	r0, [r4, #12]
 800aed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aed8:	f010 0301 	ands.w	r3, r0, #1
 800aedc:	d00a      	beq.n	800aef4 <__swsetup_r+0xbc>
 800aede:	2300      	movs	r3, #0
 800aee0:	60a3      	str	r3, [r4, #8]
 800aee2:	6963      	ldr	r3, [r4, #20]
 800aee4:	425b      	negs	r3, r3
 800aee6:	61a3      	str	r3, [r4, #24]
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	b943      	cbnz	r3, 800aefe <__swsetup_r+0xc6>
 800aeec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aef0:	d1ba      	bne.n	800ae68 <__swsetup_r+0x30>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	0781      	lsls	r1, r0, #30
 800aef6:	bf58      	it	pl
 800aef8:	6963      	ldrpl	r3, [r4, #20]
 800aefa:	60a3      	str	r3, [r4, #8]
 800aefc:	e7f4      	b.n	800aee8 <__swsetup_r+0xb0>
 800aefe:	2000      	movs	r0, #0
 800af00:	e7f7      	b.n	800aef2 <__swsetup_r+0xba>
 800af02:	bf00      	nop
 800af04:	200000fc 	.word	0x200000fc
 800af08:	0800ddfc 	.word	0x0800ddfc
 800af0c:	0800de1c 	.word	0x0800de1c
 800af10:	0800dddc 	.word	0x0800dddc

0800af14 <abort>:
 800af14:	b508      	push	{r3, lr}
 800af16:	2006      	movs	r0, #6
 800af18:	f000 fa58 	bl	800b3cc <raise>
 800af1c:	2001      	movs	r0, #1
 800af1e:	f7f9 fe8f 	bl	8004c40 <_exit>
	...

0800af24 <__sflush_r>:
 800af24:	898a      	ldrh	r2, [r1, #12]
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	4605      	mov	r5, r0
 800af2c:	0710      	lsls	r0, r2, #28
 800af2e:	460c      	mov	r4, r1
 800af30:	d458      	bmi.n	800afe4 <__sflush_r+0xc0>
 800af32:	684b      	ldr	r3, [r1, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dc05      	bgt.n	800af44 <__sflush_r+0x20>
 800af38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dc02      	bgt.n	800af44 <__sflush_r+0x20>
 800af3e:	2000      	movs	r0, #0
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af46:	2e00      	cmp	r6, #0
 800af48:	d0f9      	beq.n	800af3e <__sflush_r+0x1a>
 800af4a:	2300      	movs	r3, #0
 800af4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af50:	682f      	ldr	r7, [r5, #0]
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	d032      	beq.n	800afbc <__sflush_r+0x98>
 800af56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	075a      	lsls	r2, r3, #29
 800af5c:	d505      	bpl.n	800af6a <__sflush_r+0x46>
 800af5e:	6863      	ldr	r3, [r4, #4]
 800af60:	1ac0      	subs	r0, r0, r3
 800af62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af64:	b10b      	cbz	r3, 800af6a <__sflush_r+0x46>
 800af66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af68:	1ac0      	subs	r0, r0, r3
 800af6a:	2300      	movs	r3, #0
 800af6c:	4602      	mov	r2, r0
 800af6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af70:	6a21      	ldr	r1, [r4, #32]
 800af72:	4628      	mov	r0, r5
 800af74:	47b0      	blx	r6
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	d106      	bne.n	800af8a <__sflush_r+0x66>
 800af7c:	6829      	ldr	r1, [r5, #0]
 800af7e:	291d      	cmp	r1, #29
 800af80:	d82c      	bhi.n	800afdc <__sflush_r+0xb8>
 800af82:	4a2a      	ldr	r2, [pc, #168]	; (800b02c <__sflush_r+0x108>)
 800af84:	40ca      	lsrs	r2, r1
 800af86:	07d6      	lsls	r6, r2, #31
 800af88:	d528      	bpl.n	800afdc <__sflush_r+0xb8>
 800af8a:	2200      	movs	r2, #0
 800af8c:	6062      	str	r2, [r4, #4]
 800af8e:	04d9      	lsls	r1, r3, #19
 800af90:	6922      	ldr	r2, [r4, #16]
 800af92:	6022      	str	r2, [r4, #0]
 800af94:	d504      	bpl.n	800afa0 <__sflush_r+0x7c>
 800af96:	1c42      	adds	r2, r0, #1
 800af98:	d101      	bne.n	800af9e <__sflush_r+0x7a>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	b903      	cbnz	r3, 800afa0 <__sflush_r+0x7c>
 800af9e:	6560      	str	r0, [r4, #84]	; 0x54
 800afa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa2:	602f      	str	r7, [r5, #0]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	d0ca      	beq.n	800af3e <__sflush_r+0x1a>
 800afa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afac:	4299      	cmp	r1, r3
 800afae:	d002      	beq.n	800afb6 <__sflush_r+0x92>
 800afb0:	4628      	mov	r0, r5
 800afb2:	f7ff fa83 	bl	800a4bc <_free_r>
 800afb6:	2000      	movs	r0, #0
 800afb8:	6360      	str	r0, [r4, #52]	; 0x34
 800afba:	e7c1      	b.n	800af40 <__sflush_r+0x1c>
 800afbc:	6a21      	ldr	r1, [r4, #32]
 800afbe:	2301      	movs	r3, #1
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b0      	blx	r6
 800afc4:	1c41      	adds	r1, r0, #1
 800afc6:	d1c7      	bne.n	800af58 <__sflush_r+0x34>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0c4      	beq.n	800af58 <__sflush_r+0x34>
 800afce:	2b1d      	cmp	r3, #29
 800afd0:	d001      	beq.n	800afd6 <__sflush_r+0xb2>
 800afd2:	2b16      	cmp	r3, #22
 800afd4:	d101      	bne.n	800afda <__sflush_r+0xb6>
 800afd6:	602f      	str	r7, [r5, #0]
 800afd8:	e7b1      	b.n	800af3e <__sflush_r+0x1a>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	e7ad      	b.n	800af40 <__sflush_r+0x1c>
 800afe4:	690f      	ldr	r7, [r1, #16]
 800afe6:	2f00      	cmp	r7, #0
 800afe8:	d0a9      	beq.n	800af3e <__sflush_r+0x1a>
 800afea:	0793      	lsls	r3, r2, #30
 800afec:	680e      	ldr	r6, [r1, #0]
 800afee:	bf08      	it	eq
 800aff0:	694b      	ldreq	r3, [r1, #20]
 800aff2:	600f      	str	r7, [r1, #0]
 800aff4:	bf18      	it	ne
 800aff6:	2300      	movne	r3, #0
 800aff8:	eba6 0807 	sub.w	r8, r6, r7
 800affc:	608b      	str	r3, [r1, #8]
 800affe:	f1b8 0f00 	cmp.w	r8, #0
 800b002:	dd9c      	ble.n	800af3e <__sflush_r+0x1a>
 800b004:	6a21      	ldr	r1, [r4, #32]
 800b006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b008:	4643      	mov	r3, r8
 800b00a:	463a      	mov	r2, r7
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b0      	blx	r6
 800b010:	2800      	cmp	r0, #0
 800b012:	dc06      	bgt.n	800b022 <__sflush_r+0xfe>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b01a:	81a3      	strh	r3, [r4, #12]
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	e78e      	b.n	800af40 <__sflush_r+0x1c>
 800b022:	4407      	add	r7, r0
 800b024:	eba8 0800 	sub.w	r8, r8, r0
 800b028:	e7e9      	b.n	800affe <__sflush_r+0xda>
 800b02a:	bf00      	nop
 800b02c:	20400001 	.word	0x20400001

0800b030 <_fflush_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	4605      	mov	r5, r0
 800b036:	460c      	mov	r4, r1
 800b038:	b913      	cbnz	r3, 800b040 <_fflush_r+0x10>
 800b03a:	2500      	movs	r5, #0
 800b03c:	4628      	mov	r0, r5
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	b118      	cbz	r0, 800b04a <_fflush_r+0x1a>
 800b042:	6983      	ldr	r3, [r0, #24]
 800b044:	b90b      	cbnz	r3, 800b04a <_fflush_r+0x1a>
 800b046:	f000 f887 	bl	800b158 <__sinit>
 800b04a:	4b14      	ldr	r3, [pc, #80]	; (800b09c <_fflush_r+0x6c>)
 800b04c:	429c      	cmp	r4, r3
 800b04e:	d11b      	bne.n	800b088 <_fflush_r+0x58>
 800b050:	686c      	ldr	r4, [r5, #4]
 800b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0ef      	beq.n	800b03a <_fflush_r+0xa>
 800b05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b05c:	07d0      	lsls	r0, r2, #31
 800b05e:	d404      	bmi.n	800b06a <_fflush_r+0x3a>
 800b060:	0599      	lsls	r1, r3, #22
 800b062:	d402      	bmi.n	800b06a <_fflush_r+0x3a>
 800b064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b066:	f000 f915 	bl	800b294 <__retarget_lock_acquire_recursive>
 800b06a:	4628      	mov	r0, r5
 800b06c:	4621      	mov	r1, r4
 800b06e:	f7ff ff59 	bl	800af24 <__sflush_r>
 800b072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b074:	07da      	lsls	r2, r3, #31
 800b076:	4605      	mov	r5, r0
 800b078:	d4e0      	bmi.n	800b03c <_fflush_r+0xc>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	059b      	lsls	r3, r3, #22
 800b07e:	d4dd      	bmi.n	800b03c <_fflush_r+0xc>
 800b080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b082:	f000 f908 	bl	800b296 <__retarget_lock_release_recursive>
 800b086:	e7d9      	b.n	800b03c <_fflush_r+0xc>
 800b088:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <_fflush_r+0x70>)
 800b08a:	429c      	cmp	r4, r3
 800b08c:	d101      	bne.n	800b092 <_fflush_r+0x62>
 800b08e:	68ac      	ldr	r4, [r5, #8]
 800b090:	e7df      	b.n	800b052 <_fflush_r+0x22>
 800b092:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <_fflush_r+0x74>)
 800b094:	429c      	cmp	r4, r3
 800b096:	bf08      	it	eq
 800b098:	68ec      	ldreq	r4, [r5, #12]
 800b09a:	e7da      	b.n	800b052 <_fflush_r+0x22>
 800b09c:	0800ddfc 	.word	0x0800ddfc
 800b0a0:	0800de1c 	.word	0x0800de1c
 800b0a4:	0800dddc 	.word	0x0800dddc

0800b0a8 <std>:
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0b6:	6083      	str	r3, [r0, #8]
 800b0b8:	8181      	strh	r1, [r0, #12]
 800b0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b0bc:	81c2      	strh	r2, [r0, #14]
 800b0be:	6183      	str	r3, [r0, #24]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	305c      	adds	r0, #92	; 0x5c
 800b0c6:	f7ff f9f1 	bl	800a4ac <memset>
 800b0ca:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <std+0x38>)
 800b0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0ce:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <std+0x3c>)
 800b0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <std+0x40>)
 800b0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <std+0x44>)
 800b0d8:	6224      	str	r4, [r4, #32]
 800b0da:	6323      	str	r3, [r4, #48]	; 0x30
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800b405 	.word	0x0800b405
 800b0e4:	0800b427 	.word	0x0800b427
 800b0e8:	0800b45f 	.word	0x0800b45f
 800b0ec:	0800b483 	.word	0x0800b483

0800b0f0 <_cleanup_r>:
 800b0f0:	4901      	ldr	r1, [pc, #4]	; (800b0f8 <_cleanup_r+0x8>)
 800b0f2:	f000 b8af 	b.w	800b254 <_fwalk_reent>
 800b0f6:	bf00      	nop
 800b0f8:	0800b031 	.word	0x0800b031

0800b0fc <__sfmoreglue>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	2268      	movs	r2, #104	; 0x68
 800b100:	1e4d      	subs	r5, r1, #1
 800b102:	4355      	muls	r5, r2
 800b104:	460e      	mov	r6, r1
 800b106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b10a:	f7ff fa43 	bl	800a594 <_malloc_r>
 800b10e:	4604      	mov	r4, r0
 800b110:	b140      	cbz	r0, 800b124 <__sfmoreglue+0x28>
 800b112:	2100      	movs	r1, #0
 800b114:	e9c0 1600 	strd	r1, r6, [r0]
 800b118:	300c      	adds	r0, #12
 800b11a:	60a0      	str	r0, [r4, #8]
 800b11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b120:	f7ff f9c4 	bl	800a4ac <memset>
 800b124:	4620      	mov	r0, r4
 800b126:	bd70      	pop	{r4, r5, r6, pc}

0800b128 <__sfp_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sfp_lock_acquire+0x8>)
 800b12a:	f000 b8b3 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	2001c649 	.word	0x2001c649

0800b134 <__sfp_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	; (800b13c <__sfp_lock_release+0x8>)
 800b136:	f000 b8ae 	b.w	800b296 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	2001c649 	.word	0x2001c649

0800b140 <__sinit_lock_acquire>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__sinit_lock_acquire+0x8>)
 800b142:	f000 b8a7 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	2001c64a 	.word	0x2001c64a

0800b14c <__sinit_lock_release>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__sinit_lock_release+0x8>)
 800b14e:	f000 b8a2 	b.w	800b296 <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	2001c64a 	.word	0x2001c64a

0800b158 <__sinit>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	f7ff fff0 	bl	800b140 <__sinit_lock_acquire>
 800b160:	69a3      	ldr	r3, [r4, #24]
 800b162:	b11b      	cbz	r3, 800b16c <__sinit+0x14>
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	f7ff bff0 	b.w	800b14c <__sinit_lock_release>
 800b16c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b170:	6523      	str	r3, [r4, #80]	; 0x50
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <__sinit+0x68>)
 800b174:	4a13      	ldr	r2, [pc, #76]	; (800b1c4 <__sinit+0x6c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	62a2      	str	r2, [r4, #40]	; 0x28
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	bf04      	itt	eq
 800b17e:	2301      	moveq	r3, #1
 800b180:	61a3      	streq	r3, [r4, #24]
 800b182:	4620      	mov	r0, r4
 800b184:	f000 f820 	bl	800b1c8 <__sfp>
 800b188:	6060      	str	r0, [r4, #4]
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 f81c 	bl	800b1c8 <__sfp>
 800b190:	60a0      	str	r0, [r4, #8]
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f818 	bl	800b1c8 <__sfp>
 800b198:	2200      	movs	r2, #0
 800b19a:	60e0      	str	r0, [r4, #12]
 800b19c:	2104      	movs	r1, #4
 800b19e:	6860      	ldr	r0, [r4, #4]
 800b1a0:	f7ff ff82 	bl	800b0a8 <std>
 800b1a4:	68a0      	ldr	r0, [r4, #8]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2109      	movs	r1, #9
 800b1aa:	f7ff ff7d 	bl	800b0a8 <std>
 800b1ae:	68e0      	ldr	r0, [r4, #12]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	2112      	movs	r1, #18
 800b1b4:	f7ff ff78 	bl	800b0a8 <std>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	61a3      	str	r3, [r4, #24]
 800b1bc:	e7d2      	b.n	800b164 <__sinit+0xc>
 800b1be:	bf00      	nop
 800b1c0:	0800dda4 	.word	0x0800dda4
 800b1c4:	0800b0f1 	.word	0x0800b0f1

0800b1c8 <__sfp>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	f7ff ffac 	bl	800b128 <__sfp_lock_acquire>
 800b1d0:	4b1e      	ldr	r3, [pc, #120]	; (800b24c <__sfp+0x84>)
 800b1d2:	681e      	ldr	r6, [r3, #0]
 800b1d4:	69b3      	ldr	r3, [r6, #24]
 800b1d6:	b913      	cbnz	r3, 800b1de <__sfp+0x16>
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff ffbd 	bl	800b158 <__sinit>
 800b1de:	3648      	adds	r6, #72	; 0x48
 800b1e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	d503      	bpl.n	800b1f0 <__sfp+0x28>
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	b30b      	cbz	r3, 800b230 <__sfp+0x68>
 800b1ec:	6836      	ldr	r6, [r6, #0]
 800b1ee:	e7f7      	b.n	800b1e0 <__sfp+0x18>
 800b1f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1f4:	b9d5      	cbnz	r5, 800b22c <__sfp+0x64>
 800b1f6:	4b16      	ldr	r3, [pc, #88]	; (800b250 <__sfp+0x88>)
 800b1f8:	60e3      	str	r3, [r4, #12]
 800b1fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b200:	f000 f847 	bl	800b292 <__retarget_lock_init_recursive>
 800b204:	f7ff ff96 	bl	800b134 <__sfp_lock_release>
 800b208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b20c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b210:	6025      	str	r5, [r4, #0]
 800b212:	61a5      	str	r5, [r4, #24]
 800b214:	2208      	movs	r2, #8
 800b216:	4629      	mov	r1, r5
 800b218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b21c:	f7ff f946 	bl	800a4ac <memset>
 800b220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b228:	4620      	mov	r0, r4
 800b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b22c:	3468      	adds	r4, #104	; 0x68
 800b22e:	e7d9      	b.n	800b1e4 <__sfp+0x1c>
 800b230:	2104      	movs	r1, #4
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ff62 	bl	800b0fc <__sfmoreglue>
 800b238:	4604      	mov	r4, r0
 800b23a:	6030      	str	r0, [r6, #0]
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d1d5      	bne.n	800b1ec <__sfp+0x24>
 800b240:	f7ff ff78 	bl	800b134 <__sfp_lock_release>
 800b244:	230c      	movs	r3, #12
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	e7ee      	b.n	800b228 <__sfp+0x60>
 800b24a:	bf00      	nop
 800b24c:	0800dda4 	.word	0x0800dda4
 800b250:	ffff0001 	.word	0xffff0001

0800b254 <_fwalk_reent>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	4606      	mov	r6, r0
 800b25a:	4688      	mov	r8, r1
 800b25c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b260:	2700      	movs	r7, #0
 800b262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b266:	f1b9 0901 	subs.w	r9, r9, #1
 800b26a:	d505      	bpl.n	800b278 <_fwalk_reent+0x24>
 800b26c:	6824      	ldr	r4, [r4, #0]
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d1f7      	bne.n	800b262 <_fwalk_reent+0xe>
 800b272:	4638      	mov	r0, r7
 800b274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d907      	bls.n	800b28e <_fwalk_reent+0x3a>
 800b27e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b282:	3301      	adds	r3, #1
 800b284:	d003      	beq.n	800b28e <_fwalk_reent+0x3a>
 800b286:	4629      	mov	r1, r5
 800b288:	4630      	mov	r0, r6
 800b28a:	47c0      	blx	r8
 800b28c:	4307      	orrs	r7, r0
 800b28e:	3568      	adds	r5, #104	; 0x68
 800b290:	e7e9      	b.n	800b266 <_fwalk_reent+0x12>

0800b292 <__retarget_lock_init_recursive>:
 800b292:	4770      	bx	lr

0800b294 <__retarget_lock_acquire_recursive>:
 800b294:	4770      	bx	lr

0800b296 <__retarget_lock_release_recursive>:
 800b296:	4770      	bx	lr

0800b298 <__swhatbuf_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	460e      	mov	r6, r1
 800b29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	b096      	sub	sp, #88	; 0x58
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	da08      	bge.n	800b2bc <__swhatbuf_r+0x24>
 800b2aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	061a      	lsls	r2, r3, #24
 800b2b4:	d410      	bmi.n	800b2d8 <__swhatbuf_r+0x40>
 800b2b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ba:	e00e      	b.n	800b2da <__swhatbuf_r+0x42>
 800b2bc:	466a      	mov	r2, sp
 800b2be:	f000 f907 	bl	800b4d0 <_fstat_r>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	dbf1      	blt.n	800b2aa <__swhatbuf_r+0x12>
 800b2c6:	9a01      	ldr	r2, [sp, #4]
 800b2c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2d0:	425a      	negs	r2, r3
 800b2d2:	415a      	adcs	r2, r3
 800b2d4:	602a      	str	r2, [r5, #0]
 800b2d6:	e7ee      	b.n	800b2b6 <__swhatbuf_r+0x1e>
 800b2d8:	2340      	movs	r3, #64	; 0x40
 800b2da:	2000      	movs	r0, #0
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	b016      	add	sp, #88	; 0x58
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2e4 <__smakebuf_r>:
 800b2e4:	898b      	ldrh	r3, [r1, #12]
 800b2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2e8:	079d      	lsls	r5, r3, #30
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	d507      	bpl.n	800b300 <__smakebuf_r+0x1c>
 800b2f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	6163      	str	r3, [r4, #20]
 800b2fc:	b002      	add	sp, #8
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	ab01      	add	r3, sp, #4
 800b302:	466a      	mov	r2, sp
 800b304:	f7ff ffc8 	bl	800b298 <__swhatbuf_r>
 800b308:	9900      	ldr	r1, [sp, #0]
 800b30a:	4605      	mov	r5, r0
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff f941 	bl	800a594 <_malloc_r>
 800b312:	b948      	cbnz	r0, 800b328 <__smakebuf_r+0x44>
 800b314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b318:	059a      	lsls	r2, r3, #22
 800b31a:	d4ef      	bmi.n	800b2fc <__smakebuf_r+0x18>
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	f043 0302 	orr.w	r3, r3, #2
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	e7e3      	b.n	800b2f0 <__smakebuf_r+0xc>
 800b328:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <__smakebuf_r+0x7c>)
 800b32a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	6020      	str	r0, [r4, #0]
 800b330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b334:	81a3      	strh	r3, [r4, #12]
 800b336:	9b00      	ldr	r3, [sp, #0]
 800b338:	6163      	str	r3, [r4, #20]
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	6120      	str	r0, [r4, #16]
 800b33e:	b15b      	cbz	r3, 800b358 <__smakebuf_r+0x74>
 800b340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b344:	4630      	mov	r0, r6
 800b346:	f000 f8d5 	bl	800b4f4 <_isatty_r>
 800b34a:	b128      	cbz	r0, 800b358 <__smakebuf_r+0x74>
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	f043 0301 	orr.w	r3, r3, #1
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	89a0      	ldrh	r0, [r4, #12]
 800b35a:	4305      	orrs	r5, r0
 800b35c:	81a5      	strh	r5, [r4, #12]
 800b35e:	e7cd      	b.n	800b2fc <__smakebuf_r+0x18>
 800b360:	0800b0f1 	.word	0x0800b0f1

0800b364 <__malloc_lock>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__malloc_lock+0x8>)
 800b366:	f7ff bf95 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	2001c648 	.word	0x2001c648

0800b370 <__malloc_unlock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_unlock+0x8>)
 800b372:	f7ff bf90 	b.w	800b296 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	2001c648 	.word	0x2001c648

0800b37c <_raise_r>:
 800b37c:	291f      	cmp	r1, #31
 800b37e:	b538      	push	{r3, r4, r5, lr}
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	d904      	bls.n	800b390 <_raise_r+0x14>
 800b386:	2316      	movs	r3, #22
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b392:	b112      	cbz	r2, 800b39a <_raise_r+0x1e>
 800b394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b398:	b94b      	cbnz	r3, 800b3ae <_raise_r+0x32>
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 f830 	bl	800b400 <_getpid_r>
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3aa:	f000 b817 	b.w	800b3dc <_kill_r>
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d00a      	beq.n	800b3c8 <_raise_r+0x4c>
 800b3b2:	1c59      	adds	r1, r3, #1
 800b3b4:	d103      	bne.n	800b3be <_raise_r+0x42>
 800b3b6:	2316      	movs	r3, #22
 800b3b8:	6003      	str	r3, [r0, #0]
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	e7e7      	b.n	800b38e <_raise_r+0x12>
 800b3be:	2400      	movs	r4, #0
 800b3c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	4798      	blx	r3
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7e0      	b.n	800b38e <_raise_r+0x12>

0800b3cc <raise>:
 800b3cc:	4b02      	ldr	r3, [pc, #8]	; (800b3d8 <raise+0xc>)
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	f7ff bfd3 	b.w	800b37c <_raise_r>
 800b3d6:	bf00      	nop
 800b3d8:	200000fc 	.word	0x200000fc

0800b3dc <_kill_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d07      	ldr	r5, [pc, #28]	; (800b3fc <_kill_r+0x20>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	f7f9 fc19 	bl	8004c20 <_kill>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	d102      	bne.n	800b3f8 <_kill_r+0x1c>
 800b3f2:	682b      	ldr	r3, [r5, #0]
 800b3f4:	b103      	cbz	r3, 800b3f8 <_kill_r+0x1c>
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	bf00      	nop
 800b3fc:	2001c64c 	.word	0x2001c64c

0800b400 <_getpid_r>:
 800b400:	f7f9 bc06 	b.w	8004c10 <_getpid>

0800b404 <__sread>:
 800b404:	b510      	push	{r4, lr}
 800b406:	460c      	mov	r4, r1
 800b408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40c:	f000 f894 	bl	800b538 <_read_r>
 800b410:	2800      	cmp	r0, #0
 800b412:	bfab      	itete	ge
 800b414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b416:	89a3      	ldrhlt	r3, [r4, #12]
 800b418:	181b      	addge	r3, r3, r0
 800b41a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b41e:	bfac      	ite	ge
 800b420:	6563      	strge	r3, [r4, #84]	; 0x54
 800b422:	81a3      	strhlt	r3, [r4, #12]
 800b424:	bd10      	pop	{r4, pc}

0800b426 <__swrite>:
 800b426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42a:	461f      	mov	r7, r3
 800b42c:	898b      	ldrh	r3, [r1, #12]
 800b42e:	05db      	lsls	r3, r3, #23
 800b430:	4605      	mov	r5, r0
 800b432:	460c      	mov	r4, r1
 800b434:	4616      	mov	r6, r2
 800b436:	d505      	bpl.n	800b444 <__swrite+0x1e>
 800b438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43c:	2302      	movs	r3, #2
 800b43e:	2200      	movs	r2, #0
 800b440:	f000 f868 	bl	800b514 <_lseek_r>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b44a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	4632      	mov	r2, r6
 800b452:	463b      	mov	r3, r7
 800b454:	4628      	mov	r0, r5
 800b456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b45a:	f000 b817 	b.w	800b48c <_write_r>

0800b45e <__sseek>:
 800b45e:	b510      	push	{r4, lr}
 800b460:	460c      	mov	r4, r1
 800b462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b466:	f000 f855 	bl	800b514 <_lseek_r>
 800b46a:	1c43      	adds	r3, r0, #1
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	bf15      	itete	ne
 800b470:	6560      	strne	r0, [r4, #84]	; 0x54
 800b472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b47a:	81a3      	strheq	r3, [r4, #12]
 800b47c:	bf18      	it	ne
 800b47e:	81a3      	strhne	r3, [r4, #12]
 800b480:	bd10      	pop	{r4, pc}

0800b482 <__sclose>:
 800b482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b486:	f000 b813 	b.w	800b4b0 <_close_r>
	...

0800b48c <_write_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	; (800b4ac <_write_r+0x20>)
 800b490:	4604      	mov	r4, r0
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f7 fe26 	bl	80030ec <_write>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_write_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_write_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	2001c64c 	.word	0x2001c64c

0800b4b0 <_close_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d06      	ldr	r5, [pc, #24]	; (800b4cc <_close_r+0x1c>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	602b      	str	r3, [r5, #0]
 800b4bc:	f7f9 fbe7 	bl	8004c8e <_close>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_close_r+0x1a>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_close_r+0x1a>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	2001c64c 	.word	0x2001c64c

0800b4d0 <_fstat_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d07      	ldr	r5, [pc, #28]	; (800b4f0 <_fstat_r+0x20>)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4608      	mov	r0, r1
 800b4da:	4611      	mov	r1, r2
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	f7f9 fbe2 	bl	8004ca6 <_fstat>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	d102      	bne.n	800b4ec <_fstat_r+0x1c>
 800b4e6:	682b      	ldr	r3, [r5, #0]
 800b4e8:	b103      	cbz	r3, 800b4ec <_fstat_r+0x1c>
 800b4ea:	6023      	str	r3, [r4, #0]
 800b4ec:	bd38      	pop	{r3, r4, r5, pc}
 800b4ee:	bf00      	nop
 800b4f0:	2001c64c 	.word	0x2001c64c

0800b4f4 <_isatty_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d06      	ldr	r5, [pc, #24]	; (800b510 <_isatty_r+0x1c>)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	f7f9 fbe1 	bl	8004cc6 <_isatty>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_isatty_r+0x1a>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_isatty_r+0x1a>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	2001c64c 	.word	0x2001c64c

0800b514 <_lseek_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d07      	ldr	r5, [pc, #28]	; (800b534 <_lseek_r+0x20>)
 800b518:	4604      	mov	r4, r0
 800b51a:	4608      	mov	r0, r1
 800b51c:	4611      	mov	r1, r2
 800b51e:	2200      	movs	r2, #0
 800b520:	602a      	str	r2, [r5, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	f7f9 fbda 	bl	8004cdc <_lseek>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_lseek_r+0x1e>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_lseek_r+0x1e>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	2001c64c 	.word	0x2001c64c

0800b538 <_read_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d07      	ldr	r5, [pc, #28]	; (800b558 <_read_r+0x20>)
 800b53c:	4604      	mov	r4, r0
 800b53e:	4608      	mov	r0, r1
 800b540:	4611      	mov	r1, r2
 800b542:	2200      	movs	r2, #0
 800b544:	602a      	str	r2, [r5, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	f7f9 fb84 	bl	8004c54 <_read>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_read_r+0x1e>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_read_r+0x1e>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	2001c64c 	.word	0x2001c64c

0800b55c <_init>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	bf00      	nop
 800b560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b562:	bc08      	pop	{r3}
 800b564:	469e      	mov	lr, r3
 800b566:	4770      	bx	lr

0800b568 <_fini>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr
