
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dca4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0800de54  0800de54  0001de54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101bc  080101bc  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  080101bc  080101bc  000201bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101c4  080101c4  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101c4  080101c4  000201c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101c8  080101c8  000201c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080101cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c630  20000164  08010330  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c794  08010330  0003c794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024407  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd9  00000000  00000000  0005459b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  00059278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf8  00000000  00000000  0005b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ba2  00000000  00000000  0005cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b17  00000000  00000000  0008d802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f37  00000000  00000000  000ae319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c2250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c8  00000000  00000000  001c22a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800de3c 	.word	0x0800de3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800de3c 	.word	0x0800de3c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f00c fb8d 	bl	800ccc8 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	0800de54 	.word	0x0800de54
 800060c:	0800e0d4 	.word	0x0800e0d4
 8000610:	0800de58 	.word	0x0800de58

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f00c fb4d 	bl	800ccc8 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800de54 	.word	0x0800de54
 8000658:	0800e0e8 	.word	0x0800e0e8
 800065c:	0800de58 	.word	0x0800de58

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f00c fb27 	bl	800ccc8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800de54 	.word	0x0800de54
 80006a4:	0800e0fc 	.word	0x0800e0fc
 80006a8:	0800de58 	.word	0x0800de58

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f00c fafd 	bl	800ccc8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f00c fb54 	bl	800cd7c <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f00c faef 	bl	800ccc8 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f00c fada 	bl	800ccc8 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0800de7c 	.word	0x0800de7c
 8000724:	0800e114 	.word	0x0800e114
 8000728:	0800de58 	.word	0x0800de58
 800072c:	0800de54 	.word	0x0800de54
 8000730:	0800de8c 	.word	0x0800de8c

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f00c fabd 	bl	800ccc8 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800de54 	.word	0x0800de54
 800076c:	0800e128 	.word	0x0800e128
 8000770:	0800de58 	.word	0x0800de58

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f00c fa97 	bl	800ccc8 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800dea8 	.word	0x0800dea8
 80007bc:	0800e13c 	.word	0x0800e13c
 80007c0:	0800de58 	.word	0x0800de58

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f00c fa6d 	bl	800ccc8 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	0800debc 	.word	0x0800debc
 800082c:	0800e14c 	.word	0x0800e14c
 8000830:	0800de58 	.word	0x0800de58

08000834 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd1 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d10e      	bne.n	800086e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ffc9 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d806      	bhi.n	800086e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <mfxstm32l152_Init+0x58>)
 8000868:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800086a:	f001 fecb 	bl	8002604 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8db 	bl	8000a2e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8fc 	bl	8000a7a <mfxstm32l152_SetIrqOutPinType>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000180 	.word	0x20000180

08000890 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffc3 	bl	8001828 <mfxstm32l152_ReleaseInstance>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d001      	beq.n	80008b0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80008ac:	f001 feba 	bl	8002624 <MFX_IO_DeInit>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ff4d 	bl	8002768 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 ff8c 	bl	80027ec <MFX_IO_Delay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ff3b 	bl	8002768 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80008f2:	f001 ff01 	bl	80026f8 <MFX_IO_EnableWakeupPin>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff6c 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d101      	bne.n	800091e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800091a:	f001 feed 	bl	80026f8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800091e:	f001 ff0f 	bl	8002740 <MFX_IO_Wakeup>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 ff59 	bl	80027ec <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800093a:	f001 fe63 	bl	8002604 <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 ff24 	bl	8002790 <MFX_IO_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	b29b      	uxth	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2142      	movs	r1, #66	; 0x42
 8000970:	4618      	mov	r0, r3
 8000972:	f001 ff0d 	bl	8002790 <MFX_IO_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2142      	movs	r1, #66	; 0x42
 8000988:	4618      	mov	r0, r3
 800098a:	f001 feed 	bl	8002768 <MFX_IO_Write>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2142      	movs	r1, #66	; 0x42
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 feee 	bl	8002790 <MFX_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80009b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2142      	movs	r1, #66	; 0x42
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fec9 	bl	8002768 <MFX_IO_Write>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2108      	movs	r1, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fecc 	bl	8002790 <MFX_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2144      	movs	r1, #68	; 0x44
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fea1 	bl	8002768 <MFX_IO_Write>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2141      	movs	r1, #65	; 0x41
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fea2 	bl	8002790 <MFX_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2141      	movs	r1, #65	; 0x41
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fe7e 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 febd 	bl	80027ec <MFX_IO_Delay>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	460a      	mov	r2, r1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2141      	movs	r1, #65	; 0x41
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fe7c 	bl	8002790 <MFX_IO_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2141      	movs	r1, #65	; 0x41
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe58 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 fe97 	bl	80027ec <MFX_IO_Delay>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fe5a 	bl	8002790 <MFX_IO_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d304      	bcc.n	8000afa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e003      	b.n	8000b02 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fe2d 	bl	8002768 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fe6c 	bl	80027ec <MFX_IO_Delay>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	f200 82d4 	bhi.w	80010e0 <mfxstm32l152_IO_Config+0x5c4>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <mfxstm32l152_IO_Config+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000c61 	.word	0x08000c61
 8000b48:	08000d21 	.word	0x08000d21
 8000b4c:	08000e11 	.word	0x08000e11
 8000b50:	08000f01 	.word	0x08000f01
 8000b54:	08000ff1 	.word	0x08000ff1
 8000b58:	08000ba1 	.word	0x08000ba1
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000c31 	.word	0x08000c31
 8000b68:	080010e1 	.word	0x080010e1
 8000b6c:	08000cf1 	.word	0x08000cf1
 8000b70:	08000cc1 	.word	0x08000cc1
 8000b74:	080010e1 	.word	0x080010e1
 8000b78:	08000c91 	.word	0x08000c91
 8000b7c:	08000c61 	.word	0x08000c61
 8000b80:	08000d71 	.word	0x08000d71
 8000b84:	08000dc1 	.word	0x08000dc1
 8000b88:	08000e61 	.word	0x08000e61
 8000b8c:	08000eb1 	.word	0x08000eb1
 8000b90:	08000f51 	.word	0x08000f51
 8000b94:	08000fa1 	.word	0x08000fa1
 8000b98:	08001041 	.word	0x08001041
 8000b9c:	08001091 	.word	0x08001091
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fb67 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2200      	movs	r2, #0
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa9d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f000 fe57 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2168      	movs	r1, #104	; 0x68
 8000bca:	f000 fe51 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bce:	e28a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb4f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa85 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	2300      	movs	r3, #0
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	f000 fe3f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	2168      	movs	r1, #104	; 0x68
 8000bfa:	f000 fe39 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bfe:	e272      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb37 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa6d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	f000 fe27 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	2301      	movs	r3, #1
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	2168      	movs	r1, #104	; 0x68
 8000c2a:	f000 fe21 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c2e:	e25a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fb1f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa55 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	f000 fe0f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c52:	88f8      	ldrh	r0, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	f000 fe09 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c5e:	e242      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb07 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa3d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f000 fdf7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c82:	88f8      	ldrh	r0, [r7, #6]
 8000c84:	2300      	movs	r3, #0
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	2168      	movs	r1, #104	; 0x68
 8000c8a:	f000 fdf1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c8e:	e22a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 faef 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa25 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f000 fddf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2168      	movs	r1, #104	; 0x68
 8000cba:	f000 fdd9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cbe:	e212      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fad7 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa0d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f000 fdc7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	2168      	movs	r1, #104	; 0x68
 8000cea:	f000 fdc1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cee:	e1fa      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fabf 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9f5 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	f000 fdaf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	2301      	movs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	2168      	movs	r1, #104	; 0x68
 8000d1a:	f000 fda9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000d1e:	e1e2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa7a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9de 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	2300      	movs	r3, #0
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f000 fd98 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	2301      	movs	r3, #1
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	2168      	movs	r1, #104	; 0x68
 8000d48:	f000 fd92 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9de 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ed 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d6e:	e1ba      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa52 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9b6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	f000 fd70 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	2168      	movs	r1, #104	; 0x68
 8000d98:	f000 fd6a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f9b6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2201      	movs	r2, #1
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9c5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa4d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000dbe:	e192      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa2a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f98e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd4:	88f8      	ldrh	r0, [r7, #6]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	f000 fd48 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	2300      	movs	r3, #0
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2168      	movs	r1, #104	; 0x68
 8000de8:	f000 fd42 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f98e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f99d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa25 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e0e:	e16a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa02 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f966 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	2300      	movs	r3, #0
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2164      	movs	r1, #100	; 0x64
 8000e2c:	f000 fd20 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e30:	88f8      	ldrh	r0, [r7, #6]
 8000e32:	2301      	movs	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	2168      	movs	r1, #104	; 0x68
 8000e38:	f000 fd1a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f966 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f975 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f9fd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e5e:	e142      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9da 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e74:	88f8      	ldrh	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2164      	movs	r1, #100	; 0x64
 8000e7c:	f000 fcf8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	2301      	movs	r3, #1
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	2168      	movs	r1, #104	; 0x68
 8000e88:	f000 fcf2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f94d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9d5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000eae:	e11a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f916 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	f000 fcd0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	2168      	movs	r1, #104	; 0x68
 8000ed8:	f000 fcca 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f916 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2200      	movs	r2, #0
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f925 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9ad 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000efe:	e0f2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f8ee 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2164      	movs	r1, #100	; 0x64
 8000f1c:	f000 fca8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	2301      	movs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	2168      	movs	r1, #104	; 0x68
 8000f28:	f000 fca2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ee 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8fd 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f985 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f4e:	e0ca      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f962 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8c6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	2301      	movs	r3, #1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	f000 fc80 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	2301      	movs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	2168      	movs	r1, #104	; 0x68
 8000f78:	f000 fc7a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8c6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8d5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f95d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f9e:	e0a2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2200      	movs	r2, #0
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f000 fc58 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	2168      	movs	r1, #104	; 0x68
 8000fc8:	f000 fc52 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f89e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8ad 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f935 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000fee:	e07a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f912 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f876 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	f000 fc30 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	2301      	movs	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	2168      	movs	r1, #104	; 0x68
 8001018:	f000 fc2a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f876 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f885 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f90d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800103e:	e052      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8ea 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f84e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	2301      	movs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	f000 fc08 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001060:	88f8      	ldrh	r0, [r7, #6]
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	2168      	movs	r1, #104	; 0x68
 8001068:	f000 fc02 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f84e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f85d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8e5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800108e:	e02a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8c2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f826 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	2301      	movs	r3, #1
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	f000 fbe0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010b0:	88f8      	ldrh	r0, [r7, #6]
 80010b2:	2300      	movs	r3, #0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	2168      	movs	r1, #104	; 0x68
 80010b8:	f000 fbda 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	2200      	movs	r2, #0
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f826 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f835 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8bd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 80010de:	e002      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	bf00      	nop
  }

  return error_code;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4613      	mov	r3, r2
 80010fe:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	f000 fbb2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	214c      	movs	r1, #76	; 0x4c
 800112c:	f000 fba0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f001 fb5b 	bl	80027ec <MFX_IO_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	f000 fb8b 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fb46 	bl	80027ec <MFX_IO_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	2301      	movs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	216c      	movs	r1, #108	; 0x6c
 8001186:	f000 fb73 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800118a:	e005      	b.n	8001198 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800118c:	88f8      	ldrh	r0, [r7, #6]
 800118e:	2301      	movs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	f000 fb6c 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	2110      	movs	r1, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fae3 	bl	8002790 <MFX_IO_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2111      	movs	r1, #17
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fad7 	bl	8002790 <MFX_IO_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2112      	movs	r1, #18
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 facb 	bl	8002790 <MFX_IO_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4013      	ands	r3, r2
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001226:	f001 fa39 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb92 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fba3 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2148      	movs	r1, #72	; 0x48
 800126c:	f000 fb00 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	2300      	movs	r3, #0
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2148      	movs	r1, #72	; 0x48
 800128c:	f000 faf0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	210c      	movs	r1, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fa67 	bl	8002790 <MFX_IO_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	210d      	movs	r1, #13
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fa59 	bl	8002790 <MFX_IO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	210e      	movs	r1, #14
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fa4d 	bl	8002790 <MFX_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4013      	ands	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2154      	movs	r1, #84	; 0x54
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fa10 	bl	8002768 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2155      	movs	r1, #85	; 0x55
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fa07 	bl	8002768 <MFX_IO_Write>
  }
  if (pin_16_23)
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2156      	movs	r1, #86	; 0x56
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f9fe 	bl	8002768 <MFX_IO_Write>
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fa00 	bl	8002790 <MFX_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f9de 	bl	8002768 <MFX_IO_Write>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f9d8 	bl	8002790 <MFX_IO_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f001 f9b1 	bl	8002768 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001406:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030e 	and.w	r3, r3, #14
 8001412:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f98c 	bl	8002768 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800145a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800145c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001466:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2181      	movs	r1, #129	; 0x81
 8001478:	4618      	mov	r0, r3
 800147a:	f001 f975 	bl	8002768 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800147e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2182      	movs	r1, #130	; 0x82
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f969 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	2183      	movs	r1, #131	; 0x83
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f95f 	bl	8002768 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80014aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	2184      	movs	r1, #132	; 0x84
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f953 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	2185      	movs	r1, #133	; 0x85
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f949 	bl	8002768 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80014d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2186      	movs	r1, #134	; 0x86
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f93d 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80014ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2187      	movs	r1, #135	; 0x87
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f933 	bl	8002768 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	2188      	movs	r1, #136	; 0x88
 8001514:	4618      	mov	r0, r3
 8001516:	f001 f927 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2189      	movs	r1, #137	; 0x89
 8001528:	4618      	mov	r0, r3
 800152a:	f001 f91d 	bl	8002768 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800152e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	218a      	movs	r1, #138	; 0x8a
 8001540:	4618      	mov	r0, r3
 8001542:	f001 f911 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001548:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	218b      	movs	r1, #139	; 0x8b
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f907 	bl	8002768 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800155a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800155c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	2190      	movs	r1, #144	; 0x90
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f8fd 	bl	8002768 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800156e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001570:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	2191      	movs	r1, #145	; 0x91
 800157c:	4618      	mov	r0, r3
 800157e:	f001 f8f3 	bl	8002768 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	2192      	movs	r1, #146	; 0x92
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f8e9 	bl	8002768 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001598:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2193      	movs	r1, #147	; 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f8df 	bl	8002768 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80015aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 f8d5 	bl	8002768 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	218c      	movs	r1, #140	; 0x8c
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 f8c9 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	218d      	movs	r1, #141	; 0x8d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 f8bf 	bl	8002768 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	218e      	movs	r1, #142	; 0x8e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 f8b3 	bl	8002768 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	218f      	movs	r1, #143	; 0x8f
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f8a9 	bl	8002768 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001616:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800161a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	2196      	movs	r1, #150	; 0x96
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f89e 	bl	8002768 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800162c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001636:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001638:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	2197      	movs	r1, #151	; 0x97
 8001654:	4618      	mov	r0, r3
 8001656:	f001 f887 	bl	8002768 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	2198      	movs	r1, #152	; 0x98
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f87c 	bl	8002768 <MFX_IO_Write>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2303      	movs	r3, #3
 8001696:	2114      	movs	r1, #20
 8001698:	f001 f88e 	bl	80027b8 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016c2:	f000 ffeb 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f944 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f98f 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f96b 	bl	80009de <mfxstm32l152_GlobalITStatus>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f938 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	4618      	mov	r0, r3
 8001742:	f001 f825 	bl	8002790 <MFX_IO_Read>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f814 	bl	8002790 <MFX_IO_Read>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800177c:	f000 ff8e 	bl	800269c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f932 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f90e 	bl	80009de <mfxstm32l152_GlobalITStatus>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8db 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e00b      	b.n	8001810 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mfxstm32l152_GetInstance+0x3c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9f0      	bls.n	80017f8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001816:	23ff      	movs	r3, #255	; 0xff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000180 	.word	0x20000180

08001828 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00f      	b.n	8001858 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d105      	bne.n	8001852 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800184a:	2100      	movs	r1, #0
 800184c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d9ec      	bls.n	8001838 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000180 	.word	0x20000180

08001870 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	717b      	strb	r3, [r7, #5]
 8001882:	4613      	mov	r3, r2
 8001884:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80018a0:	797a      	ldrb	r2, [r7, #5]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 ff72 	bl	8002790 <MFX_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e008      	b.n	80018d2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80018c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 ff45 	bl	8002768 <MFX_IO_Write>
  }

  if (pin_8_15)
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 ff4e 	bl	8002790 <MFX_IO_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	4313      	orrs	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e008      	b.n	800191a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	3301      	adds	r3, #1
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 ff1f 	bl	8002768 <MFX_IO_Write>
  }

  if (pin_16_23)
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3302      	adds	r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 ff28 	bl	8002790 <MFX_IO_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e008      	b.n	8001966 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	b25a      	sxtb	r2, r3
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4013      	ands	r3, r2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	3302      	adds	r3, #2
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fef9 	bl	8002768 <MFX_IO_Write>
  }
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001984:	f001 f83a 	bl	80029fc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2010      	movs	r0, #16
 800198e:	f000 f9e4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001992:	200a      	movs	r0, #10
 8001994:	f001 f859 	bl	8002a4a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f9dc 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019a2:	20c8      	movs	r0, #200	; 0xc8
 80019a4:	f001 f851 	bl	8002a4a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2011      	movs	r0, #17
 80019ae:	f000 f9d4 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019b2:	2078      	movs	r0, #120	; 0x78
 80019b4:	f001 f849 	bl	8002a4a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019b8:	2300      	movs	r3, #0
 80019ba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80019bc:	463b      	mov	r3, r7
 80019be:	2201      	movs	r2, #1
 80019c0:	4619      	mov	r1, r3
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f000 f9c9 	bl	8001d5a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80019c8:	2305      	movs	r3, #5
 80019ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80019cc:	463b      	mov	r3, r7
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	203a      	movs	r0, #58	; 0x3a
 80019d4:	f000 f9c1 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2021      	movs	r0, #33	; 0x21
 80019de:	f000 f9bc 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80019ee:	23ef      	movs	r3, #239	; 0xef
 80019f0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80019f2:	463b      	mov	r3, r7
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	202a      	movs	r0, #42	; 0x2a
 80019fa:	f000 f9ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a0a:	23ef      	movs	r3, #239	; 0xef
 8001a0c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2204      	movs	r2, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	202b      	movs	r0, #43	; 0x2b
 8001a16:	f000 f9a0 	bl	8001d5a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a26:	2333      	movs	r3, #51	; 0x33
 8001a28:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a2a:	2333      	movs	r3, #51	; 0x33
 8001a2c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2205      	movs	r2, #5
 8001a32:	4619      	mov	r1, r3
 8001a34:	20b2      	movs	r0, #178	; 0xb2
 8001a36:	f000 f990 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a3a:	2335      	movs	r3, #53	; 0x35
 8001a3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2201      	movs	r2, #1
 8001a42:	4619      	mov	r1, r3
 8001a44:	20b7      	movs	r0, #183	; 0xb7
 8001a46:	f000 f988 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	20bb      	movs	r0, #187	; 0xbb
 8001a56:	f000 f980 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001a5a:	232c      	movs	r3, #44	; 0x2c
 8001a5c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	f000 f978 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001a6e:	23c3      	movs	r3, #195	; 0xc3
 8001a70:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001a72:	463b      	mov	r3, r7
 8001a74:	2202      	movs	r2, #2
 8001a76:	4619      	mov	r1, r3
 8001a78:	20c2      	movs	r0, #194	; 0xc2
 8001a7a:	f000 f96e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001a7e:	2320      	movs	r3, #32
 8001a80:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001a82:	463b      	mov	r3, r7
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	20c4      	movs	r0, #196	; 0xc4
 8001a8a:	f000 f966 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001a8e:	230f      	movs	r3, #15
 8001a90:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001a92:	463b      	mov	r3, r7
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	20c6      	movs	r0, #198	; 0xc6
 8001a9a:	f000 f95e 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001a9e:	23a4      	movs	r3, #164	; 0xa4
 8001aa0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001aa2:	23a1      	movs	r3, #161	; 0xa1
 8001aa4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	20d0      	movs	r0, #208	; 0xd0
 8001aae:	f000 f954 	bl	8001d5a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ab2:	23d0      	movs	r3, #208	; 0xd0
 8001ab4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001aba:	2311      	movs	r3, #17
 8001abc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ac6:	2315      	movs	r3, #21
 8001ac8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001aca:	2339      	movs	r3, #57	; 0x39
 8001acc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001ace:	2333      	movs	r3, #51	; 0x33
 8001ad0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001ad2:	2350      	movs	r3, #80	; 0x50
 8001ad4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001ad6:	2336      	movs	r3, #54	; 0x36
 8001ad8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001ada:	2313      	movs	r3, #19
 8001adc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001ade:	2314      	movs	r3, #20
 8001ae0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001ae2:	2329      	movs	r3, #41	; 0x29
 8001ae4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001ae6:	232d      	movs	r3, #45	; 0x2d
 8001ae8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001aea:	463b      	mov	r3, r7
 8001aec:	220e      	movs	r2, #14
 8001aee:	4619      	mov	r1, r3
 8001af0:	20e0      	movs	r0, #224	; 0xe0
 8001af2:	f000 f932 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001af6:	23d0      	movs	r3, #208	; 0xd0
 8001af8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001afa:	2308      	movs	r3, #8
 8001afc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001afe:	2310      	movs	r3, #16
 8001b00:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b02:	2308      	movs	r3, #8
 8001b04:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b06:	2306      	movs	r3, #6
 8001b08:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b0e:	2339      	movs	r3, #57	; 0x39
 8001b10:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b12:	2344      	movs	r3, #68	; 0x44
 8001b14:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b16:	2351      	movs	r3, #81	; 0x51
 8001b18:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b1a:	230b      	movs	r3, #11
 8001b1c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b1e:	2316      	movs	r3, #22
 8001b20:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b22:	2314      	movs	r3, #20
 8001b24:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b26:	232f      	movs	r3, #47	; 0x2f
 8001b28:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b2a:	2331      	movs	r3, #49	; 0x31
 8001b2c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b2e:	463b      	mov	r3, r7
 8001b30:	220e      	movs	r2, #14
 8001b32:	4619      	mov	r1, r3
 8001b34:	20e1      	movs	r0, #225	; 0xe1
 8001b36:	f000 f910 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b3a:	f000 f847 	bl	8001bcc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b3e:	2300      	movs	r3, #0
 8001b40:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b42:	463b      	mov	r3, r7
 8001b44:	2201      	movs	r2, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	2035      	movs	r0, #53	; 0x35
 8001b4a:	f000 f906 	bl	8001d5a <ST7789H2_WriteReg>

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001b64:	2300      	movs	r3, #0
 8001b66:	723b      	strb	r3, [r7, #8]
 8001b68:	e025      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d120      	bne.n	8001bb2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001b7c:	23f0      	movs	r3, #240	; 0xf0
 8001b7e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001b84:	2300      	movs	r3, #0
 8001b86:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2033      	movs	r0, #51	; 0x33
 8001b92:	f000 f8e2 	bl	8001d5a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001b9a:	2350      	movs	r3, #80	; 0x50
 8001b9c:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2037      	movs	r0, #55	; 0x37
 8001ba8:	f000 f8d7 	bl	8001d5a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	723b      	strb	r3, [r7, #8]
 8001bb0:	e001      	b.n	8001bb6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bb2:	2360      	movs	r3, #96	; 0x60
 8001bb4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2036      	movs	r0, #54	; 0x36
 8001bc0:	f000 f8cb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2029      	movs	r0, #41	; 0x29
 8001bd6:	f000 f8c0 	bl	8001d5a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2011      	movs	r0, #17
 8001be0:	f000 f8bb 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001bee:	23fe      	movs	r3, #254	; 0xfe
 8001bf0:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	20bd      	movs	r0, #189	; 0xbd
 8001bfa:	f000 f8ae 	bl	8001d5a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 f8a9 	bl	8001d5a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 ff1e 	bl	8002a4a <LCD_IO_Delay>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c1a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c2a:	23f0      	movs	r3, #240	; 0xf0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c3a:	f000 fedf 	bl	80029fc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f000 f8ae 	bl	8001da0 <ST7789H2_ReadReg>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b11      	subs	r3, #17
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	202a      	movs	r0, #42	; 0x2a
 8001c7e:	f000 f86c 	bl	8001d5a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b11      	subs	r3, #17
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	202b      	movs	r0, #43	; 0x2b
 8001ca4:	f000 f859 	bl	8001d5a <ST7789H2_WriteReg>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	80bb      	strh	r3, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cc2:	88ba      	ldrh	r2, [r7, #4]
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffbf 	bl	8001c4c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	f000 f841 	bl	8001d5a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fe94 	bl	8002a08 <LCD_IO_WriteData>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001cf8:	88ba      	ldrh	r2, [r7, #4]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffa4 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d04:	88ba      	ldrh	r2, [r7, #4]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9c0 	bl	8002090 <ST7789H2_ReadPixel_rgb888>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	733a      	strb	r2, [r7, #12]
 8001d16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d1a:	737a      	strb	r2, [r7, #13]
 8001d1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d20:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	02db      	lsls	r3, r3, #11
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7d7b      	ldrb	r3, [r7, #21]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d50:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	6039      	str	r1, [r7, #0]
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fe58 	bl	8002a22 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e00a      	b.n	8001d8e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fe40 	bl	8002a08 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3f0      	bcc.n	8001d78 <ST7789H2_WriteReg+0x1e>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fe38 	bl	8002a22 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001db2:	f000 fe43 	bl	8002a3c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001db6:	f000 fe41 	bl	8002a3c <LCD_IO_ReadData>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2db      	uxtb	r3, r3
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001dc8:	b490      	push	{r4, r7}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2bef      	cmp	r3, #239	; 0xef
 8001dea:	d803      	bhi.n	8001df4 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	8013      	strh	r3, [r2, #0]
 8001df2:	e002      	b.n	8001dfa <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <ST7789H2_SetDisplayWindow+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	2bef      	cmp	r3, #239	; 0xef
 8001dfe:	d803      	bhi.n	8001e08 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	8013      	strh	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <ST7789H2_SetDisplayWindow+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4413      	add	r3, r2
 8001e14:	2bf0      	cmp	r3, #240	; 0xf0
 8001e16:	dc08      	bgt.n	8001e2a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e2c:	22ef      	movs	r2, #239	; 0xef
 8001e2e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e30:	883a      	ldrh	r2, [r7, #0]
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2bf0      	cmp	r3, #240	; 0xf0
 8001e38:	dc08      	bgt.n	8001e4c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e48:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e4a:	e002      	b.n	8001e52 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e4e:	22ef      	movs	r2, #239	; 0xef
 8001e50:	801a      	strh	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc90      	pop	{r4, r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000184 	.word	0x20000184
 8001e60:	20000186 	.word	0x20000186
 8001e64:	200000b0 	.word	0x200000b0
 8001e68:	200000b2 	.word	0x200000b2

08001e6c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80bb      	strh	r3, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]
 8001e86:	4613      	mov	r3, r2
 8001e88:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fedb 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff ff5d 	bl	8001d5a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	81fb      	strh	r3, [r7, #14]
 8001ea4:	e006      	b.n	8001eb4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fdad 	bl	8002a08 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	81fb      	strh	r3, [r7, #14]
 8001eb4:	89fa      	ldrh	r2, [r7, #14]
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3f4      	bcc.n	8001ea6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}

08001ec6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4608      	mov	r0, r1
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80bb      	strh	r3, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	88bb      	ldrh	r3, [r7, #4]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff feae 	bl	8001c4c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	202c      	movs	r0, #44	; 0x2c
 8001ef6:	f7ff ff30 	bl	8001d5a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	e00b      	b.n	8001f18 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	4413      	add	r3, r2
 8001f06:	b299      	uxth	r1, r3
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fecf 	bl	8001cb0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	3301      	adds	r3, #1
 8001f16:	81fb      	strh	r3, [r7, #14]
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	883b      	ldrh	r3, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3ef      	bcc.n	8001f00 <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
	...

08001f2c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	603a      	str	r2, [r7, #0]
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <ST7789H2_DrawBitmap+0xe0>)
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <ST7789H2_DrawBitmap+0xe4>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <ST7789H2_DrawBitmap+0xe8>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <ST7789H2_DrawBitmap+0xec>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3304      	adds	r3, #4
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	330a      	adds	r3, #10
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	461a      	mov	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4413      	add	r3, r2
 8001fb0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	89bb      	ldrh	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e01d      	b.n	8001ff8 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe3f 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	89fa      	ldrh	r2, [r7, #14]
 8001fe6:	88f8      	ldrh	r0, [r7, #6]
 8001fe8:	f000 f89c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8dd      	bhi.n	8001fbc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200000b0 	.word	0x200000b0
 8002010:	20000184 	.word	0x20000184
 8002014:	200000b2 	.word	0x200000b2
 8002018:	20000186 	.word	0x20000186

0800201c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	4603      	mov	r3, r0
 8002030:	80bb      	strh	r3, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e019      	b.n	8002078 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdfd 	bl	8001c4c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b299      	uxth	r1, r3
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	88f8      	ldrh	r0, [r7, #6]
 8002068:	f000 f85c 	bl	8002124 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3301      	adds	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	88ba      	ldrh	r2, [r7, #4]
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4293      	cmp	r3, r2
 8002084:	d3de      	bcc.n	8002044 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fdd0 	bl	8001c4c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	202e      	movs	r0, #46	; 0x2e
 80020b2:	f7ff fe52 	bl	8001d5a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020b6:	f000 fcc1 	bl	8002a3c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020ba:	f000 fcbf 	bl	8002a3c <LCD_IO_ReadData>
 80020be:	4603      	mov	r3, r0
 80020c0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80020c2:	f000 fcbb 	bl	8002a3c <LCD_IO_ReadData>
 80020c6:	4603      	mov	r3, r0
 80020c8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	121b      	asrs	r3, r3, #8
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f023 0303 	bic.w	r3, r3, #3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	121b      	asrs	r3, r3, #8
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4611      	mov	r1, r2
 80020fe:	8019      	strh	r1, [r3, #0]
 8002100:	3302      	adds	r3, #2
 8002102:	0c12      	lsrs	r2, r2, #16
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	7c3a      	ldrb	r2, [r7, #16]
 800210a:	f362 0307 	bfi	r3, r2, #0, #8
 800210e:	7c7a      	ldrb	r2, [r7, #17]
 8002110:	f362 230f 	bfi	r3, r2, #8, #8
 8002114:	7cba      	ldrb	r2, [r7, #18]
 8002116:	f362 4317 	bfi	r3, r2, #16, #8
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4603      	mov	r3, r0
 800212e:	81fb      	strh	r3, [r7, #14]
 8002130:	460b      	mov	r3, r1
 8002132:	81bb      	strh	r3, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	202c      	movs	r0, #44	; 0x2c
 8002146:	f7ff fe08 	bl	8001d5a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	e029      	b.n	80021a4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <ST7789H2_DrawRGBHLine+0x98>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4293      	cmp	r3, r2
 800215a:	d320      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <ST7789H2_DrawRGBHLine+0x9c>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	89ba      	ldrh	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d31b      	bcc.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <ST7789H2_DrawRGBHLine+0xa0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4293      	cmp	r3, r2
 8002170:	d815      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <ST7789H2_DrawRGBHLine+0xa4>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	89ba      	ldrh	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d810      	bhi.n	800219e <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 800217c:	897a      	ldrh	r2, [r7, #10]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	441a      	add	r2, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	429a      	cmp	r2, r3
 8002186:	d007      	beq.n	8002198 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc38 	bl	8002a08 <LCD_IO_WriteData>
      }      
      i++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	897a      	ldrh	r2, [r7, #10]
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3ce      	bcc.n	8002150 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000184 	.word	0x20000184
 80021c0:	20000186 	.word	0x20000186
 80021c4:	200000b0 	.word	0x200000b0
 80021c8:	200000b2 	.word	0x200000b2

080021cc <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  while (1);
 80021d0:	e7fe      	b.n	80021d0 <BSP_ErrorHandler+0x4>
	...

080021d4 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <BSP_LED_On+0x3c>)
 80021e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <BSP_LED_On+0x40>)
 80021f2:	f003 fe75 	bl	8005ee0 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80021f6:	e007      	b.n	8002208 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <BSP_LED_On+0x3c>)
 80021fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fcd4 	bl	8002bb0 <BSP_IO_WritePin>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	0800e15c 	.word	0x0800e15c
 8002214:	48000400 	.word	0x48000400

08002218 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d109      	bne.n	800223c <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <BSP_LED_Off+0x3c>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	2201      	movs	r2, #1
 8002232:	4619      	mov	r1, r3
 8002234:	4808      	ldr	r0, [pc, #32]	; (8002258 <BSP_LED_Off+0x40>)
 8002236:	f003 fe53 	bl	8005ee0 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800223a:	e007      	b.n	800224c <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <BSP_LED_Off+0x3c>)
 8002240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fcb2 	bl	8002bb0 <BSP_IO_WritePin>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0800e15c 	.word	0x0800e15c
 8002258:	48000400 	.word	0x48000400

0800225c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8002260:	4812      	ldr	r0, [pc, #72]	; (80022ac <I2C2_Init+0x50>)
 8002262:	f004 fa74 	bl	800674e <HAL_I2C_GetState>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11d      	bne.n	80022a8 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <I2C2_Init+0x50>)
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <I2C2_Init+0x54>)
 8002270:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <I2C2_Init+0x50>)
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <I2C2_Init+0x58>)
 8002276:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <I2C2_Init+0x50>)
 800227a:	2270      	movs	r2, #112	; 0x70
 800227c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <I2C2_Init+0x50>)
 8002280:	2201      	movs	r2, #1
 8002282:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <I2C2_Init+0x50>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <I2C2_Init+0x50>)
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <I2C2_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <I2C2_Init+0x50>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <I2C2_Init+0x50>)
 800229e:	f000 f80b 	bl	80022b8 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <I2C2_Init+0x50>)
 80022a4:	f003 fe4c 	bl	8005f40 <HAL_I2C_Init>
  }
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000188 	.word	0x20000188
 80022b0:	40005800 	.word	0x40005800
 80022b4:	40403e5d 	.word	0x40403e5d

080022b8 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0ae      	sub	sp, #184	; 0xb8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <I2C2_MspInit+0xec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d168      	bne.n	800239c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80022ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 fbd3 	bl	8007a84 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <I2C2_MspInit+0xf0>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800230e:	2310      	movs	r3, #16
 8002310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8002314:	2312      	movs	r3, #18
 8002316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8002326:	2304      	movs	r3, #4
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800232c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002330:	4619      	mov	r1, r3
 8002332:	481e      	ldr	r0, [pc, #120]	; (80023ac <I2C2_MspInit+0xf4>)
 8002334:	f003 fb50 	bl	80059d8 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8002338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800233c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8002340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002344:	4619      	mov	r1, r3
 8002346:	481a      	ldr	r0, [pc, #104]	; (80023b0 <I2C2_MspInit+0xf8>)
 8002348:	f003 fb46 	bl	80059d8 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <I2C2_MspInit+0xf0>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <I2C2_MspInit+0xf0>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <I2C2_MspInit+0xf0>)
 800236a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <I2C2_MspInit+0xf0>)
 8002376:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800237a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2021      	movs	r0, #33	; 0x21
 8002382:	f002 fc94 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002386:	2021      	movs	r0, #33	; 0x21
 8002388:	f002 fcad 	bl	8004ce6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2022      	movs	r0, #34	; 0x22
 8002392:	f002 fc8c 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002396:	2022      	movs	r0, #34	; 0x22
 8002398:	f002 fca5 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  }
}
 800239c:	bf00      	nop
 800239e:	37b8      	adds	r7, #184	; 0xb8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40005800 	.word	0x40005800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48001c00 	.word	0x48001c00
 80023b0:	48000400 	.word	0x48000400

080023b4 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <I2C2_DeInit+0x20>)
 80023ba:	f004 f9c8 	bl	800674e <HAL_I2C_GetState>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <I2C2_DeInit+0x20>)
 80023c6:	f003 fe4a 	bl	800605e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80023ca:	4802      	ldr	r0, [pc, #8]	; (80023d4 <I2C2_DeInit+0x20>)
 80023cc:	f000 f804 	bl	80023d8 <I2C2_MspDeInit>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000188 	.word	0x20000188

080023d8 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <I2C2_MspDeInit+0x8c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d138      	bne.n	800245c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <I2C2_MspDeInit+0x90>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800241a:	2110      	movs	r1, #16
 800241c:	4813      	ldr	r0, [pc, #76]	; (800246c <I2C2_MspDeInit+0x94>)
 800241e:	f003 fc6d 	bl	8005cfc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8002422:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <I2C2_MspDeInit+0x98>)
 8002428:	f003 fc68 	bl	8005cfc <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <I2C2_MspDeInit+0x90>)
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002436:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <I2C2_MspDeInit+0x90>)
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <I2C2_MspDeInit+0x90>)
 800243e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002442:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <I2C2_MspDeInit+0x90>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <I2C2_MspDeInit+0x90>)
 800244a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002450:	2021      	movs	r0, #33	; 0x21
 8002452:	f002 fc56 	bl	8004d02 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002456:	2022      	movs	r0, #34	; 0x22
 8002458:	f002 fc53 	bl	8004d02 <HAL_NVIC_DisableIRQ>
  }
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40005800 	.word	0x40005800
 8002468:	40021000 	.word	0x40021000
 800246c:	48001c00 	.word	0x48001c00
 8002470:	48000400 	.word	0x48000400

08002474 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af04      	add	r7, sp, #16
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	4603      	mov	r3, r0
 8002488:	80bb      	strh	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002496:	b672      	cpsid	i
}
 8002498:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <I2C2_WriteData+0x5c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	8878      	ldrh	r0, [r7, #2]
 80024a0:	88ba      	ldrh	r2, [r7, #4]
 80024a2:	88f9      	ldrh	r1, [r7, #6]
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2301      	movs	r3, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	1c7b      	adds	r3, r7, #1
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4603      	mov	r3, r0
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <I2C2_WriteData+0x60>)
 80024b2:	f003 fe17 	bl	80060e4 <HAL_I2C_Mem_Write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80024ba:	b662      	cpsie	i
}
 80024bc:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80024c4:	f000 f890 	bl	80025e8 <I2C2_Error>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	200000b4 	.word	0x200000b4
 80024d4:	20000188 	.word	0x20000188

080024d8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af04      	add	r7, sp, #16
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
 80024e2:	460b      	mov	r3, r1
 80024e4:	80bb      	strh	r3, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f2:	b672      	cpsid	i
}
 80024f4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <I2C2_ReadData+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	8878      	ldrh	r0, [r7, #2]
 80024fc:	88ba      	ldrh	r2, [r7, #4]
 80024fe:	88f9      	ldrh	r1, [r7, #6]
 8002500:	9302      	str	r3, [sp, #8]
 8002502:	2301      	movs	r3, #1
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	f107 030e 	add.w	r3, r7, #14
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	480b      	ldr	r0, [pc, #44]	; (800253c <I2C2_ReadData+0x64>)
 8002510:	f003 fefc 	bl	800630c <HAL_I2C_Mem_Read>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002518:	b662      	cpsie	i
}
 800251a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002522:	f000 f861 	bl	80025e8 <I2C2_Error>
    HAL_Delay(200);
 8002526:	20c8      	movs	r0, #200	; 0xc8
 8002528:	f002 fa9e 	bl	8004a68 <HAL_Delay>
  }

  return value;
 800252c:	7bbb      	ldrb	r3, [r7, #14]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000b4 	.word	0x200000b4
 800253c:	20000188 	.word	0x20000188

08002540 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8002558:	88f9      	ldrh	r1, [r7, #6]
 800255a:	2332      	movs	r3, #50	; 0x32
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	480a      	ldr	r0, [pc, #40]	; (8002588 <I2C2_isDeviceReady+0x48>)
 8002560:	f003 ffee 	bl	8006540 <HAL_I2C_IsDeviceReady>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002568:	b662      	cpsie	i
}
 800256a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002572:	f000 f839 	bl	80025e8 <I2C2_Error>
    HAL_Delay(200);
 8002576:	20c8      	movs	r0, #200	; 0xc8
 8002578:	f002 fa76 	bl	8004a68 <HAL_Delay>
  }

  return value;
 800257c:	7bbb      	ldrb	r3, [r7, #14]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000188 	.word	0x20000188

0800258c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af04      	add	r7, sp, #16
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	4603      	mov	r3, r0
 8002596:	81fb      	strh	r3, [r7, #14]
 8002598:	460b      	mov	r3, r1
 800259a:	81bb      	strh	r3, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <I2C2_ReadBuffer+0x54>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8978      	ldrh	r0, [r7, #10]
 80025ae:	89ba      	ldrh	r2, [r7, #12]
 80025b0:	89f9      	ldrh	r1, [r7, #14]
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	8c3b      	ldrh	r3, [r7, #32]
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4603      	mov	r3, r0
 80025be:	4809      	ldr	r0, [pc, #36]	; (80025e4 <I2C2_ReadBuffer+0x58>)
 80025c0:	f003 fea4 	bl	800630c <HAL_I2C_Mem_Read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80025c8:	b662      	cpsie	i
}
 80025ca:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80025d2:	f000 f809 	bl	80025e8 <I2C2_Error>
  }

  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000b4 	.word	0x200000b4
 80025e4:	20000188 	.word	0x20000188

080025e8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80025ec:	f7ff fdee 	bl	80021cc <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <I2C2_Error+0x18>)
 80025f2:	f003 fd34 	bl	800605e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80025f6:	f7ff fe31 	bl	800225c <I2C2_Init>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000188 	.word	0x20000188

08002604 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8002608:	f7ff fe28 	bl	800225c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800260c:	2104      	movs	r1, #4
 800260e:	2084      	movs	r0, #132	; 0x84
 8002610:	f7ff ff96 	bl	8002540 <I2C2_isDeviceReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800261a:	f7ff fdd7 	bl	80021cc <BSP_ErrorHandler>
  }
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MFX_IO_DeInit+0x6c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800264e:	2302      	movs	r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <MFX_IO_DeInit+0x70>)
 800265a:	f003 f9bd 	bl	80059d8 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800265e:	2017      	movs	r0, #23
 8002660:	f002 fb4f 	bl	8004d02 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <MFX_IO_DeInit+0x6c>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <MFX_IO_DeInit+0x6c>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800267c:	2120      	movs	r1, #32
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <MFX_IO_DeInit+0x74>)
 8002680:	f003 fb3c 	bl	8005cfc <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002684:	f7ff fe96 	bl	80023b4 <I2C2_DeInit>
}
 8002688:	bf00      	nop
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	48001c00 	.word	0x48001c00
 8002698:	48000800 	.word	0x48000800

0800269c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MFX_IO_ITConfig+0x54>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 80026ba:	2320      	movs	r3, #32
 80026bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80026c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026ca:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4808      	ldr	r0, [pc, #32]	; (80026f4 <MFX_IO_ITConfig+0x58>)
 80026d2:	f003 f981 	bl	80059d8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80026d6:	220f      	movs	r2, #15
 80026d8:	210f      	movs	r1, #15
 80026da:	2017      	movs	r0, #23
 80026dc:	f002 fae7 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80026e0:	2017      	movs	r0, #23
 80026e2:	f002 fb00 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000800 	.word	0x48000800

080026f8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <MFX_IO_EnableWakeupPin+0x40>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	2302      	movs	r3, #2
 8002720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4804      	ldr	r0, [pc, #16]	; (800273c <MFX_IO_EnableWakeupPin+0x44>)
 800272c:	f003 f954 	bl	80059d8 <HAL_GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	48001c00 	.word	0x48001c00

08002740 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <MFX_IO_Wakeup+0x24>)
 800274a:	f003 fbc9 	bl	8005ee0 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f002 f98a 	bl	8004a68 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <MFX_IO_Wakeup+0x24>)
 800275a:	f003 fbc1 	bl	8005ee0 <HAL_GPIO_WritePin>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	48001c00 	.word	0x48001c00

08002768 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
 8002772:	460b      	mov	r3, r1
 8002774:	717b      	strb	r3, [r7, #5]
 8002776:	4613      	mov	r3, r2
 8002778:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800277a:	797b      	ldrb	r3, [r7, #5]
 800277c:	b299      	uxth	r1, r3
 800277e:	793b      	ldrb	r3, [r7, #4]
 8002780:	88f8      	ldrh	r0, [r7, #6]
 8002782:	2201      	movs	r2, #1
 8002784:	f7ff fe76 	bl	8002474 <I2C2_WriteData>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	4613      	mov	r3, r2
 800279e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80027a0:	797b      	ldrb	r3, [r7, #5]
 80027a2:	b299      	uxth	r1, r3
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe95 	bl	80024d8 <I2C2_ReadData>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60ba      	str	r2, [r7, #8]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	81fb      	strh	r3, [r7, #14]
 80027c6:	460b      	mov	r3, r1
 80027c8:	737b      	strb	r3, [r7, #13]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	b299      	uxth	r1, r3
 80027d2:	89f8      	ldrh	r0, [r7, #14]
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2201      	movs	r2, #1
 80027dc:	f7ff fed6 	bl	800258c <I2C2_ReadBuffer>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b29b      	uxth	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f002 f937 	bl	8004a68 <HAL_Delay>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	4a37      	ldr	r2, [pc, #220]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6513      	str	r3, [r2, #80]	; 0x50
 8002816:	4b35      	ldr	r3, [pc, #212]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002840:	f043 0310 	orr.w	r3, r3, #16
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <FMC_BANK1_MspInit+0xe8>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800289a:	f004 fa71 	bl	8006d80 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 80028aa:	230c      	movs	r3, #12
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 80028ae:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80028b2:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <FMC_BANK1_MspInit+0xec>)
 80028bc:	f003 f88c 	bl	80059d8 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 80028c0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028c4:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <FMC_BANK1_MspInit+0xf0>)
 80028ce:	f003 f883 	bl	80059d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 80028d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	4804      	ldr	r0, [pc, #16]	; (80028f0 <FMC_BANK1_MspInit+0xec>)
 80028e0:	f003 f87a 	bl	80059d8 <HAL_GPIO_Init>

}
 80028e4:	bf00      	nop
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000c00 	.word	0x48000c00
 80028f4:	48001000 	.word	0x48001000

080028f8 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0a4      	sub	sp, #144	; 0x90
 80028fc:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 80028fe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <FMC_BANK1_Init+0xa8>)
 8002906:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8002908:	2301      	movs	r3, #1
 800290a:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8002918:	2302      	movs	r3, #2
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800291c:	2302      	movs	r3, #2
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8002924:	2305      	movs	r3, #5
 8002926:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800292c:	2303      	movs	r3, #3
 800292e:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8002930:	2302      	movs	r3, #2
 8002932:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8002934:	2302      	movs	r3, #2
 8002936:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8002938:	2302      	movs	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8002940:	2300      	movs	r3, #0
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8002948:	2300      	movs	r3, #0
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800294c:	2310      	movs	r3, #16
 800294e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8002958:	2300      	movs	r3, #0
 800295a:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8002978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800297c:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800297e:	2300      	movs	r3, #0
 8002980:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8002982:	f7ff ff3f 	bl	8002804 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8002986:	463a      	mov	r2, r7
 8002988:	f107 0120 	add.w	r1, r7, #32
 800298c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f008 f951 	bl	800ac38 <HAL_SRAM_Init>

}
 8002996:	bf00      	nop
 8002998:	3790      	adds	r7, #144	; 0x90
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	a0000104 	.word	0xa0000104

080029a4 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <FMC_BANK1_WriteData+0x1c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	8013      	strh	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	60080000 	.word	0x60080000

080029c4 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 80029ce:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80029d2:	79fa      	ldrb	r2, [r7, #7]
 80029d4:	b292      	uxth	r2, r2
 80029d6:	801a      	strh	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <FMC_BANK1_ReadData+0x14>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	60080000 	.word	0x60080000

080029fc <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8002a00:	f7ff ff7a 	bl	80028f8 <FMC_BANK1_Init>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ffc5 	bl	80029a4 <FMC_BANK1_WriteData>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffc8 	bl	80029c4 <FMC_BANK1_WriteReg>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8002a40:	f7ff ffd0 	bl	80029e4 <FMC_BANK1_ReadData>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f002 f808 	bl	8004a68 <HAL_Delay>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Suspend(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Suspend the Camera Capture */
  HAL_DCMI_Suspend(&hdcmi);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <BSP_CAMERA_Suspend+0x10>)
 8002a66:	f002 f9ed 	bl	8004e44 <HAL_DCMI_Suspend>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000027c 	.word	0x2000027c

08002a74 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @retval None
  */
void BSP_CAMERA_Resume(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Start the Camera Capture */
  HAL_DCMI_Resume(&hdcmi);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <BSP_CAMERA_Resume+0x10>)
 8002a7a:	f002 fa30 	bl	8004ede <HAL_DCMI_Resume>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000027c 	.word	0x2000027c

08002a88 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8002a90:	f000 f804 	bl	8002a9c <BSP_CAMERA_LineEventCallback>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8002ab2:	f000 f804 	bl	8002abe <BSP_CAMERA_VsyncEventCallback>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8002ad4:	f000 f804 	bl	8002ae0 <BSP_CAMERA_ErrorCallback>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <BSP_IO_Init+0x78>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d128      	bne.n	8002b58 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <BSP_IO_Init+0x7c>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2084      	movs	r0, #132	; 0x84
 8002b0c:	4798      	blx	r3

    HAL_Delay(10);
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f001 ffaa 	bl	8004a68 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <BSP_IO_Init+0x80>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2084      	movs	r0, #132	; 0x84
 8002b1a:	4798      	blx	r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	2b7b      	cmp	r3, #123	; 0x7b
 8002b24:	d002      	beq.n	8002b2c <BSP_IO_Init+0x3c>
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	2b79      	cmp	r3, #121	; 0x79
 8002b2a:	d117      	bne.n	8002b5c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <BSP_IO_Init+0x78>)
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <BSP_IO_Init+0x80>)
 8002b30:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <BSP_IO_Init+0x78>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <BSP_IO_Init+0x78>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2084      	movs	r0, #132	; 0x84
 8002b44:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <BSP_IO_Init+0x78>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4909      	ldr	r1, [pc, #36]	; (8002b74 <BSP_IO_Init+0x84>)
 8002b4e:	2084      	movs	r0, #132	; 0x84
 8002b50:	4798      	blx	r3

        ret = IO_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	71fb      	strb	r3, [r7, #7]
 8002b56:	e001      	b.n	8002b5c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200001dc 	.word	0x200001dc
 8002b6c:	2000002c 	.word	0x2000002c
 8002b70:	20000000 	.word	0x20000000
 8002b74:	000301ff 	.word	0x000301ff

08002b78 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <BSP_IO_ConfigPin+0x30>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <BSP_IO_ConfigPin+0x34>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	2084      	movs	r0, #132	; 0x84
 8002b9c:	4798      	blx	r3

  return IO_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	000301ff 	.word	0x000301ff
 8002bac:	200001dc 	.word	0x200001dc

08002bb0 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <BSP_IO_WritePin+0x30>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <BSP_IO_WritePin+0x34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	2084      	movs	r0, #132	; 0x84
 8002bd4:	4798      	blx	r3

}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	000301ff 	.word	0x000301ff
 8002be4:	200001dc 	.word	0x200001dc

08002be8 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <BSP_IO_ReadPin+0x38>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <BSP_IO_ReadPin+0x3c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	2084      	movs	r0, #132	; 0x84
 8002c0a:	4798      	blx	r3
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]


  return pin_state;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	000301ff 	.word	0x000301ff
 8002c24:	200001dc 	.word	0x200001dc

08002c28 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 f803 	bl	8002c38 <BSP_LCD_InitEx>
 8002c32:	4603      	mov	r3, r0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <BSP_LCD_InitEx+0xd4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e054      	b.n	8002d00 <BSP_LCD_InitEx+0xc8>
  }
  else
  {
    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8002c56:	f000 f89f 	bl	8002d98 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	482c      	ldr	r0, [pc, #176]	; (8002d10 <BSP_LCD_InitEx+0xd8>)
 8002c60:	f003 f93e 	bl	8005ee0 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <BSP_LCD_InitEx+0xdc>)
 8002c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6a:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <BSP_LCD_InitEx+0xdc>)
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <BSP_LCD_InitEx+0xe0>)
 8002c70:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <BSP_LCD_InitEx+0xdc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <BSP_LCD_InitEx+0xe4>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <BSP_LCD_InitEx+0x5a>
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <BSP_LCD_InitEx+0xe8>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <BSP_LCD_InitEx+0x5a>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <BSP_LCD_InitEx+0xec>)
 8002c8e:	f003 f927 	bl	8005ee0 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8002c92:	f000 f851 	bl	8002d38 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <BSP_LCD_InitEx+0xf0>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b85      	cmp	r3, #133	; 0x85
 8002ca0:	d12e      	bne.n	8002d00 <BSP_LCD_InitEx+0xc8>
    {
      LcdDrv = &ST7789H2_drv;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <BSP_LCD_InitEx+0xf4>)
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <BSP_LCD_InitEx+0xf0>)
 8002ca6:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <BSP_LCD_InitEx+0xf4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	f7ff f850 	bl	8001d5a <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	e006      	b.n	8002cce <BSP_LCD_InitEx+0x96>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8002cc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cc4:	f7ff fea0 	bl	8002a08 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8002cd4:	d3f4      	bcc.n	8002cc0 <BSP_LCD_InitEx+0x88>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <BSP_LCD_InitEx+0xb2>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fe ff3a 	bl	8001b56 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <BSP_LCD_InitEx+0xf8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <BSP_LCD_InitEx+0xb8>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <BSP_LCD_InitEx+0xf8>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cf0:	4810      	ldr	r0, [pc, #64]	; (8002d34 <BSP_LCD_InitEx+0xfc>)
 8002cf2:	f000 f841 	bl	8002d78 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <BSP_LCD_InitEx+0xd4>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200001e0 	.word	0x200001e0
 8002d10:	48001c00 	.word	0x48001c00
 8002d14:	200001e8 	.word	0x200001e8
 8002d18:	200000b8 	.word	0x200000b8
 8002d1c:	200001e4 	.word	0x200001e4
 8002d20:	200001e5 	.word	0x200001e5
 8002d24:	48002000 	.word	0x48002000
 8002d28:	20000078 	.word	0x20000078
 8002d2c:	200001f4 	.word	0x200001f4
 8002d30:	200000c8 	.word	0x200000c8
 8002d34:	200000c0 	.word	0x200000c0

08002d38 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2004      	movs	r0, #4
 8002d40:	f7ff ff36 	bl	8002bb0 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002d44:	2005      	movs	r0, #5
 8002d46:	f001 fe8f 	bl	8004a68 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2004      	movs	r0, #4
 8002d4e:	f7ff ff2f 	bl	8002bb0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002d52:	200a      	movs	r0, #10
 8002d54:	f001 fe88 	bl	8004a68 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f7ff ff28 	bl	8002bb0 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002d60:	2014      	movs	r0, #20
 8002d62:	f001 fe81 	bl	8004a68 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8002d66:	2101      	movs	r1, #1
 8002d68:	2004      	movs	r0, #4
 8002d6a:	f7ff ff21 	bl	8002bb0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002d6e:	200a      	movs	r0, #10
 8002d70:	f001 fe7a 	bl	8004a68 <HAL_Delay>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <BSP_LCD_SetFont+0x1c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6093      	str	r3, [r2, #8]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200001e8 	.word	0x200001e8

08002d98 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <BSP_LCD_MspInit+0xac>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 8002de6:	f7ff fe83 	bl	8002af0 <BSP_IO_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 8002df0:	f7ff f9ec 	bl	80021cc <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 8002df4:	2101      	movs	r1, #1
 8002df6:	2004      	movs	r0, #4
 8002df8:	f7ff febe 	bl	8002b78 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e00:	2301      	movs	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	480c      	ldr	r0, [pc, #48]	; (8002e48 <BSP_LCD_MspInit+0xb0>)
 8002e18:	f002 fdde 	bl	80059d8 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 8002e20:	2301      	movs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <BSP_LCD_MspInit+0xb4>)
 8002e38:	f002 fdce 	bl	80059d8 <HAL_GPIO_Init>
}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	48002000 	.word	0x48002000
 8002e4c:	48001c00 	.word	0x48001c00

08002e50 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <BSP_SD_Init+0x90>)
 8002e5e:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e7e:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 8002e86:	f000 f966 	bl	8003156 <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002e8a:	f000 f844 	bl	8002f16 <BSP_SD_IsDetected>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002e94:	2302      	movs	r3, #2
 8002e96:	e01c      	b.n	8002ed2 <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <BSP_SD_Init+0x8c>)
 8002e9c:	f000 f8bc 	bl	8003018 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002ea0:	480e      	ldr	r0, [pc, #56]	; (8002edc <BSP_SD_Init+0x8c>)
 8002ea2:	f006 fa6b 	bl	800937c <HAL_SD_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eba:	4808      	ldr	r0, [pc, #32]	; (8002edc <BSP_SD_Init+0x8c>)
 8002ebc:	f007 f9e8 	bl	800a290 <HAL_SD_ConfigWideBusOperation>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	71fb      	strb	r3, [r7, #7]
 8002eca:	e001      	b.n	8002ed0 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200001f8 	.word	0x200001f8
 8002ee0:	40012800 	.word	0x40012800

08002ee4 <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 8002ee8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002eec:	f7ff fe7c 	bl	8002be8 <BSP_IO_ReadPin>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef6:	d006      	beq.n	8002f06 <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 8002ef8:	2110      	movs	r1, #16
 8002efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002efe:	f7ff fe3b 	bl	8002b78 <BSP_IO_ConfigPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	e005      	b.n	8002f12 <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 8002f06:	2112      	movs	r1, #18
 8002f08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f0c:	f7ff fe34 	bl	8002b78 <BSP_IO_ConfigPin>
 8002f10:	4603      	mov	r3, r0
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002f20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f24:	f7ff fe60 	bl	8002be8 <BSP_IO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	b2db      	uxtb	r3, r3
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  sd_state =  HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	4807      	ldr	r0, [pc, #28]	; (8002f7c <BSP_SD_ReadBlocks+0x3c>)
 8002f5e:	f006 fae3 	bl	8009528 <HAL_SD_ReadBlocks>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <BSP_SD_ReadBlocks+0x30>
  {
    return MSD_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <BSP_SD_ReadBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 8002f70:	2301      	movs	r3, #1
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001f8 	.word	0x200001f8

08002f80 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  sd_state = HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	68f9      	ldr	r1, [r7, #12]
 8002f9c:	4807      	ldr	r0, [pc, #28]	; (8002fbc <BSP_SD_WriteBlocks+0x3c>)
 8002f9e:	f006 fca1 	bl	80098e4 <HAL_SD_WriteBlocks>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <BSP_SD_WriteBlocks+0x30>
  {
    return MSD_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <BSP_SD_WriteBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 8002fb0:	2301      	movs	r3, #1
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200001f8 	.word	0x200001f8

08002fc0 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 8002fc6:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <BSP_SD_GetCardState+0x38>)
 8002fc8:	f007 fa1e 	bl	800a408 <HAL_SD_GetCardState>
 8002fcc:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d101      	bne.n	8002fd8 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e00b      	b.n	8002ff0 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d005      	beq.n	8002fea <BSP_SD_GetCardState+0x2a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d002      	beq.n	8002fea <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	d101      	bne.n	8002fee <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	200001f8 	.word	0x200001f8

08002ffc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <BSP_SD_GetCardInfo+0x18>)
 8003008:	f007 f916 	bl	800a238 <HAL_SD_GetCardInfo>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200001f8 	.word	0x200001f8

08003018 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ae      	sub	sp, #184	; 0xb8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003022:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 8003032:	f107 0318 	add.w	r3, r7, #24
 8003036:	4618      	mov	r0, r3
 8003038:	f005 f820 	bl	800807c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800303c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003040:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003042:	2318      	movs	r3, #24
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 8003046:	2304      	movs	r3, #4
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800304a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8003050:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f004 fd11 	bl	8007a84 <HAL_RCCEx_PeriphCLKConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d000      	beq.n	800306a <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 8003068:	e7fe      	b.n	8003068 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <BSP_SD_MspInit+0x108>)
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <BSP_SD_MspInit+0x108>)
 8003070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003074:	6613      	str	r3, [r2, #96]	; 0x60
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <BSP_SD_MspInit+0x108>)
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <BSP_SD_MspInit+0x108>)
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	4a26      	ldr	r2, [pc, #152]	; (8003120 <BSP_SD_MspInit+0x108>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6493      	str	r3, [r2, #72]	; 0x48
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <BSP_SD_MspInit+0x108>)
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <BSP_SD_MspInit+0x108>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <BSP_SD_MspInit+0x108>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <BSP_SD_MspInit+0x108>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <BSP_SD_MspInit+0x108>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <BSP_SD_MspInit+0x108>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <BSP_SD_MspInit+0x108>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80030dc:	230c      	movs	r3, #12
 80030de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80030e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80030e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80030ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030ee:	4619      	mov	r1, r3
 80030f0:	480c      	ldr	r0, [pc, #48]	; (8003124 <BSP_SD_MspInit+0x10c>)
 80030f2:	f002 fc71 	bl	80059d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80030f6:	2304      	movs	r3, #4
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80030fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003100:	4619      	mov	r1, r3
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <BSP_SD_MspInit+0x110>)
 8003104:	f002 fc68 	bl	80059d8 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8003108:	2200      	movs	r2, #0
 800310a:	2105      	movs	r1, #5
 800310c:	2031      	movs	r0, #49	; 0x31
 800310e:	f001 fdce 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8003112:	2031      	movs	r0, #49	; 0x31
 8003114:	f001 fde7 	bl	8004ce6 <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8003118:	bf00      	nop
 800311a:	37b8      	adds	r7, #184	; 0xb8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	48000800 	.word	0x48000800
 8003128:	48000c00 	.word	0x48000c00

0800312c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0

}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 800315a:	f7ff fcc9 	bl	8002af0 <BSP_IO_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 8003164:	f7ff f832 	bl	80021cc <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 8003168:	2108      	movs	r1, #8
 800316a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800316e:	f7ff fd03 	bl	8002b78 <BSP_IO_ConfigPin>
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Error_Handler(void);

int _write(int file, char *ptr, int len) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	b29a      	uxth	r2, r3
 8003188:	2364      	movs	r3, #100	; 0x64
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4803      	ldr	r0, [pc, #12]	; (800319c <_write+0x24>)
 800318e:	f007 fde9 	bl	800ad64 <HAL_UART_Transmit>
 8003192:	4603      	mov	r3, r0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000404 	.word	0x20000404

080031a0 <print_startup_msg>:

static void print_startup_msg(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <print_startup_msg+0x2c>)
 80031a6:	f00a fa4d 	bl	800d644 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 80031aa:	4909      	ldr	r1, [pc, #36]	; (80031d0 <print_startup_msg+0x30>)
 80031ac:	4809      	ldr	r0, [pc, #36]	; (80031d4 <print_startup_msg+0x34>)
 80031ae:	f00a f9c3 	bl	800d538 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 80031b2:	4909      	ldr	r1, [pc, #36]	; (80031d8 <print_startup_msg+0x38>)
 80031b4:	4809      	ldr	r0, [pc, #36]	; (80031dc <print_startup_msg+0x3c>)
 80031b6:	f00a f9bf 	bl	800d538 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 80031ba:	4909      	ldr	r1, [pc, #36]	; (80031e0 <print_startup_msg+0x40>)
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <print_startup_msg+0x44>)
 80031be:	f00a f9bb 	bl	800d538 <iprintf>
  printf("******************************************\r\n");
 80031c2:	4802      	ldr	r0, [pc, #8]	; (80031cc <print_startup_msg+0x2c>)
 80031c4:	f00a fa3e 	bl	800d644 <puts>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0800df40 	.word	0x0800df40
 80031d0:	0800df6c 	.word	0x0800df6c
 80031d4:	0800df78 	.word	0x0800df78
 80031d8:	0800df94 	.word	0x0800df94
 80031dc:	0800df98 	.word	0x0800df98
 80031e0:	0800dfb8 	.word	0x0800dfb8
 80031e4:	0800dfc4 	.word	0x0800dfc4

080031e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 80031f2:	f001 fc2d 	bl	8004a50 <HAL_GetTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <HAL_GPIO_EXTI_Callback+0x40>)
 80031fa:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_GPIO_EXTI_Callback+0x40>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_GPIO_EXTI_Callback+0x44>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2bfa      	cmp	r3, #250	; 0xfa
 8003208:	d90a      	bls.n	8003220 <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_GPIO_EXTI_Callback+0x48>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd faae 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_GPIO_EXTI_Callback+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <HAL_GPIO_EXTI_Callback+0x44>)
 800321e:	6013      	str	r3, [r2, #0]
	}

}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2001c75c 	.word	0x2001c75c
 800322c:	2001c760 	.word	0x2001c760
 8003230:	2000052c 	.word	0x2000052c

08003234 <LCD_ImagePreparation>:
  * @param  xSize: image width (in pixels)
  * @param  ySize: image height (in pixels)
  * @retval None
  */
static void LCD_ImagePreparation(uint16_t x0, uint16_t y0, uint16_t xSize, uint16_t ySize)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4604      	mov	r4, r0
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	80fb      	strh	r3, [r7, #6]
 8003246:	4603      	mov	r3, r0
 8003248:	80bb      	strh	r3, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	807b      	strh	r3, [r7, #2]
 800324e:	4613      	mov	r3, r2
 8003250:	803b      	strh	r3, [r7, #0]
  /* CASET: Column Address Set */
  LCD_IO_WriteReg(ST7789H2_CASET);
 8003252:	202a      	movs	r0, #42	; 0x2a
 8003254:	f7ff fbe5 	bl	8002a22 <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7ff fbd5 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0);
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fbd1 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 8003266:	2000      	movs	r0, #0
 8003268:	f7ff fbce 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(x0 + xSize -1);
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	4413      	add	r3, r2
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fbc5 	bl	8002a08 <LCD_IO_WriteData>
  /* RASET: Row Address Set */
  LCD_IO_WriteReg(ST7789H2_RASET);
 800327e:	202b      	movs	r0, #43	; 0x2b
 8003280:	f7ff fbcf 	bl	8002a22 <LCD_IO_WriteReg>
  /* Send commands */
  LCD_IO_WriteData(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7ff fbbf 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0);
 800328a:	88bb      	ldrh	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fbbb 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff fbb8 	bl	8002a08 <LCD_IO_WriteData>
  LCD_IO_WriteData(y0 + ySize -1);
 8003298:	88ba      	ldrh	r2, [r7, #4]
 800329a:	883b      	ldrh	r3, [r7, #0]
 800329c:	4413      	add	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fbaf 	bl	8002a08 <LCD_IO_WriteData>

  /* Prepare to write to LCD RAM */
  LCD_IO_WriteReg(ST7789H2_WRITE_RAM);
 80032aa:	202c      	movs	r0, #44	; 0x2c
 80032ac:	f7ff fbb9 	bl	8002a22 <LCD_IO_WriteReg>
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}

080032b8 <LCD_Write>:
  * @param  DestAddress: LCD RAM address
  * @param  TransferSize: image size (in pixels)
  * @retval HAL status
  */
static HAL_StatusTypeDef LCD_Write(uint32_t OrigAddress, uint32_t DestAddress, uint32_t TransferSize)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Force 1 pixel per line and width in pixels x height in pixels   */
  /* as number of lines to align DMA2D transfer to LCD configuration */
  if (HAL_OK != HAL_DMA2D_Start_IT(&hdma2d, OrigAddress, DestAddress, 1, TransferSize))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	4806      	ldr	r0, [pc, #24]	; (80032e8 <LCD_Write+0x30>)
 80032d0:	f002 f905 	bl	80054de <HAL_DMA2D_Start_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <LCD_Write+0x26>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LCD_Write+0x28>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000328 	.word	0x20000328

080032ec <SD_Initialize>:
  * @brief  Initialize the SD card.
  * @param  None
  * @retval None
  */
static void SD_Initialize(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <SD_Initialize+0x88>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d13a      	bne.n	800336e <SD_Initialize+0x82>
  {
    if (BSP_SD_Init() == MSD_OK)
 80032f8:	f7ff fdaa 	bl	8002e50 <BSP_SD_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d117      	bne.n	8003332 <SD_Initialize+0x46>
    {
      BSP_SD_ITConfig();
 8003302:	f7ff fdef 	bl	8002ee4 <BSP_SD_ITConfig>
      isInitialized = 1;
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <SD_Initialize+0x88>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
      printf_dbg("SD Initialize Okey!\r\n");
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <SD_Initialize+0x8c>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4618      	mov	r0, r3
 8003312:	f00a f911 	bl	800d538 <iprintf>
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <SD_Initialize+0x90>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f00a f90c 	bl	800d538 <iprintf>
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <SD_Initialize+0x8c>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4618      	mov	r0, r3
 8003326:	f00a f907 	bl	800d538 <iprintf>
 800332a:	4815      	ldr	r0, [pc, #84]	; (8003380 <SD_Initialize+0x94>)
 800332c:	f00a f98a 	bl	800d644 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 8003330:	e01d      	b.n	800336e <SD_Initialize+0x82>
      BSP_LED_On(LED1);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fe ff4e 	bl	80021d4 <BSP_LED_On>
      printf_dbg("SD Initialize ERROR!!\r\n");
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <SD_Initialize+0x8c>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4618      	mov	r0, r3
 800333e:	f00a f8fb 	bl	800d538 <iprintf>
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <SD_Initialize+0x90>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f00a f8f6 	bl	800d538 <iprintf>
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <SD_Initialize+0x8c>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4618      	mov	r0, r3
 8003352:	f00a f8f1 	bl	800d538 <iprintf>
 8003356:	480b      	ldr	r0, [pc, #44]	; (8003384 <SD_Initialize+0x98>)
 8003358:	f00a f974 	bl	800d644 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 800335c:	bf00      	nop
 800335e:	f7ff fdda 	bl	8002f16 <BSP_SD_IsDetected>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d1fa      	bne.n	800335e <SD_Initialize+0x72>
      BSP_LED_Off(LED1);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fe ff55 	bl	8002218 <BSP_LED_Off>
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2001c758 	.word	0x2001c758
 8003378:	200000cc 	.word	0x200000cc
 800337c:	200000ec 	.word	0x200000ec
 8003380:	0800dfdc 	.word	0x0800dfdc
 8003384:	0800dff4 	.word	0x0800dff4

08003388 <HAL_DCMI_FrameEventCallback>:
  * @param  None
  * @retval None
  */

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	//printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
	LCD_ImagePreparation(0, 0, ST7789H2_LCD_PIXEL_WIDTH, ST7789H2_LCD_PIXEL_HEIGHT);
 8003390:	23f0      	movs	r3, #240	; 0xf0
 8003392:	22f0      	movs	r2, #240	; 0xf0
 8003394:	2100      	movs	r1, #0
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff ff4c 	bl	8003234 <LCD_ImagePreparation>

	/* Write data (through DMA2D) */
	hal_status = LCD_Write((uint32_t) (&pBuffer), (uint32_t)&(LCD_ADDR->REG), ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_DCMI_FrameEventCallback+0x40>)
 800339e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_DCMI_FrameEventCallback+0x44>)
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff87 	bl	80032b8 <LCD_Write>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_DCMI_FrameEventCallback+0x48>)
 80033b0:	701a      	strb	r2, [r3, #0]
	if(hal_status != HAL_OK)Error_Handler();
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_DCMI_FrameEventCallback+0x48>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_DCMI_FrameEventCallback+0x36>
 80033ba:	f000 fdfb 	bl	8003fb4 <Error_Handler>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000558 	.word	0x20000558
 80033cc:	60080000 	.word	0x60080000
 80033d0:	20000528 	.word	0x20000528

080033d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033da:	f001 fad0 	bl	800497e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033de:	f000 f93b 	bl	8003658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e2:	f000 fb41 	bl	8003a68 <MX_GPIO_Init>
  MX_DCMI_Init();
 80033e6:	f000 f9b5 	bl	8003754 <MX_DCMI_Init>
  MX_DMA_Init();
 80033ea:	f000 fa71 	bl	80038d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033ee:	f000 fa3f 	bl	8003870 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 80033f2:	f000 f9e3 	bl	80037bc <MX_DMA2D_Init>
  MX_FMC_Init();
 80033f6:	f000 fa89 	bl	800390c <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80033fa:	f000 fa17 	bl	800382c <MX_SDMMC1_SD_Init>
  //MX_FATFS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 80033fe:	f000 f984 	bl	800370a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8003402:	2114      	movs	r1, #20
 8003404:	4883      	ldr	r0, [pc, #524]	; (8003614 <main+0x240>)
 8003406:	f7fd f951 	bl	80006ac <ring_buffer_init>
 800340a:	4603      	mov	r3, r0
 800340c:	4a82      	ldr	r2, [pc, #520]	; (8003618 <main+0x244>)
 800340e:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 8003410:	f7ff fec6 	bl	80031a0 <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 8003414:	f7ff fb6c 	bl	8002af0 <BSP_IO_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  if(ret == IO_OK)  printf_dbg("Expander OK\r\n");
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d111      	bne.n	8003446 <main+0x72>
 8003422:	4b7e      	ldr	r3, [pc, #504]	; (800361c <main+0x248>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4618      	mov	r0, r3
 8003428:	f00a f886 	bl	800d538 <iprintf>
 800342c:	4b7c      	ldr	r3, [pc, #496]	; (8003620 <main+0x24c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f00a f881 	bl	800d538 <iprintf>
 8003436:	4b79      	ldr	r3, [pc, #484]	; (800361c <main+0x248>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4618      	mov	r0, r3
 800343c:	f00a f87c 	bl	800d538 <iprintf>
 8003440:	4878      	ldr	r0, [pc, #480]	; (8003624 <main+0x250>)
 8003442:	f00a f8ff 	bl	800d644 <puts>

  /* LCD initialization */
  ret =BSP_LCD_Init();
 8003446:	f7ff fbef 	bl	8002c28 <BSP_LCD_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if(ret == LCD_OK) printf_dbg("LCD OK\r\n");
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <main+0xa4>
 8003454:	4b71      	ldr	r3, [pc, #452]	; (800361c <main+0x248>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4618      	mov	r0, r3
 800345a:	f00a f86d 	bl	800d538 <iprintf>
 800345e:	4b70      	ldr	r3, [pc, #448]	; (8003620 <main+0x24c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f00a f868 	bl	800d538 <iprintf>
 8003468:	4b6c      	ldr	r3, [pc, #432]	; (800361c <main+0x248>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4618      	mov	r0, r3
 800346e:	f00a f863 	bl	800d538 <iprintf>
 8003472:	486d      	ldr	r0, [pc, #436]	; (8003628 <main+0x254>)
 8003474:	f00a f8e6 	bl	800d644 <puts>

  //BSP_CAMERA_Init(RESOLUTION_R320x240);
  if(ret == CAMERA_OK) printf_dbg("Camera OK\r\n");
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d111      	bne.n	80034a2 <main+0xce>
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <main+0x248>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4618      	mov	r0, r3
 8003484:	f00a f858 	bl	800d538 <iprintf>
 8003488:	4b65      	ldr	r3, [pc, #404]	; (8003620 <main+0x24c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f00a f853 	bl	800d538 <iprintf>
 8003492:	4b62      	ldr	r3, [pc, #392]	; (800361c <main+0x248>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4618      	mov	r0, r3
 8003498:	f00a f84e 	bl	800d538 <iprintf>
 800349c:	4863      	ldr	r0, [pc, #396]	; (800362c <main+0x258>)
 800349e:	f00a f8d1 	bl	800d644 <puts>

    //hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS,  (uint32_t)pBuffer , (ST7789H2_LCD_PIXEL_WIDTH*ST7789H2_LCD_PIXEL_HEIGHT)/2 );
    //if(hal_status != HAL_OK)Error_Handler();

    /* 1- Link the micro SD disk I/O driver */
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80034a2:	4963      	ldr	r1, [pc, #396]	; (8003630 <main+0x25c>)
 80034a4:	4863      	ldr	r0, [pc, #396]	; (8003634 <main+0x260>)
 80034a6:	f009 fbff 	bl	800cca8 <FATFS_LinkDriver>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <main+0x10e>
	{
	/*##-2- Init the SD Card #################################################*/

		SD_Initialize();
 80034b0:	f7ff ff1c 	bl	80032ec <SD_Initialize>

		if(BSP_SD_IsDetected())
 80034b4:	f7ff fd2f 	bl	8002f16 <BSP_SD_IsDetected>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <main+0x10e>
		{
			//Appli_state = APPLICATION_RUNNING;
			printf_dbg("SD Card OK\r\n");
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <main+0x248>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f00a f838 	bl	800d538 <iprintf>
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <main+0x24c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f00a f833 	bl	800d538 <iprintf>
 80034d2:	4b52      	ldr	r3, [pc, #328]	; (800361c <main+0x248>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00a f82e 	bl	800d538 <iprintf>
 80034dc:	4856      	ldr	r0, [pc, #344]	; (8003638 <main+0x264>)
 80034de:	f00a f8b1 	bl	800d644 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <main+0x244>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4955      	ldr	r1, [pc, #340]	; (800363c <main+0x268>)
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f96b 	bl	80007c4 <ring_buffer_get>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 808b 	beq.w	800360c <main+0x238>
	  {

		  switch (IRQ_event) {
 80034f6:	4b51      	ldr	r3, [pc, #324]	; (800363c <main+0x268>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fe:	d072      	beq.n	80035e6 <main+0x212>
 8003500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003504:	f300 8084 	bgt.w	8003610 <main+0x23c>
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350c:	d056      	beq.n	80035bc <main+0x1e8>
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	dc7d      	bgt.n	8003610 <main+0x23c>
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d037      	beq.n	800358a <main+0x1b6>
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	dc77      	bgt.n	8003610 <main+0x23c>
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d003      	beq.n	800352e <main+0x15a>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	d019      	beq.n	8003560 <main+0x18c>
				break;
			case GPIO_PIN_13:
				printf_dbg("JOY_SEL was pressed!\r\n");
				break;
			default:
				break;
 800352c:	e070      	b.n	8003610 <main+0x23c>
				printf_dbg("JOY_UP was pressed!\r\n");
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <main+0x248>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4618      	mov	r0, r3
 8003534:	f00a f800 	bl	800d538 <iprintf>
 8003538:	4b39      	ldr	r3, [pc, #228]	; (8003620 <main+0x24c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f009 fffb 	bl	800d538 <iprintf>
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <main+0x248>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4618      	mov	r0, r3
 8003548:	f009 fff6 	bl	800d538 <iprintf>
 800354c:	483c      	ldr	r0, [pc, #240]	; (8003640 <main+0x26c>)
 800354e:	f00a f879 	bl	800d644 <puts>
				  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8003552:	2200      	movs	r2, #0
 8003554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003558:	483a      	ldr	r0, [pc, #232]	; (8003644 <main+0x270>)
 800355a:	f002 fcc1 	bl	8005ee0 <HAL_GPIO_WritePin>
				break;
 800355e:	e058      	b.n	8003612 <main+0x23e>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <main+0x248>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4618      	mov	r0, r3
 8003566:	f009 ffe7 	bl	800d538 <iprintf>
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <main+0x24c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f009 ffe2 	bl	800d538 <iprintf>
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <main+0x248>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4618      	mov	r0, r3
 800357a:	f009 ffdd 	bl	800d538 <iprintf>
 800357e:	4832      	ldr	r0, [pc, #200]	; (8003648 <main+0x274>)
 8003580:	f00a f860 	bl	800d644 <puts>
				BSP_CAMERA_Suspend();
 8003584:	f7ff fa6c 	bl	8002a60 <BSP_CAMERA_Suspend>
				break;
 8003588:	e043      	b.n	8003612 <main+0x23e>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <main+0x248>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4618      	mov	r0, r3
 8003590:	f009 ffd2 	bl	800d538 <iprintf>
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <main+0x24c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f009 ffcd 	bl	800d538 <iprintf>
 800359e:	4b1f      	ldr	r3, [pc, #124]	; (800361c <main+0x248>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f009 ffc8 	bl	800d538 <iprintf>
 80035a8:	4828      	ldr	r0, [pc, #160]	; (800364c <main+0x278>)
 80035aa:	f00a f84b 	bl	800d644 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b4:	4823      	ldr	r0, [pc, #140]	; (8003644 <main+0x270>)
 80035b6:	f002 fc93 	bl	8005ee0 <HAL_GPIO_WritePin>
				break;
 80035ba:	e02a      	b.n	8003612 <main+0x23e>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <main+0x248>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f009 ffb9 	bl	800d538 <iprintf>
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <main+0x24c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f009 ffb4 	bl	800d538 <iprintf>
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <main+0x248>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f009 ffaf 	bl	800d538 <iprintf>
 80035da:	481d      	ldr	r0, [pc, #116]	; (8003650 <main+0x27c>)
 80035dc:	f00a f832 	bl	800d644 <puts>
				BSP_CAMERA_Resume();
 80035e0:	f7ff fa48 	bl	8002a74 <BSP_CAMERA_Resume>
				break;
 80035e4:	e015      	b.n	8003612 <main+0x23e>
				printf_dbg("JOY_SEL was pressed!\r\n");
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <main+0x248>)
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f009 ffa4 	bl	800d538 <iprintf>
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <main+0x24c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f009 ff9f 	bl	800d538 <iprintf>
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <main+0x248>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4618      	mov	r0, r3
 8003600:	f009 ff9a 	bl	800d538 <iprintf>
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <main+0x280>)
 8003606:	f00a f81d 	bl	800d644 <puts>
				break;
 800360a:	e002      	b.n	8003612 <main+0x23e>
		}

	  }
 800360c:	bf00      	nop
 800360e:	e768      	b.n	80034e2 <main+0x10e>
				break;
 8003610:	bf00      	nop
  {
 8003612:	e766      	b.n	80034e2 <main+0x10e>
 8003614:	20000530 	.word	0x20000530
 8003618:	2000052c 	.word	0x2000052c
 800361c:	200000cc 	.word	0x200000cc
 8003620:	200000ec 	.word	0x200000ec
 8003624:	0800e00c 	.word	0x0800e00c
 8003628:	0800e01c 	.word	0x0800e01c
 800362c:	0800e024 	.word	0x0800e024
 8003630:	2001c774 	.word	0x2001c774
 8003634:	0801008c 	.word	0x0801008c
 8003638:	0800e030 	.word	0x0800e030
 800363c:	2001c764 	.word	0x2001c764
 8003640:	0800e03c 	.word	0x0800e03c
 8003644:	48000400 	.word	0x48000400
 8003648:	0800e054 	.word	0x0800e054
 800364c:	0800e06c 	.word	0x0800e06c
 8003650:	0800e084 	.word	0x0800e084
 8003654:	0800e09c 	.word	0x0800e09c

08003658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b096      	sub	sp, #88	; 0x58
 800365c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	2244      	movs	r2, #68	; 0x44
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f009 fb90 	bl	800cd8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800366c:	463b      	mov	r3, r7
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800367a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800367e:	f003 fb29 	bl	8006cd4 <HAL_PWREx_ControlVoltageScaling>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003688:	f000 fc94 	bl	8003fb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800368c:	2322      	movs	r3, #34	; 0x22
 800368e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003696:	2301      	movs	r3, #1
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800369a:	2340      	movs	r3, #64	; 0x40
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369e:	2302      	movs	r3, #2
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a2:	2302      	movs	r3, #2
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80036aa:	230a      	movs	r3, #10
 80036ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ae:	2302      	movs	r3, #2
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036b2:	2302      	movs	r3, #2
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036b6:	2302      	movs	r3, #2
 80036b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 fb6e 	bl	8006da0 <HAL_RCC_OscConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SystemClock_Config+0x76>
  {
    Error_Handler();
 80036ca:	f000 fc73 	bl	8003fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ce:	230f      	movs	r3, #15
 80036d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d2:	2303      	movs	r3, #3
 80036d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036e2:	463b      	mov	r3, r7
 80036e4:	2104      	movs	r1, #4
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 ff74 	bl	80075d4 <HAL_RCC_ClockConfig>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80036f2:	f000 fc5f 	bl	8003fb4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 80036f6:	2200      	movs	r2, #0
 80036f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80036fc:	2000      	movs	r0, #0
 80036fe:	f004 f869 	bl	80077d4 <HAL_RCC_MCOConfig>
}
 8003702:	bf00      	nop
 8003704:	3758      	adds	r7, #88	; 0x58
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	2055      	movs	r0, #85	; 0x55
 8003714:	f001 facb 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003718:	2055      	movs	r0, #85	; 0x55
 800371a:	f001 fae4 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	2028      	movs	r0, #40	; 0x28
 8003724:	f001 fac3 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003728:	2028      	movs	r0, #40	; 0x28
 800372a:	f001 fadc 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	2017      	movs	r0, #23
 8003734:	f001 fabb 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003738:	2017      	movs	r0, #23
 800373a:	f001 fad4 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2026      	movs	r0, #38	; 0x26
 8003744:	f001 fab3 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003748:	2026      	movs	r0, #38	; 0x26
 800374a:	f001 facc 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <MX_DCMI_Init+0x60>)
 800375a:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <MX_DCMI_Init+0x64>)
 800375c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003766:	2220      	movs	r2, #32
 8003768:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <MX_DCMI_Init+0x60>)
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <MX_DCMI_Init+0x60>)
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003784:	2208      	movs	r2, #8
 8003786:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <MX_DCMI_Init+0x60>)
 800378a:	2200      	movs	r2, #0
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003790:	2200      	movs	r2, #0
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <MX_DCMI_Init+0x60>)
 8003796:	2200      	movs	r2, #0
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <MX_DCMI_Init+0x60>)
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <MX_DCMI_Init+0x60>)
 80037a2:	f001 fac9 	bl	8004d38 <HAL_DCMI_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80037ac:	f000 fc02 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	2000027c 	.word	0x2000027c
 80037b8:	50050000 	.word	0x50050000

080037bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <MX_DMA2D_Init+0x6c>)
 80037c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037ce:	2202      	movs	r2, #2
 80037d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037da:	2200      	movs	r2, #0
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037e0:	2202      	movs	r2, #2
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037ec:	22ff      	movs	r2, #255	; 0xff
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <MX_DMA2D_Init+0x68>)
 80037fe:	f001 fe15 	bl	800542c <HAL_DMA2D_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8003808:	f000 fbd4 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800380c:	2101      	movs	r1, #1
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_DMA2D_Init+0x68>)
 8003810:	f001 ffa8 	bl	8005764 <HAL_DMA2D_ConfigLayer>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800381a:	f000 fbcb 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000328 	.word	0x20000328
 8003828:	4002b000 	.word	0x4002b000

0800382c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <MX_SDMMC1_SD_Init+0x40>)
 8003834:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 8003850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003854:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <MX_SDMMC1_SD_Init+0x3c>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000380 	.word	0x20000380
 800386c:	40012800 	.word	0x40012800

08003870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <MX_USART2_UART_Init+0x5c>)
 8003878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 800387c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 8003896:	220c      	movs	r2, #12
 8003898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_USART2_UART_Init+0x58>)
 80038b4:	f007 fa08 	bl	800acc8 <HAL_UART_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038be:	f000 fb79 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000404 	.word	0x20000404
 80038cc:	40004400 	.word	0x40004400

080038d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <MX_DMA_Init+0x38>)
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <MX_DMA_Init+0x38>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6493      	str	r3, [r2, #72]	; 0x48
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <MX_DMA_Init+0x38>)
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	2044      	movs	r0, #68	; 0x44
 80038f4:	f001 f9db 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80038f8:	2044      	movs	r0, #68	; 0x44
 80038fa:	f001 f9f4 	bl	8004ce6 <HAL_NVIC_EnableIRQ>

}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8003912:	463b      	mov	r3, r7
 8003914:	2220      	movs	r2, #32
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f009 fa37 	bl	800cd8c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <MX_FMC_Init+0x150>)
 8003920:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003924:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003926:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <MX_FMC_Init+0x150>)
 8003928:	4a4d      	ldr	r2, [pc, #308]	; (8003a60 <MX_FMC_Init+0x154>)
 800392a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800392c:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <MX_FMC_Init+0x150>)
 800392e:	2202      	movs	r2, #2
 8003930:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003932:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <MX_FMC_Init+0x150>)
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <MX_FMC_Init+0x150>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <MX_FMC_Init+0x150>)
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003944:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <MX_FMC_Init+0x150>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800394a:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <MX_FMC_Init+0x150>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003950:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <MX_FMC_Init+0x150>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003956:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <MX_FMC_Init+0x150>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <MX_FMC_Init+0x150>)
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003962:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <MX_FMC_Init+0x150>)
 8003964:	2200      	movs	r2, #0
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003968:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <MX_FMC_Init+0x150>)
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <MX_FMC_Init+0x150>)
 8003970:	2200      	movs	r2, #0
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <MX_FMC_Init+0x150>)
 8003976:	2200      	movs	r2, #0
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <MX_FMC_Init+0x150>)
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <MX_FMC_Init+0x150>)
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003986:	230f      	movs	r3, #15
 8003988:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800398a:	230f      	movs	r3, #15
 800398c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800398e:	23ff      	movs	r3, #255	; 0xff
 8003990:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003992:	230f      	movs	r3, #15
 8003994:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003996:	2310      	movs	r3, #16
 8003998:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800399a:	2311      	movs	r3, #17
 800399c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80039a2:	463b      	mov	r3, r7
 80039a4:	2200      	movs	r2, #0
 80039a6:	4619      	mov	r1, r3
 80039a8:	482c      	ldr	r0, [pc, #176]	; (8003a5c <MX_FMC_Init+0x150>)
 80039aa:	f007 f945 	bl	800ac38 <HAL_SRAM_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80039b4:	f000 fafe 	bl	8003fb4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <MX_FMC_Init+0x158>)
 80039ba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80039be:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <MX_FMC_Init+0x158>)
 80039c2:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <MX_FMC_Init+0x154>)
 80039c4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <MX_FMC_Init+0x158>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <MX_FMC_Init+0x158>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <MX_FMC_Init+0x158>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <MX_FMC_Init+0x158>)
 80039da:	2200      	movs	r2, #0
 80039dc:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <MX_FMC_Init+0x158>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <MX_FMC_Init+0x158>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <MX_FMC_Init+0x158>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <MX_FMC_Init+0x158>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <MX_FMC_Init+0x158>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <MX_FMC_Init+0x158>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003a20:	230f      	movs	r3, #15
 8003a22:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003a24:	230f      	movs	r3, #15
 8003a26:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003a28:	23ff      	movs	r3, #255	; 0xff
 8003a2a:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003a30:	2310      	movs	r3, #16
 8003a32:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003a34:	2311      	movs	r3, #17
 8003a36:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4808      	ldr	r0, [pc, #32]	; (8003a64 <MX_FMC_Init+0x158>)
 8003a44:	f007 f8f8 	bl	800ac38 <HAL_SRAM_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 8003a4e:	f000 fab1 	bl	8003fb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000488 	.word	0x20000488
 8003a60:	a0000104 	.word	0xa0000104
 8003a64:	200004d8 	.word	0x200004d8

08003a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a7e:	4bb2      	ldr	r3, [pc, #712]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	4ab1      	ldr	r2, [pc, #708]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a8a:	4baf      	ldr	r3, [pc, #700]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a96:	4bac      	ldr	r3, [pc, #688]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	4aab      	ldr	r2, [pc, #684]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa2:	4ba9      	ldr	r3, [pc, #676]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aae:	4ba6      	ldr	r3, [pc, #664]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	4aa5      	ldr	r2, [pc, #660]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ab4:	f043 0310 	orr.w	r3, r3, #16
 8003ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aba:	4ba3      	ldr	r3, [pc, #652]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4ba0      	ldr	r3, [pc, #640]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4a9f      	ldr	r2, [pc, #636]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	4b9d      	ldr	r3, [pc, #628]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	4b9a      	ldr	r3, [pc, #616]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	4a99      	ldr	r2, [pc, #612]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aea:	4b97      	ldr	r3, [pc, #604]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003af6:	4b94      	ldr	r3, [pc, #592]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	4a93      	ldr	r2, [pc, #588]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b02:	4b91      	ldr	r3, [pc, #580]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8003b0e:	f003 f937 	bl	8006d80 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b12:	4b8d      	ldr	r3, [pc, #564]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a8c      	ldr	r2, [pc, #560]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2a:	4b87      	ldr	r3, [pc, #540]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	4a86      	ldr	r2, [pc, #536]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b36:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b42:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	4a80      	ldr	r2, [pc, #512]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4e:	4b7e      	ldr	r3, [pc, #504]	; (8003d48 <MX_GPIO_Init+0x2e0>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2114      	movs	r1, #20
 8003b5e:	487b      	ldr	r0, [pc, #492]	; (8003d4c <MX_GPIO_Init+0x2e4>)
 8003b60:	f002 f9be 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2101      	movs	r1, #1
 8003b68:	4879      	ldr	r0, [pc, #484]	; (8003d50 <MX_GPIO_Init+0x2e8>)
 8003b6a:	f002 f9b9 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2143      	movs	r1, #67	; 0x43
 8003b72:	4876      	ldr	r0, [pc, #472]	; (8003d4c <MX_GPIO_Init+0x2e4>)
 8003b74:	f002 f9b4 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	4875      	ldr	r0, [pc, #468]	; (8003d54 <MX_GPIO_Init+0x2ec>)
 8003b7e:	f002 f9af 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 8003b82:	2201      	movs	r2, #1
 8003b84:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003b88:	4873      	ldr	r0, [pc, #460]	; (8003d58 <MX_GPIO_Init+0x2f0>)
 8003b8a:	f002 f9a9 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8003b8e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	486a      	ldr	r0, [pc, #424]	; (8003d50 <MX_GPIO_Init+0x2e8>)
 8003ba6:	f001 ff17 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8003baa:	2304      	movs	r3, #4
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4862      	ldr	r0, [pc, #392]	; (8003d4c <MX_GPIO_Init+0x2e4>)
 8003bc2:	f001 ff09 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8003bc6:	2330      	movs	r3, #48	; 0x30
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bde:	4619      	mov	r1, r3
 8003be0:	485d      	ldr	r0, [pc, #372]	; (8003d58 <MX_GPIO_Init+0x2f0>)
 8003be2:	f001 fef9 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8003be6:	2301      	movs	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bea:	2301      	movs	r3, #1
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4854      	ldr	r0, [pc, #336]	; (8003d50 <MX_GPIO_Init+0x2e8>)
 8003bfe:	f001 feeb 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003c02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c08:	2312      	movs	r3, #18
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c14:	2304      	movs	r3, #4
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	484e      	ldr	r0, [pc, #312]	; (8003d58 <MX_GPIO_Init+0x2f0>)
 8003c20:	f001 feda 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c30:	2303      	movs	r3, #3
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c34:	2307      	movs	r3, #7
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4846      	ldr	r0, [pc, #280]	; (8003d58 <MX_GPIO_Init+0x2f0>)
 8003c40:	f001 feca 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8003c44:	235c      	movs	r3, #92	; 0x5c
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c50:	2300      	movs	r3, #0
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003c54:	230d      	movs	r3, #13
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	483f      	ldr	r0, [pc, #252]	; (8003d5c <MX_GPIO_Init+0x2f4>)
 8003c60:	f001 feba 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8003c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c76:	2302      	movs	r3, #2
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4835      	ldr	r0, [pc, #212]	; (8003d58 <MX_GPIO_Init+0x2f0>)
 8003c82:	f001 fea9 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003c86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c94:	2303      	movs	r3, #3
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	482f      	ldr	r0, [pc, #188]	; (8003d60 <MX_GPIO_Init+0x2f8>)
 8003ca4:	f001 fe98 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4824      	ldr	r0, [pc, #144]	; (8003d4c <MX_GPIO_Init+0x2e4>)
 8003cbc:	f001 fe8c 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8003cc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce0:	f001 fe7a 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8003ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8003cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4816      	ldr	r0, [pc, #88]	; (8003d54 <MX_GPIO_Init+0x2ec>)
 8003cfc:	f001 fe6c 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8003d00:	2343      	movs	r3, #67	; 0x43
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d04:	2301      	movs	r3, #1
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d14:	4619      	mov	r1, r3
 8003d16:	480d      	ldr	r0, [pc, #52]	; (8003d4c <MX_GPIO_Init+0x2e4>)
 8003d18:	f001 fe5e 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8003d1c:	2340      	movs	r3, #64	; 0x40
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <MX_GPIO_Init+0x2ec>)
 8003d34:	f001 fe50 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8003d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e00d      	b.n	8003d64 <MX_GPIO_Init+0x2fc>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	48001c00 	.word	0x48001c00
 8003d50:	48002000 	.word	0x48002000
 8003d54:	48000800 	.word	0x48000800
 8003d58:	48000400 	.word	0x48000400
 8003d5c:	48001000 	.word	0x48001000
 8003d60:	48001800 	.word	0x48001800
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8003d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	488c      	ldr	r0, [pc, #560]	; (8003fa0 <MX_GPIO_Init+0x538>)
 8003d6e:	f001 fe33 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d80:	2300      	movs	r3, #0
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d92:	f001 fe21 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8003d96:	2384      	movs	r3, #132	; 0x84
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da2:	2300      	movs	r3, #0
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003da6:	2306      	movs	r3, #6
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dae:	4619      	mov	r1, r3
 8003db0:	487c      	ldr	r0, [pc, #496]	; (8003fa4 <MX_GPIO_Init+0x53c>)
 8003db2:	f001 fe11 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8003db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dbc:	230b      	movs	r3, #11
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8003dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4877      	ldr	r0, [pc, #476]	; (8003fa8 <MX_GPIO_Init+0x540>)
 8003dcc:	f001 fe04 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dd4:	230b      	movs	r3, #11
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	4870      	ldr	r0, [pc, #448]	; (8003fa4 <MX_GPIO_Init+0x53c>)
 8003de4:	f001 fdf8 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8003de8:	f640 0303 	movw	r3, #2051	; 0x803
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e02:	4619      	mov	r1, r3
 8003e04:	4869      	ldr	r0, [pc, #420]	; (8003fac <MX_GPIO_Init+0x544>)
 8003e06:	f001 fde7 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003e0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	2302      	movs	r3, #2
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e24:	4619      	mov	r1, r3
 8003e26:	485e      	ldr	r0, [pc, #376]	; (8003fa0 <MX_GPIO_Init+0x538>)
 8003e28:	f001 fdd6 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4858      	ldr	r0, [pc, #352]	; (8003fa4 <MX_GPIO_Init+0x53c>)
 8003e42:	f001 fdc9 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8003e46:	2320      	movs	r3, #32
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e52:	2303      	movs	r3, #3
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e56:	2305      	movs	r3, #5
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8003e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e64:	f001 fdb8 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 8003e68:	2310      	movs	r3, #16
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003e6c:	2311      	movs	r3, #17
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e70:	2301      	movs	r3, #1
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	484c      	ldr	r0, [pc, #304]	; (8003fb0 <MX_GPIO_Init+0x548>)
 8003e80:	f001 fdaa 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8003e84:	2312      	movs	r3, #18
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e88:	230b      	movs	r3, #11
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e94:	4619      	mov	r1, r3
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9a:	f001 fd9d 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8003e9e:	23c8      	movs	r3, #200	; 0xc8
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003eae:	230a      	movs	r3, #10
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ebc:	f001 fd8c 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8003ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8003ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4834      	ldr	r0, [pc, #208]	; (8003fa8 <MX_GPIO_Init+0x540>)
 8003ed8:	f001 fd7e 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eea:	2303      	movs	r3, #3
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003eee:	2305      	movs	r3, #5
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	482c      	ldr	r0, [pc, #176]	; (8003fac <MX_GPIO_Init+0x544>)
 8003efa:	f001 fd6d 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8003efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f04:	2311      	movs	r3, #17
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8003f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f14:	4619      	mov	r1, r3
 8003f16:	4825      	ldr	r0, [pc, #148]	; (8003fac <MX_GPIO_Init+0x544>)
 8003f18:	f001 fd5e 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8003f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	481f      	ldr	r0, [pc, #124]	; (8003fac <MX_GPIO_Init+0x544>)
 8003f30:	f001 fd52 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f42:	2300      	movs	r3, #0
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003f46:	230d      	movs	r3, #13
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4816      	ldr	r0, [pc, #88]	; (8003fac <MX_GPIO_Init+0x544>)
 8003f52:	f001 fd41 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8003f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2300      	movs	r3, #0
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003f68:	2306      	movs	r3, #6
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	4619      	mov	r1, r3
 8003f72:	480e      	ldr	r0, [pc, #56]	; (8003fac <MX_GPIO_Init+0x544>)
 8003f74:	f001 fd30 	bl	80059d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f7e:	2311      	movs	r3, #17
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4806      	ldr	r0, [pc, #24]	; (8003fac <MX_GPIO_Init+0x544>)
 8003f92:	f001 fd21 	bl	80059d8 <HAL_GPIO_Init>

}
 8003f96:	bf00      	nop
 8003f98:	3738      	adds	r7, #56	; 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	48001800 	.word	0x48001800
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	48001400 	.word	0x48001400
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	48001c00 	.word	0x48001c00

08003fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <Error_Handler+0x30>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f009 fabb 	bl	800d538 <iprintf>
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <Error_Handler+0x34>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f009 fab6 	bl	800d538 <iprintf>
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <Error_Handler+0x30>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f009 fab1 	bl	800d538 <iprintf>
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <Error_Handler+0x38>)
 8003fd8:	f009 faae 	bl	800d538 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
  __disable_irq();
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <Error_Handler+0x2c>
 8003fe2:	bf00      	nop
 8003fe4:	200000cc 	.word	0x200000cc
 8003fe8:	200000ec 	.word	0x200000ec
 8003fec:	0800e0b4 	.word	0x0800e0b4

08003ff0 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <SD_CheckStatus+0x38>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004000:	f7fe ffde 	bl	8002fc0 <BSP_SD_GetCardState>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <SD_CheckStatus+0x38>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <SD_CheckStatus+0x38>)
 8004018:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800401a:	4b03      	ldr	r3, [pc, #12]	; (8004028 <SD_CheckStatus+0x38>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b2db      	uxtb	r3, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200000f0 	.word	0x200000f0

0800402c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ffd9 	bl	8003ff0 <SD_CheckStatus>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ffcb 	bl	8003ff0 <SD_CheckStatus>
 800405a:	4603      	mov	r3, r0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004078:	f04f 33ff 	mov.w	r3, #4294967295
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7fe ff5d 	bl	8002f40 <BSP_SD_ReadBlocks>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800408c:	bf00      	nop
 800408e:	f7fe ff97 	bl	8002fc0 <BSP_SD_GetCardState>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1fa      	bne.n	800408e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f7fe ff5c 	bl	8002f80 <BSP_SD_WriteBlocks>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80040ce:	bf00      	nop
 80040d0:	f7fe ff76 	bl	8002fc0 <BSP_SD_GetCardState>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1fa      	bne.n	80040d0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	603a      	str	r2, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
 80040f4:	460b      	mov	r3, r1
 80040f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <SD_ioctl+0xa8>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <SD_ioctl+0x28>
 800410c:	2303      	movs	r3, #3
 800410e:	e03b      	b.n	8004188 <SD_ioctl+0xa0>

  switch (cmd)
 8004110:	79bb      	ldrb	r3, [r7, #6]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d833      	bhi.n	800417e <SD_ioctl+0x96>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <SD_ioctl+0x34>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004135 	.word	0x08004135
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004167 	.word	0x08004167
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004132:	e027      	b.n	8004184 <SD_ioctl+0x9c>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe ff5f 	bl	8002ffc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800414a:	e01b      	b.n	8004184 <SD_ioctl+0x9c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe ff53 	bl	8002ffc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	b29a      	uxth	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004164:	e00e      	b.n	8004184 <SD_ioctl+0x9c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe ff46 	bl	8002ffc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8004170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800417c:	e002      	b.n	8004184 <SD_ioctl+0x9c>

  default:
    res = RES_PARERR;
 800417e:	2304      	movs	r3, #4
 8004180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004188:	4618      	mov	r0, r3
 800418a:	3730      	adds	r7, #48	; 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200000f0 	.word	0x200000f0

08004194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <HAL_MspInit+0x44>)
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <HAL_MspInit+0x44>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6613      	str	r3, [r2, #96]	; 0x60
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_MspInit+0x44>)
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_MspInit+0x44>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_MspInit+0x44>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6593      	str	r3, [r2, #88]	; 0x58
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_MspInit+0x44>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4a      	ldr	r2, [pc, #296]	; (8004324 <HAL_DCMI_MspInit+0x148>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	f040 808d 	bne.w	800431a <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800420a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	4a42      	ldr	r2, [pc, #264]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004230:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423c:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004248:	4b37      	ldr	r3, [pc, #220]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4a36      	ldr	r2, [pc, #216]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 800424e:	f043 0310 	orr.w	r3, r3, #16
 8004252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004254:	4b34      	ldr	r3, [pc, #208]	; (8004328 <HAL_DCMI_MspInit+0x14c>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8004260:	f645 7320 	movw	r3, #24352	; 0x5f20
 8004264:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800426e:	2302      	movs	r3, #2
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004272:	230a      	movs	r3, #10
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	4619      	mov	r1, r3
 800427c:	482b      	ldr	r0, [pc, #172]	; (800432c <HAL_DCMI_MspInit+0x150>)
 800427e:	f001 fbab 	bl	80059d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8004282:	23b0      	movs	r3, #176	; 0xb0
 8004284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428e:	2302      	movs	r3, #2
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004292:	230a      	movs	r3, #10
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004296:	f107 031c 	add.w	r3, r7, #28
 800429a:	4619      	mov	r1, r3
 800429c:	4824      	ldr	r0, [pc, #144]	; (8004330 <HAL_DCMI_MspInit+0x154>)
 800429e:	f001 fb9b 	bl	80059d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80042a2:	2320      	movs	r3, #32
 80042a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2302      	movs	r3, #2
 80042a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ae:	2302      	movs	r3, #2
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80042b2:	230a      	movs	r3, #10
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80042b6:	f107 031c 	add.w	r3, r7, #28
 80042ba:	4619      	mov	r1, r3
 80042bc:	481d      	ldr	r0, [pc, #116]	; (8004334 <HAL_DCMI_MspInit+0x158>)
 80042be:	f001 fb8b 	bl	80059d8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_DCMI_MspInit+0x160>)
 80042c6:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ce:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042e0:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ee:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042f2:	2220      	movs	r2, #32
 80042f4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 80042f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80042fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80042fe:	480e      	ldr	r0, [pc, #56]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 8004300:	f000 feae 	bl	8005060 <HAL_DMA_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 800430a:	f7ff fe53 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
 8004314:	4a08      	ldr	r2, [pc, #32]	; (8004338 <HAL_DCMI_MspInit+0x15c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800431a:	bf00      	nop
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	50050000 	.word	0x50050000
 8004328:	40021000 	.word	0x40021000
 800432c:	48001c00 	.word	0x48001c00
 8004330:	48002000 	.word	0x48002000
 8004334:	48001000 	.word	0x48001000
 8004338:	200002e0 	.word	0x200002e0
 800433c:	4002046c 	.word	0x4002046c

08004340 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_DMA2D_MspInit+0x44>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_DMA2D_MspInit+0x48>)
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <HAL_DMA2D_MspInit+0x48>)
 8004358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800435c:	6493      	str	r3, [r2, #72]	; 0x48
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <HAL_DMA2D_MspInit+0x48>)
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	205a      	movs	r0, #90	; 0x5a
 8004370:	f000 fc9d 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004374:	205a      	movs	r0, #90	; 0x5a
 8004376:	f000 fcb6 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	4002b000 	.word	0x4002b000
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b0ae      	sub	sp, #184	; 0xb8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043a4:	f107 0318 	add.w	r3, r7, #24
 80043a8:	228c      	movs	r2, #140	; 0x8c
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f008 fced 	bl	800cd8c <memset>
  if(hsd->Instance==SDMMC1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3f      	ldr	r2, [pc, #252]	; (80044b4 <HAL_SD_MspInit+0x128>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d176      	bne.n	80044aa <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80043bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80043c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80043ca:	2302      	movs	r3, #2
 80043cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80043d2:	2308      	movs	r3, #8
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80043d6:	2302      	movs	r3, #2
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80043da:	2304      	movs	r3, #4
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80043de:	2302      	movs	r3, #2
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80043e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043e8:	f107 0318 	add.w	r3, r7, #24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f003 fb49 	bl	8007a84 <HAL_RCCEx_PeriphCLKConfig>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80043f8:	f7ff fddc 	bl	8003fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 8004402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004406:	6613      	str	r3, [r2, #96]	; 0x60
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 800441a:	f043 0308 	orr.w	r3, r3, #8
 800441e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 8004422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004438:	4b1f      	ldr	r3, [pc, #124]	; (80044b8 <HAL_SD_MspInit+0x12c>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004444:	2304      	movs	r3, #4
 8004446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004456:	2303      	movs	r3, #3
 8004458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800445c:	230c      	movs	r3, #12
 800445e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004462:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004466:	4619      	mov	r1, r3
 8004468:	4814      	ldr	r0, [pc, #80]	; (80044bc <HAL_SD_MspInit+0x130>)
 800446a:	f001 fab5 	bl	80059d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 800446e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004482:	2303      	movs	r3, #3
 8004484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004488:	230c      	movs	r3, #12
 800448a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004492:	4619      	mov	r1, r3
 8004494:	480a      	ldr	r0, [pc, #40]	; (80044c0 <HAL_SD_MspInit+0x134>)
 8004496:	f001 fa9f 	bl	80059d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2031      	movs	r0, #49	; 0x31
 80044a0:	f000 fc05 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80044a4:	2031      	movs	r0, #49	; 0x31
 80044a6:	f000 fc1e 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80044aa:	bf00      	nop
 80044ac:	37b8      	adds	r7, #184	; 0xb8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40012800 	.word	0x40012800
 80044b8:	40021000 	.word	0x40021000
 80044bc:	48000c00 	.word	0x48000c00
 80044c0:	48000800 	.word	0x48000800

080044c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b0ae      	sub	sp, #184	; 0xb8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044dc:	f107 0318 	add.w	r3, r7, #24
 80044e0:	228c      	movs	r2, #140	; 0x8c
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f008 fc51 	bl	800cd8c <memset>
  if(huart->Instance==USART2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <HAL_UART_MspInit+0xf4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d15c      	bne.n	80045ae <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044f8:	2300      	movs	r3, #0
 80044fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044fc:	f107 0318 	add.w	r3, r7, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fabf 	bl	8007a84 <HAL_RCCEx_PeriphCLKConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800450c:	f7ff fd52 	bl	8003fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_UART_MspInit+0xf8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_UART_MspInit+0xf8>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_UART_MspInit+0xf8>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004528:	4b24      	ldr	r3, [pc, #144]	; (80045bc <HAL_UART_MspInit+0xf8>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	4a23      	ldr	r2, [pc, #140]	; (80045bc <HAL_UART_MspInit+0xf8>)
 800452e:	f043 0308 	orr.w	r3, r3, #8
 8004532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_UART_MspInit+0xf8>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_UART_MspInit+0xf8>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_UART_MspInit+0xf8>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_UART_MspInit+0xf8>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004570:	2307      	movs	r3, #7
 8004572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004576:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800457a:	4619      	mov	r1, r3
 800457c:	4810      	ldr	r0, [pc, #64]	; (80045c0 <HAL_UART_MspInit+0xfc>)
 800457e:	f001 fa2b 	bl	80059d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8004582:	2304      	movs	r3, #4
 8004584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004594:	2303      	movs	r3, #3
 8004596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800459a:	2307      	movs	r3, #7
 800459c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80045a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045aa:	f001 fa15 	bl	80059d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045ae:	bf00      	nop
 80045b0:	37b8      	adds	r7, #184	; 0xb8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40004400 	.word	0x40004400
 80045bc:	40021000 	.word	0x40021000
 80045c0:	48000c00 	.word	0x48000c00

080045c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <HAL_FMC_MspInit+0xc4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d14f      	bne.n	8004680 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <HAL_FMC_MspInit+0xc4>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_FMC_MspInit+0xc8>)
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_FMC_MspInit+0xc8>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6513      	str	r3, [r2, #80]	; 0x50
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_FMC_MspInit+0xc8>)
 80045f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80045fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004602:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004610:	230c      	movs	r3, #12
 8004612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	4619      	mov	r1, r3
 8004618:	481d      	ldr	r0, [pc, #116]	; (8004690 <HAL_FMC_MspInit+0xcc>)
 800461a:	f001 f9dd 	bl	80059d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 800461e:	f240 233f 	movw	r3, #575	; 0x23f
 8004622:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462c:	2303      	movs	r3, #3
 800462e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004630:	230c      	movs	r3, #12
 8004632:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4816      	ldr	r0, [pc, #88]	; (8004694 <HAL_FMC_MspInit+0xd0>)
 800463a:	f001 f9cd 	bl	80059d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800463e:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 8004642:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464c:	2303      	movs	r3, #3
 800464e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004650:	230c      	movs	r3, #12
 8004652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	4619      	mov	r1, r3
 8004658:	480f      	ldr	r0, [pc, #60]	; (8004698 <HAL_FMC_MspInit+0xd4>)
 800465a:	f001 f9bd 	bl	80059d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800465e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004662:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004664:	2302      	movs	r3, #2
 8004666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466c:	2303      	movs	r3, #3
 800466e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004670:	230c      	movs	r3, #12
 8004672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <HAL_FMC_MspInit+0xd8>)
 800467a:	f001 f9ad 	bl	80059d8 <HAL_GPIO_Init>
 800467e:	e000      	b.n	8004682 <HAL_FMC_MspInit+0xbe>
    return;
 8004680:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	2001c768 	.word	0x2001c768
 800468c:	40021000 	.word	0x40021000
 8004690:	48001000 	.word	0x48001000
 8004694:	48001800 	.word	0x48001800
 8004698:	48000c00 	.word	0x48000c00
 800469c:	48001400 	.word	0x48001400

080046a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80046a8:	f7ff ff8c 	bl	80045c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046b8:	e7fe      	b.n	80046b8 <NMI_Handler+0x4>

080046ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046be:	e7fe      	b.n	80046be <HardFault_Handler+0x4>

080046c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046c4:	e7fe      	b.n	80046c4 <MemManage_Handler+0x4>

080046c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ca:	e7fe      	b.n	80046ca <BusFault_Handler+0x4>

080046cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046d0:	e7fe      	b.n	80046d0 <UsageFault_Handler+0x4>

080046d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046ee:	b480      	push	{r7}
 80046f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046f2:	bf00      	nop
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004700:	f000 f992 	bl	8004a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 800470c:	2020      	movs	r0, #32
 800470e:	f001 fbff 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8004712:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004716:	f001 fbfb 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 800471a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800471e:	f001 fbf7 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <USART2_IRQHandler+0x10>)
 800472e:	f006 fbad 	bl	800ae8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000404 	.word	0x20000404

0800473c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8004740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004744:	f001 fbe4 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8004748:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800474c:	f001 fbe0 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 8004750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004754:	f001 fbdc 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8004758:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800475c:	f001 fbd8 	bl	8005f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}

08004764 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <SDMMC1_IRQHandler+0x10>)
 800476a:	f005 fa41 	bl	8009bf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000380 	.word	0x20000380

08004778 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <DMA2_Channel6_IRQHandler+0x10>)
 800477e:	f000 fda6 	bl	80052ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200002e0 	.word	0x200002e0

0800478c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DCMI_IRQHandler+0x10>)
 8004792:	f000 fbd1 	bl	8004f38 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000027c 	.word	0x2000027c

080047a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA2D_IRQHandler+0x10>)
 80047a6:	f000 fecd 	bl	8005544 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000328 	.word	0x20000328

080047b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
	return 1;
 80047b8:	2301      	movs	r3, #1
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_kill>:

int _kill(int pid, int sig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047ce:	f008 fa99 	bl	800cd04 <__errno>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2216      	movs	r2, #22
 80047d6:	601a      	str	r2, [r3, #0]
	return -1;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_exit>:

void _exit (int status)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047ec:	f04f 31ff 	mov.w	r1, #4294967295
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ffe7 	bl	80047c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047f6:	e7fe      	b.n	80047f6 <_exit+0x12>

080047f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e00a      	b.n	8004820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800480a:	f3af 8000 	nop.w
 800480e:	4601      	mov	r1, r0
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60ba      	str	r2, [r7, #8]
 8004816:	b2ca      	uxtb	r2, r1
 8004818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3301      	adds	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	dbf0      	blt.n	800480a <_read+0x12>
	}

return len;
 8004828:	687b      	ldr	r3, [r7, #4]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	return -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800485a:	605a      	str	r2, [r3, #4]
	return 0;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <_isatty>:

int _isatty(int file)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	return 1;
 8004872:	2301      	movs	r3, #1
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
	return 0;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <_sbrk+0x5c>)
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <_sbrk+0x60>)
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <_sbrk+0x64>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <_sbrk+0x64>)
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <_sbrk+0x68>)
 80048bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <_sbrk+0x64>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048cc:	f008 fa1a 	bl	800cd04 <__errno>
 80048d0:	4603      	mov	r3, r0
 80048d2:	220c      	movs	r2, #12
 80048d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	e009      	b.n	80048f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <_sbrk+0x64>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <_sbrk+0x64>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <_sbrk+0x64>)
 80048ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20050000 	.word	0x20050000
 80048fc:	00000400 	.word	0x00000400
 8004900:	2001c76c 	.word	0x2001c76c
 8004904:	2001c798 	.word	0x2001c798

08004908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <SystemInit+0x20>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <SystemInit+0x20>)
 8004914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800492c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004964 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004930:	f7ff ffea 	bl	8004908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004934:	480c      	ldr	r0, [pc, #48]	; (8004968 <LoopForever+0x6>)
  ldr r1, =_edata
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <LoopForever+0xe>)
  movs r3, #0
 800493a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800493c:	e002      	b.n	8004944 <LoopCopyDataInit>

0800493e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800493e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004942:	3304      	adds	r3, #4

08004944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004948:	d3f9      	bcc.n	800493e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800494c:	4c0a      	ldr	r4, [pc, #40]	; (8004978 <LoopForever+0x16>)
  movs r3, #0
 800494e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004950:	e001      	b.n	8004956 <LoopFillZerobss>

08004952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004954:	3204      	adds	r2, #4

08004956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004958:	d3fb      	bcc.n	8004952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800495a:	f008 f9eb 	bl	800cd34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800495e:	f7fe fd39 	bl	80033d4 <main>

08004962 <LoopForever>:

LoopForever:
    b LoopForever
 8004962:	e7fe      	b.n	8004962 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004964:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800496c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8004970:	080101cc 	.word	0x080101cc
  ldr r2, =_sbss
 8004974:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8004978:	2001c794 	.word	0x2001c794

0800497c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800497c:	e7fe      	b.n	800497c <ADC1_2_IRQHandler>

0800497e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004988:	2003      	movs	r0, #3
 800498a:	f000 f985 	bl	8004c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800498e:	2000      	movs	r0, #0
 8004990:	f000 f80e 	bl	80049b0 <HAL_InitTick>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	e001      	b.n	80049a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049a0:	f7ff fbf8 	bl	8004194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049a4:	79fb      	ldrb	r3, [r7, #7]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_InitTick+0x6c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d023      	beq.n	8004a0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_InitTick+0x70>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_InitTick+0x6c>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f99f 	bl	8004d1e <HAL_SYSTICK_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b0f      	cmp	r3, #15
 80049ea:	d809      	bhi.n	8004a00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049ec:	2200      	movs	r2, #0
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	f000 f95b 	bl	8004cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_InitTick+0x74>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e007      	b.n	8004a10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e004      	b.n	8004a10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	e001      	b.n	8004a10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200000fc 	.word	0x200000fc
 8004a20:	200000f4 	.word	0x200000f4
 8004a24:	200000f8 	.word	0x200000f8

08004a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_IncTick+0x20>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_IncTick+0x24>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <HAL_IncTick+0x24>)
 8004a3a:	6013      	str	r3, [r2, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	200000fc 	.word	0x200000fc
 8004a4c:	2001c770 	.word	0x2001c770

08004a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return uwTick;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_GetTick+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2001c770 	.word	0x2001c770

08004a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7ff ffee 	bl	8004a50 <HAL_GetTick>
 8004a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d005      	beq.n	8004a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_Delay+0x44>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a8e:	bf00      	nop
 8004a90:	f7ff ffde 	bl	8004a50 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d8f7      	bhi.n	8004a90 <HAL_Delay+0x28>
  {
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200000fc 	.word	0x200000fc

08004ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004acc:	4013      	ands	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae2:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	60d3      	str	r3, [r2, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <__NVIC_GetPriorityGrouping+0x18>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f003 0307 	and.w	r3, r3, #7
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db0b      	blt.n	8004b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <__NVIC_EnableIRQ+0x38>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2001      	movs	r0, #1
 8004b36:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e100 	.word	0xe000e100

08004b50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db12      	blt.n	8004b88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	490a      	ldr	r1, [pc, #40]	; (8004b94 <__NVIC_DisableIRQ+0x44>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2001      	movs	r0, #1
 8004b72:	fa00 f202 	lsl.w	r2, r0, r2
 8004b76:	3320      	adds	r3, #32
 8004b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b7c:	f3bf 8f4f 	dsb	sy
}
 8004b80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b82:	f3bf 8f6f 	isb	sy
}
 8004b86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000e100 	.word	0xe000e100

08004b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db0a      	blt.n	8004bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	490c      	ldr	r1, [pc, #48]	; (8004be4 <__NVIC_SetPriority+0x4c>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	440b      	add	r3, r1
 8004bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc0:	e00a      	b.n	8004bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4908      	ldr	r1, [pc, #32]	; (8004be8 <__NVIC_SetPriority+0x50>)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	3b04      	subs	r3, #4
 8004bd0:	0112      	lsls	r2, r2, #4
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	761a      	strb	r2, [r3, #24]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000e100 	.word	0xe000e100
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f1c3 0307 	rsb	r3, r3, #7
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	bf28      	it	cs
 8004c0a:	2304      	movcs	r3, #4
 8004c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3304      	adds	r3, #4
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d902      	bls.n	8004c1c <NVIC_EncodePriority+0x30>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3b03      	subs	r3, #3
 8004c1a:	e000      	b.n	8004c1e <NVIC_EncodePriority+0x32>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	401a      	ands	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c34:	f04f 31ff 	mov.w	r1, #4294967295
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	43d9      	mvns	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	4313      	orrs	r3, r2
         );
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c64:	d301      	bcc.n	8004c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00f      	b.n	8004c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <SysTick_Config+0x40>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c72:	210f      	movs	r1, #15
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	f7ff ff8e 	bl	8004b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <SysTick_Config+0x40>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <SysTick_Config+0x40>)
 8004c84:	2207      	movs	r2, #7
 8004c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	e000e010 	.word	0xe000e010

08004c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff05 	bl	8004ab0 <__NVIC_SetPriorityGrouping>
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc0:	f7ff ff1a 	bl	8004af8 <__NVIC_GetPriorityGrouping>
 8004cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f7ff ff8e 	bl	8004bec <NVIC_EncodePriority>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff5d 	bl	8004b98 <__NVIC_SetPriority>
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff0d 	bl	8004b14 <__NVIC_EnableIRQ>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff1d 	bl	8004b50 <__NVIC_DisableIRQ>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff94 	bl	8004c54 <SysTick_Config>
 8004d2c:	4603      	mov	r3, r0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e075      	b.n	8004e36 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fa3c 	bl	80041dc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <HAL_DCMI_Init+0x108>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004dae:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004dba:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004dc6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004dd2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004dde:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d112      	bne.n	8004e16 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7f1b      	ldrb	r3, [r3, #28]
 8004df4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7f5b      	ldrb	r3, [r3, #29]
 8004dfa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004dfc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7f9b      	ldrb	r3, [r3, #30]
 8004e02:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7fdb      	ldrb	r3, [r3, #31]
 8004e0c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004e12:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004e14:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 021f 	orr.w	r2, r2, #31
 8004e24:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	ffe0f007 	.word	0xffe0f007

08004e44 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_DCMI_Suspend+0x16>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e03d      	b.n	8004ed6 <HAL_DCMI_Suspend+0x92>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d12e      	bne.n	8004ecc <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2205      	movs	r2, #5
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e86:	f7ff fde3 	bl	8004a50 <HAL_GetTick>
 8004e8a:	60f8      	str	r0, [r7, #12]

    /* Check if the DCMI capture is effectively disabled */
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8004e8c:	e017      	b.n	8004ebe <HAL_DCMI_Suspend+0x7a>
    {
      if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 8004e8e:	f7ff fddf 	bl	8004a50 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9c:	d90f      	bls.n	8004ebe <HAL_DCMI_Suspend+0x7a>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00b      	b.n	8004ed6 <HAL_DCMI_Suspend+0x92>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e0      	bne.n	8004e8e <HAL_DCMI_Suspend+0x4a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_DCMI_Resume+0x16>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e01a      	b.n	8004f2a <HAL_DCMI_Resume+0x4c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d10b      	bne.n	8004f20 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2204      	movs	r2, #4
 8004f58:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2202      	movs	r2, #2
 8004f76:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d014      	beq.n	8004fb6 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	4a24      	ldr	r2, [pc, #144]	; (800502c <HAL_DCMI_IRQHandler+0xf4>)
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f953 	bl	800524c <HAL_DMA_Abort_IT>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f83d 	bl	8005030 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fd fd5d 	bl	8002a88 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d006      	beq.n	8004fe6 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fd62 	bl	8002aaa <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d019      	beq.n	8005024 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d10b      	bne.n	8005016 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 021e 	bic.w	r2, r2, #30
 800500c:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fe f9b2 	bl	8003388 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	08005031 	.word	0x08005031

08005030 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7fd fd3a 	bl	8002acc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e098      	b.n	80051a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <HAL_DMA_Init+0x150>)
 800507a:	429a      	cmp	r2, r3
 800507c:	d80f      	bhi.n	800509e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4b4b      	ldr	r3, [pc, #300]	; (80051b4 <HAL_DMA_Init+0x154>)
 8005086:	4413      	add	r3, r2
 8005088:	4a4b      	ldr	r2, [pc, #300]	; (80051b8 <HAL_DMA_Init+0x158>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	009a      	lsls	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a48      	ldr	r2, [pc, #288]	; (80051bc <HAL_DMA_Init+0x15c>)
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
 800509c:	e00e      	b.n	80050bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <HAL_DMA_Init+0x160>)
 80050a6:	4413      	add	r3, r2
 80050a8:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <HAL_DMA_Init+0x158>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a42      	ldr	r2, [pc, #264]	; (80051c4 <HAL_DMA_Init+0x164>)
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005116:	d039      	beq.n	800518c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	4a27      	ldr	r2, [pc, #156]	; (80051bc <HAL_DMA_Init+0x15c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d11a      	bne.n	8005158 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <HAL_DMA_Init+0x168>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f003 031c 	and.w	r3, r3, #28
 800512e:	210f      	movs	r1, #15
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	4924      	ldr	r1, [pc, #144]	; (80051c8 <HAL_DMA_Init+0x168>)
 8005138:	4013      	ands	r3, r2
 800513a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_DMA_Init+0x168>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	f003 031c 	and.w	r3, r3, #28
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	491d      	ldr	r1, [pc, #116]	; (80051c8 <HAL_DMA_Init+0x168>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
 8005156:	e019      	b.n	800518c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005158:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_DMA_Init+0x16c>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005160:	f003 031c 	and.w	r3, r3, #28
 8005164:	210f      	movs	r1, #15
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	4917      	ldr	r1, [pc, #92]	; (80051cc <HAL_DMA_Init+0x16c>)
 800516e:	4013      	ands	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_DMA_Init+0x16c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f003 031c 	and.w	r3, r3, #28
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	4911      	ldr	r1, [pc, #68]	; (80051cc <HAL_DMA_Init+0x16c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40020407 	.word	0x40020407
 80051b4:	bffdfff8 	.word	0xbffdfff8
 80051b8:	cccccccd 	.word	0xcccccccd
 80051bc:	40020000 	.word	0x40020000
 80051c0:	bffdfbf8 	.word	0xbffdfbf8
 80051c4:	40020400 	.word	0x40020400
 80051c8:	400200a8 	.word	0x400200a8
 80051cc:	400204a8 	.word	0x400204a8

080051d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d008      	beq.n	80051fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e022      	b.n	8005240 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 020e 	bic.w	r2, r2, #14
 8005208:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f003 021c 	and.w	r2, r3, #28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2101      	movs	r1, #1
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d005      	beq.n	8005270 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2204      	movs	r2, #4
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	e029      	b.n	80052c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 020e 	bic.w	r2, r2, #14
 800527e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0201 	bic.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005294:	f003 021c 	and.w	r2, r3, #28
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
    }
  }
  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f003 031c 	and.w	r3, r3, #28
 80052ee:	2204      	movs	r2, #4
 80052f0:	409a      	lsls	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d026      	beq.n	8005348 <HAL_DMA_IRQHandler+0x7a>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d021      	beq.n	8005348 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0204 	bic.w	r2, r2, #4
 8005320:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	f003 021c 	and.w	r2, r3, #28
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2104      	movs	r1, #4
 8005330:	fa01 f202 	lsl.w	r2, r1, r2
 8005334:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	2b00      	cmp	r3, #0
 800533c:	d071      	beq.n	8005422 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005346:	e06c      	b.n	8005422 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	f003 031c 	and.w	r3, r3, #28
 8005350:	2202      	movs	r2, #2
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02e      	beq.n	80053ba <HAL_DMA_IRQHandler+0xec>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d029      	beq.n	80053ba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 020a 	bic.w	r2, r2, #10
 8005382:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	f003 021c 	and.w	r2, r3, #28
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	2102      	movs	r1, #2
 800539a:	fa01 f202 	lsl.w	r2, r1, r2
 800539e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d038      	beq.n	8005422 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053b8:	e033      	b.n	8005422 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	f003 031c 	and.w	r3, r3, #28
 80053c2:	2208      	movs	r2, #8
 80053c4:	409a      	lsls	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d02a      	beq.n	8005424 <HAL_DMA_IRQHandler+0x156>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d025      	beq.n	8005424 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 020e 	bic.w	r2, r2, #14
 80053e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f003 021c 	and.w	r2, r3, #28
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f202 	lsl.w	r2, r1, r2
 80053fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005422:	bf00      	nop
 8005424:	bf00      	nop
}
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e04b      	b.n	80054d6 <HAL_DMA2D_Init+0xaa>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fe ff74 	bl	8004340 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
#else
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	f023 0107 	bic.w	r1, r3, #7
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005496:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d1      	ldr	r1, [r2, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	051a      	lsls	r2, r3, #20
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	055b      	lsls	r3, r3, #21
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_DMA2D_Start_IT>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                     uint32_t Height)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af02      	add	r7, sp, #8
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_DMA2D_Start_IT+0x1c>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e020      	b.n	800553c <HAL_DMA2D_Start_IT+0x5e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f9c3 	bl	80058a0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005528:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d026      	beq.n	80055b4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d021      	beq.n	80055b4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800557e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f043 0201 	orr.w	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2204      	movs	r2, #4
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d026      	beq.n	800560c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d021      	beq.n	800560c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2220      	movs	r2, #32
 80055de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f043 0202 	orr.w	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d026      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561c:	2b00      	cmp	r3, #0
 800561e:	d021      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d013      	beq.n	8005696 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2204      	movs	r2, #4
 800568e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f853 	bl	800573c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d024      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01f      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2202      	movs	r2, #2
 80056c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01f      	beq.n	8005734 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01a      	beq.n	8005734 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800570c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2210      	movs	r2, #16
 8005714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f80e 	bl	8005750 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_DMA2D_ConfigLayer+0x20>
 8005780:	2302      	movs	r3, #2
 8005782:	e084      	b.n	800588e <HAL_DMA2D_ConfigLayer+0x12a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	4413      	add	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	3320      	adds	r3, #32
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80057c4:	4b35      	ldr	r3, [pc, #212]	; (800589c <HAL_DMA2D_ConfigLayer+0x138>)
 80057c6:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b0a      	cmp	r3, #10
 80057ce:	d003      	beq.n	80057d8 <HAL_DMA2D_ConfigLayer+0x74>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d107      	bne.n	80057e8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e005      	b.n	80057f4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d120      	bne.n	800583c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	43db      	mvns	r3, r3
 8005804:	ea02 0103 	and.w	r1, r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	430a      	orrs	r2, r1
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b0a      	cmp	r3, #10
 8005822:	d003      	beq.n	800582c <HAL_DMA2D_ConfigLayer+0xc8>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b09      	cmp	r3, #9
 800582a:	d127      	bne.n	800587c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005838:	629a      	str	r2, [r3, #40]	; 0x28
 800583a:	e01f      	b.n	800587c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	43db      	mvns	r3, r3
 8005846:	ea02 0103 	and.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	430a      	orrs	r2, r1
 8005852:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b0a      	cmp	r3, #10
 8005864:	d003      	beq.n	800586e <HAL_DMA2D_ConfigLayer+0x10a>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b09      	cmp	r3, #9
 800586c:	d106      	bne.n	800587c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800587a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	ff33000f 	.word	0xff33000f

080058a0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b08b      	sub	sp, #44	; 0x2c
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	041a      	lsls	r2, r3, #16
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	431a      	orrs	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058d8:	d174      	bne.n	80059c4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	431a      	orrs	r2, r3
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	4313      	orrs	r3, r2
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	e053      	b.n	80059ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d106      	bne.n	8005928 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4313      	orrs	r3, r2
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
 8005926:	e048      	b.n	80059ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d111      	bne.n	8005954 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	0cdb      	lsrs	r3, r3, #19
 8005934:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	0a9b      	lsrs	r3, r3, #10
 800593a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	08db      	lsrs	r3, r3, #3
 8005940:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	02db      	lsls	r3, r3, #11
 800594a:	4313      	orrs	r3, r2
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	e032      	b.n	80059ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d117      	bne.n	800598c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	0fdb      	lsrs	r3, r3, #31
 8005960:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	0adb      	lsrs	r3, r3, #11
 800596c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	08db      	lsrs	r3, r3, #3
 8005972:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	431a      	orrs	r2, r3
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	03db      	lsls	r3, r3, #15
 8005982:	4313      	orrs	r3, r2
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	e016      	b.n	80059ba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	0f1b      	lsrs	r3, r3, #28
 8005990:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	0d1b      	lsrs	r3, r3, #20
 8005996:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	0b1b      	lsrs	r3, r3, #12
 800599c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	011a      	lsls	r2, r3, #4
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	431a      	orrs	r2, r3
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	4313      	orrs	r3, r2
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80059c2:	e003      	b.n	80059cc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	60da      	str	r2, [r3, #12]
}
 80059cc:	bf00      	nop
 80059ce:	372c      	adds	r7, #44	; 0x2c
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059e6:	e166      	b.n	8005cb6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	4013      	ands	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8158 	beq.w	8005cb0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d005      	beq.n	8005a18 <HAL_GPIO_Init+0x40>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d130      	bne.n	8005a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	2203      	movs	r2, #3
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a4e:	2201      	movs	r2, #1
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0201 	and.w	r2, r3, #1
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d017      	beq.n	8005ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	2203      	movs	r2, #3
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d123      	bne.n	8005b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	08da      	lsrs	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3208      	adds	r2, #8
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	220f      	movs	r2, #15
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	6939      	ldr	r1, [r7, #16]
 8005b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2203      	movs	r2, #3
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 0203 	and.w	r2, r3, #3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80b2 	beq.w	8005cb0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4c:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <HAL_GPIO_Init+0x2fc>)
 8005b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b50:	4a60      	ldr	r2, [pc, #384]	; (8005cd4 <HAL_GPIO_Init+0x2fc>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	6613      	str	r3, [r2, #96]	; 0x60
 8005b58:	4b5e      	ldr	r3, [pc, #376]	; (8005cd4 <HAL_GPIO_Init+0x2fc>)
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b64:	4a5c      	ldr	r2, [pc, #368]	; (8005cd8 <HAL_GPIO_Init+0x300>)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4013      	ands	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b8e:	d02b      	beq.n	8005be8 <HAL_GPIO_Init+0x210>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a52      	ldr	r2, [pc, #328]	; (8005cdc <HAL_GPIO_Init+0x304>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d025      	beq.n	8005be4 <HAL_GPIO_Init+0x20c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a51      	ldr	r2, [pc, #324]	; (8005ce0 <HAL_GPIO_Init+0x308>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01f      	beq.n	8005be0 <HAL_GPIO_Init+0x208>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a50      	ldr	r2, [pc, #320]	; (8005ce4 <HAL_GPIO_Init+0x30c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d019      	beq.n	8005bdc <HAL_GPIO_Init+0x204>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a4f      	ldr	r2, [pc, #316]	; (8005ce8 <HAL_GPIO_Init+0x310>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <HAL_GPIO_Init+0x200>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	; (8005cec <HAL_GPIO_Init+0x314>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_GPIO_Init+0x1fc>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a4d      	ldr	r2, [pc, #308]	; (8005cf0 <HAL_GPIO_Init+0x318>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <HAL_GPIO_Init+0x1f8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a4c      	ldr	r2, [pc, #304]	; (8005cf4 <HAL_GPIO_Init+0x31c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_GPIO_Init+0x1f4>
 8005bc8:	2307      	movs	r3, #7
 8005bca:	e00e      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	e00c      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005bd0:	2306      	movs	r3, #6
 8005bd2:	e00a      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005bd4:	2305      	movs	r3, #5
 8005bd6:	e008      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e006      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e004      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e002      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <HAL_GPIO_Init+0x212>
 8005be8:	2300      	movs	r3, #0
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	f002 0203 	and.w	r2, r2, #3
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	4093      	lsls	r3, r2
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005bfa:	4937      	ldr	r1, [pc, #220]	; (8005cd8 <HAL_GPIO_Init+0x300>)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	3302      	adds	r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c08:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4013      	ands	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c2c:	4a32      	ldr	r2, [pc, #200]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c56:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c5c:	4b26      	ldr	r3, [pc, #152]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4013      	ands	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005caa:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <HAL_GPIO_Init+0x320>)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f ae91 	bne.w	80059e8 <HAL_GPIO_Init+0x10>
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	48000400 	.word	0x48000400
 8005ce0:	48000800 	.word	0x48000800
 8005ce4:	48000c00 	.word	0x48000c00
 8005ce8:	48001000 	.word	0x48001000
 8005cec:	48001400 	.word	0x48001400
 8005cf0:	48001800 	.word	0x48001800
 8005cf4:	48001c00 	.word	0x48001c00
 8005cf8:	40010400 	.word	0x40010400

08005cfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005d0a:	e0c9      	b.n	8005ea0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	4013      	ands	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80bc 	beq.w	8005e9a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005d22:	4a66      	ldr	r2, [pc, #408]	; (8005ebc <HAL_GPIO_DeInit+0x1c0>)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	220f      	movs	r2, #15
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d4a:	d02b      	beq.n	8005da4 <HAL_GPIO_DeInit+0xa8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a5c      	ldr	r2, [pc, #368]	; (8005ec0 <HAL_GPIO_DeInit+0x1c4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d025      	beq.n	8005da0 <HAL_GPIO_DeInit+0xa4>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a5b      	ldr	r2, [pc, #364]	; (8005ec4 <HAL_GPIO_DeInit+0x1c8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01f      	beq.n	8005d9c <HAL_GPIO_DeInit+0xa0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	; (8005ec8 <HAL_GPIO_DeInit+0x1cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d019      	beq.n	8005d98 <HAL_GPIO_DeInit+0x9c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a59      	ldr	r2, [pc, #356]	; (8005ecc <HAL_GPIO_DeInit+0x1d0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_GPIO_DeInit+0x98>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a58      	ldr	r2, [pc, #352]	; (8005ed0 <HAL_GPIO_DeInit+0x1d4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00d      	beq.n	8005d90 <HAL_GPIO_DeInit+0x94>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a57      	ldr	r2, [pc, #348]	; (8005ed4 <HAL_GPIO_DeInit+0x1d8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <HAL_GPIO_DeInit+0x90>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	; (8005ed8 <HAL_GPIO_DeInit+0x1dc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d101      	bne.n	8005d88 <HAL_GPIO_DeInit+0x8c>
 8005d84:	2307      	movs	r3, #7
 8005d86:	e00e      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	e00c      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d8c:	2306      	movs	r3, #6
 8005d8e:	e00a      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d90:	2305      	movs	r3, #5
 8005d92:	e008      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d94:	2304      	movs	r3, #4
 8005d96:	e006      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e004      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e002      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_GPIO_DeInit+0xaa>
 8005da4:	2300      	movs	r3, #0
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	f002 0203 	and.w	r2, r2, #3
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	4093      	lsls	r3, r2
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d132      	bne.n	8005e1c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005db6:	4b49      	ldr	r3, [pc, #292]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	4947      	ldr	r1, [pc, #284]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005dc4:	4b45      	ldr	r3, [pc, #276]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	4943      	ldr	r1, [pc, #268]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005dd2:	4b42      	ldr	r3, [pc, #264]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	4940      	ldr	r1, [pc, #256]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005de0:	4b3e      	ldr	r3, [pc, #248]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	493c      	ldr	r1, [pc, #240]	; (8005edc <HAL_GPIO_DeInit+0x1e0>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	220f      	movs	r2, #15
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005dfe:	4a2f      	ldr	r2, [pc, #188]	; (8005ebc <HAL_GPIO_DeInit+0x1c0>)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	3302      	adds	r3, #2
 8005e06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	43da      	mvns	r2, r3
 8005e0e:	482b      	ldr	r0, [pc, #172]	; (8005ebc <HAL_GPIO_DeInit+0x1c0>)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	400a      	ands	r2, r1
 8005e16:	3302      	adds	r3, #2
 8005e18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	2103      	movs	r1, #3
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	08da      	lsrs	r2, r3, #3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3208      	adds	r2, #8
 8005e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	220f      	movs	r2, #15
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	08d2      	lsrs	r2, r2, #3
 8005e50:	4019      	ands	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3208      	adds	r2, #8
 8005e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2103      	movs	r1, #3
 8005e64:	fa01 f303 	lsl.w	r3, r1, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	401a      	ands	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	2101      	movs	r1, #1
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	401a      	ands	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	2103      	movs	r1, #3
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	401a      	ands	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f af2f 	bne.w	8005d0c <HAL_GPIO_DeInit+0x10>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	48000400 	.word	0x48000400
 8005ec4:	48000800 	.word	0x48000800
 8005ec8:	48000c00 	.word	0x48000c00
 8005ecc:	48001000 	.word	0x48001000
 8005ed0:	48001400 	.word	0x48001400
 8005ed4:	48001800 	.word	0x48001800
 8005ed8:	48001c00 	.word	0x48001c00
 8005edc:	40010400 	.word	0x40010400

08005ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	807b      	strh	r3, [r7, #2]
 8005eec:	4613      	mov	r3, r2
 8005eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef0:	787b      	ldrb	r3, [r7, #1]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005efc:	e002      	b.n	8005f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd f95a 	bl	80031e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40010400 	.word	0x40010400

08005f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e081      	b.n	8006056 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8a8 	bl	80060bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2224      	movs	r2, #36	; 0x24
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	e006      	b.n	8005fc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d104      	bne.n	8005fda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69d9      	ldr	r1, [r3, #28]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e021      	b.n	80060b4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	; 0x24
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f821 	bl	80060d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	817b      	strh	r3, [r7, #10]
 80060f6:	460b      	mov	r3, r1
 80060f8:	813b      	strh	r3, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b20      	cmp	r3, #32
 8006108:	f040 80f9 	bne.w	80062fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_I2C_Mem_Write+0x34>
 8006112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0ed      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2C_Mem_Write+0x4e>
 800612e:	2302      	movs	r3, #2
 8006130:	e0e6      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800613a:	f7fe fc89 	bl	8004a50 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2319      	movs	r3, #25
 8006146:	2201      	movs	r2, #1
 8006148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fbd9 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0d1      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2221      	movs	r2, #33	; 0x21
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800617c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006184:	88f8      	ldrh	r0, [r7, #6]
 8006186:	893a      	ldrh	r2, [r7, #8]
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4603      	mov	r3, r0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fae9 	bl	800676c <I2C_RequestMemoryWrite>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a9      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2bff      	cmp	r3, #255	; 0xff
 80061b4:	d90e      	bls.n	80061d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	22ff      	movs	r2, #255	; 0xff
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	8979      	ldrh	r1, [r7, #10]
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fd41 	bl	8006c54 <I2C_TransferConfig>
 80061d2:	e00f      	b.n	80061f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	8979      	ldrh	r1, [r7, #10]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fd30 	bl	8006c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fbc3 	bl	8006984 <I2C_WaitOnTXISFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e07b      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d034      	beq.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d130      	bne.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fb55 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e04d      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d90e      	bls.n	800628c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	8979      	ldrh	r1, [r7, #10]
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fce5 	bl	8006c54 <I2C_TransferConfig>
 800628a:	e00f      	b.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629a:	b2da      	uxtb	r2, r3
 800629c:	8979      	ldrh	r1, [r7, #10]
 800629e:	2300      	movs	r3, #0
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fcd4 	bl	8006c54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d19e      	bne.n	80061f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fba2 	bl	8006a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e01a      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2220      	movs	r2, #32
 80062d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_I2C_Mem_Write+0x224>)
 80062de:	400b      	ands	r3, r1
 80062e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	fe00e800 	.word	0xfe00e800

0800630c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	817b      	strh	r3, [r7, #10]
 800631e:	460b      	mov	r3, r1
 8006320:	813b      	strh	r3, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b20      	cmp	r3, #32
 8006330:	f040 80fd 	bne.w	800652e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_I2C_Mem_Read+0x34>
 800633a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0f1      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_I2C_Mem_Read+0x4e>
 8006356:	2302      	movs	r3, #2
 8006358:	e0ea      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006362:	f7fe fb75 	bl	8004a50 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	2319      	movs	r3, #25
 800636e:	2201      	movs	r2, #1
 8006370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fac5 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0d5      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2222      	movs	r2, #34	; 0x22
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2240      	movs	r2, #64	; 0x40
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063ac:	88f8      	ldrh	r0, [r7, #6]
 80063ae:	893a      	ldrh	r2, [r7, #8]
 80063b0:	8979      	ldrh	r1, [r7, #10]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4603      	mov	r3, r0
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fa29 	bl	8006814 <I2C_RequestMemoryRead>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0ad      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d90e      	bls.n	80063fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	4b52      	ldr	r3, [pc, #328]	; (8006538 <HAL_I2C_Mem_Read+0x22c>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fc2d 	bl	8006c54 <I2C_TransferConfig>
 80063fa:	e00f      	b.n	800641c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	b2da      	uxtb	r2, r3
 800640c:	8979      	ldrh	r1, [r7, #10]
 800640e:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_I2C_Mem_Read+0x22c>)
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fc1c 	bl	8006c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2200      	movs	r2, #0
 8006424:	2104      	movs	r1, #4
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa6c 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07c      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d034      	beq.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d130      	bne.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2200      	movs	r2, #0
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa3d 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e04d      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2bff      	cmp	r3, #255	; 0xff
 800649c:	d90e      	bls.n	80064bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fbcd 	bl	8006c54 <I2C_TransferConfig>
 80064ba:	e00f      	b.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fbbc 	bl	8006c54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d19a      	bne.n	800641c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fa8a 	bl	8006a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e01a      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2220      	movs	r2, #32
 8006500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_I2C_Mem_Read+0x230>)
 800650e:	400b      	ands	r3, r1
 8006510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	80002400 	.word	0x80002400
 800653c:	fe00e800 	.word	0xfe00e800

08006540 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	460b      	mov	r3, r1
 800654e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b20      	cmp	r3, #32
 800655e:	f040 80f1 	bne.w	8006744 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006570:	d101      	bne.n	8006576 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
 8006574:	e0e7      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_I2C_IsDeviceReady+0x44>
 8006580:	2302      	movs	r3, #2
 8006582:	e0e0      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2224      	movs	r2, #36	; 0x24
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d107      	bne.n	80065b2 <HAL_I2C_IsDeviceReady+0x72>
 80065a2:	897b      	ldrh	r3, [r7, #10]
 80065a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065b0:	e004      	b.n	80065bc <HAL_I2C_IsDeviceReady+0x7c>
 80065b2:	897b      	ldrh	r3, [r7, #10]
 80065b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80065c2:	f7fe fa45 	bl	8004a50 <HAL_GetTick>
 80065c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80065f4:	e034      	b.n	8006660 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d01a      	beq.n	8006634 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fe fa27 	bl	8004a50 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <HAL_I2C_IsDeviceReady+0xd4>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10f      	bne.n	8006634 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e088      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b20      	cmp	r3, #32
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b10      	cmp	r3, #16
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <HAL_I2C_IsDeviceReady+0x12c>
 8006666:	7fbb      	ldrb	r3, [r7, #30]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0c4      	beq.n	80065f6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d01a      	beq.n	80066b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	2120      	movs	r1, #32
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f93d 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e058      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2220      	movs	r2, #32
 800669a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	e04a      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	2120      	movs	r1, #32
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f922 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e03d      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2210      	movs	r2, #16
 80066d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2220      	movs	r2, #32
 80066d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d118      	bne.n	8006714 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2120      	movs	r1, #32
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f901 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e01c      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2220      	movs	r2, #32
 8006712:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3301      	adds	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	f63f af3b 	bhi.w	800659a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675c:	b2db      	uxtb	r3, r3
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	4608      	mov	r0, r1
 8006776:	4611      	mov	r1, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4603      	mov	r3, r0
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	460b      	mov	r3, r1
 8006780:	813b      	strh	r3, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	8979      	ldrh	r1, [r7, #10]
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <I2C_RequestMemoryWrite+0xa4>)
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa5d 	bl	8006c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	69b9      	ldr	r1, [r7, #24]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f8f0 	bl	8006984 <I2C_WaitOnTXISFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e02c      	b.n	8006808 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b4:	893b      	ldrh	r3, [r7, #8]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	629a      	str	r2, [r3, #40]	; 0x28
 80067be:	e015      	b.n	80067ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067c0:	893b      	ldrh	r3, [r7, #8]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8d6 	bl	8006984 <I2C_WaitOnTXISFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e012      	b.n	8006808 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067e2:	893b      	ldrh	r3, [r7, #8]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2180      	movs	r1, #128	; 0x80
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f884 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	80002000 	.word	0x80002000

08006814 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	461a      	mov	r2, r3
 8006822:	4603      	mov	r3, r0
 8006824:	817b      	strh	r3, [r7, #10]
 8006826:	460b      	mov	r3, r1
 8006828:	813b      	strh	r3, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	8979      	ldrh	r1, [r7, #10]
 8006834:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <I2C_RequestMemoryRead+0xa4>)
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fa0a 	bl	8006c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	69b9      	ldr	r1, [r7, #24]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f89d 	bl	8006984 <I2C_WaitOnTXISFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02c      	b.n	80068ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
 8006864:	e015      	b.n	8006892 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f883 	bl	8006984 <I2C_WaitOnTXISFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e012      	b.n	80068ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006888:	893b      	ldrh	r3, [r7, #8]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2200      	movs	r2, #0
 800689a:	2140      	movs	r1, #64	; 0x40
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f831 	bl	8006904 <I2C_WaitOnFlagUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	80002000 	.word	0x80002000

080068bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d103      	bne.n	80068da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d007      	beq.n	80068f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	619a      	str	r2, [r3, #24]
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006914:	e022      	b.n	800695c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d01e      	beq.n	800695c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691e:	f7fe f897 	bl	8004a50 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e00f      	b.n	800697c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	429a      	cmp	r2, r3
 800696a:	bf0c      	ite	eq
 800696c:	2301      	moveq	r3, #1
 800696e:	2300      	movne	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	429a      	cmp	r2, r3
 8006978:	d0cd      	beq.n	8006916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006990:	e02c      	b.n	80069ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f870 	bl	8006a7c <I2C_IsErrorOccurred>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e02a      	b.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d01e      	beq.n	80069ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fe f84f 	bl	8004a50 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d113      	bne.n	80069ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e007      	b.n	80069fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d1cb      	bne.n	8006992 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	e028      	b.n	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f830 	bl	8006a7c <I2C_IsErrorOccurred>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e026      	b.n	8006a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a26:	f7fe f813 	bl	8004a50 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d302      	bcc.n	8006a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d113      	bne.n	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e007      	b.n	8006a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d1cf      	bne.n	8006a12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d075      	beq.n	8006b94 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2210      	movs	r2, #16
 8006aae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ab0:	e056      	b.n	8006b60 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d052      	beq.n	8006b60 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fd ffc9 	bl	8004a50 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <I2C_IsErrorOccurred+0x54>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d147      	bne.n	8006b60 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ada:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ae2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	d12e      	bne.n	8006b52 <I2C_IsErrorOccurred+0xd6>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006afa:	d02a      	beq.n	8006b52 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d027      	beq.n	8006b52 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b12:	f7fd ff9d 	bl	8004a50 <HAL_GetTick>
 8006b16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b18:	e01b      	b.n	8006b52 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b1a:	f7fd ff99 	bl	8004a50 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b19      	cmp	r3, #25
 8006b26:	d914      	bls.n	8006b52 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d1dc      	bne.n	8006b1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d003      	beq.n	8006b76 <I2C_IsErrorOccurred+0xfa>
 8006b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d09d      	beq.n	8006ab2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2220      	movs	r2, #32
 8006b84:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f043 0304 	orr.w	r3, r3, #4
 8006b8c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	f043 0308 	orr.w	r3, r3, #8
 8006bce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01c      	beq.n	8006c44 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff fe56 	bl	80068bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <I2C_IsErrorOccurred+0x1d4>)
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	; 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	fe00e800 	.word	0xfe00e800

08006c54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	817b      	strh	r3, [r7, #10]
 8006c62:	4613      	mov	r3, r2
 8006c64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c66:	897b      	ldrh	r3, [r7, #10]
 8006c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c6c:	7a7b      	ldrb	r3, [r7, #9]
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	0d5b      	lsrs	r3, r3, #21
 8006c8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c92:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <I2C_TransferConfig+0x60>)
 8006c94:	430b      	orrs	r3, r1
 8006c96:	43db      	mvns	r3, r3
 8006c98:	ea02 0103 	and.w	r1, r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	03ff63ff 	.word	0x03ff63ff

08006cb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006cbc:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40007000 	.word	0x40007000

08006cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce2:	d130      	bne.n	8006d46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ce4:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf0:	d038      	beq.n	8006d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d02:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2232      	movs	r2, #50	; 0x32
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	0c9b      	lsrs	r3, r3, #18
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d18:	e002      	b.n	8006d20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d102      	bne.n	8006d34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f2      	bne.n	8006d1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d110      	bne.n	8006d64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e00f      	b.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d007      	beq.n	8006d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d54:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d5c:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40007000 	.word	0x40007000
 8006d78:	200000f4 	.word	0x200000f4
 8006d7c:	431bde83 	.word	0x431bde83

08006d80 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d8e:	6053      	str	r3, [r2, #4]
}
 8006d90:	bf00      	nop
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40007000 	.word	0x40007000

08006da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f000 bc08 	b.w	80075c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db4:	4b96      	ldr	r3, [pc, #600]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dbe:	4b94      	ldr	r3, [pc, #592]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80e4 	beq.w	8006f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_RCC_OscConfig+0x4c>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	f040 808b 	bne.w	8006efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	f040 8087 	bne.w	8006efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dec:	4b88      	ldr	r3, [pc, #544]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_RCC_OscConfig+0x64>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e3df      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1a      	ldr	r2, [r3, #32]
 8006e08:	4b81      	ldr	r3, [pc, #516]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_RCC_OscConfig+0x7e>
 8006e14:	4b7e      	ldr	r3, [pc, #504]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1c:	e005      	b.n	8006e2a <HAL_RCC_OscConfig+0x8a>
 8006e1e:	4b7c      	ldr	r3, [pc, #496]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d223      	bcs.n	8006e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fdc6 	bl	80079c4 <RCC_SetFlashLatencyFromMSIRange>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e3c0      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e42:	4b73      	ldr	r3, [pc, #460]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a72      	ldr	r2, [pc, #456]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4b70      	ldr	r3, [pc, #448]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	496d      	ldr	r1, [pc, #436]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e60:	4b6b      	ldr	r3, [pc, #428]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	4968      	ldr	r1, [pc, #416]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	e025      	b.n	8006ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e76:	4b66      	ldr	r3, [pc, #408]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a65      	ldr	r2, [pc, #404]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b63      	ldr	r3, [pc, #396]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	4960      	ldr	r1, [pc, #384]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e94:	4b5e      	ldr	r3, [pc, #376]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	495b      	ldr	r1, [pc, #364]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fd86 	bl	80079c4 <RCC_SetFlashLatencyFromMSIRange>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e380      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ec2:	f000 fcbb 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b51      	ldr	r3, [pc, #324]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	4950      	ldr	r1, [pc, #320]	; (8007014 <HAL_RCC_OscConfig+0x274>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	4a4e      	ldr	r2, [pc, #312]	; (8007018 <HAL_RCC_OscConfig+0x278>)
 8006ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ee2:	4b4e      	ldr	r3, [pc, #312]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd fd62 	bl	80049b0 <HAL_InitTick>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d052      	beq.n	8006f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	e364      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d032      	beq.n	8006f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f02:	4b43      	ldr	r3, [pc, #268]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a42      	ldr	r2, [pc, #264]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f0e:	f7fd fd9f 	bl	8004a50 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f16:	f7fd fd9b 	bl	8004a50 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e34d      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f28:	4b39      	ldr	r3, [pc, #228]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f34:	4b36      	ldr	r3, [pc, #216]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a35      	ldr	r2, [pc, #212]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f3a:	f043 0308 	orr.w	r3, r3, #8
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b33      	ldr	r3, [pc, #204]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4930      	ldr	r1, [pc, #192]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f52:	4b2f      	ldr	r3, [pc, #188]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	492b      	ldr	r1, [pc, #172]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	604b      	str	r3, [r1, #4]
 8006f66:	e01a      	b.n	8006f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f68:	4b29      	ldr	r3, [pc, #164]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a28      	ldr	r2, [pc, #160]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f74:	f7fd fd6c 	bl	8004a50 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f7c:	f7fd fd68 	bl	8004a50 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e31a      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x1dc>
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d073      	beq.n	8007092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_OscConfig+0x21c>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d10b      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d063      	beq.n	8007090 <HAL_RCC_OscConfig+0x2f0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d15f      	bne.n	8007090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e2f7      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fdc:	d106      	bne.n	8006fec <HAL_RCC_OscConfig+0x24c>
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0b      	ldr	r2, [pc, #44]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e025      	b.n	8007038 <HAL_RCC_OscConfig+0x298>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff4:	d114      	bne.n	8007020 <HAL_RCC_OscConfig+0x280>
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a05      	ldr	r2, [pc, #20]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a02      	ldr	r2, [pc, #8]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8007008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e013      	b.n	8007038 <HAL_RCC_OscConfig+0x298>
 8007010:	40021000 	.word	0x40021000
 8007014:	080100a0 	.word	0x080100a0
 8007018:	200000f4 	.word	0x200000f4
 800701c:	200000f8 	.word	0x200000f8
 8007020:	4ba0      	ldr	r3, [pc, #640]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a9f      	ldr	r2, [pc, #636]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4b9d      	ldr	r3, [pc, #628]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a9c      	ldr	r2, [pc, #624]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fd fd06 	bl	8004a50 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007048:	f7fd fd02 	bl	8004a50 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b64      	cmp	r3, #100	; 0x64
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e2b4      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800705a:	4b92      	ldr	r3, [pc, #584]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x2a8>
 8007066:	e014      	b.n	8007092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fd fcf2 	bl	8004a50 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007070:	f7fd fcee 	bl	8004a50 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	; 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e2a0      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007082:	4b88      	ldr	r3, [pc, #544]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x2d0>
 800708e:	e000      	b.n	8007092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d060      	beq.n	8007160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_OscConfig+0x310>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d119      	bne.n	80070de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d116      	bne.n	80070de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070b0:	4b7c      	ldr	r3, [pc, #496]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCC_OscConfig+0x328>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e27d      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b76      	ldr	r3, [pc, #472]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	061b      	lsls	r3, r3, #24
 80070d6:	4973      	ldr	r1, [pc, #460]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070dc:	e040      	b.n	8007160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d023      	beq.n	800712e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070e6:	4b6f      	ldr	r3, [pc, #444]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6e      	ldr	r2, [pc, #440]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fd fcad 	bl	8004a50 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fd fca9 	bl	8004a50 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e25b      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800710c:	4b65      	ldr	r3, [pc, #404]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	4b62      	ldr	r3, [pc, #392]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	495f      	ldr	r1, [pc, #380]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007128:	4313      	orrs	r3, r2
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	e018      	b.n	8007160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712e:	4b5d      	ldr	r3, [pc, #372]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5c      	ldr	r2, [pc, #368]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fd fc89 	bl	8004a50 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007142:	f7fd fc85 	bl	8004a50 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e237      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007154:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03c      	beq.n	80071e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01c      	beq.n	80071ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007174:	4b4b      	ldr	r3, [pc, #300]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800717a:	4a4a      	ldr	r2, [pc, #296]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007184:	f7fd fc64 	bl	8004a50 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718c:	f7fd fc60 	bl	8004a50 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e212      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800719e:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0ef      	beq.n	800718c <HAL_RCC_OscConfig+0x3ec>
 80071ac:	e01b      	b.n	80071e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ae:	4b3d      	ldr	r3, [pc, #244]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071b4:	4a3b      	ldr	r2, [pc, #236]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071be:	f7fd fc47 	bl	8004a50 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c6:	f7fd fc43 	bl	8004a50 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e1f5      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ef      	bne.n	80071c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80a6 	beq.w	8007340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071f8:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10d      	bne.n	8007220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007204:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800720a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720e:	6593      	str	r3, [r2, #88]	; 0x58
 8007210:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800721c:	2301      	movs	r3, #1
 800721e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007220:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d118      	bne.n	800725e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800722c:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007238:	f7fd fc0a 	bl	8004a50 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007240:	f7fd fc06 	bl	8004a50 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1b8      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d108      	bne.n	8007278 <HAL_RCC_OscConfig+0x4d8>
 8007266:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007276:	e029      	b.n	80072cc <HAL_RCC_OscConfig+0x52c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b05      	cmp	r3, #5
 800727e:	d115      	bne.n	80072ac <HAL_RCC_OscConfig+0x50c>
 8007280:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	4a07      	ldr	r2, [pc, #28]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007288:	f043 0304 	orr.w	r3, r3, #4
 800728c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072a0:	e014      	b.n	80072cc <HAL_RCC_OscConfig+0x52c>
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40007000 	.word	0x40007000
 80072ac:	4b9d      	ldr	r3, [pc, #628]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b2:	4a9c      	ldr	r2, [pc, #624]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072bc:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	4a98      	ldr	r2, [pc, #608]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d016      	beq.n	8007302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fd fbbc 	bl	8004a50 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072da:	e00a      	b.n	80072f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072dc:	f7fd fbb8 	bl	8004a50 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e168      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f2:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0ed      	beq.n	80072dc <HAL_RCC_OscConfig+0x53c>
 8007300:	e015      	b.n	800732e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007302:	f7fd fba5 	bl	8004a50 <HAL_GetTick>
 8007306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007308:	e00a      	b.n	8007320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730a:	f7fd fba1 	bl	8004a50 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e151      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007320:	4b80      	ldr	r3, [pc, #512]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1ed      	bne.n	800730a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800732e:	7ffb      	ldrb	r3, [r7, #31]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d105      	bne.n	8007340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007334:	4b7b      	ldr	r3, [pc, #492]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007338:	4a7a      	ldr	r2, [pc, #488]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800733a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03c      	beq.n	80073c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01c      	beq.n	800738e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007354:	4b73      	ldr	r3, [pc, #460]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800735a:	4a72      	ldr	r2, [pc, #456]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007364:	f7fd fb74 	bl	8004a50 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800736c:	f7fd fb70 	bl	8004a50 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e122      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800737e:	4b69      	ldr	r3, [pc, #420]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0ef      	beq.n	800736c <HAL_RCC_OscConfig+0x5cc>
 800738c:	e01b      	b.n	80073c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007394:	4a63      	ldr	r2, [pc, #396]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739e:	f7fd fb57 	bl	8004a50 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a6:	f7fd fb53 	bl	8004a50 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e105      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073b8:	4b5a      	ldr	r3, [pc, #360]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80073ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1ef      	bne.n	80073a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80f9 	beq.w	80075c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	f040 80cf 	bne.w	8007578 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80073da:	4b52      	ldr	r3, [pc, #328]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f003 0203 	and.w	r2, r3, #3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d12c      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	3b01      	subs	r3, #1
 80073fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d123      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d11b      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d113      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	3b01      	subs	r3, #1
 800742e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d109      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	3b01      	subs	r3, #1
 8007442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007444:	429a      	cmp	r2, r3
 8007446:	d071      	beq.n	800752c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b0c      	cmp	r3, #12
 800744c:	d068      	beq.n	8007520 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800744e:	4b35      	ldr	r3, [pc, #212]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800745a:	4b32      	ldr	r3, [pc, #200]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e0ac      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800746a:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007474:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007476:	f7fd faeb 	bl	8004a50 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fd fae7 	bl	8004a50 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e099      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007490:	4b24      	ldr	r3, [pc, #144]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800749c:	4b21      	ldr	r3, [pc, #132]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	4b21      	ldr	r3, [pc, #132]	; (8007528 <HAL_RCC_OscConfig+0x788>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074ac:	3a01      	subs	r2, #1
 80074ae:	0112      	lsls	r2, r2, #4
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074b6:	0212      	lsls	r2, r2, #8
 80074b8:	4311      	orrs	r1, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074be:	0852      	lsrs	r2, r2, #1
 80074c0:	3a01      	subs	r2, #1
 80074c2:	0552      	lsls	r2, r2, #21
 80074c4:	4311      	orrs	r1, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80074ca:	0852      	lsrs	r2, r2, #1
 80074cc:	3a01      	subs	r2, #1
 80074ce:	0652      	lsls	r2, r2, #25
 80074d0:	4311      	orrs	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074d6:	06d2      	lsls	r2, r2, #27
 80074d8:	430a      	orrs	r2, r1
 80074da:	4912      	ldr	r1, [pc, #72]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0f      	ldr	r2, [pc, #60]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074f8:	f7fd faaa 	bl	8004a50 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007500:	f7fd faa6 	bl	8004a50 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e058      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800751e:	e050      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e04f      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
 8007524:	40021000 	.word	0x40021000
 8007528:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d144      	bne.n	80075c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007538:	4b24      	ldr	r3, [pc, #144]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a23      	ldr	r2, [pc, #140]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007544:	4b21      	ldr	r3, [pc, #132]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a20      	ldr	r2, [pc, #128]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007550:	f7fd fa7e 	bl	8004a50 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007558:	f7fd fa7a 	bl	8004a50 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e02c      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x7b8>
 8007576:	e024      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d01f      	beq.n	80075be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a12      	ldr	r2, [pc, #72]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fd fa61 	bl	8004a50 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007592:	f7fd fa5d 	bl	8004a50 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e00f      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4905      	ldr	r1, [pc, #20]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_RCC_OscConfig+0x830>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	60cb      	str	r3, [r1, #12]
 80075bc:	e001      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40021000 	.word	0x40021000
 80075d0:	feeefffc 	.word	0xfeeefffc

080075d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0e7      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075e8:	4b75      	ldr	r3, [pc, #468]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d910      	bls.n	8007618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b72      	ldr	r3, [pc, #456]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 0207 	bic.w	r2, r3, #7
 80075fe:	4970      	ldr	r1, [pc, #448]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	4313      	orrs	r3, r2
 8007604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007606:	4b6e      	ldr	r3, [pc, #440]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d001      	beq.n	8007618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0cf      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	4b66      	ldr	r3, [pc, #408]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007630:	429a      	cmp	r2, r3
 8007632:	d908      	bls.n	8007646 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007634:	4b63      	ldr	r3, [pc, #396]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4960      	ldr	r1, [pc, #384]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007642:	4313      	orrs	r3, r2
 8007644:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d04c      	beq.n	80076ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b03      	cmp	r3, #3
 8007658:	d107      	bne.n	800766a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800765a:	4b5a      	ldr	r3, [pc, #360]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d121      	bne.n	80076aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0a6      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d107      	bne.n	8007682 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007672:	4b54      	ldr	r3, [pc, #336]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d115      	bne.n	80076aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e09a      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d107      	bne.n	800769a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800768a:	4b4e      	ldr	r3, [pc, #312]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e08e      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800769a:	4b4a      	ldr	r3, [pc, #296]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e086      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076aa:	4b46      	ldr	r3, [pc, #280]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f023 0203 	bic.w	r2, r3, #3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4943      	ldr	r1, [pc, #268]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076bc:	f7fd f9c8 	bl	8004a50 <HAL_GetTick>
 80076c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c2:	e00a      	b.n	80076da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c4:	f7fd f9c4 	bl	8004a50 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e06e      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076da:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 020c 	and.w	r2, r3, #12
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d1eb      	bne.n	80076c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007704:	429a      	cmp	r2, r3
 8007706:	d208      	bcs.n	800771a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007708:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	492b      	ldr	r1, [pc, #172]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800771a:	4b29      	ldr	r3, [pc, #164]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d210      	bcs.n	800774a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 0207 	bic.w	r2, r3, #7
 8007730:	4923      	ldr	r1, [pc, #140]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	4313      	orrs	r3, r2
 8007736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007738:	4b21      	ldr	r3, [pc, #132]	; (80077c0 <HAL_RCC_ClockConfig+0x1ec>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d001      	beq.n	800774a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e036      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007756:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	4918      	ldr	r1, [pc, #96]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007764:	4313      	orrs	r3, r2
 8007766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4910      	ldr	r1, [pc, #64]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007784:	4313      	orrs	r3, r2
 8007786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007788:	f000 f858 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800778c:	4602      	mov	r2, r0
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	091b      	lsrs	r3, r3, #4
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	490b      	ldr	r1, [pc, #44]	; (80077c8 <HAL_RCC_ClockConfig+0x1f4>)
 800779a:	5ccb      	ldrb	r3, [r1, r3]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <HAL_RCC_ClockConfig+0x1f8>)
 80077a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCC_ClockConfig+0x1fc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd f8ff 	bl	80049b0 <HAL_InitTick>
 80077b2:	4603      	mov	r3, r0
 80077b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80077b6:	7afb      	ldrb	r3, [r7, #11]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40022000 	.word	0x40022000
 80077c4:	40021000 	.word	0x40021000
 80077c8:	080100a0 	.word	0x080100a0
 80077cc:	200000f4 	.word	0x200000f4
 80077d0:	200000f8 	.word	0x200000f8

080077d4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80077e0:	4b15      	ldr	r3, [pc, #84]	; (8007838 <HAL_RCC_MCOConfig+0x64>)
 80077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e4:	4a14      	ldr	r2, [pc, #80]	; (8007838 <HAL_RCC_MCOConfig+0x64>)
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <HAL_RCC_MCOConfig+0x64>)
 80077ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80077f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077fe:	2302      	movs	r3, #2
 8007800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007802:	2302      	movs	r3, #2
 8007804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800780e:	f107 0314 	add.w	r3, r7, #20
 8007812:	4619      	mov	r1, r3
 8007814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007818:	f7fe f8de 	bl	80059d8 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_RCC_MCOConfig+0x64>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	430b      	orrs	r3, r1
 800782a:	4903      	ldr	r1, [pc, #12]	; (8007838 <HAL_RCC_MCOConfig+0x64>)
 800782c:	4313      	orrs	r3, r2
 800782e:	608b      	str	r3, [r1, #8]
}
 8007830:	bf00      	nop
 8007832:	3728      	adds	r7, #40	; 0x28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40021000 	.word	0x40021000

0800783c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	; 0x24
 8007840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	2300      	movs	r3, #0
 8007848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800784a:	4b3e      	ldr	r3, [pc, #248]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
 8007852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007854:	4b3b      	ldr	r3, [pc, #236]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x34>
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d121      	bne.n	80078ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d11e      	bne.n	80078ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007870:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d107      	bne.n	800788c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800787c:	4b31      	ldr	r3, [pc, #196]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 800787e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	e005      	b.n	8007898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800788c:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007898:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10d      	bne.n	80078c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078ac:	e00a      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d102      	bne.n	80078ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078b4:	4b25      	ldr	r3, [pc, #148]	; (800794c <HAL_RCC_GetSysClockFreq+0x110>)
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e004      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d101      	bne.n	80078c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <HAL_RCC_GetSysClockFreq+0x114>)
 80078c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b0c      	cmp	r3, #12
 80078c8:	d134      	bne.n	8007934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078ca:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d003      	beq.n	80078e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d003      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0xac>
 80078e0:	e005      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078e2:	4b1a      	ldr	r3, [pc, #104]	; (800794c <HAL_RCC_GetSysClockFreq+0x110>)
 80078e4:	617b      	str	r3, [r7, #20]
      break;
 80078e6:	e005      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078e8:	4b19      	ldr	r3, [pc, #100]	; (8007950 <HAL_RCC_GetSysClockFreq+0x114>)
 80078ea:	617b      	str	r3, [r7, #20]
      break;
 80078ec:	e002      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	617b      	str	r3, [r7, #20]
      break;
 80078f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078f4:	4b13      	ldr	r3, [pc, #76]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	3301      	adds	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	fb03 f202 	mul.w	r2, r3, r2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <HAL_RCC_GetSysClockFreq+0x108>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	0e5b      	lsrs	r3, r3, #25
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	3301      	adds	r3, #1
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007934:	69bb      	ldr	r3, [r7, #24]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3724      	adds	r7, #36	; 0x24
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40021000 	.word	0x40021000
 8007948:	080100b8 	.word	0x080100b8
 800794c:	00f42400 	.word	0x00f42400
 8007950:	007a1200 	.word	0x007a1200

08007954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <HAL_RCC_GetHCLKFreq+0x14>)
 800795a:	681b      	ldr	r3, [r3, #0]
}
 800795c:	4618      	mov	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	200000f4 	.word	0x200000f4

0800796c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007970:	f7ff fff0 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40021000 	.word	0x40021000
 8007994:	080100b0 	.word	0x080100b0

08007998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800799c:	f7ff ffda 	bl	8007954 <HAL_RCC_GetHCLKFreq>
 80079a0:	4602      	mov	r2, r0
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	0adb      	lsrs	r3, r3, #11
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079ae:	5ccb      	ldrb	r3, [r1, r3]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	080100b0 	.word	0x080100b0

080079c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079dc:	f7ff f96c 	bl	8006cb8 <HAL_PWREx_GetVoltageRange>
 80079e0:	6178      	str	r0, [r7, #20]
 80079e2:	e014      	b.n	8007a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079e4:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ee:	6593      	str	r3, [r2, #88]	; 0x58
 80079f0:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079fc:	f7ff f95c 	bl	8006cb8 <HAL_PWREx_GetVoltageRange>
 8007a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a02:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a14:	d10b      	bne.n	8007a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d919      	bls.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8007a20:	d902      	bls.n	8007a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a22:	2302      	movs	r3, #2
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	e013      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a28:	2301      	movs	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	e010      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b80      	cmp	r3, #128	; 0x80
 8007a32:	d902      	bls.n	8007a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a34:	2303      	movs	r3, #3
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e00a      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d102      	bne.n	8007a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a40:	2302      	movs	r3, #2
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	e004      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b70      	cmp	r3, #112	; 0x70
 8007a4a:	d101      	bne.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f023 0207 	bic.w	r2, r3, #7
 8007a58:	4909      	ldr	r1, [pc, #36]	; (8007a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d001      	beq.n	8007a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40022000 	.word	0x40022000

08007a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a90:	2300      	movs	r3, #0
 8007a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d041      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007aa8:	d02a      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007aae:	d824      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab4:	d008      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aba:	d81e      	bhi.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac4:	d010      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ac6:	e018      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007ac8:	4b86      	ldr	r3, [pc, #536]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	4a85      	ldr	r2, [pc, #532]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ad4:	e015      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f97d 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ae6:	e00c      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3320      	adds	r3, #32
 8007aec:	2100      	movs	r1, #0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fa66 	bl	8008fc0 <RCCEx_PLLSAI2_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007af8:	e003      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	74fb      	strb	r3, [r7, #19]
      break;
 8007afe:	e000      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b02:	7cfb      	ldrb	r3, [r7, #19]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b08:	4b76      	ldr	r3, [pc, #472]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b16:	4973      	ldr	r1, [pc, #460]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b1e:	e001      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b20:	7cfb      	ldrb	r3, [r7, #19]
 8007b22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d041      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b38:	d02a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b3e:	d824      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b44:	d008      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4a:	d81e      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b54:	d010      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b56:	e018      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b58:	4b62      	ldr	r3, [pc, #392]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4a61      	ldr	r2, [pc, #388]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b64:	e015      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f935 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b76:	e00c      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3320      	adds	r3, #32
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fa1e 	bl	8008fc0 <RCCEx_PLLSAI2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b88:	e003      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b8e:	e000      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b92:	7cfb      	ldrb	r3, [r7, #19]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b98:	4b52      	ldr	r3, [pc, #328]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba6:	494f      	ldr	r1, [pc, #316]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bae:	e001      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb0:	7cfb      	ldrb	r3, [r7, #19]
 8007bb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80a0 	beq.w	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bc6:	4b47      	ldr	r3, [pc, #284]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00d      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bdc:	4b41      	ldr	r3, [pc, #260]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	4a40      	ldr	r2, [pc, #256]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be6:	6593      	str	r3, [r2, #88]	; 0x58
 8007be8:	4b3e      	ldr	r3, [pc, #248]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a3a      	ldr	r2, [pc, #232]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c04:	f7fc ff24 	bl	8004a50 <HAL_GetTick>
 8007c08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c0a:	e009      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c0c:	f7fc ff20 	bl	8004a50 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d902      	bls.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8007c1e:	e005      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c20:	4b31      	ldr	r3, [pc, #196]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0ef      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d15c      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c32:	4b2c      	ldr	r3, [pc, #176]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01f      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d019      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c50:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c5c:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	4a20      	ldr	r2, [pc, #128]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c7c:	4a19      	ldr	r2, [pc, #100]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7fc fedf 	bl	8004a50 <HAL_GetTick>
 8007c92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c94:	e00b      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c96:	f7fc fedb 	bl	8004a50 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d902      	bls.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	74fb      	strb	r3, [r7, #19]
            break;
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0ec      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007cbc:	7cfb      	ldrb	r3, [r7, #19]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	4904      	ldr	r1, [pc, #16]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007cda:	e009      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cdc:	7cfb      	ldrb	r3, [r7, #19]
 8007cde:	74bb      	strb	r3, [r7, #18]
 8007ce0:	e006      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007ce2:	bf00      	nop
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cf0:	7c7b      	ldrb	r3, [r7, #17]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d105      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cf6:	4ba6      	ldr	r3, [pc, #664]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	4aa5      	ldr	r2, [pc, #660]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d0e:	4ba0      	ldr	r3, [pc, #640]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d14:	f023 0203 	bic.w	r2, r3, #3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	499c      	ldr	r1, [pc, #624]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d30:	4b97      	ldr	r3, [pc, #604]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d36:	f023 020c 	bic.w	r2, r3, #12
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	4994      	ldr	r1, [pc, #592]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d52:	4b8f      	ldr	r3, [pc, #572]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	498b      	ldr	r1, [pc, #556]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d74:	4b86      	ldr	r3, [pc, #536]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	4983      	ldr	r1, [pc, #524]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d96:	4b7e      	ldr	r3, [pc, #504]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	497a      	ldr	r1, [pc, #488]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007db8:	4b75      	ldr	r3, [pc, #468]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	4972      	ldr	r1, [pc, #456]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dda:	4b6d      	ldr	r3, [pc, #436]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de8:	4969      	ldr	r1, [pc, #420]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dfc:	4b64      	ldr	r3, [pc, #400]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e0a:	4961      	ldr	r1, [pc, #388]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e1e:	4b5c      	ldr	r3, [pc, #368]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2c:	4958      	ldr	r1, [pc, #352]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e40:	4b53      	ldr	r3, [pc, #332]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	4950      	ldr	r1, [pc, #320]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e62:	4b4b      	ldr	r3, [pc, #300]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e70:	4947      	ldr	r1, [pc, #284]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e8a:	f023 0203 	bic.w	r2, r3, #3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	493f      	ldr	r1, [pc, #252]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d028      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ea6:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	4936      	ldr	r1, [pc, #216]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec4:	d106      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec6:	4b32      	ldr	r3, [pc, #200]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	4a31      	ldr	r2, [pc, #196]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed0:	60d3      	str	r3, [r2, #12]
 8007ed2:	e011      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 ff79 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007eee:	7cfb      	ldrb	r3, [r7, #19]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007ef4:	7cfb      	ldrb	r3, [r7, #19]
 8007ef6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d028      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f04:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f12:	491f      	ldr	r1, [pc, #124]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f22:	d106      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f24:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2e:	60d3      	str	r3, [r2, #12]
 8007f30:	e011      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f3a:	d10c      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	2101      	movs	r1, #1
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 ff4a 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f4c:	7cfb      	ldrb	r3, [r7, #19]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007f52:	7cfb      	ldrb	r3, [r7, #19]
 8007f54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f70:	4907      	ldr	r1, [pc, #28]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d108      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f82:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	4a02      	ldr	r2, [pc, #8]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f8c:	60d3      	str	r3, [r2, #12]
 8007f8e:	e013      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007f90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ff19 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fae:	7cfb      	ldrb	r3, [r7, #19]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007fb4:	7cfb      	ldrb	r3, [r7, #19]
 8007fb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02f      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fc4:	4b2c      	ldr	r3, [pc, #176]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd2:	4929      	ldr	r1, [pc, #164]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe2:	d10d      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	2102      	movs	r1, #2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fef6 	bl	8008ddc <RCCEx_PLLSAI1_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ff4:	7cfb      	ldrb	r3, [r7, #19]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d014      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007ffa:	7cfb      	ldrb	r3, [r7, #19]
 8007ffc:	74bb      	strb	r3, [r7, #18]
 8007ffe:	e011      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008008:	d10c      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3320      	adds	r3, #32
 800800e:	2102      	movs	r1, #2
 8008010:	4618      	mov	r0, r3
 8008012:	f000 ffd5 	bl	8008fc0 <RCCEx_PLLSAI2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008020:	7cfb      	ldrb	r3, [r7, #19]
 8008022:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008040:	490d      	ldr	r1, [pc, #52]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008054:	4b08      	ldr	r3, [pc, #32]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	4904      	ldr	r1, [pc, #16]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800806c:	7cbb      	ldrb	r3, [r7, #18]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40021000 	.word	0x40021000

0800807c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a77      	ldr	r2, [pc, #476]	; (8008264 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 8008088:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800808a:	4b77      	ldr	r3, [pc, #476]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0203 	and.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008096:	4b74      	ldr	r3, [pc, #464]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80080a6:	4b70      	ldr	r3, [pc, #448]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	0a1b      	lsrs	r3, r3, #8
 80080ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 80080b4:	4b6c      	ldr	r3, [pc, #432]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	0c5b      	lsrs	r3, r3, #17
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	1dda      	adds	r2, r3, #7
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 80080c6:	4b68      	ldr	r3, [pc, #416]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	0d5b      	lsrs	r3, r3, #21
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	3301      	adds	r3, #1
 80080d2:	005a      	lsls	r2, r3, #1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 80080d8:	4b63      	ldr	r3, [pc, #396]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	0e5b      	lsrs	r3, r3, #25
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	3301      	adds	r3, #1
 80080e4:	005a      	lsls	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80080fa:	4b5b      	ldr	r3, [pc, #364]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008108:	4b57      	ldr	r3, [pc, #348]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	0c5b      	lsrs	r3, r3, #17
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	1dda      	adds	r2, r3, #7
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800811a:	4b53      	ldr	r3, [pc, #332]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	0e5b      	lsrs	r3, r3, #25
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	3301      	adds	r3, #1
 8008126:	005a      	lsls	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800812c:	4b4e      	ldr	r3, [pc, #312]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008132:	f003 0203 	and.w	r2, r3, #3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800813a:	4b4b      	ldr	r3, [pc, #300]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	f003 020c 	and.w	r2, r3, #12
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008148:	4b47      	ldr	r3, [pc, #284]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800814a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8008156:	4b44      	ldr	r3, [pc, #272]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8008164:	4b40      	ldr	r3, [pc, #256]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8008172:	4b3d      	ldr	r3, [pc, #244]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008178:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008180:	4b39      	ldr	r3, [pc, #228]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008186:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800818e:	4b36      	ldr	r3, [pc, #216]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008194:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800819c:	4b32      	ldr	r3, [pc, #200]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081b0:	f003 0203 	and.w	r2, r3, #3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081be:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 80081c6:	4b28      	ldr	r3, [pc, #160]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081da:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e8:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 80081f0:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80081f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008200:	4b19      	ldr	r3, [pc, #100]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008206:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800820e:	4b16      	ldr	r3, [pc, #88]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008214:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800821c:	4b12      	ldr	r3, [pc, #72]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008222:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800822a:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008238:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008248:	4b07      	ldr	r3, [pc, #28]	; (8008268 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800824a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	001fffff 	.word	0x001fffff
 8008268:	40021000 	.word	0x40021000

0800826c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827e:	d13e      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008280:	4bb4      	ldr	r3, [pc, #720]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008292:	d028      	beq.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829a:	f200 858c 	bhi.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a4:	d005      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ac:	d00e      	beq.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80082ae:	f000 bd82 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082b2:	4ba8      	ldr	r3, [pc, #672]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80082b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f040 857c 	bne.w	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80082c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c6:	61fb      	str	r3, [r7, #28]
      break;
 80082c8:	f000 bd77 	b.w	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80082cc:	4ba1      	ldr	r3, [pc, #644]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80082ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	f040 8571 	bne.w	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80082dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80082e0:	61fb      	str	r3, [r7, #28]
      break;
 80082e2:	f000 bd6c 	b.w	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082e6:	4b9b      	ldr	r3, [pc, #620]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f2:	f040 8566 	bne.w	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80082f6:	4b98      	ldr	r3, [pc, #608]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80082f8:	61fb      	str	r3, [r7, #28]
      break;
 80082fa:	f000 bd62 	b.w	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082fe:	4b95      	ldr	r3, [pc, #596]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d036      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d840      	bhi.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d003      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d020      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008320:	e039      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008322:	4b8c      	ldr	r3, [pc, #560]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d116      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800832e:	4b89      	ldr	r3, [pc, #548]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800833a:	4b86      	ldr	r3, [pc, #536]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	e005      	b.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008346:	4b83      	ldr	r3, [pc, #524]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	4a82      	ldr	r2, [pc, #520]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800835a:	e01f      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
      break;
 8008360:	e01c      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008362:	4b7c      	ldr	r3, [pc, #496]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800836a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836e:	d102      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8008370:	4b7b      	ldr	r3, [pc, #492]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008372:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008374:	e012      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
      break;
 800837a:	e00f      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800837c:	4b75      	ldr	r3, [pc, #468]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008388:	d102      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800838a:	4b76      	ldr	r3, [pc, #472]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800838c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800838e:	e005      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]
      break;
 8008394:	e002      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
      break;
 800839a:	bf00      	nop
    }

    switch(PeriphClk)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a2:	f000 842a 	beq.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ac:	f200 850b 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083b6:	f000 80df 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083c0:	f200 8501 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083ca:	f000 80d5 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083d4:	f200 84f7 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	f000 8377 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e8:	f200 84ed 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f2:	f000 84c3 	beq.w	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083fc:	f200 84e3 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008406:	f000 82e6 	beq.w	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008410:	f200 84d9 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841a:	f000 80ad 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008424:	f200 84cf 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800842e:	f000 809b 	beq.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008438:	f200 84c5 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008442:	d07f      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800844a:	f200 84bc 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008454:	f000 8448 	beq.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800845e:	f200 84b2 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008468:	f000 83f0 	beq.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008472:	f200 84a8 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847c:	f000 8391 	beq.w	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008486:	f200 849e 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	f000 835c 	beq.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	f200 8496 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b20      	cmp	r3, #32
 800849e:	d84b      	bhi.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 848f 	beq.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	2b1f      	cmp	r3, #31
 80084ae:	f200 848a 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080086cf 	.word	0x080086cf
 80084bc:	0800873f 	.word	0x0800873f
 80084c0:	08008dc7 	.word	0x08008dc7
 80084c4:	080087d3 	.word	0x080087d3
 80084c8:	08008dc7 	.word	0x08008dc7
 80084cc:	08008dc7 	.word	0x08008dc7
 80084d0:	08008dc7 	.word	0x08008dc7
 80084d4:	0800885b 	.word	0x0800885b
 80084d8:	08008dc7 	.word	0x08008dc7
 80084dc:	08008dc7 	.word	0x08008dc7
 80084e0:	08008dc7 	.word	0x08008dc7
 80084e4:	08008dc7 	.word	0x08008dc7
 80084e8:	08008dc7 	.word	0x08008dc7
 80084ec:	08008dc7 	.word	0x08008dc7
 80084f0:	08008dc7 	.word	0x08008dc7
 80084f4:	080088d3 	.word	0x080088d3
 80084f8:	08008dc7 	.word	0x08008dc7
 80084fc:	08008dc7 	.word	0x08008dc7
 8008500:	08008dc7 	.word	0x08008dc7
 8008504:	08008dc7 	.word	0x08008dc7
 8008508:	08008dc7 	.word	0x08008dc7
 800850c:	08008dc7 	.word	0x08008dc7
 8008510:	08008dc7 	.word	0x08008dc7
 8008514:	08008dc7 	.word	0x08008dc7
 8008518:	08008dc7 	.word	0x08008dc7
 800851c:	08008dc7 	.word	0x08008dc7
 8008520:	08008dc7 	.word	0x08008dc7
 8008524:	08008dc7 	.word	0x08008dc7
 8008528:	08008dc7 	.word	0x08008dc7
 800852c:	08008dc7 	.word	0x08008dc7
 8008530:	08008dc7 	.word	0x08008dc7
 8008534:	08008955 	.word	0x08008955
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	f000 82d9 	beq.w	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008540:	f000 bc41 	b.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008544:	69b9      	ldr	r1, [r7, #24]
 8008546:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800854a:	f000 fe15 	bl	8009178 <RCCEx_GetSAIxPeriphCLKFreq>
 800854e:	61f8      	str	r0, [r7, #28]
      break;
 8008550:	f000 bc3a 	b.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008554:	40021000 	.word	0x40021000
 8008558:	0003d090 	.word	0x0003d090
 800855c:	080100b8 	.word	0x080100b8
 8008560:	00f42400 	.word	0x00f42400
 8008564:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800856e:	f000 fe03 	bl	8009178 <RCCEx_GetSAIxPeriphCLKFreq>
 8008572:	61f8      	str	r0, [r7, #28]
      break;
 8008574:	f000 bc28 	b.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008578:	4ba6      	ldr	r3, [pc, #664]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800858a:	d015      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008592:	f200 8092 	bhi.w	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800859c:	d029      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a4:	f200 8089 	bhi.w	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d07b      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085b4:	d04a      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 80085b6:	e080      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80085b8:	4b96      	ldr	r3, [pc, #600]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d17c      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80085c4:	4b93      	ldr	r3, [pc, #588]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0308 	and.w	r3, r3, #8
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80085d0:	4b90      	ldr	r3, [pc, #576]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	091b      	lsrs	r3, r3, #4
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	e005      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80085dc:	4b8d      	ldr	r3, [pc, #564]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80085de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085e2:	0a1b      	lsrs	r3, r3, #8
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	4a8b      	ldr	r2, [pc, #556]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80085ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ee:	61fb      	str	r3, [r7, #28]
          break;
 80085f0:	e065      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80085f2:	4b88      	ldr	r3, [pc, #544]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085fe:	d160      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008600:	4b84      	ldr	r3, [pc, #528]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800860c:	d159      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800860e:	4b81      	ldr	r3, [pc, #516]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008618:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	fb03 f202 	mul.w	r2, r3, r2
 8008622:	4b7c      	ldr	r3, [pc, #496]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	091b      	lsrs	r3, r3, #4
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	3301      	adds	r3, #1
 800862e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008632:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008634:	4b77      	ldr	r3, [pc, #476]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	0d5b      	lsrs	r3, r3, #21
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	3301      	adds	r3, #1
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	fbb2 f3f3 	udiv	r3, r2, r3
 8008648:	61fb      	str	r3, [r7, #28]
          break;
 800864a:	e03a      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800864c:	4b71      	ldr	r3, [pc, #452]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008658:	d135      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800865a:	4b6e      	ldr	r3, [pc, #440]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008666:	d12e      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008668:	4b6a      	ldr	r3, [pc, #424]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008672:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	fb03 f202 	mul.w	r2, r3, r2
 800867c:	4b65      	ldr	r3, [pc, #404]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	3301      	adds	r3, #1
 8008688:	fbb2 f3f3 	udiv	r3, r2, r3
 800868c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800868e:	4b61      	ldr	r3, [pc, #388]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	0d5b      	lsrs	r3, r3, #21
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	3301      	adds	r3, #1
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a2:	61fb      	str	r3, [r7, #28]
          break;
 80086a4:	e00f      	b.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80086a6:	4b5b      	ldr	r3, [pc, #364]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80086a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d10a      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 80086b4:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80086b6:	61fb      	str	r3, [r7, #28]
          break;
 80086b8:	e007      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 80086ba:	bf00      	nop
 80086bc:	e384      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80086be:	bf00      	nop
 80086c0:	e382      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80086c2:	bf00      	nop
 80086c4:	e380      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80086c6:	bf00      	nop
 80086c8:	e37e      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80086ca:	bf00      	nop
        break;
 80086cc:	e37c      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80086ce:	4b51      	ldr	r3, [pc, #324]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d828      	bhi.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	08008701 	.word	0x08008701
 80086f0:	08008709 	.word	0x08008709
 80086f4:	0800871d 	.word	0x0800871d
          frequency = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7ff f94e 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 80086fc:	61f8      	str	r0, [r7, #28]
          break;
 80086fe:	e01d      	b.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008700:	f7ff f89c 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008704:	61f8      	str	r0, [r7, #28]
          break;
 8008706:	e019      	b.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008708:	4b42      	ldr	r3, [pc, #264]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008714:	d10f      	bne.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8008716:	4b42      	ldr	r3, [pc, #264]	; (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008718:	61fb      	str	r3, [r7, #28]
          break;
 800871a:	e00c      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800871c:	4b3d      	ldr	r3, [pc, #244]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	d107      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800872a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800872e:	61fb      	str	r3, [r7, #28]
          break;
 8008730:	e003      	b.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8008732:	bf00      	nop
 8008734:	e348      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008736:	bf00      	nop
 8008738:	e346      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800873a:	bf00      	nop
        break;
 800873c:	e344      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800873e:	4b35      	ldr	r3, [pc, #212]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008744:	f003 030c 	and.w	r3, r3, #12
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b0c      	cmp	r3, #12
 800874e:	d83a      	bhi.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	0800878d 	.word	0x0800878d
 800875c:	080087c7 	.word	0x080087c7
 8008760:	080087c7 	.word	0x080087c7
 8008764:	080087c7 	.word	0x080087c7
 8008768:	08008795 	.word	0x08008795
 800876c:	080087c7 	.word	0x080087c7
 8008770:	080087c7 	.word	0x080087c7
 8008774:	080087c7 	.word	0x080087c7
 8008778:	0800879d 	.word	0x0800879d
 800877c:	080087c7 	.word	0x080087c7
 8008780:	080087c7 	.word	0x080087c7
 8008784:	080087c7 	.word	0x080087c7
 8008788:	080087b1 	.word	0x080087b1
          frequency = HAL_RCC_GetPCLK1Freq();
 800878c:	f7ff f8ee 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008790:	61f8      	str	r0, [r7, #28]
          break;
 8008792:	e01d      	b.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8008794:	f7ff f852 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008798:	61f8      	str	r0, [r7, #28]
          break;
 800879a:	e019      	b.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800879c:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a8:	d10f      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80087aa:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80087ac:	61fb      	str	r3, [r7, #28]
          break;
 80087ae:	e00c      	b.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087b0:	4b18      	ldr	r3, [pc, #96]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d107      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c2:	61fb      	str	r3, [r7, #28]
          break;
 80087c4:	e003      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 80087c6:	bf00      	nop
 80087c8:	e2fe      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80087ca:	bf00      	nop
 80087cc:	e2fc      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80087ce:	bf00      	nop
        break;
 80087d0:	e2fa      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80087d2:	4b10      	ldr	r3, [pc, #64]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b30      	cmp	r3, #48	; 0x30
 80087e2:	d029      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b30      	cmp	r3, #48	; 0x30
 80087e8:	d831      	bhi.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d019      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d82b      	bhi.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d004      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8008802:	e024      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008804:	f7ff f8b2 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008808:	61f8      	str	r0, [r7, #28]
          break;
 800880a:	e025      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800880c:	f7ff f816 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008810:	61f8      	str	r0, [r7, #28]
          break;
 8008812:	e021      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008814:	40021000 	.word	0x40021000
 8008818:	080100b8 	.word	0x080100b8
 800881c:	02dc6c00 	.word	0x02dc6c00
 8008820:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008824:	4b8f      	ldr	r3, [pc, #572]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d10f      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8008832:	4b8d      	ldr	r3, [pc, #564]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008834:	61fb      	str	r3, [r7, #28]
          break;
 8008836:	e00c      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008838:	4b8a      	ldr	r3, [pc, #552]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b02      	cmp	r3, #2
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8008846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800884a:	61fb      	str	r3, [r7, #28]
          break;
 800884c:	e003      	b.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 800884e:	bf00      	nop
 8008850:	e2ba      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008852:	bf00      	nop
 8008854:	e2b8      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008856:	bf00      	nop
        break;
 8008858:	e2b6      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800885a:	4b82      	ldr	r3, [pc, #520]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800885c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008860:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2bc0      	cmp	r3, #192	; 0xc0
 800886a:	d021      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2bc0      	cmp	r3, #192	; 0xc0
 8008870:	d829      	bhi.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b80      	cmp	r3, #128	; 0x80
 8008876:	d011      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d823      	bhi.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d004      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 800888a:	e01c      	b.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800888c:	f7ff f86e 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008890:	61f8      	str	r0, [r7, #28]
          break;
 8008892:	e01d      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8008894:	f7fe ffd2 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008898:	61f8      	str	r0, [r7, #28]
          break;
 800889a:	e019      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800889c:	4b71      	ldr	r3, [pc, #452]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a8:	d10f      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 80088aa:	4b6f      	ldr	r3, [pc, #444]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80088ac:	61fb      	str	r3, [r7, #28]
          break;
 80088ae:	e00c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80088b0:	4b6c      	ldr	r3, [pc, #432]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d107      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 80088be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c2:	61fb      	str	r3, [r7, #28]
          break;
 80088c4:	e003      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 80088c6:	bf00      	nop
 80088c8:	e27e      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80088ca:	bf00      	nop
 80088cc:	e27c      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80088ce:	bf00      	nop
        break;
 80088d0:	e27a      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80088d2:	4b64      	ldr	r3, [pc, #400]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088e4:	d025      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088ec:	d82c      	bhi.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f4:	d013      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fc:	d824      	bhi.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890a:	d004      	beq.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 800890c:	e01c      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800890e:	f7ff f82d 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008912:	61f8      	str	r0, [r7, #28]
          break;
 8008914:	e01d      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008916:	f7fe ff91 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800891a:	61f8      	str	r0, [r7, #28]
          break;
 800891c:	e019      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800891e:	4b51      	ldr	r3, [pc, #324]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892a:	d10f      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 800892c:	4b4e      	ldr	r3, [pc, #312]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800892e:	61fb      	str	r3, [r7, #28]
          break;
 8008930:	e00c      	b.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008932:	4b4c      	ldr	r3, [pc, #304]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b02      	cmp	r3, #2
 800893e:	d107      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8008940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008944:	61fb      	str	r3, [r7, #28]
          break;
 8008946:	e003      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8008948:	bf00      	nop
 800894a:	e23d      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800894c:	bf00      	nop
 800894e:	e23b      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008950:	bf00      	nop
        break;
 8008952:	e239      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008954:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008966:	d025      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800896e:	d82c      	bhi.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008976:	d013      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897e:	d824      	bhi.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d004      	beq.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d004      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 800898e:	e01c      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008990:	f7fe ffec 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008994:	61f8      	str	r0, [r7, #28]
          break;
 8008996:	e01d      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8008998:	f7fe ff50 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800899c:	61f8      	str	r0, [r7, #28]
          break;
 800899e:	e019      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089a0:	4b30      	ldr	r3, [pc, #192]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	d10f      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 80089ae:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80089b0:	61fb      	str	r3, [r7, #28]
          break;
 80089b2:	e00c      	b.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d107      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 80089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c6:	61fb      	str	r3, [r7, #28]
          break;
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 80089ca:	bf00      	nop
 80089cc:	e1fc      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80089ce:	bf00      	nop
 80089d0:	e1fa      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80089d2:	bf00      	nop
        break;
 80089d4:	e1f8      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089d6:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089e8:	d00c      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089f0:	d868      	bhi.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f8:	d008      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a00:	d034      	beq.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8008a02:	e05f      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a04:	f7fe ff1a 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008a08:	61f8      	str	r0, [r7, #28]
          break;
 8008a0a:	e060      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a18:	d156      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008a1a:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d050      	beq.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	fb03 f202 	mul.w	r2, r3, r2
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	091b      	lsrs	r3, r3, #4
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	3301      	adds	r3, #1
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	0e5b      	lsrs	r3, r3, #25
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	3301      	adds	r3, #1
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a60:	61fb      	str	r3, [r7, #28]
          break;
 8008a62:	e031      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008a64:	40021000 	.word	0x40021000
 8008a68:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008a6c:	4b9c      	ldr	r3, [pc, #624]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a78:	d128      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8008a7a:	4b99      	ldr	r3, [pc, #612]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d022      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008a86:	4b96      	ldr	r3, [pc, #600]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a90:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	fb03 f202 	mul.w	r2, r3, r2
 8008a9a:	4b91      	ldr	r3, [pc, #580]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	091b      	lsrs	r3, r3, #4
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aaa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008aac:	4b8c      	ldr	r3, [pc, #560]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	0e5b      	lsrs	r3, r3, #25
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac0:	61fb      	str	r3, [r7, #28]
          break;
 8008ac2:	e003      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8008ac4:	bf00      	nop
 8008ac6:	e17f      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008ac8:	bf00      	nop
 8008aca:	e17d      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008acc:	bf00      	nop
        break;
 8008ace:	e17b      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008ad0:	4b83      	ldr	r3, [pc, #524]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ada:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ae2:	f7fe ff59 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 8008ae6:	61f8      	str	r0, [r7, #28]
        break;
 8008ae8:	e16e      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008aea:	f7fe fea7 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008aee:	61f8      	str	r0, [r7, #28]
        break;
 8008af0:	e16a      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008af2:	4b7b      	ldr	r3, [pc, #492]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008afc:	613b      	str	r3, [r7, #16]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b04:	d013      	beq.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0c:	d819      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	d004      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8008b1c:	e011      	b.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b1e:	f7fe ff25 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008b22:	61f8      	str	r0, [r7, #28]
          break;
 8008b24:	e010      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fe fe89 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008b2a:	61f8      	str	r0, [r7, #28]
          break;
 8008b2c:	e00c      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b2e:	4b6c      	ldr	r3, [pc, #432]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3a:	d104      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8008b3c:	4b69      	ldr	r3, [pc, #420]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008b3e:	61fb      	str	r3, [r7, #28]
          break;
 8008b40:	e001      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8008b42:	bf00      	nop
 8008b44:	e140      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b46:	bf00      	nop
        break;
 8008b48:	e13e      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008b4a:	4b65      	ldr	r3, [pc, #404]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b5c:	d013      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b64:	d819      	bhi.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b72:	d004      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8008b74:	e011      	b.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b76:	f7fe fef9 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008b7a:	61f8      	str	r0, [r7, #28]
          break;
 8008b7c:	e010      	b.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b7e:	f7fe fe5d 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008b82:	61f8      	str	r0, [r7, #28]
          break;
 8008b84:	e00c      	b.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b86:	4b56      	ldr	r3, [pc, #344]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b92:	d104      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8008b94:	4b53      	ldr	r3, [pc, #332]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008b96:	61fb      	str	r3, [r7, #28]
          break;
 8008b98:	e001      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8008b9a:	bf00      	nop
 8008b9c:	e114      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b9e:	bf00      	nop
        break;
 8008ba0:	e112      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008ba2:	4b4f      	ldr	r3, [pc, #316]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bb4:	d013      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bbc:	d819      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bca:	d004      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8008bcc:	e011      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bce:	f7fe fecd 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008bd2:	61f8      	str	r0, [r7, #28]
          break;
 8008bd4:	e010      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008bd6:	f7fe fe31 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008bda:	61f8      	str	r0, [r7, #28]
          break;
 8008bdc:	e00c      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bde:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bea:	d104      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8008bec:	4b3d      	ldr	r3, [pc, #244]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008bee:	61fb      	str	r3, [r7, #28]
          break;
 8008bf0:	e001      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8008bf2:	bf00      	nop
 8008bf4:	e0e8      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008bf6:	bf00      	nop
        break;
 8008bf8:	e0e6      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008bfa:	4b39      	ldr	r3, [pc, #228]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d011      	beq.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d818      	bhi.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d004      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8008c1e:	e011      	b.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c20:	f7fe fea4 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008c24:	61f8      	str	r0, [r7, #28]
          break;
 8008c26:	e010      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c28:	f7fe fe08 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8008c2c:	61f8      	str	r0, [r7, #28]
          break;
 8008c2e:	e00c      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c30:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3c:	d104      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8008c3e:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008c40:	61fb      	str	r3, [r7, #28]
          break;
 8008c42:	e001      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8008c44:	bf00      	nop
 8008c46:	e0bf      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c48:	bf00      	nop
        break;
 8008c4a:	e0bd      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008c4c:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c5e:	d02c      	beq.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c66:	d833      	bhi.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c6e:	d01a      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c76:	d82b      	bhi.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c84:	d004      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8008c86:	e023      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fe fe70 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008c8c:	61f8      	str	r0, [r7, #28]
          break;
 8008c8e:	e026      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008c90:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d11a      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8008c9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ca2:	61fb      	str	r3, [r7, #28]
          break;
 8008ca4:	e016      	b.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ca6:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb2:	d111      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008cb6:	61fb      	str	r3, [r7, #28]
          break;
 8008cb8:	e00e      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d109      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8008cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ccc:	61fb      	str	r3, [r7, #28]
          break;
 8008cce:	e005      	b.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8008cd0:	bf00      	nop
 8008cd2:	e079      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008cd4:	bf00      	nop
 8008cd6:	e077      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008cd8:	bf00      	nop
 8008cda:	e075      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008cdc:	bf00      	nop
        break;
 8008cde:	e073      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008ce0:	40021000 	.word	0x40021000
 8008ce4:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ce8:	4b3a      	ldr	r3, [pc, #232]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cfa:	d02c      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d02:	d833      	bhi.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d0a:	d01a      	beq.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d12:	d82b      	bhi.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d20:	d004      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008d22:	e023      	b.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d24:	f7fe fe22 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008d28:	61f8      	str	r0, [r7, #28]
          break;
 8008d2a:	e026      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008d2c:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d11a      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8008d3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d3e:	61fb      	str	r3, [r7, #28]
          break;
 8008d40:	e016      	b.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d42:	4b24      	ldr	r3, [pc, #144]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4e:	d111      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8008d50:	4b21      	ldr	r3, [pc, #132]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8008d52:	61fb      	str	r3, [r7, #28]
          break;
 8008d54:	e00e      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d56:	4b1f      	ldr	r3, [pc, #124]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d109      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8008d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d68:	61fb      	str	r3, [r7, #28]
          break;
 8008d6a:	e005      	b.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8008d6c:	bf00      	nop
 8008d6e:	e02b      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d70:	bf00      	nop
 8008d72:	e029      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d74:	bf00      	nop
 8008d76:	e027      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d78:	bf00      	nop
        break;
 8008d7a:	e025      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d94:	d004      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8008d96:	e00d      	b.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d98:	f7fe fde8 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 8008d9c:	61f8      	str	r0, [r7, #28]
          break;
 8008d9e:	e009      	b.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dac:	d101      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8008db0:	61fb      	str	r3, [r7, #28]
          break;
 8008db2:	bf00      	nop
        break;
 8008db4:	e008      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8008db6:	bf00      	nop
 8008db8:	e006      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8008dba:	bf00      	nop
 8008dbc:	e004      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e002      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e000      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8008dc6:	bf00      	nop
    }
  }

  return(frequency);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40021000 	.word	0x40021000
 8008dd8:	00f42400 	.word	0x00f42400

08008ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008dea:	4b74      	ldr	r3, [pc, #464]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d018      	beq.n	8008e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008df6:	4b71      	ldr	r3, [pc, #452]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0203 	and.w	r2, r3, #3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d10d      	bne.n	8008e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
       ||
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008e0e:	4b6b      	ldr	r3, [pc, #428]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	091b      	lsrs	r3, r3, #4
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d047      	beq.n	8008eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
 8008e26:	e044      	b.n	8008eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d018      	beq.n	8008e62 <RCCEx_PLLSAI1_Config+0x86>
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d825      	bhi.n	8008e80 <RCCEx_PLLSAI1_Config+0xa4>
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d002      	beq.n	8008e3e <RCCEx_PLLSAI1_Config+0x62>
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d009      	beq.n	8008e50 <RCCEx_PLLSAI1_Config+0x74>
 8008e3c:	e020      	b.n	8008e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008e3e:	4b5f      	ldr	r3, [pc, #380]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d11d      	bne.n	8008e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e4e:	e01a      	b.n	8008e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e50:	4b5a      	ldr	r3, [pc, #360]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d116      	bne.n	8008e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e60:	e013      	b.n	8008e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e62:	4b56      	ldr	r3, [pc, #344]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10f      	bne.n	8008e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e6e:	4b53      	ldr	r3, [pc, #332]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e7e:	e006      	b.n	8008e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
      break;
 8008e84:	e004      	b.n	8008e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10d      	bne.n	8008eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e96:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6819      	ldr	r1, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	4943      	ldr	r1, [pc, #268]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d17c      	bne.n	8008fb2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008eb8:	4b40      	ldr	r3, [pc, #256]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a3f      	ldr	r2, [pc, #252]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec4:	f7fb fdc4 	bl	8004a50 <HAL_GetTick>
 8008ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008eca:	e009      	b.n	8008ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ecc:	f7fb fdc0 	bl	8004a50 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d902      	bls.n	8008ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	73fb      	strb	r3, [r7, #15]
        break;
 8008ede:	e005      	b.n	8008eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008ee0:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1ef      	bne.n	8008ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d15f      	bne.n	8008fb2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d110      	bne.n	8008f1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ef8:	4b30      	ldr	r3, [pc, #192]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008f00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6892      	ldr	r2, [r2, #8]
 8008f08:	0211      	lsls	r1, r2, #8
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68d2      	ldr	r2, [r2, #12]
 8008f0e:	06d2      	lsls	r2, r2, #27
 8008f10:	430a      	orrs	r2, r1
 8008f12:	492a      	ldr	r1, [pc, #168]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	610b      	str	r3, [r1, #16]
 8008f18:	e027      	b.n	8008f6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d112      	bne.n	8008f46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008f20:	4b26      	ldr	r3, [pc, #152]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008f28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6892      	ldr	r2, [r2, #8]
 8008f30:	0211      	lsls	r1, r2, #8
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6912      	ldr	r2, [r2, #16]
 8008f36:	0852      	lsrs	r2, r2, #1
 8008f38:	3a01      	subs	r2, #1
 8008f3a:	0552      	lsls	r2, r2, #21
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	491f      	ldr	r1, [pc, #124]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	610b      	str	r3, [r1, #16]
 8008f44:	e011      	b.n	8008f6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6892      	ldr	r2, [r2, #8]
 8008f56:	0211      	lsls	r1, r2, #8
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6952      	ldr	r2, [r2, #20]
 8008f5c:	0852      	lsrs	r2, r2, #1
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	0652      	lsls	r2, r2, #25
 8008f62:	430a      	orrs	r2, r1
 8008f64:	4915      	ldr	r1, [pc, #84]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f76:	f7fb fd6b 	bl	8004a50 <HAL_GetTick>
 8008f7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f7c:	e009      	b.n	8008f92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f7e:	f7fb fd67 	bl	8004a50 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d902      	bls.n	8008f92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f90:	e005      	b.n	8008f9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0ef      	beq.n	8008f7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	4903      	ldr	r1, [pc, #12]	; (8008fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40021000 	.word	0x40021000

08008fc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008fce:	4b69      	ldr	r3, [pc, #420]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d018      	beq.n	800900c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008fda:	4b66      	ldr	r3, [pc, #408]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0203 	and.w	r2, r3, #3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d10d      	bne.n	8009006 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
       ||
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008ff2:	4b60      	ldr	r3, [pc, #384]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	091b      	lsrs	r3, r3, #4
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
       ||
 8009002:	429a      	cmp	r2, r3
 8009004:	d047      	beq.n	8009096 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	73fb      	strb	r3, [r7, #15]
 800900a:	e044      	b.n	8009096 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d018      	beq.n	8009046 <RCCEx_PLLSAI2_Config+0x86>
 8009014:	2b03      	cmp	r3, #3
 8009016:	d825      	bhi.n	8009064 <RCCEx_PLLSAI2_Config+0xa4>
 8009018:	2b01      	cmp	r3, #1
 800901a:	d002      	beq.n	8009022 <RCCEx_PLLSAI2_Config+0x62>
 800901c:	2b02      	cmp	r3, #2
 800901e:	d009      	beq.n	8009034 <RCCEx_PLLSAI2_Config+0x74>
 8009020:	e020      	b.n	8009064 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009022:	4b54      	ldr	r3, [pc, #336]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d11d      	bne.n	800906a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009032:	e01a      	b.n	800906a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009034:	4b4f      	ldr	r3, [pc, #316]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800903c:	2b00      	cmp	r3, #0
 800903e:	d116      	bne.n	800906e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009044:	e013      	b.n	800906e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009046:	4b4b      	ldr	r3, [pc, #300]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10f      	bne.n	8009072 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009052:	4b48      	ldr	r3, [pc, #288]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009062:	e006      	b.n	8009072 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	73fb      	strb	r3, [r7, #15]
      break;
 8009068:	e004      	b.n	8009074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009072:	bf00      	nop
    }

    if(status == HAL_OK)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10d      	bne.n	8009096 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800907a:	4b3e      	ldr	r3, [pc, #248]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6819      	ldr	r1, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	3b01      	subs	r3, #1
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	430b      	orrs	r3, r1
 8009090:	4938      	ldr	r1, [pc, #224]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009092:	4313      	orrs	r3, r2
 8009094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d166      	bne.n	800916a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800909c:	4b35      	ldr	r3, [pc, #212]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a34      	ldr	r2, [pc, #208]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80090a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090a8:	f7fb fcd2 	bl	8004a50 <HAL_GetTick>
 80090ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80090ae:	e009      	b.n	80090c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80090b0:	f7fb fcce 	bl	8004a50 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d902      	bls.n	80090c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	73fb      	strb	r3, [r7, #15]
        break;
 80090c2:	e005      	b.n	80090d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80090c4:	4b2b      	ldr	r3, [pc, #172]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1ef      	bne.n	80090b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d149      	bne.n	800916a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d110      	bne.n	80090fe <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80090dc:	4b25      	ldr	r3, [pc, #148]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80090e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6892      	ldr	r2, [r2, #8]
 80090ec:	0211      	lsls	r1, r2, #8
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68d2      	ldr	r2, [r2, #12]
 80090f2:	06d2      	lsls	r2, r2, #27
 80090f4:	430a      	orrs	r2, r1
 80090f6:	491f      	ldr	r1, [pc, #124]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	614b      	str	r3, [r1, #20]
 80090fc:	e011      	b.n	8009122 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009106:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6892      	ldr	r2, [r2, #8]
 800910e:	0211      	lsls	r1, r2, #8
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6912      	ldr	r2, [r2, #16]
 8009114:	0852      	lsrs	r2, r2, #1
 8009116:	3a01      	subs	r2, #1
 8009118:	0652      	lsls	r2, r2, #25
 800911a:	430a      	orrs	r2, r1
 800911c:	4915      	ldr	r1, [pc, #84]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800911e:	4313      	orrs	r3, r2
 8009120:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009122:	4b14      	ldr	r3, [pc, #80]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a13      	ldr	r2, [pc, #76]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800912e:	f7fb fc8f 	bl	8004a50 <HAL_GetTick>
 8009132:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009134:	e009      	b.n	800914a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009136:	f7fb fc8b 	bl	8004a50 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d902      	bls.n	800914a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	73fb      	strb	r3, [r7, #15]
          break;
 8009148:	e005      	b.n	8009156 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0ef      	beq.n	8009136 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d106      	bne.n	800916a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800915e:	695a      	ldr	r2, [r3, #20]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	4903      	ldr	r1, [pc, #12]	; (8009174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8009166:	4313      	orrs	r3, r2
 8009168:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40021000 	.word	0x40021000

08009178 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009178:	b480      	push	{r7}
 800917a:	b089      	sub	sp, #36	; 0x24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009194:	d10c      	bne.n	80091b0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009196:	4b77      	ldr	r3, [pc, #476]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80091a0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80091a8:	d112      	bne.n	80091d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80091aa:	4b73      	ldr	r3, [pc, #460]	; (8009378 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80091ac:	61fb      	str	r3, [r7, #28]
 80091ae:	e00f      	b.n	80091d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	d10b      	bne.n	80091d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80091b8:	4b6e      	ldr	r3, [pc, #440]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80091c2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091ca:	d101      	bne.n	80091d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80091cc:	4b6a      	ldr	r3, [pc, #424]	; (8009378 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80091ce:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f040 80c6 	bne.w	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091e2:	d003      	beq.n	80091ec <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ea:	d13b      	bne.n	8009264 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80091ec:	4b61      	ldr	r3, [pc, #388]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f8:	f040 80b3 	bne.w	8009362 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 80091fc:	4b5d      	ldr	r3, [pc, #372]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80ac 	beq.w	8009362 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800920a:	4b5a      	ldr	r3, [pc, #360]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	091b      	lsrs	r3, r3, #4
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	3301      	adds	r3, #1
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	fbb2 f3f3 	udiv	r3, r2, r3
 800921c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800921e:	4b55      	ldr	r3, [pc, #340]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009228:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800922a:	4b52      	ldr	r3, [pc, #328]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	0edb      	lsrs	r3, r3, #27
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800923c:	4b4d      	ldr	r3, [pc, #308]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8009248:	2311      	movs	r3, #17
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	e001      	b.n	8009252 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800924e:	2307      	movs	r3, #7
 8009250:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	fb03 f202 	mul.w	r2, r3, r2
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009260:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009262:	e07e      	b.n	8009362 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d139      	bne.n	80092de <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800926a:	4b42      	ldr	r3, [pc, #264]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009276:	d175      	bne.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8009278:	4b3e      	ldr	r3, [pc, #248]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d06f      	beq.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009284:	4b3b      	ldr	r3, [pc, #236]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	091b      	lsrs	r3, r3, #4
 800928a:	f003 0307 	and.w	r3, r3, #7
 800928e:	3301      	adds	r3, #1
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	fbb2 f3f3 	udiv	r3, r2, r3
 8009296:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009298:	4b36      	ldr	r3, [pc, #216]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80092a4:	4b33      	ldr	r3, [pc, #204]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	0edb      	lsrs	r3, r3, #27
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80092b6:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80092c2:	2311      	movs	r3, #17
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e001      	b.n	80092cc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80092c8:	2307      	movs	r3, #7
 80092ca:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	fb03 f202 	mul.w	r2, r3, r2
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e042      	b.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e4:	d003      	beq.n	80092ee <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092ec:	d13a      	bne.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80092ee:	4b21      	ldr	r3, [pc, #132]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092fa:	d133      	bne.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80092fc:	4b1d      	ldr	r3, [pc, #116]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02d      	beq.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	3301      	adds	r3, #1
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	fbb2 f3f3 	udiv	r3, r2, r3
 800931a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800931c:	4b15      	ldr	r3, [pc, #84]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009326:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009328:	4b12      	ldr	r3, [pc, #72]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	0edb      	lsrs	r3, r3, #27
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8009346:	2311      	movs	r3, #17
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e001      	b.n	8009350 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800934c:	2307      	movs	r3, #7
 800934e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	fb03 f202 	mul.w	r2, r3, r2
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	fbb2 f3f3 	udiv	r3, r2, r3
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	e000      	b.n	8009364 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009362:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009364:	69fb      	ldr	r3, [r7, #28]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3724      	adds	r7, #36	; 0x24
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40021000 	.word	0x40021000
 8009378:	001fff68 	.word	0x001fff68

0800937c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e022      	b.n	80093d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7fa fff3 	bl	800438c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2203      	movs	r2, #3
 80093aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f814 	bl	80093dc <HAL_SD_InitCard>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e00a      	b.n	80093d4 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093dc:	b5b0      	push	{r4, r5, r7, lr}
 80093de:	b08e      	sub	sp, #56	; 0x38
 80093e0:	af04      	add	r7, sp, #16
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80093f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80093fc:	f7fe ff36 	bl	800826c <HAL_RCCEx_GetPeriphCLKFreq>
 8009400:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e07b      	b.n	8009514 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	09db      	lsrs	r3, r3, #7
 8009420:	4a3e      	ldr	r2, [pc, #248]	; (800951c <HAL_SD_InitCard+0x140>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	091b      	lsrs	r3, r3, #4
 8009428:	3b02      	subs	r3, #2
 800942a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681d      	ldr	r5, [r3, #0]
 8009430:	466c      	mov	r4, sp
 8009432:	f107 0314 	add.w	r3, r7, #20
 8009436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800943a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009444:	4628      	mov	r0, r5
 8009446:	f002 fe4f 	bl	800c0e8 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009458:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f002 fe8d 	bl	800c17e <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009472:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	3302      	adds	r3, #2
 8009478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947a:	fbb2 f3f3 	udiv	r3, r2, r3
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009480:	4a27      	ldr	r2, [pc, #156]	; (8009520 <HAL_SD_InitCard+0x144>)
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	fbb2 f3f3 	udiv	r3, r2, r3
 8009488:	3301      	adds	r3, #1
 800948a:	4618      	mov	r0, r3
 800948c:	f7fb faec 	bl	8004a68 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f915 	bl	800a6c0 <SD_PowerON>
 8009496:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	431a      	orrs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e02e      	b.n	8009514 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 f834 	bl	800a524 <SD_InitCard>
 80094bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e01b      	b.n	8009514 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80094e4:	4618      	mov	r0, r3
 80094e6:	f002 fedd 	bl	800c2a4 <SDMMC_CmdBlockLength>
 80094ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00f      	beq.n	8009512 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a0b      	ldr	r2, [pc, #44]	; (8009524 <HAL_SD_InitCard+0x148>)
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e000      	b.n	8009514 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3728      	adds	r7, #40	; 0x28
 8009518:	46bd      	mov	sp, r7
 800951a:	bdb0      	pop	{r4, r5, r7, pc}
 800951c:	014f8b59 	.word	0x014f8b59
 8009520:	00012110 	.word	0x00012110
 8009524:	004005ff 	.word	0x004005ff

08009528 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b092      	sub	sp, #72	; 0x48
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009536:	f7fb fa8b 	bl	8004a50 <HAL_GetTick>
 800953a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e1bd      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	f040 81b0 	bne.w	80098c8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800956e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009578:	429a      	cmp	r2, r3
 800957a:	d907      	bls.n	800958c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e1a4      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2203      	movs	r2, #3
 8009590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2200      	movs	r2, #0
 800959a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d002      	beq.n	80095aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	025b      	lsls	r3, r3, #9
 80095a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095aa:	f04f 33ff 	mov.w	r3, #4294967295
 80095ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	025b      	lsls	r3, r3, #9
 80095b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095b6:	2390      	movs	r3, #144	; 0x90
 80095b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095ba:	2302      	movs	r3, #2
 80095bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095be:	2300      	movs	r3, #0
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80095c2:	2301      	movs	r3, #1
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f107 0214 	add.w	r2, r7, #20
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f002 fe3b 	bl	800c24c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d90a      	bls.n	80095f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2202      	movs	r2, #2
 80095e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095e8:	4618      	mov	r0, r3
 80095ea:	f002 fe9f 	bl	800c32c <SDMMC_CmdReadMultiBlock>
 80095ee:	6478      	str	r0, [r7, #68]	; 0x44
 80095f0:	e009      	b.n	8009606 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095fe:	4618      	mov	r0, r3
 8009600:	f002 fe72 	bl	800c2e8 <SDMMC_CmdReadSingleBlock>
 8009604:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009608:	2b00      	cmp	r3, #0
 800960a:	d012      	beq.n	8009632 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a7a      	ldr	r2, [pc, #488]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961a:	431a      	orrs	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e151      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009636:	e061      	b.n	80096fc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d03c      	beq.n	80096c0 <HAL_SD_ReadBlocks+0x198>
 8009646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d039      	beq.n	80096c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800964c:	2300      	movs	r3, #0
 800964e:	643b      	str	r3, [r7, #64]	; 0x40
 8009650:	e033      	b.n	80096ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f002 fd73 	bl	800c142 <SDMMC_ReadFIFO>
 800965c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	b2da      	uxtb	r2, r3
 8009662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009664:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009668:	3301      	adds	r3, #1
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800966c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966e:	3b01      	subs	r3, #1
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	0a1b      	lsrs	r3, r3, #8
 8009676:	b2da      	uxtb	r2, r3
 8009678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	3301      	adds	r3, #1
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009684:	3b01      	subs	r3, #1
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	b2da      	uxtb	r2, r3
 800968e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009690:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009694:	3301      	adds	r3, #1
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969a:	3b01      	subs	r3, #1
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	0e1b      	lsrs	r3, r3, #24
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096aa:	3301      	adds	r3, #1
 80096ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80096ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b0:	3b01      	subs	r3, #1
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80096b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b6:	3301      	adds	r3, #1
 80096b8:	643b      	str	r3, [r7, #64]	; 0x40
 80096ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096bc:	2b07      	cmp	r3, #7
 80096be:	d9c8      	bls.n	8009652 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80096c0:	f7fb f9c6 	bl	8004a50 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d902      	bls.n	80096d6 <HAL_SD_ReadBlocks+0x1ae>
 80096d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d112      	bne.n	80096fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a48      	ldr	r2, [pc, #288]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e0ec      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009706:	2b00      	cmp	r3, #0
 8009708:	d096      	beq.n	8009638 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d022      	beq.n	800975e <HAL_SD_ReadBlocks+0x236>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d91f      	bls.n	800975e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009722:	2b03      	cmp	r3, #3
 8009724:	d01b      	beq.n	800975e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f002 fe64 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 8009730:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2f      	ldr	r2, [pc, #188]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009746:	431a      	orrs	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e0bb      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d012      	beq.n	8009792 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a22      	ldr	r2, [pc, #136]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	f043 0208 	orr.w	r2, r3, #8
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e0a1      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d012      	beq.n	80097c6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	f043 0202 	orr.w	r2, r3, #2
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e087      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097cc:	f003 0320 	and.w	r3, r3, #32
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d064      	beq.n	800989e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a08      	ldr	r2, [pc, #32]	; (80097fc <HAL_SD_ReadBlocks+0x2d4>)
 80097da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	f043 0220 	orr.w	r2, r3, #32
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e06d      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
 80097fa:	bf00      	nop
 80097fc:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4618      	mov	r0, r3
 8009806:	f002 fc9c 	bl	800c142 <SDMMC_ReadFIFO>
 800980a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	b2da      	uxtb	r2, r3
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	3301      	adds	r3, #1
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800981a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981c:	3b01      	subs	r3, #1
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	b2da      	uxtb	r2, r3
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982c:	3301      	adds	r3, #1
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	3b01      	subs	r3, #1
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	b2da      	uxtb	r2, r3
 800983c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009842:	3301      	adds	r3, #1
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009848:	3b01      	subs	r3, #1
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	0e1b      	lsrs	r3, r3, #24
 8009850:	b2da      	uxtb	r2, r3
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009854:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	3301      	adds	r3, #1
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985e:	3b01      	subs	r3, #1
 8009860:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009862:	f7fb f8f5 	bl	8004a50 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800986e:	429a      	cmp	r2, r3
 8009870:	d902      	bls.n	8009878 <HAL_SD_ReadBlocks+0x350>
 8009872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009874:	2b00      	cmp	r3, #0
 8009876:	d112      	bne.n	800989e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a18      	ldr	r2, [pc, #96]	; (80098e0 <HAL_SD_ReadBlocks+0x3b8>)
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e01b      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <HAL_SD_ReadBlocks+0x38a>
 80098ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1a6      	bne.n	8009800 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e006      	b.n	80098d6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
  }
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3748      	adds	r7, #72	; 0x48
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	004005ff 	.word	0x004005ff

080098e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b092      	sub	sp, #72	; 0x48
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098f2:	f7fb f8ad 	bl	8004a50 <HAL_GetTick>
 80098f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d107      	bne.n	8009916 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e165      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b01      	cmp	r3, #1
 8009920:	f040 8158 	bne.w	8009bd4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800992a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	441a      	add	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009934:	429a      	cmp	r2, r3
 8009936:	d907      	bls.n	8009948 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e14c      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2203      	movs	r2, #3
 800994c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2200      	movs	r2, #0
 8009956:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995c:	2b01      	cmp	r3, #1
 800995e:	d002      	beq.n	8009966 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	025b      	lsls	r3, r3, #9
 8009964:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009966:	f04f 33ff 	mov.w	r3, #4294967295
 800996a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	025b      	lsls	r3, r3, #9
 8009970:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009972:	2390      	movs	r3, #144	; 0x90
 8009974:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009976:	2300      	movs	r3, #0
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800997a:	2300      	movs	r3, #0
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800997e:	2301      	movs	r3, #1
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f107 0218 	add.w	r2, r7, #24
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f002 fc5d 	bl	800c24c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d90a      	bls.n	80099ae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2220      	movs	r2, #32
 800999c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099a4:	4618      	mov	r0, r3
 80099a6:	f002 fd05 	bl	800c3b4 <SDMMC_CmdWriteMultiBlock>
 80099aa:	6478      	str	r0, [r7, #68]	; 0x44
 80099ac:	e009      	b.n	80099c2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2210      	movs	r2, #16
 80099b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 fcd8 	bl	800c370 <SDMMC_CmdWriteSingleBlock>
 80099c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80099c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a87      	ldr	r2, [pc, #540]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d6:	431a      	orrs	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e0f9      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099f2:	e065      	b.n	8009ac0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d040      	beq.n	8009a84 <HAL_SD_WriteBlocks+0x1a0>
 8009a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d03d      	beq.n	8009a84 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a0c:	e037      	b.n	8009a7e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	3301      	adds	r3, #1
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	021a      	lsls	r2, r3, #8
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2e:	3301      	adds	r3, #1
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a34:	3b01      	subs	r3, #1
 8009a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	041a      	lsls	r2, r3, #16
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	3301      	adds	r3, #1
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	061a      	lsls	r2, r3, #24
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	3301      	adds	r3, #1
 8009a60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	3b01      	subs	r3, #1
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f107 0214 	add.w	r2, r7, #20
 8009a70:	4611      	mov	r1, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f002 fb72 	bl	800c15c <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a80:	2b07      	cmp	r3, #7
 8009a82:	d9c4      	bls.n	8009a0e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009a84:	f7fa ffe4 	bl	8004a50 <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d902      	bls.n	8009a9a <HAL_SD_WriteBlocks+0x1b6>
 8009a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d112      	bne.n	8009ac0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a53      	ldr	r2, [pc, #332]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e090      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d092      	beq.n	80099f4 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d022      	beq.n	8009b22 <HAL_SD_WriteBlocks+0x23e>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d91f      	bls.n	8009b22 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d01b      	beq.n	8009b22 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 fc82 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 8009af4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d012      	beq.n	8009b22 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a3a      	ldr	r2, [pc, #232]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e05f      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d012      	beq.n	8009b56 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a2d      	ldr	r2, [pc, #180]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	f043 0208 	orr.w	r2, r3, #8
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e045      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d012      	beq.n	8009b8a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a20      	ldr	r2, [pc, #128]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	f043 0202 	orr.w	r2, r3, #2
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e02b      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d012      	beq.n	8009bbe <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a13      	ldr	r2, [pc, #76]	; (8009bec <HAL_SD_WriteBlocks+0x308>)
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	f043 0210 	orr.w	r2, r3, #16
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e011      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e006      	b.n	8009be2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
  }
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3748      	adds	r7, #72	; 0x48
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	004005ff 	.word	0x004005ff

08009bf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <HAL_SD_IRQHandler+0x2e>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 ff68 	bl	800aaec <SD_Read_IT>
 8009c1c:	e155      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 808f 	beq.w	8009d4c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009c46:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009c4a:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 0201 	bic.w	r2, r2, #1
 8009c5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d039      	beq.n	8009cda <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <HAL_SD_IRQHandler+0x8a>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 fbba 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 8009c84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f91f 	bl	8009edc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <HAL_SD_IRQHandler+0xda>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 ff96 	bl	800cbfc <HAL_SD_RxCpltCallback>
 8009cd0:	e0fb      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 ff88 	bl	800cbe8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8009cd8:	e0f7      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80f2 	beq.w	8009eca <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d011      	beq.n	8009d14 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 fb7f 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 8009cfa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f8e4 	bl	8009edc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 80d5 	bne.w	8009eca <HAL_SD_IRQHandler+0x2da>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 80cf 	bne.w	8009eca <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0208 	bic.w	r2, r2, #8
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 ff4f 	bl	800cbe8 <HAL_SD_TxCpltCallback>
}
 8009d4a:	e0be      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d008      	beq.n	8009d6c <HAL_SD_IRQHandler+0x17c>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 ff12 	bl	800ab8e <SD_Write_IT>
 8009d6a:	e0ae      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d72:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80a7 	beq.w	8009eca <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	f043 0202 	orr.w	r2, r3, #2
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9c:	f003 0308 	and.w	r3, r3, #8
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f043 0208 	orr.w	r2, r3, #8
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	f043 0220 	orr.w	r2, r3, #32
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ddc:	f043 0210 	orr.w	r2, r3, #16
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009dfc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 faf8 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f855 	bl	8009edc <HAL_SD_ErrorCallback>
}
 8009e32:	e04a      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d045      	beq.n	8009eca <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f003 0310 	and.w	r3, r3, #16
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d104      	bne.n	8009e52 <HAL_SD_IRQHandler+0x262>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d011      	beq.n	8009e76 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e56:	4a1f      	ldr	r2, [pc, #124]	; (8009ed4 <HAL_SD_IRQHandler+0x2e4>)
 8009e58:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fb f9f4 	bl	800524c <HAL_DMA_Abort_IT>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d02f      	beq.n	8009eca <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 faea 	bl	800a448 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009e74:	e029      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d104      	bne.n	8009e8a <HAL_SD_IRQHandler+0x29a>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	4a12      	ldr	r2, [pc, #72]	; (8009ed8 <HAL_SD_IRQHandler+0x2e8>)
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fb f9d8 	bl	800524c <HAL_DMA_Abort_IT>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d013      	beq.n	8009eca <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fb05 	bl	800a4b6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009eac:	e00d      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f002 fe86 	bl	800cbd4 <HAL_SD_AbortCallback>
}
 8009ec8:	e7ff      	b.n	8009eca <HAL_SD_IRQHandler+0x2da>
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	0800a449 	.word	0x0800a449
 8009ed8:	0800a4b7 	.word	0x0800a4b7

08009edc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009efe:	0f9b      	lsrs	r3, r3, #30
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f0a:	0e9b      	lsrs	r3, r3, #26
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f003 030f 	and.w	r3, r3, #15
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f1c:	0e1b      	lsrs	r3, r3, #24
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f50:	0d1b      	lsrs	r3, r3, #20
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f5c:	0c1b      	lsrs	r3, r3, #16
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6e:	0bdb      	lsrs	r3, r3, #15
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f80:	0b9b      	lsrs	r3, r3, #14
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f92:	0b5b      	lsrs	r3, r3, #13
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fa4:	0b1b      	lsrs	r3, r3, #12
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d163      	bne.n	800a088 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc4:	009a      	lsls	r2, r3, #2
 8009fc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fca:	4013      	ands	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009fd0:	0f92      	lsrs	r2, r2, #30
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fdc:	0edb      	lsrs	r3, r3, #27
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fee:	0e1b      	lsrs	r3, r3, #24
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a000:	0d5b      	lsrs	r3, r3, #21
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a012:	0c9b      	lsrs	r3, r3, #18
 800a014:	b2db      	uxtb	r3, r3
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a024:	0bdb      	lsrs	r3, r3, #15
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 0307 	and.w	r3, r3, #7
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	7e1b      	ldrb	r3, [r3, #24]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	3302      	adds	r3, #2
 800a048:	2201      	movs	r2, #1
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a052:	fb03 f202 	mul.w	r2, r3, r2
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	7a1b      	ldrb	r3, [r3, #8]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 030f 	and.w	r3, r3, #15
 800a064:	2201      	movs	r2, #1
 800a066:	409a      	lsls	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a074:	0a52      	lsrs	r2, r2, #9
 800a076:	fb03 f202 	mul.w	r2, r3, r2
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a084:	661a      	str	r2, [r3, #96]	; 0x60
 800a086:	e031      	b.n	800a0ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d11d      	bne.n	800a0cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a094:	041b      	lsls	r3, r3, #16
 800a096:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	029a      	lsls	r2, r3, #10
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a0ca:	e00f      	b.n	800a0ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a58      	ldr	r2, [pc, #352]	; (800a234 <HAL_SD_GetCardCSD+0x344>)
 800a0d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e09d      	b.n	800a228 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f0:	0b9b      	lsrs	r3, r3, #14
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a102:	09db      	lsrs	r3, r3, #7
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a124:	0fdb      	lsrs	r3, r3, #31
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	0f5b      	lsrs	r3, r3, #29
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a142:	0e9b      	lsrs	r3, r3, #26
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a154:	0d9b      	lsrs	r3, r3, #22
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f003 030f 	and.w	r3, r3, #15
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	0d5b      	lsrs	r3, r3, #21
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	0c1b      	lsrs	r3, r3, #16
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a196:	0bdb      	lsrs	r3, r3, #15
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1aa:	0b9b      	lsrs	r3, r3, #14
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	0b5b      	lsrs	r3, r3, #13
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	0b1b      	lsrs	r3, r3, #12
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e6:	0a9b      	lsrs	r3, r3, #10
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	b2da      	uxtb	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	085b      	lsrs	r3, r3, #1
 800a210:	b2db      	uxtb	r3, r3
 800a212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a216:	b2da      	uxtb	r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	004005ff 	.word	0x004005ff

0800a238 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a290:	b5b0      	push	{r4, r5, r7, lr}
 800a292:	b090      	sub	sp, #64	; 0x40
 800a294:	af04      	add	r7, sp, #16
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d02e      	beq.n	800a30e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2b6:	d106      	bne.n	800a2c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
 800a2c4:	e029      	b.n	800a31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2cc:	d10a      	bne.n	800a2e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 faac 	bl	800a82c <SD_WideBus_Enable>
 800a2d4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	639a      	str	r2, [r3, #56]	; 0x38
 800a2e2:	e01a      	b.n	800a31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10a      	bne.n	800a300 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fae9 	bl	800a8c2 <SD_WideBus_Disable>
 800a2f0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38
 800a2fe:	e00c      	b.n	800a31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
 800a30c:	e005      	b.n	800a31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a35      	ldr	r2, [pc, #212]	; (800a3fc <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a328:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a330:	e042      	b.n	800a3b8 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a332:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a336:	f7fd ff99 	bl	800826c <HAL_RCCEx_GetPeriphCLKFreq>
 800a33a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d031      	beq.n	800a3a6 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	3302      	adds	r3, #2
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	4a25      	ldr	r2, [pc, #148]	; (800a400 <HAL_SD_ConfigWideBusOperation+0x170>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d907      	bls.n	800a380 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	4a24      	ldr	r2, [pc, #144]	; (800a404 <HAL_SD_ConfigWideBusOperation+0x174>)
 800a374:	fba2 2303 	umull	r2, r3, r2, r3
 800a378:	0ddb      	lsrs	r3, r3, #23
 800a37a:	3b02      	subs	r3, #2
 800a37c:	623b      	str	r3, [r7, #32]
 800a37e:	e002      	b.n	800a386 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681d      	ldr	r5, [r3, #0]
 800a38a:	466c      	mov	r4, sp
 800a38c:	f107 0318 	add.w	r3, r7, #24
 800a390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a398:	f107 030c 	add.w	r3, r7, #12
 800a39c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f001 fea2 	bl	800c0e8 <SDMMC_Init>
 800a3a4:	e008      	b.n	800a3b8 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 ff6f 	bl	800c2a4 <SDMMC_CmdBlockLength>
 800a3c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a0a      	ldr	r2, [pc, #40]	; (800a3fc <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3730      	adds	r7, #48	; 0x30
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a3fc:	004005ff 	.word	0x004005ff
 800a400:	017d7840 	.word	0x017d7840
 800a404:	55e63b89 	.word	0x55e63b89

0800a408 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9de 	bl	800a7dc <SD_SendStatus>
 800a420:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0a5b      	lsrs	r3, r3, #9
 800a438:	f003 030f 	and.w	r3, r3, #15
 800a43c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a43e:	693b      	ldr	r3, [r7, #16]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7ff ffd1 	bl	800a408 <HAL_SD_GetCardState>
 800a466:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b06      	cmp	r3, #6
 800a47a:	d002      	beq.n	800a482 <SD_DMATxAbort+0x3a>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d10a      	bne.n	800a498 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4618      	mov	r0, r3
 800a488:	f001 ffb6 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 800a48c:	4602      	mov	r2, r0
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	431a      	orrs	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d103      	bne.n	800a4a8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f002 fb97 	bl	800cbd4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a4a6:	e002      	b.n	800a4ae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fd17 	bl	8009edc <HAL_SD_ErrorCallback>
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a4cc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff ff9a 	bl	800a408 <HAL_SD_GetCardState>
 800a4d4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b06      	cmp	r3, #6
 800a4e8:	d002      	beq.n	800a4f0 <SD_DMARxAbort+0x3a>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b05      	cmp	r3, #5
 800a4ee:	d10a      	bne.n	800a506 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 ff7f 	bl	800c3f8 <SDMMC_CmdStopTransfer>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	431a      	orrs	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f002 fb60 	bl	800cbd4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a514:	e002      	b.n	800a51c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fce0 	bl	8009edc <HAL_SD_ErrorCallback>
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a524:	b5b0      	push	{r4, r5, r7, lr}
 800a526:	b094      	sub	sp, #80	; 0x50
 800a528:	af04      	add	r7, sp, #16
 800a52a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a52c:	2301      	movs	r3, #1
 800a52e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f001 fe31 	bl	800c19c <SDMMC_GetPowerState>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a540:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a544:	e0b8      	b.n	800a6b8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d02f      	beq.n	800a5ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f002 f85a 	bl	800c60c <SDMMC_CmdSendCID>
 800a558:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <SD_InitCard+0x40>
    {
      return errorstate;
 800a560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a562:	e0a9      	b.n	800a6b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f001 fe5b 	bl	800c226 <SDMMC_GetResponse>
 800a570:	4602      	mov	r2, r0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2104      	movs	r1, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 fe52 	bl	800c226 <SDMMC_GetResponse>
 800a582:	4602      	mov	r2, r0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2108      	movs	r1, #8
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 fe49 	bl	800c226 <SDMMC_GetResponse>
 800a594:	4602      	mov	r2, r0
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	210c      	movs	r1, #12
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f001 fe40 	bl	800c226 <SDMMC_GetResponse>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d00d      	beq.n	800a5d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f107 020e 	add.w	r2, r7, #14
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 f860 	bl	800c686 <SDMMC_CmdSetRelAdd>
 800a5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <SD_InitCard+0xae>
    {
      return errorstate;
 800a5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d0:	e072      	b.n	800a6b8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d036      	beq.n	800a648 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a5da:	89fb      	ldrh	r3, [r7, #14]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ea:	041b      	lsls	r3, r3, #16
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f002 f82a 	bl	800c648 <SDMMC_CmdSendCSD>
 800a5f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fe:	e05b      	b.n	800a6b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f001 fe0d 	bl	800c226 <SDMMC_GetResponse>
 800a60c:	4602      	mov	r2, r0
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2104      	movs	r1, #4
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 fe04 	bl	800c226 <SDMMC_GetResponse>
 800a61e:	4602      	mov	r2, r0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2108      	movs	r1, #8
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 fdfb 	bl	800c226 <SDMMC_GetResponse>
 800a630:	4602      	mov	r2, r0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	210c      	movs	r1, #12
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 fdf2 	bl	800c226 <SDMMC_GetResponse>
 800a642:	4602      	mov	r2, r0
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2104      	movs	r1, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 fde9 	bl	800c226 <SDMMC_GetResponse>
 800a654:	4603      	mov	r3, r0
 800a656:	0d1a      	lsrs	r2, r3, #20
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fc44 	bl	8009ef0 <HAL_SD_GetCardCSD>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a66e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a672:	e021      	b.n	800a6b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6819      	ldr	r1, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67c:	041b      	lsls	r3, r3, #16
 800a67e:	2200      	movs	r2, #0
 800a680:	461c      	mov	r4, r3
 800a682:	4615      	mov	r5, r2
 800a684:	4622      	mov	r2, r4
 800a686:	462b      	mov	r3, r5
 800a688:	4608      	mov	r0, r1
 800a68a:	f001 fed7 	bl	800c43c <SDMMC_CmdSelDesel>
 800a68e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <SD_InitCard+0x176>
  {
    return errorstate;
 800a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a698:	e00e      	b.n	800a6b8 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681d      	ldr	r5, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	466c      	mov	r4, sp
 800a6a2:	f103 0210 	add.w	r2, r3, #16
 800a6a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a6a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f001 fd19 	bl	800c0e8 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3740      	adds	r7, #64	; 0x40
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bdb0      	pop	{r4, r5, r7, pc}

0800a6c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 fed2 	bl	800c482 <SDMMC_CmdGoIdleState>
 800a6de:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <SD_PowerON+0x2a>
  {
    return errorstate;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	e072      	b.n	800a7d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 fee5 	bl	800c4be <SDMMC_CmdOperCond>
 800a6f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00d      	beq.n	800a718 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f001 febb 	bl	800c482 <SDMMC_CmdGoIdleState>
 800a70c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d004      	beq.n	800a71e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	e05b      	b.n	800a7d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a722:	2b01      	cmp	r3, #1
 800a724:	d137      	bne.n	800a796 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 fee5 	bl	800c4fc <SDMMC_CmdAppCommand>
 800a732:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d02d      	beq.n	800a796 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a73a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a73e:	e047      	b.n	800a7d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2100      	movs	r1, #0
 800a746:	4618      	mov	r0, r3
 800a748:	f001 fed8 	bl	800c4fc <SDMMC_CmdAppCommand>
 800a74c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <SD_PowerON+0x98>
    {
      return errorstate;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	e03b      	b.n	800a7d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	491e      	ldr	r1, [pc, #120]	; (800a7d8 <SD_PowerON+0x118>)
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 feee 	bl	800c540 <SDMMC_CmdAppOperCommand>
 800a764:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a76c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a770:	e02e      	b.n	800a7d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2100      	movs	r1, #0
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fd54 	bl	800c226 <SDMMC_GetResponse>
 800a77e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	0fdb      	lsrs	r3, r3, #31
 800a784:	2b01      	cmp	r3, #1
 800a786:	d101      	bne.n	800a78c <SD_PowerON+0xcc>
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <SD_PowerON+0xce>
 800a78c:	2300      	movs	r3, #0
 800a78e:	613b      	str	r3, [r7, #16]

    count++;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	3301      	adds	r3, #1
 800a794:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d802      	bhi.n	800a7a6 <SD_PowerON+0xe6>
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0cc      	beq.n	800a740 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d902      	bls.n	800a7b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7b4:	e00c      	b.n	800a7d0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	645a      	str	r2, [r3, #68]	; 0x44
 800a7c6:	e002      	b.n	800a7ce <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	c1100000 	.word	0xc1100000

0800a7dc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a7ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7f0:	e018      	b.n	800a824 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f001 ff62 	bl	800c6c8 <SDMMC_CmdSendStatus>
 800a804:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	e009      	b.n	800a824 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2100      	movs	r1, #0
 800a816:	4618      	mov	r0, r3
 800a818:	f001 fd05 	bl	800c226 <SDMMC_GetResponse>
 800a81c:	4602      	mov	r2, r0
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	2300      	movs	r3, #0
 800a83a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fcef 	bl	800c226 <SDMMC_GetResponse>
 800a848:	4603      	mov	r3, r0
 800a84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a852:	d102      	bne.n	800a85a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a858:	e02f      	b.n	800a8ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f879 	bl	800a958 <SD_FindSCR>
 800a866:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	e023      	b.n	800a8ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01c      	beq.n	800a8b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a884:	041b      	lsls	r3, r3, #16
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f001 fe37 	bl	800c4fc <SDMMC_CmdAppCommand>
 800a88e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	e00f      	b.n	800a8ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2102      	movs	r1, #2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f001 fe70 	bl	800c586 <SDMMC_CmdBusWidth>
 800a8a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	e003      	b.n	800a8ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e001      	b.n	800a8ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fca4 	bl	800c226 <SDMMC_GetResponse>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e8:	d102      	bne.n	800a8f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8ee:	e02f      	b.n	800a950 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a8f0:	f107 030c 	add.w	r3, r7, #12
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f82e 	bl	800a958 <SD_FindSCR>
 800a8fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	e023      	b.n	800a950 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01c      	beq.n	800a94c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91a:	041b      	lsls	r3, r3, #16
 800a91c:	4619      	mov	r1, r3
 800a91e:	4610      	mov	r0, r2
 800a920:	f001 fdec 	bl	800c4fc <SDMMC_CmdAppCommand>
 800a924:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	e00f      	b.n	800a950 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f001 fe25 	bl	800c586 <SDMMC_CmdBusWidth>
 800a93c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	e003      	b.n	800a950 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a948:	2300      	movs	r3, #0
 800a94a:	e001      	b.n	800a950 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a94c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a958:	b590      	push	{r4, r7, lr}
 800a95a:	b08f      	sub	sp, #60	; 0x3c
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a962:	f7fa f875 	bl	8004a50 <HAL_GetTick>
 800a966:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a96c:	2300      	movs	r3, #0
 800a96e:	60bb      	str	r3, [r7, #8]
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2108      	movs	r1, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fc90 	bl	800c2a4 <SDMMC_CmdBlockLength>
 800a984:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	e0a9      	b.n	800aae4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a998:	041b      	lsls	r3, r3, #16
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f001 fdad 	bl	800c4fc <SDMMC_CmdAppCommand>
 800a9a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	e09a      	b.n	800aae4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a9b8:	2330      	movs	r3, #48	; 0x30
 800a9ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f107 0210 	add.w	r2, r7, #16
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f001 fc3a 	bl	800c24c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f001 fdf4 	bl	800c5ca <SDMMC_CmdSendSCR>
 800a9e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d022      	beq.n	800aa30 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	e07a      	b.n	800aae4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00e      	beq.n	800aa1a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	f107 0208 	add.w	r2, r7, #8
 800aa08:	18d4      	adds	r4, r2, r3
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	f001 fb99 	bl	800c142 <SDMMC_ReadFIFO>
 800aa10:	4603      	mov	r3, r0
 800aa12:	6023      	str	r3, [r4, #0]
      index++;
 800aa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa16:	3301      	adds	r3, #1
 800aa18:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa1a:	f7fa f819 	bl	8004a50 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d102      	bne.n	800aa30 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aa2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa2e:	e059      	b.n	800aae4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa36:	f240 432a 	movw	r3, #1066	; 0x42a
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0d6      	beq.n	800a9ee <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d005      	beq.n	800aa5a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2208      	movs	r2, #8
 800aa54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aa56:	2308      	movs	r3, #8
 800aa58:	e044      	b.n	800aae4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d005      	beq.n	800aa74 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa70:	2302      	movs	r3, #2
 800aa72:	e037      	b.n	800aae4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2220      	movs	r2, #32
 800aa88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa8a:	2320      	movs	r3, #32
 800aa8c:	e02a      	b.n	800aae4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	061a      	lsls	r2, r3, #24
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaa4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aaae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	0e1b      	lsrs	r3, r3, #24
 800aab4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	601a      	str	r2, [r3, #0]
    scr++;
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	3304      	adds	r3, #4
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	061a      	lsls	r2, r3, #24
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	021b      	lsls	r3, r3, #8
 800aac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aacc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	0a1b      	lsrs	r3, r3, #8
 800aad2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aad6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	0e1b      	lsrs	r3, r3, #24
 800aadc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	373c      	adds	r7, #60	; 0x3c
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd90      	pop	{r4, r7, pc}

0800aaec <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d03f      	beq.n	800ab86 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	e033      	b.n	800ab74 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f001 fb16 	bl	800c142 <SDMMC_ReadFIFO>
 800ab16:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	0c1b      	lsrs	r3, r3, #16
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	0e1b      	lsrs	r3, r3, #24
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3301      	adds	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	3301      	adds	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	d9c8      	bls.n	800ab0c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ab86:	bf00      	nop
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b086      	sub	sp, #24
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d043      	beq.n	800ac30 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	e037      	b.n	800ac1e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	3301      	adds	r3, #1
 800abb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	021a      	lsls	r2, r3, #8
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4313      	orrs	r3, r2
 800abca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3301      	adds	r3, #1
 800abd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	041a      	lsls	r2, r3, #16
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3301      	adds	r3, #1
 800abe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3b01      	subs	r3, #1
 800abee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	061a      	lsls	r2, r3, #24
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f107 0208 	add.w	r2, r7, #8
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 faa2 	bl	800c15c <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b07      	cmp	r3, #7
 800ac22:	d9c4      	bls.n	800abae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ac30:	bf00      	nop
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e038      	b.n	800acc0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7f9 fd1c 	bl	80046a0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3308      	adds	r3, #8
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f001 f920 	bl	800beb8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	461a      	mov	r2, r3
 800ac82:	68b9      	ldr	r1, [r7, #8]
 800ac84:	f001 f9a8 	bl	800bfd8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6858      	ldr	r0, [r3, #4]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	f001 f9ef 	bl	800c078 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	6892      	ldr	r2, [r2, #8]
 800aca2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	6892      	ldr	r2, [r2, #8]
 800acae:	f041 0101 	orr.w	r1, r1, #1
 800acb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e040      	b.n	800ad5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7f9 fbea 	bl	80044c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2224      	movs	r2, #36	; 0x24
 800acf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 0201 	bic.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fbc2 	bl	800b490 <UART_SetConfig>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e022      	b.n	800ad5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fe6e 	bl	800ba00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f042 0201 	orr.w	r2, r2, #1
 800ad52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fef5 	bl	800bb44 <UART_CheckIdleState>
 800ad5a:	4603      	mov	r3, r0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08a      	sub	sp, #40	; 0x28
 800ad68:	af02      	add	r7, sp, #8
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	4613      	mov	r3, r2
 800ad72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	f040 8082 	bne.w	800ae82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <HAL_UART_Transmit+0x26>
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e07a      	b.n	800ae84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UART_Transmit+0x38>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e073      	b.n	800ae84 <HAL_UART_Transmit+0x120>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2221      	movs	r2, #33	; 0x21
 800adb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adb2:	f7f9 fe4d 	bl	8004a50 <HAL_GetTick>
 800adb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	88fa      	ldrh	r2, [r7, #6]
 800adbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add0:	d108      	bne.n	800ade4 <HAL_UART_Transmit+0x80>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d104      	bne.n	800ade4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	61bb      	str	r3, [r7, #24]
 800ade2:	e003      	b.n	800adec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800adf4:	e02d      	b.n	800ae52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2200      	movs	r2, #0
 800adfe:	2180      	movs	r1, #128	; 0x80
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fee8 	bl	800bbd6 <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e039      	b.n	800ae84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	881a      	ldrh	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae22:	b292      	uxth	r2, r2
 800ae24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	3302      	adds	r3, #2
 800ae2a:	61bb      	str	r3, [r7, #24]
 800ae2c:	e008      	b.n	800ae40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	b292      	uxth	r2, r2
 800ae38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1cb      	bne.n	800adf6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2140      	movs	r1, #64	; 0x40
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 feb4 	bl	800bbd6 <UART_WaitOnFlagUntilTimeout>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e005      	b.n	800ae84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e000      	b.n	800ae84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ae82:	2302      	movs	r3, #2
  }
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3720      	adds	r7, #32
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b0ba      	sub	sp, #232	; 0xe8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aeb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aeb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800aeba:	4013      	ands	r3, r2
 800aebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d115      	bne.n	800aef4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00f      	beq.n	800aef4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 82a6 	beq.w	800b436 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
      }
      return;
 800aef2:	e2a0      	b.n	800b436 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800aef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8117 	beq.w	800b12c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aefe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800af0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af0e:	4b85      	ldr	r3, [pc, #532]	; (800b124 <HAL_UART_IRQHandler+0x298>)
 800af10:	4013      	ands	r3, r2
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 810a 	beq.w	800b12c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d011      	beq.n	800af48 <HAL_UART_IRQHandler+0xbc>
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2201      	movs	r2, #1
 800af36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3e:	f043 0201 	orr.w	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	d011      	beq.n	800af78 <HAL_UART_IRQHandler+0xec>
 800af54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2202      	movs	r2, #2
 800af66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6e:	f043 0204 	orr.w	r2, r3, #4
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d011      	beq.n	800afa8 <HAL_UART_IRQHandler+0x11c>
 800af84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2204      	movs	r2, #4
 800af96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af9e:	f043 0202 	orr.w	r2, r3, #2
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afac:	f003 0308 	and.w	r3, r3, #8
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d017      	beq.n	800afe4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800afc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2208      	movs	r2, #8
 800afd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afda:	f043 0208 	orr.w	r2, r3, #8
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afec:	2b00      	cmp	r3, #0
 800afee:	d012      	beq.n	800b016 <HAL_UART_IRQHandler+0x18a>
 800aff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b00c:	f043 0220 	orr.w	r2, r3, #32
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 820c 	beq.w	800b43a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b026:	f003 0320 	and.w	r3, r3, #32
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00d      	beq.n	800b04a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	d007      	beq.n	800b04a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05e:	2b40      	cmp	r3, #64	; 0x40
 800b060:	d005      	beq.n	800b06e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b066:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d04f      	beq.n	800b10e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fe75 	bl	800bd5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07e:	2b40      	cmp	r3, #64	; 0x40
 800b080:	d141      	bne.n	800b106 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3308      	adds	r3, #8
 800b088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b0ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b0b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b0ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b0c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1d9      	bne.n	800b082 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d013      	beq.n	800b0fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0da:	4a13      	ldr	r2, [pc, #76]	; (800b128 <HAL_UART_IRQHandler+0x29c>)
 800b0dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fa f8b2 	bl	800524c <HAL_DMA_Abort_IT>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d017      	beq.n	800b11e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0fc:	e00f      	b.n	800b11e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f9b0 	bl	800b464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b104:	e00b      	b.n	800b11e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f9ac 	bl	800b464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10c:	e007      	b.n	800b11e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9a8 	bl	800b464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b11c:	e18d      	b.n	800b43a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b11e:	bf00      	nop
    return;
 800b120:	e18b      	b.n	800b43a <HAL_UART_IRQHandler+0x5ae>
 800b122:	bf00      	nop
 800b124:	04000120 	.word	0x04000120
 800b128:	0800be25 	.word	0x0800be25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b130:	2b01      	cmp	r3, #1
 800b132:	f040 8146 	bne.w	800b3c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13a:	f003 0310 	and.w	r3, r3, #16
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 813f 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8138 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2210      	movs	r2, #16
 800b158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	f040 80b4 	bne.w	800b2d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b176:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 815f 	beq.w	800b43e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f080 8157 	bcs.w	800b43e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f040 8085 	bne.w	800b2b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b1da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1da      	bne.n	800b1ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3308      	adds	r3, #8
 800b216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b21a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b21e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b22c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e1      	bne.n	800b1f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3308      	adds	r3, #8
 800b252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b256:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b25c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e3      	bne.n	800b232 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27e:	e853 3f00 	ldrex	r3, [r3]
 800b282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b286:	f023 0310 	bic.w	r3, r3, #16
 800b28a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b298:	65bb      	str	r3, [r7, #88]	; 0x58
 800b29a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b29e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2a0:	e841 2300 	strex	r3, r2, [r1]
 800b2a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e4      	bne.n	800b276 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f9 ff8d 	bl	80051d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f8d4 	bl	800b478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2d0:	e0b5      	b.n	800b43e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80a7 	beq.w	800b442 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b2f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80a2 	beq.w	800b442 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	e853 3f00 	ldrex	r3, [r3]
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b320:	647b      	str	r3, [r7, #68]	; 0x44
 800b322:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e4      	bne.n	800b2fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3308      	adds	r3, #8
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	623b      	str	r3, [r7, #32]
   return(result);
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	f023 0301 	bic.w	r3, r3, #1
 800b34a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3308      	adds	r3, #8
 800b354:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b358:	633a      	str	r2, [r7, #48]	; 0x30
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e3      	bne.n	800b334 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2220      	movs	r2, #32
 800b370:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	e853 3f00 	ldrex	r3, [r3]
 800b38a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0310 	bic.w	r3, r3, #16
 800b392:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b3a0:	61fb      	str	r3, [r7, #28]
 800b3a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a4:	69b9      	ldr	r1, [r7, #24]
 800b3a6:	69fa      	ldr	r2, [r7, #28]
 800b3a8:	e841 2300 	strex	r3, r2, [r1]
 800b3ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e4      	bne.n	800b37e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f85c 	bl	800b478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3c0:	e03f      	b.n	800b442 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00e      	beq.n	800b3ec <HAL_UART_IRQHandler+0x560>
 800b3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fd5d 	bl	800bea4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3ea:	e02d      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00e      	beq.n	800b416 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b400:	2b00      	cmp	r3, #0
 800b402:	d008      	beq.n	800b416 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01c      	beq.n	800b446 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	4798      	blx	r3
    }
    return;
 800b414:	e017      	b.n	800b446 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d012      	beq.n	800b448 <HAL_UART_IRQHandler+0x5bc>
 800b422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00c      	beq.n	800b448 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fd0e 	bl	800be50 <UART_EndTransmit_IT>
    return;
 800b434:	e008      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b436:	bf00      	nop
 800b438:	e006      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b43a:	bf00      	nop
 800b43c:	e004      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b43e:	bf00      	nop
 800b440:	e002      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b442:	bf00      	nop
 800b444:	e000      	b.n	800b448 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b446:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b448:	37e8      	adds	r7, #232	; 0xe8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop

0800b450 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b494:	b08a      	sub	sp, #40	; 0x28
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	431a      	orrs	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4ba4      	ldr	r3, [pc, #656]	; (800b750 <UART_SetConfig+0x2c0>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a99      	ldr	r2, [pc, #612]	; (800b754 <UART_SetConfig+0x2c4>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d004      	beq.n	800b4fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b50c:	430a      	orrs	r2, r1
 800b50e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a90      	ldr	r2, [pc, #576]	; (800b758 <UART_SetConfig+0x2c8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d126      	bne.n	800b568 <UART_SetConfig+0xd8>
 800b51a:	4b90      	ldr	r3, [pc, #576]	; (800b75c <UART_SetConfig+0x2cc>)
 800b51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	2b03      	cmp	r3, #3
 800b526:	d81b      	bhi.n	800b560 <UART_SetConfig+0xd0>
 800b528:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <UART_SetConfig+0xa0>)
 800b52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52e:	bf00      	nop
 800b530:	0800b541 	.word	0x0800b541
 800b534:	0800b551 	.word	0x0800b551
 800b538:	0800b549 	.word	0x0800b549
 800b53c:	0800b559 	.word	0x0800b559
 800b540:	2301      	movs	r3, #1
 800b542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b546:	e116      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b548:	2302      	movs	r3, #2
 800b54a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b54e:	e112      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b550:	2304      	movs	r3, #4
 800b552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b556:	e10e      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b558:	2308      	movs	r3, #8
 800b55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b55e:	e10a      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b560:	2310      	movs	r3, #16
 800b562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b566:	e106      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a7c      	ldr	r2, [pc, #496]	; (800b760 <UART_SetConfig+0x2d0>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d138      	bne.n	800b5e4 <UART_SetConfig+0x154>
 800b572:	4b7a      	ldr	r3, [pc, #488]	; (800b75c <UART_SetConfig+0x2cc>)
 800b574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b578:	f003 030c 	and.w	r3, r3, #12
 800b57c:	2b0c      	cmp	r3, #12
 800b57e:	d82d      	bhi.n	800b5dc <UART_SetConfig+0x14c>
 800b580:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <UART_SetConfig+0xf8>)
 800b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b586:	bf00      	nop
 800b588:	0800b5bd 	.word	0x0800b5bd
 800b58c:	0800b5dd 	.word	0x0800b5dd
 800b590:	0800b5dd 	.word	0x0800b5dd
 800b594:	0800b5dd 	.word	0x0800b5dd
 800b598:	0800b5cd 	.word	0x0800b5cd
 800b59c:	0800b5dd 	.word	0x0800b5dd
 800b5a0:	0800b5dd 	.word	0x0800b5dd
 800b5a4:	0800b5dd 	.word	0x0800b5dd
 800b5a8:	0800b5c5 	.word	0x0800b5c5
 800b5ac:	0800b5dd 	.word	0x0800b5dd
 800b5b0:	0800b5dd 	.word	0x0800b5dd
 800b5b4:	0800b5dd 	.word	0x0800b5dd
 800b5b8:	0800b5d5 	.word	0x0800b5d5
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5c2:	e0d8      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ca:	e0d4      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5d2:	e0d0      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b5d4:	2308      	movs	r3, #8
 800b5d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5da:	e0cc      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b5dc:	2310      	movs	r3, #16
 800b5de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5e2:	e0c8      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a5e      	ldr	r2, [pc, #376]	; (800b764 <UART_SetConfig+0x2d4>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d125      	bne.n	800b63a <UART_SetConfig+0x1aa>
 800b5ee:	4b5b      	ldr	r3, [pc, #364]	; (800b75c <UART_SetConfig+0x2cc>)
 800b5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5f8:	2b30      	cmp	r3, #48	; 0x30
 800b5fa:	d016      	beq.n	800b62a <UART_SetConfig+0x19a>
 800b5fc:	2b30      	cmp	r3, #48	; 0x30
 800b5fe:	d818      	bhi.n	800b632 <UART_SetConfig+0x1a2>
 800b600:	2b20      	cmp	r3, #32
 800b602:	d00a      	beq.n	800b61a <UART_SetConfig+0x18a>
 800b604:	2b20      	cmp	r3, #32
 800b606:	d814      	bhi.n	800b632 <UART_SetConfig+0x1a2>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <UART_SetConfig+0x182>
 800b60c:	2b10      	cmp	r3, #16
 800b60e:	d008      	beq.n	800b622 <UART_SetConfig+0x192>
 800b610:	e00f      	b.n	800b632 <UART_SetConfig+0x1a2>
 800b612:	2300      	movs	r3, #0
 800b614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b618:	e0ad      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b61a:	2302      	movs	r3, #2
 800b61c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b620:	e0a9      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b622:	2304      	movs	r3, #4
 800b624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b628:	e0a5      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b62a:	2308      	movs	r3, #8
 800b62c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b630:	e0a1      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b632:	2310      	movs	r3, #16
 800b634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b638:	e09d      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a4a      	ldr	r2, [pc, #296]	; (800b768 <UART_SetConfig+0x2d8>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d125      	bne.n	800b690 <UART_SetConfig+0x200>
 800b644:	4b45      	ldr	r3, [pc, #276]	; (800b75c <UART_SetConfig+0x2cc>)
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b64e:	2bc0      	cmp	r3, #192	; 0xc0
 800b650:	d016      	beq.n	800b680 <UART_SetConfig+0x1f0>
 800b652:	2bc0      	cmp	r3, #192	; 0xc0
 800b654:	d818      	bhi.n	800b688 <UART_SetConfig+0x1f8>
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d00a      	beq.n	800b670 <UART_SetConfig+0x1e0>
 800b65a:	2b80      	cmp	r3, #128	; 0x80
 800b65c:	d814      	bhi.n	800b688 <UART_SetConfig+0x1f8>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <UART_SetConfig+0x1d8>
 800b662:	2b40      	cmp	r3, #64	; 0x40
 800b664:	d008      	beq.n	800b678 <UART_SetConfig+0x1e8>
 800b666:	e00f      	b.n	800b688 <UART_SetConfig+0x1f8>
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b66e:	e082      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b670:	2302      	movs	r3, #2
 800b672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b676:	e07e      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b678:	2304      	movs	r3, #4
 800b67a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b67e:	e07a      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b680:	2308      	movs	r3, #8
 800b682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b686:	e076      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b688:	2310      	movs	r3, #16
 800b68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b68e:	e072      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a35      	ldr	r2, [pc, #212]	; (800b76c <UART_SetConfig+0x2dc>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d12a      	bne.n	800b6f0 <UART_SetConfig+0x260>
 800b69a:	4b30      	ldr	r3, [pc, #192]	; (800b75c <UART_SetConfig+0x2cc>)
 800b69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6a8:	d01a      	beq.n	800b6e0 <UART_SetConfig+0x250>
 800b6aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6ae:	d81b      	bhi.n	800b6e8 <UART_SetConfig+0x258>
 800b6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6b4:	d00c      	beq.n	800b6d0 <UART_SetConfig+0x240>
 800b6b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ba:	d815      	bhi.n	800b6e8 <UART_SetConfig+0x258>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d003      	beq.n	800b6c8 <UART_SetConfig+0x238>
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c4:	d008      	beq.n	800b6d8 <UART_SetConfig+0x248>
 800b6c6:	e00f      	b.n	800b6e8 <UART_SetConfig+0x258>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ce:	e052      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6d6:	e04e      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b6d8:	2304      	movs	r3, #4
 800b6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6de:	e04a      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6e6:	e046      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ee:	e042      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a17      	ldr	r2, [pc, #92]	; (800b754 <UART_SetConfig+0x2c4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d13a      	bne.n	800b770 <UART_SetConfig+0x2e0>
 800b6fa:	4b18      	ldr	r3, [pc, #96]	; (800b75c <UART_SetConfig+0x2cc>)
 800b6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b708:	d01a      	beq.n	800b740 <UART_SetConfig+0x2b0>
 800b70a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b70e:	d81b      	bhi.n	800b748 <UART_SetConfig+0x2b8>
 800b710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b714:	d00c      	beq.n	800b730 <UART_SetConfig+0x2a0>
 800b716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b71a:	d815      	bhi.n	800b748 <UART_SetConfig+0x2b8>
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <UART_SetConfig+0x298>
 800b720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b724:	d008      	beq.n	800b738 <UART_SetConfig+0x2a8>
 800b726:	e00f      	b.n	800b748 <UART_SetConfig+0x2b8>
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b72e:	e022      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b730:	2302      	movs	r3, #2
 800b732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b736:	e01e      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b738:	2304      	movs	r3, #4
 800b73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b73e:	e01a      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b740:	2308      	movs	r3, #8
 800b742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b746:	e016      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b748:	2310      	movs	r3, #16
 800b74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b74e:	e012      	b.n	800b776 <UART_SetConfig+0x2e6>
 800b750:	efff69f3 	.word	0xefff69f3
 800b754:	40008000 	.word	0x40008000
 800b758:	40013800 	.word	0x40013800
 800b75c:	40021000 	.word	0x40021000
 800b760:	40004400 	.word	0x40004400
 800b764:	40004800 	.word	0x40004800
 800b768:	40004c00 	.word	0x40004c00
 800b76c:	40005000 	.word	0x40005000
 800b770:	2310      	movs	r3, #16
 800b772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a9f      	ldr	r2, [pc, #636]	; (800b9f8 <UART_SetConfig+0x568>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d17a      	bne.n	800b876 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b784:	2b08      	cmp	r3, #8
 800b786:	d824      	bhi.n	800b7d2 <UART_SetConfig+0x342>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <UART_SetConfig+0x300>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7d3 	.word	0x0800b7d3
 800b798:	0800b7bd 	.word	0x0800b7bd
 800b79c:	0800b7d3 	.word	0x0800b7d3
 800b7a0:	0800b7c3 	.word	0x0800b7c3
 800b7a4:	0800b7d3 	.word	0x0800b7d3
 800b7a8:	0800b7d3 	.word	0x0800b7d3
 800b7ac:	0800b7d3 	.word	0x0800b7d3
 800b7b0:	0800b7cb 	.word	0x0800b7cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b4:	f7fc f8da 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 800b7b8:	61f8      	str	r0, [r7, #28]
        break;
 800b7ba:	e010      	b.n	800b7de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7bc:	4b8f      	ldr	r3, [pc, #572]	; (800b9fc <UART_SetConfig+0x56c>)
 800b7be:	61fb      	str	r3, [r7, #28]
        break;
 800b7c0:	e00d      	b.n	800b7de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7c2:	f7fc f83b 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800b7c6:	61f8      	str	r0, [r7, #28]
        break;
 800b7c8:	e009      	b.n	800b7de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ce:	61fb      	str	r3, [r7, #28]
        break;
 800b7d0:	e005      	b.n	800b7de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b7dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80fb 	beq.w	800b9dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	4413      	add	r3, r2
 800b7f0:	69fa      	ldr	r2, [r7, #28]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d305      	bcc.n	800b802 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b7fc:	69fa      	ldr	r2, [r7, #28]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d903      	bls.n	800b80a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b808:	e0e8      	b.n	800b9dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	2200      	movs	r2, #0
 800b80e:	461c      	mov	r4, r3
 800b810:	4615      	mov	r5, r2
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	022b      	lsls	r3, r5, #8
 800b81c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b820:	0222      	lsls	r2, r4, #8
 800b822:	68f9      	ldr	r1, [r7, #12]
 800b824:	6849      	ldr	r1, [r1, #4]
 800b826:	0849      	lsrs	r1, r1, #1
 800b828:	2000      	movs	r0, #0
 800b82a:	4688      	mov	r8, r1
 800b82c:	4681      	mov	r9, r0
 800b82e:	eb12 0a08 	adds.w	sl, r2, r8
 800b832:	eb43 0b09 	adc.w	fp, r3, r9
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	603b      	str	r3, [r7, #0]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b844:	4650      	mov	r0, sl
 800b846:	4659      	mov	r1, fp
 800b848:	f7f4 fd22 	bl	8000290 <__aeabi_uldivmod>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4613      	mov	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b85a:	d308      	bcc.n	800b86e <UART_SetConfig+0x3de>
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b862:	d204      	bcs.n	800b86e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	69ba      	ldr	r2, [r7, #24]
 800b86a:	60da      	str	r2, [r3, #12]
 800b86c:	e0b6      	b.n	800b9dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b874:	e0b2      	b.n	800b9dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b87e:	d15e      	bne.n	800b93e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b884:	2b08      	cmp	r3, #8
 800b886:	d828      	bhi.n	800b8da <UART_SetConfig+0x44a>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0x400>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8bd 	.word	0x0800b8bd
 800b898:	0800b8c5 	.word	0x0800b8c5
 800b89c:	0800b8db 	.word	0x0800b8db
 800b8a0:	0800b8cb 	.word	0x0800b8cb
 800b8a4:	0800b8db 	.word	0x0800b8db
 800b8a8:	0800b8db 	.word	0x0800b8db
 800b8ac:	0800b8db 	.word	0x0800b8db
 800b8b0:	0800b8d3 	.word	0x0800b8d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8b4:	f7fc f85a 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 800b8b8:	61f8      	str	r0, [r7, #28]
        break;
 800b8ba:	e014      	b.n	800b8e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8bc:	f7fc f86c 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 800b8c0:	61f8      	str	r0, [r7, #28]
        break;
 800b8c2:	e010      	b.n	800b8e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8c4:	4b4d      	ldr	r3, [pc, #308]	; (800b9fc <UART_SetConfig+0x56c>)
 800b8c6:	61fb      	str	r3, [r7, #28]
        break;
 800b8c8:	e00d      	b.n	800b8e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ca:	f7fb ffb7 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800b8ce:	61f8      	str	r0, [r7, #28]
        break;
 800b8d0:	e009      	b.n	800b8e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8d6:	61fb      	str	r3, [r7, #28]
        break;
 800b8d8:	e005      	b.n	800b8e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b8e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d077      	beq.n	800b9dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	005a      	lsls	r2, r3, #1
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	085b      	lsrs	r3, r3, #1
 800b8f6:	441a      	add	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b900:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	2b0f      	cmp	r3, #15
 800b906:	d916      	bls.n	800b936 <UART_SetConfig+0x4a6>
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b90e:	d212      	bcs.n	800b936 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	b29b      	uxth	r3, r3
 800b914:	f023 030f 	bic.w	r3, r3, #15
 800b918:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	085b      	lsrs	r3, r3, #1
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	b29a      	uxth	r2, r3
 800b926:	8afb      	ldrh	r3, [r7, #22]
 800b928:	4313      	orrs	r3, r2
 800b92a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	8afa      	ldrh	r2, [r7, #22]
 800b932:	60da      	str	r2, [r3, #12]
 800b934:	e052      	b.n	800b9dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b93c:	e04e      	b.n	800b9dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b93e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b942:	2b08      	cmp	r3, #8
 800b944:	d827      	bhi.n	800b996 <UART_SetConfig+0x506>
 800b946:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x4bc>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b971 	.word	0x0800b971
 800b950:	0800b979 	.word	0x0800b979
 800b954:	0800b981 	.word	0x0800b981
 800b958:	0800b997 	.word	0x0800b997
 800b95c:	0800b987 	.word	0x0800b987
 800b960:	0800b997 	.word	0x0800b997
 800b964:	0800b997 	.word	0x0800b997
 800b968:	0800b997 	.word	0x0800b997
 800b96c:	0800b98f 	.word	0x0800b98f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b970:	f7fb fffc 	bl	800796c <HAL_RCC_GetPCLK1Freq>
 800b974:	61f8      	str	r0, [r7, #28]
        break;
 800b976:	e014      	b.n	800b9a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b978:	f7fc f80e 	bl	8007998 <HAL_RCC_GetPCLK2Freq>
 800b97c:	61f8      	str	r0, [r7, #28]
        break;
 800b97e:	e010      	b.n	800b9a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b980:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <UART_SetConfig+0x56c>)
 800b982:	61fb      	str	r3, [r7, #28]
        break;
 800b984:	e00d      	b.n	800b9a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b986:	f7fb ff59 	bl	800783c <HAL_RCC_GetSysClockFreq>
 800b98a:	61f8      	str	r0, [r7, #28]
        break;
 800b98c:	e009      	b.n	800b9a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b98e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b992:	61fb      	str	r3, [r7, #28]
        break;
 800b994:	e005      	b.n	800b9a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b9a0:	bf00      	nop
    }

    if (pclk != 0U)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d019      	beq.n	800b9dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	085a      	lsrs	r2, r3, #1
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	2b0f      	cmp	r3, #15
 800b9c0:	d909      	bls.n	800b9d6 <UART_SetConfig+0x546>
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c8:	d205      	bcs.n	800b9d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	60da      	str	r2, [r3, #12]
 800b9d4:	e002      	b.n	800b9dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b9e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3728      	adds	r7, #40	; 0x28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9f6:	bf00      	nop
 800b9f8:	40008000 	.word	0x40008000
 800b9fc:	00f42400 	.word	0x00f42400

0800ba00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00a      	beq.n	800ba2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	f003 0308 	and.w	r3, r3, #8
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	f003 0310 	and.w	r3, r3, #16
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01a      	beq.n	800bb16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bafe:	d10a      	bne.n	800bb16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	605a      	str	r2, [r3, #4]
  }
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb54:	f7f8 ff7c 	bl	8004a50 <HAL_GetTick>
 800bb58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d10e      	bne.n	800bb86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f82d 	bl	800bbd6 <UART_WaitOnFlagUntilTimeout>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e023      	b.n	800bbce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 0304 	and.w	r3, r3, #4
 800bb90:	2b04      	cmp	r3, #4
 800bb92:	d10e      	bne.n	800bbb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f817 	bl	800bbd6 <UART_WaitOnFlagUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e00d      	b.n	800bbce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b09c      	sub	sp, #112	; 0x70
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbe6:	e0a5      	b.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	f000 80a1 	beq.w	800bd34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbf2:	f7f8 ff2d 	bl	8004a50 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d302      	bcc.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d13e      	bne.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc1c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e6      	bne.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	663b      	str	r3, [r7, #96]	; 0x60
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3308      	adds	r3, #8
 800bc58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e5      	bne.n	800bc3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2220      	movs	r2, #32
 800bc78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e067      	b.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d04f      	beq.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca2:	d147      	bne.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e6      	bne.n	800bcae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3308      	adds	r3, #8
 800bce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	613b      	str	r3, [r7, #16]
   return(result);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f023 0301 	bic.w	r3, r3, #1
 800bcf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd00:	623a      	str	r2, [r7, #32]
 800bd02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	69f9      	ldr	r1, [r7, #28]
 800bd06:	6a3a      	ldr	r2, [r7, #32]
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e5      	bne.n	800bce0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2220      	movs	r2, #32
 800bd18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2220      	movs	r2, #32
 800bd24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e010      	b.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	69da      	ldr	r2, [r3, #28]
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	bf0c      	ite	eq
 800bd44:	2301      	moveq	r3, #1
 800bd46:	2300      	movne	r3, #0
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	f43f af4a 	beq.w	800bbe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3770      	adds	r7, #112	; 0x70
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b095      	sub	sp, #84	; 0x54
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd84:	643b      	str	r3, [r7, #64]	; 0x40
 800bd86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e6      	bne.n	800bd66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc0:	e841 2300 	strex	r3, r2, [r1]
 800bdc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e5      	bne.n	800bd98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d118      	bne.n	800be06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f023 0310 	bic.w	r3, r3, #16
 800bde8:	647b      	str	r3, [r7, #68]	; 0x44
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf2:	61bb      	str	r3, [r7, #24]
 800bdf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6979      	ldr	r1, [r7, #20]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	613b      	str	r3, [r7, #16]
   return(result);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e6      	bne.n	800bdd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2220      	movs	r2, #32
 800be0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	665a      	str	r2, [r3, #100]	; 0x64
}
 800be18:	bf00      	nop
 800be1a:	3754      	adds	r7, #84	; 0x54
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fb0e 	bl	800b464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	60bb      	str	r3, [r7, #8]
   return(result);
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be6c:	61fb      	str	r3, [r7, #28]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	61bb      	str	r3, [r7, #24]
 800be78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7a:	6979      	ldr	r1, [r7, #20]
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	e841 2300 	strex	r3, r2, [r1]
 800be82:	613b      	str	r3, [r7, #16]
   return(result);
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1e6      	bne.n	800be58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2220      	movs	r2, #32
 800be8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fada 	bl	800b450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be9c:	bf00      	nop
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	f023 0101 	bic.w	r1, r3, #1
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b08      	cmp	r3, #8
 800bee0:	d102      	bne.n	800bee8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	e001      	b.n	800beec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800bee8:	2300      	movs	r3, #0
 800beea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800bef8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800befe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800bf04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800bf0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800bf10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800bf16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800bf1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800bf22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800bf28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800bf50:	4b20      	ldr	r3, [pc, #128]	; (800bfd4 <FMC_NORSRAM_Init+0x11c>)
 800bf52:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf62:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800bf6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	ea02 0103 	and.w	r1, r2, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	4319      	orrs	r1, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf94:	d10c      	bne.n	800bfb0 <FMC_NORSRAM_Init+0xf8>
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	0008fb7f 	.word	0x0008fb7f

0800bfd8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	431a      	orrs	r2, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	021b      	lsls	r3, r3, #8
 800c004:	431a      	orrs	r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	041b      	lsls	r3, r3, #16
 800c00c:	431a      	orrs	r2, r3
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	3b01      	subs	r3, #1
 800c014:	051b      	lsls	r3, r3, #20
 800c016:	431a      	orrs	r2, r3
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	3b02      	subs	r3, #2
 800c01e:	061b      	lsls	r3, r3, #24
 800c020:	431a      	orrs	r2, r3
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	4313      	orrs	r3, r2
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	3201      	adds	r2, #1
 800c02c:	4319      	orrs	r1, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c040:	d113      	bne.n	800c06a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c04a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	3b01      	subs	r3, #1
 800c052:	051b      	lsls	r3, r3, #20
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	4313      	orrs	r3, r2
 800c058:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	431a      	orrs	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c08c:	d11d      	bne.n	800c0ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c096:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c098:	4013      	ands	r3, r2
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	6811      	ldr	r1, [r2, #0]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	6852      	ldr	r2, [r2, #4]
 800c0a2:	0112      	lsls	r2, r2, #4
 800c0a4:	4311      	orrs	r1, r2
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	6892      	ldr	r2, [r2, #8]
 800c0aa:	0212      	lsls	r2, r2, #8
 800c0ac:	4311      	orrs	r1, r2
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	69d2      	ldr	r2, [r2, #28]
 800c0b2:	4311      	orrs	r1, r2
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	6912      	ldr	r2, [r2, #16]
 800c0b8:	0412      	lsls	r2, r2, #16
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	ea43 0102 	orr.w	r1, r3, r2
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c0c8:	e005      	b.n	800c0d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c0d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	cff00000 	.word	0xcff00000

0800c0e8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	b480      	push	{r7}
 800c0ec:	b085      	sub	sp, #20
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	f107 001c 	add.w	r0, r7, #28
 800c0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800c106:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800c10a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c10e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c112:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c116:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	431a      	orrs	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	b004      	add	sp, #16
 800c140:	4770      	bx	lr

0800c142 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2203      	movs	r2, #3
 800c18a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c18c:	2002      	movs	r0, #2
 800c18e:	f7f8 fc6b 	bl	8004a68 <HAL_Delay>

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 0303 	and.w	r3, r3, #3
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c1dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c1e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c1f2:	f023 030f 	bic.w	r3, r3, #15
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	b2db      	uxtb	r3, r3
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c226:	b480      	push	{r7}
 800c228:	b085      	sub	sp, #20
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3314      	adds	r3, #20
 800c234:	461a      	mov	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	4413      	add	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c272:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c278:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c27e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c296:	2300      	movs	r3, #0

}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c2b2:	2310      	movs	r3, #16
 800c2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2b6:	2340      	movs	r3, #64	; 0x40
 800c2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2c4:	f107 0308 	add.w	r3, r7, #8
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff ff74 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2d4:	2110      	movs	r1, #16
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fa18 	bl	800c70c <SDMMC_GetCmdResp1>
 800c2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2de:	69fb      	ldr	r3, [r7, #28]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3720      	adds	r7, #32
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c2f6:	2311      	movs	r3, #17
 800c2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2fa:	2340      	movs	r3, #64	; 0x40
 800c2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2fe:	2300      	movs	r3, #0
 800c300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c308:	f107 0308 	add.w	r3, r7, #8
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff ff52 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c314:	f241 3288 	movw	r2, #5000	; 0x1388
 800c318:	2111      	movs	r1, #17
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f9f6 	bl	800c70c <SDMMC_GetCmdResp1>
 800c320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c322:	69fb      	ldr	r3, [r7, #28]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c33a:	2312      	movs	r3, #18
 800c33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c33e:	2340      	movs	r3, #64	; 0x40
 800c340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c34a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c34c:	f107 0308 	add.w	r3, r7, #8
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff ff30 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c358:	f241 3288 	movw	r2, #5000	; 0x1388
 800c35c:	2112      	movs	r1, #18
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f9d4 	bl	800c70c <SDMMC_GetCmdResp1>
 800c364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c366:	69fb      	ldr	r3, [r7, #28]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c37e:	2318      	movs	r3, #24
 800c380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c382:	2340      	movs	r3, #64	; 0x40
 800c384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c386:	2300      	movs	r3, #0
 800c388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c38e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c390:	f107 0308 	add.w	r3, r7, #8
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff ff0e 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a0:	2118      	movs	r1, #24
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f9b2 	bl	800c70c <SDMMC_GetCmdResp1>
 800c3a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3720      	adds	r7, #32
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c3c2:	2319      	movs	r3, #25
 800c3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3c6:	2340      	movs	r3, #64	; 0x40
 800c3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3d4:	f107 0308 	add.w	r3, r7, #8
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7ff feec 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3e4:	2119      	movs	r1, #25
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f990 	bl	800c70c <SDMMC_GetCmdResp1>
 800c3ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3720      	adds	r7, #32
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c404:	230c      	movs	r3, #12
 800c406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c408:	2340      	movs	r3, #64	; 0x40
 800c40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c414:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fecb 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c422:	4a05      	ldr	r2, [pc, #20]	; (800c438 <SDMMC_CmdStopTransfer+0x40>)
 800c424:	210c      	movs	r1, #12
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f970 	bl	800c70c <SDMMC_GetCmdResp1>
 800c42c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800c42e:	69fb      	ldr	r3, [r7, #28]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3720      	adds	r7, #32
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	05f5e100 	.word	0x05f5e100

0800c43c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08a      	sub	sp, #40	; 0x28
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c44c:	2307      	movs	r3, #7
 800c44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c450:	2340      	movs	r3, #64	; 0x40
 800c452:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c454:	2300      	movs	r3, #0
 800c456:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c45c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c45e:	f107 0310 	add.w	r3, r7, #16
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fea7 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c46e:	2107      	movs	r1, #7
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 f94b 	bl	800c70c <SDMMC_GetCmdResp1>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3728      	adds	r7, #40	; 0x28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b088      	sub	sp, #32
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c48e:	2300      	movs	r3, #0
 800c490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c492:	2300      	movs	r3, #0
 800c494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c496:	2300      	movs	r3, #0
 800c498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c49e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4a0:	f107 0308 	add.w	r3, r7, #8
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7ff fe86 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fb65 	bl	800cb7c <SDMMC_GetCmdError>
 800c4b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b4:	69fb      	ldr	r3, [r7, #28]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b088      	sub	sp, #32
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c4c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c4ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c4cc:	2308      	movs	r3, #8
 800c4ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4d0:	2340      	movs	r3, #64	; 0x40
 800c4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4de:	f107 0308 	add.w	r3, r7, #8
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff fe67 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 faf8 	bl	800cae0 <SDMMC_GetCmdResp7>
 800c4f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4f2:	69fb      	ldr	r3, [r7, #28]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3720      	adds	r7, #32
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b088      	sub	sp, #32
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c50a:	2337      	movs	r3, #55	; 0x37
 800c50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c50e:	2340      	movs	r3, #64	; 0x40
 800c510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c51a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c51c:	f107 0308 	add.w	r3, r7, #8
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fe48 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c528:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52c:	2137      	movs	r1, #55	; 0x37
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f8ec 	bl	800c70c <SDMMC_GetCmdResp1>
 800c534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c536:	69fb      	ldr	r3, [r7, #28]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b088      	sub	sp, #32
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c554:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c556:	2329      	movs	r3, #41	; 0x29
 800c558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c55a:	2340      	movs	r3, #64	; 0x40
 800c55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7ff fe22 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f9ff 	bl	800c978 <SDMMC_GetCmdResp3>
 800c57a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c57c:	69fb      	ldr	r3, [r7, #28]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3720      	adds	r7, #32
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b088      	sub	sp, #32
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c594:	2306      	movs	r3, #6
 800c596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c598:	2340      	movs	r3, #64	; 0x40
 800c59a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5a6:	f107 0308 	add.w	r3, r7, #8
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff fe03 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c5b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b6:	2106      	movs	r1, #6
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f8a7 	bl	800c70c <SDMMC_GetCmdResp1>
 800c5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3720      	adds	r7, #32
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b088      	sub	sp, #32
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c5d6:	2333      	movs	r3, #51	; 0x33
 800c5d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5da:	2340      	movs	r3, #64	; 0x40
 800c5dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5e8:	f107 0308 	add.w	r3, r7, #8
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fde2 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f8:	2133      	movs	r1, #51	; 0x33
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f886 	bl	800c70c <SDMMC_GetCmdResp1>
 800c600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c602:	69fb      	ldr	r3, [r7, #28]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3720      	adds	r7, #32
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c614:	2300      	movs	r3, #0
 800c616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c618:	2302      	movs	r3, #2
 800c61a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c61c:	23c0      	movs	r3, #192	; 0xc0
 800c61e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c620:	2300      	movs	r3, #0
 800c622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c62a:	f107 0308 	add.w	r3, r7, #8
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff fdc1 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f956 	bl	800c8e8 <SDMMC_GetCmdResp2>
 800c63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63e:	69fb      	ldr	r3, [r7, #28]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3720      	adds	r7, #32
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c656:	2309      	movs	r3, #9
 800c658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c65a:	23c0      	movs	r3, #192	; 0xc0
 800c65c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fda2 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f937 	bl	800c8e8 <SDMMC_GetCmdResp2>
 800c67a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c67c:	69fb      	ldr	r3, [r7, #28]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b088      	sub	sp, #32
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c694:	2303      	movs	r3, #3
 800c696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c69c:	2300      	movs	r3, #0
 800c69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6a6:	f107 0308 	add.w	r3, r7, #8
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff fd83 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	2103      	movs	r1, #3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f99c 	bl	800c9f4 <SDMMC_GetCmdResp6>
 800c6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6be:	69fb      	ldr	r3, [r7, #28]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c6d6:	230d      	movs	r3, #13
 800c6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6da:	2340      	movs	r3, #64	; 0x40
 800c6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6e8:	f107 0308 	add.w	r3, r7, #8
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff fd62 	bl	800c1b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f8:	210d      	movs	r1, #13
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f806 	bl	800c70c <SDMMC_GetCmdResp1>
 800c700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c702:	69fb      	ldr	r3, [r7, #28]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3720      	adds	r7, #32
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	460b      	mov	r3, r1
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c71a:	4b70      	ldr	r3, [pc, #448]	; (800c8dc <SDMMC_GetCmdResp1+0x1d0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a70      	ldr	r2, [pc, #448]	; (800c8e0 <SDMMC_GetCmdResp1+0x1d4>)
 800c720:	fba2 2303 	umull	r2, r3, r2, r3
 800c724:	0a5a      	lsrs	r2, r3, #9
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	fb02 f303 	mul.w	r3, r2, r3
 800c72c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	1e5a      	subs	r2, r3, #1
 800c732:	61fa      	str	r2, [r7, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d102      	bne.n	800c73e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c73c:	e0c9      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c742:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0ef      	beq.n	800c72e <SDMMC_GetCmdResp1+0x22>
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1ea      	bne.n	800c72e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d004      	beq.n	800c76e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2204      	movs	r2, #4
 800c768:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c76a:	2304      	movs	r3, #4
 800c76c:	e0b1      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d004      	beq.n	800c784 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c780:	2301      	movs	r3, #1
 800c782:	e0a6      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	22c5      	movs	r2, #197	; 0xc5
 800c788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7ff fd3e 	bl	800c20c <SDMMC_GetCommandResponse>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	4293      	cmp	r3, r2
 800c798:	d001      	beq.n	800c79e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e099      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c79e:	2100      	movs	r1, #0
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fd40 	bl	800c226 <SDMMC_GetResponse>
 800c7a6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	4b4e      	ldr	r3, [pc, #312]	; (800c8e4 <SDMMC_GetCmdResp1+0x1d8>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e08d      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	da02      	bge.n	800c7c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c7bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7c0:	e087      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	e080      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c7da:	2380      	movs	r3, #128	; 0x80
 800c7dc:	e079      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c7e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7ec:	e071      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7fc:	e069      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c80c:	e061      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c81c:	e059      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c82c:	e051      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c83c:	e049      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c84c:	e041      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85c:	e039      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c86c:	e031      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c87c:	e029      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c88c:	e021      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c89c:	e019      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c8a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c8ac:	e011      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c8b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c8bc:	e009      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f003 0308 	and.w	r3, r3, #8
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c8c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c8cc:	e001      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c8ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3720      	adds	r7, #32
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	200000f4 	.word	0x200000f4
 800c8e0:	10624dd3 	.word	0x10624dd3
 800c8e4:	fdffe008 	.word	0xfdffe008

0800c8e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8f0:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <SDMMC_GetCmdResp2+0x88>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a1f      	ldr	r2, [pc, #124]	; (800c974 <SDMMC_GetCmdResp2+0x8c>)
 800c8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fa:	0a5b      	lsrs	r3, r3, #9
 800c8fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c900:	fb02 f303 	mul.w	r3, r2, r3
 800c904:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1e5a      	subs	r2, r3, #1
 800c90a:	60fa      	str	r2, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c914:	e026      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c91a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0ef      	beq.n	800c906 <SDMMC_GetCmdResp2+0x1e>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1ea      	bne.n	800c906 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2204      	movs	r2, #4
 800c940:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c942:	2304      	movs	r3, #4
 800c944:	e00e      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c958:	2301      	movs	r3, #1
 800c95a:	e003      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	22c5      	movs	r2, #197	; 0xc5
 800c960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	200000f4 	.word	0x200000f4
 800c974:	10624dd3 	.word	0x10624dd3

0800c978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c980:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <SDMMC_GetCmdResp3+0x74>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a1a      	ldr	r2, [pc, #104]	; (800c9f0 <SDMMC_GetCmdResp3+0x78>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	0a5b      	lsrs	r3, r3, #9
 800c98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	60fa      	str	r2, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9a4:	e01b      	b.n	800c9de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0ef      	beq.n	800c996 <SDMMC_GetCmdResp3+0x1e>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1ea      	bne.n	800c996 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	f003 0304 	and.w	r3, r3, #4
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	e003      	b.n	800c9de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	22c5      	movs	r2, #197	; 0xc5
 800c9da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	200000f4 	.word	0x200000f4
 800c9f0:	10624dd3 	.word	0x10624dd3

0800c9f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca02:	4b35      	ldr	r3, [pc, #212]	; (800cad8 <SDMMC_GetCmdResp6+0xe4>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a35      	ldr	r2, [pc, #212]	; (800cadc <SDMMC_GetCmdResp6+0xe8>)
 800ca08:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0c:	0a5b      	lsrs	r3, r3, #9
 800ca0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca12:	fb02 f303 	mul.w	r3, r2, r3
 800ca16:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	1e5a      	subs	r2, r3, #1
 800ca1c:	61fa      	str	r2, [r7, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca26:	e052      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0ef      	beq.n	800ca18 <SDMMC_GetCmdResp6+0x24>
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1ea      	bne.n	800ca18 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	f003 0304 	and.w	r3, r3, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2204      	movs	r2, #4
 800ca52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca54:	2304      	movs	r3, #4
 800ca56:	e03a      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d004      	beq.n	800ca6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2201      	movs	r2, #1
 800ca68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e02f      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fbcc 	bl	800c20c <SDMMC_GetCommandResponse>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	7afb      	ldrb	r3, [r7, #11]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d001      	beq.n	800ca82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e025      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	22c5      	movs	r2, #197	; 0xc5
 800ca86:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ca88:	2100      	movs	r1, #0
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f7ff fbcb 	bl	800c226 <SDMMC_GetResponse>
 800ca90:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	0c1b      	lsrs	r3, r3, #16
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e011      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cab8:	e009      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cac8:	e001      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800caca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3720      	adds	r7, #32
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	200000f4 	.word	0x200000f4
 800cadc:	10624dd3 	.word	0x10624dd3

0800cae0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cae8:	4b22      	ldr	r3, [pc, #136]	; (800cb74 <SDMMC_GetCmdResp7+0x94>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a22      	ldr	r2, [pc, #136]	; (800cb78 <SDMMC_GetCmdResp7+0x98>)
 800caee:	fba2 2303 	umull	r2, r3, r2, r3
 800caf2:	0a5b      	lsrs	r3, r3, #9
 800caf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1e5a      	subs	r2, r3, #1
 800cb02:	60fa      	str	r2, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb0c:	e02c      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0ef      	beq.n	800cafe <SDMMC_GetCmdResp7+0x1e>
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1ea      	bne.n	800cafe <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2204      	movs	r2, #4
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb3a:	2304      	movs	r3, #4
 800cb3c:	e014      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d004      	beq.n	800cb54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e009      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2240      	movs	r2, #64	; 0x40
 800cb64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb66:	2300      	movs	r3, #0

}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	200000f4 	.word	0x200000f4
 800cb78:	10624dd3 	.word	0x10624dd3

0800cb7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb84:	4b11      	ldr	r3, [pc, #68]	; (800cbcc <SDMMC_GetCmdError+0x50>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a11      	ldr	r2, [pc, #68]	; (800cbd0 <SDMMC_GetCmdError+0x54>)
 800cb8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb8e:	0a5b      	lsrs	r3, r3, #9
 800cb90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1e5a      	subs	r2, r3, #1
 800cb9e:	60fa      	str	r2, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cba8:	e009      	b.n	800cbbe <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0f1      	beq.n	800cb9a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	22c5      	movs	r2, #197	; 0xc5
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	200000f4 	.word	0x200000f4
 800cbd0:	10624dd3 	.word	0x10624dd3

0800cbd4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cbdc:	f7f6 faa6 	bl	800312c <BSP_SD_AbortCallback>
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cbf0:	f7f6 faa3 	bl	800313a <BSP_SD_WriteCpltCallback>
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cc04:	f7f6 faa0 	bl	8003148 <BSP_SD_ReadCpltCallback>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc26:	4b1f      	ldr	r3, [pc, #124]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc28:	7a5b      	ldrb	r3, [r3, #9]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d131      	bne.n	800cc94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc30:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc32:	7a5b      	ldrb	r3, [r3, #9]
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	461a      	mov	r2, r3
 800cc38:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc3e:	4b19      	ldr	r3, [pc, #100]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc40:	7a5b      	ldrb	r3, [r3, #9]
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	4a17      	ldr	r2, [pc, #92]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc4e:	4b15      	ldr	r3, [pc, #84]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc50:	7a5b      	ldrb	r3, [r3, #9]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	461a      	mov	r2, r3
 800cc56:	4b13      	ldr	r3, [pc, #76]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc58:	4413      	add	r3, r2
 800cc5a:	79fa      	ldrb	r2, [r7, #7]
 800cc5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc5e:	4b11      	ldr	r3, [pc, #68]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc60:	7a5b      	ldrb	r3, [r3, #9]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	b2d1      	uxtb	r1, r2
 800cc68:	4a0e      	ldr	r2, [pc, #56]	; (800cca4 <FATFS_LinkDriverEx+0x94>)
 800cc6a:	7251      	strb	r1, [r2, #9]
 800cc6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc6e:	7dbb      	ldrb	r3, [r7, #22]
 800cc70:	3330      	adds	r3, #48	; 0x30
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	223a      	movs	r2, #58	; 0x3a
 800cc7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	3302      	adds	r3, #2
 800cc84:	222f      	movs	r2, #47	; 0x2f
 800cc86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3303      	adds	r3, #3
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	371c      	adds	r7, #28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	2001c778 	.word	0x2001c778

0800cca8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff ffaa 	bl	800cc10 <FATFS_LinkDriverEx>
 800ccbc:	4603      	mov	r3, r0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <__assert_func>:
 800ccc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccca:	4614      	mov	r4, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <__assert_func+0x2c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	68d8      	ldr	r0, [r3, #12]
 800ccd6:	b14c      	cbz	r4, 800ccec <__assert_func+0x24>
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <__assert_func+0x30>)
 800ccda:	9100      	str	r1, [sp, #0]
 800ccdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cce0:	4906      	ldr	r1, [pc, #24]	; (800ccfc <__assert_func+0x34>)
 800cce2:	462b      	mov	r3, r5
 800cce4:	f000 f814 	bl	800cd10 <fiprintf>
 800cce8:	f000 fd84 	bl	800d7f4 <abort>
 800ccec:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <__assert_func+0x38>)
 800ccee:	461c      	mov	r4, r3
 800ccf0:	e7f3      	b.n	800ccda <__assert_func+0x12>
 800ccf2:	bf00      	nop
 800ccf4:	20000100 	.word	0x20000100
 800ccf8:	080100e8 	.word	0x080100e8
 800ccfc:	080100f5 	.word	0x080100f5
 800cd00:	08010123 	.word	0x08010123

0800cd04 <__errno>:
 800cd04:	4b01      	ldr	r3, [pc, #4]	; (800cd0c <__errno+0x8>)
 800cd06:	6818      	ldr	r0, [r3, #0]
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	20000100 	.word	0x20000100

0800cd10 <fiprintf>:
 800cd10:	b40e      	push	{r1, r2, r3}
 800cd12:	b503      	push	{r0, r1, lr}
 800cd14:	4601      	mov	r1, r0
 800cd16:	ab03      	add	r3, sp, #12
 800cd18:	4805      	ldr	r0, [pc, #20]	; (800cd30 <fiprintf+0x20>)
 800cd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd1e:	6800      	ldr	r0, [r0, #0]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f000 f945 	bl	800cfb0 <_vfiprintf_r>
 800cd26:	b002      	add	sp, #8
 800cd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd2c:	b003      	add	sp, #12
 800cd2e:	4770      	bx	lr
 800cd30:	20000100 	.word	0x20000100

0800cd34 <__libc_init_array>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	4d0d      	ldr	r5, [pc, #52]	; (800cd6c <__libc_init_array+0x38>)
 800cd38:	4c0d      	ldr	r4, [pc, #52]	; (800cd70 <__libc_init_array+0x3c>)
 800cd3a:	1b64      	subs	r4, r4, r5
 800cd3c:	10a4      	asrs	r4, r4, #2
 800cd3e:	2600      	movs	r6, #0
 800cd40:	42a6      	cmp	r6, r4
 800cd42:	d109      	bne.n	800cd58 <__libc_init_array+0x24>
 800cd44:	4d0b      	ldr	r5, [pc, #44]	; (800cd74 <__libc_init_array+0x40>)
 800cd46:	4c0c      	ldr	r4, [pc, #48]	; (800cd78 <__libc_init_array+0x44>)
 800cd48:	f001 f878 	bl	800de3c <_init>
 800cd4c:	1b64      	subs	r4, r4, r5
 800cd4e:	10a4      	asrs	r4, r4, #2
 800cd50:	2600      	movs	r6, #0
 800cd52:	42a6      	cmp	r6, r4
 800cd54:	d105      	bne.n	800cd62 <__libc_init_array+0x2e>
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd5c:	4798      	blx	r3
 800cd5e:	3601      	adds	r6, #1
 800cd60:	e7ee      	b.n	800cd40 <__libc_init_array+0xc>
 800cd62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd66:	4798      	blx	r3
 800cd68:	3601      	adds	r6, #1
 800cd6a:	e7f2      	b.n	800cd52 <__libc_init_array+0x1e>
 800cd6c:	080101c4 	.word	0x080101c4
 800cd70:	080101c4 	.word	0x080101c4
 800cd74:	080101c4 	.word	0x080101c4
 800cd78:	080101c8 	.word	0x080101c8

0800cd7c <malloc>:
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <malloc+0xc>)
 800cd7e:	4601      	mov	r1, r0
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	f000 b877 	b.w	800ce74 <_malloc_r>
 800cd86:	bf00      	nop
 800cd88:	20000100 	.word	0x20000100

0800cd8c <memset>:
 800cd8c:	4402      	add	r2, r0
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d100      	bne.n	800cd96 <memset+0xa>
 800cd94:	4770      	bx	lr
 800cd96:	f803 1b01 	strb.w	r1, [r3], #1
 800cd9a:	e7f9      	b.n	800cd90 <memset+0x4>

0800cd9c <_free_r>:
 800cd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd9e:	2900      	cmp	r1, #0
 800cda0:	d044      	beq.n	800ce2c <_free_r+0x90>
 800cda2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda6:	9001      	str	r0, [sp, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f1a1 0404 	sub.w	r4, r1, #4
 800cdae:	bfb8      	it	lt
 800cdb0:	18e4      	addlt	r4, r4, r3
 800cdb2:	f000 ff47 	bl	800dc44 <__malloc_lock>
 800cdb6:	4a1e      	ldr	r2, [pc, #120]	; (800ce30 <_free_r+0x94>)
 800cdb8:	9801      	ldr	r0, [sp, #4]
 800cdba:	6813      	ldr	r3, [r2, #0]
 800cdbc:	b933      	cbnz	r3, 800cdcc <_free_r+0x30>
 800cdbe:	6063      	str	r3, [r4, #4]
 800cdc0:	6014      	str	r4, [r2, #0]
 800cdc2:	b003      	add	sp, #12
 800cdc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc8:	f000 bf42 	b.w	800dc50 <__malloc_unlock>
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d908      	bls.n	800cde2 <_free_r+0x46>
 800cdd0:	6825      	ldr	r5, [r4, #0]
 800cdd2:	1961      	adds	r1, r4, r5
 800cdd4:	428b      	cmp	r3, r1
 800cdd6:	bf01      	itttt	eq
 800cdd8:	6819      	ldreq	r1, [r3, #0]
 800cdda:	685b      	ldreq	r3, [r3, #4]
 800cddc:	1949      	addeq	r1, r1, r5
 800cdde:	6021      	streq	r1, [r4, #0]
 800cde0:	e7ed      	b.n	800cdbe <_free_r+0x22>
 800cde2:	461a      	mov	r2, r3
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b10b      	cbz	r3, 800cdec <_free_r+0x50>
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	d9fa      	bls.n	800cde2 <_free_r+0x46>
 800cdec:	6811      	ldr	r1, [r2, #0]
 800cdee:	1855      	adds	r5, r2, r1
 800cdf0:	42a5      	cmp	r5, r4
 800cdf2:	d10b      	bne.n	800ce0c <_free_r+0x70>
 800cdf4:	6824      	ldr	r4, [r4, #0]
 800cdf6:	4421      	add	r1, r4
 800cdf8:	1854      	adds	r4, r2, r1
 800cdfa:	42a3      	cmp	r3, r4
 800cdfc:	6011      	str	r1, [r2, #0]
 800cdfe:	d1e0      	bne.n	800cdc2 <_free_r+0x26>
 800ce00:	681c      	ldr	r4, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	6053      	str	r3, [r2, #4]
 800ce06:	4421      	add	r1, r4
 800ce08:	6011      	str	r1, [r2, #0]
 800ce0a:	e7da      	b.n	800cdc2 <_free_r+0x26>
 800ce0c:	d902      	bls.n	800ce14 <_free_r+0x78>
 800ce0e:	230c      	movs	r3, #12
 800ce10:	6003      	str	r3, [r0, #0]
 800ce12:	e7d6      	b.n	800cdc2 <_free_r+0x26>
 800ce14:	6825      	ldr	r5, [r4, #0]
 800ce16:	1961      	adds	r1, r4, r5
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	bf04      	itt	eq
 800ce1c:	6819      	ldreq	r1, [r3, #0]
 800ce1e:	685b      	ldreq	r3, [r3, #4]
 800ce20:	6063      	str	r3, [r4, #4]
 800ce22:	bf04      	itt	eq
 800ce24:	1949      	addeq	r1, r1, r5
 800ce26:	6021      	streq	r1, [r4, #0]
 800ce28:	6054      	str	r4, [r2, #4]
 800ce2a:	e7ca      	b.n	800cdc2 <_free_r+0x26>
 800ce2c:	b003      	add	sp, #12
 800ce2e:	bd30      	pop	{r4, r5, pc}
 800ce30:	2001c784 	.word	0x2001c784

0800ce34 <sbrk_aligned>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	4e0e      	ldr	r6, [pc, #56]	; (800ce70 <sbrk_aligned+0x3c>)
 800ce38:	460c      	mov	r4, r1
 800ce3a:	6831      	ldr	r1, [r6, #0]
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	b911      	cbnz	r1, 800ce46 <sbrk_aligned+0x12>
 800ce40:	f000 fc08 	bl	800d654 <_sbrk_r>
 800ce44:	6030      	str	r0, [r6, #0]
 800ce46:	4621      	mov	r1, r4
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f000 fc03 	bl	800d654 <_sbrk_r>
 800ce4e:	1c43      	adds	r3, r0, #1
 800ce50:	d00a      	beq.n	800ce68 <sbrk_aligned+0x34>
 800ce52:	1cc4      	adds	r4, r0, #3
 800ce54:	f024 0403 	bic.w	r4, r4, #3
 800ce58:	42a0      	cmp	r0, r4
 800ce5a:	d007      	beq.n	800ce6c <sbrk_aligned+0x38>
 800ce5c:	1a21      	subs	r1, r4, r0
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f000 fbf8 	bl	800d654 <_sbrk_r>
 800ce64:	3001      	adds	r0, #1
 800ce66:	d101      	bne.n	800ce6c <sbrk_aligned+0x38>
 800ce68:	f04f 34ff 	mov.w	r4, #4294967295
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
 800ce70:	2001c788 	.word	0x2001c788

0800ce74 <_malloc_r>:
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce78:	1ccd      	adds	r5, r1, #3
 800ce7a:	f025 0503 	bic.w	r5, r5, #3
 800ce7e:	3508      	adds	r5, #8
 800ce80:	2d0c      	cmp	r5, #12
 800ce82:	bf38      	it	cc
 800ce84:	250c      	movcc	r5, #12
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	4607      	mov	r7, r0
 800ce8a:	db01      	blt.n	800ce90 <_malloc_r+0x1c>
 800ce8c:	42a9      	cmp	r1, r5
 800ce8e:	d905      	bls.n	800ce9c <_malloc_r+0x28>
 800ce90:	230c      	movs	r3, #12
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	2600      	movs	r6, #0
 800ce96:	4630      	mov	r0, r6
 800ce98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce9c:	4e2e      	ldr	r6, [pc, #184]	; (800cf58 <_malloc_r+0xe4>)
 800ce9e:	f000 fed1 	bl	800dc44 <__malloc_lock>
 800cea2:	6833      	ldr	r3, [r6, #0]
 800cea4:	461c      	mov	r4, r3
 800cea6:	bb34      	cbnz	r4, 800cef6 <_malloc_r+0x82>
 800cea8:	4629      	mov	r1, r5
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f7ff ffc2 	bl	800ce34 <sbrk_aligned>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	d14d      	bne.n	800cf52 <_malloc_r+0xde>
 800ceb6:	6834      	ldr	r4, [r6, #0]
 800ceb8:	4626      	mov	r6, r4
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	d140      	bne.n	800cf40 <_malloc_r+0xcc>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	4631      	mov	r1, r6
 800cec2:	4638      	mov	r0, r7
 800cec4:	eb04 0803 	add.w	r8, r4, r3
 800cec8:	f000 fbc4 	bl	800d654 <_sbrk_r>
 800cecc:	4580      	cmp	r8, r0
 800cece:	d13a      	bne.n	800cf46 <_malloc_r+0xd2>
 800ced0:	6821      	ldr	r1, [r4, #0]
 800ced2:	3503      	adds	r5, #3
 800ced4:	1a6d      	subs	r5, r5, r1
 800ced6:	f025 0503 	bic.w	r5, r5, #3
 800ceda:	3508      	adds	r5, #8
 800cedc:	2d0c      	cmp	r5, #12
 800cede:	bf38      	it	cc
 800cee0:	250c      	movcc	r5, #12
 800cee2:	4629      	mov	r1, r5
 800cee4:	4638      	mov	r0, r7
 800cee6:	f7ff ffa5 	bl	800ce34 <sbrk_aligned>
 800ceea:	3001      	adds	r0, #1
 800ceec:	d02b      	beq.n	800cf46 <_malloc_r+0xd2>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	442b      	add	r3, r5
 800cef2:	6023      	str	r3, [r4, #0]
 800cef4:	e00e      	b.n	800cf14 <_malloc_r+0xa0>
 800cef6:	6822      	ldr	r2, [r4, #0]
 800cef8:	1b52      	subs	r2, r2, r5
 800cefa:	d41e      	bmi.n	800cf3a <_malloc_r+0xc6>
 800cefc:	2a0b      	cmp	r2, #11
 800cefe:	d916      	bls.n	800cf2e <_malloc_r+0xba>
 800cf00:	1961      	adds	r1, r4, r5
 800cf02:	42a3      	cmp	r3, r4
 800cf04:	6025      	str	r5, [r4, #0]
 800cf06:	bf18      	it	ne
 800cf08:	6059      	strne	r1, [r3, #4]
 800cf0a:	6863      	ldr	r3, [r4, #4]
 800cf0c:	bf08      	it	eq
 800cf0e:	6031      	streq	r1, [r6, #0]
 800cf10:	5162      	str	r2, [r4, r5]
 800cf12:	604b      	str	r3, [r1, #4]
 800cf14:	4638      	mov	r0, r7
 800cf16:	f104 060b 	add.w	r6, r4, #11
 800cf1a:	f000 fe99 	bl	800dc50 <__malloc_unlock>
 800cf1e:	f026 0607 	bic.w	r6, r6, #7
 800cf22:	1d23      	adds	r3, r4, #4
 800cf24:	1af2      	subs	r2, r6, r3
 800cf26:	d0b6      	beq.n	800ce96 <_malloc_r+0x22>
 800cf28:	1b9b      	subs	r3, r3, r6
 800cf2a:	50a3      	str	r3, [r4, r2]
 800cf2c:	e7b3      	b.n	800ce96 <_malloc_r+0x22>
 800cf2e:	6862      	ldr	r2, [r4, #4]
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	bf0c      	ite	eq
 800cf34:	6032      	streq	r2, [r6, #0]
 800cf36:	605a      	strne	r2, [r3, #4]
 800cf38:	e7ec      	b.n	800cf14 <_malloc_r+0xa0>
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	6864      	ldr	r4, [r4, #4]
 800cf3e:	e7b2      	b.n	800cea6 <_malloc_r+0x32>
 800cf40:	4634      	mov	r4, r6
 800cf42:	6876      	ldr	r6, [r6, #4]
 800cf44:	e7b9      	b.n	800ceba <_malloc_r+0x46>
 800cf46:	230c      	movs	r3, #12
 800cf48:	603b      	str	r3, [r7, #0]
 800cf4a:	4638      	mov	r0, r7
 800cf4c:	f000 fe80 	bl	800dc50 <__malloc_unlock>
 800cf50:	e7a1      	b.n	800ce96 <_malloc_r+0x22>
 800cf52:	6025      	str	r5, [r4, #0]
 800cf54:	e7de      	b.n	800cf14 <_malloc_r+0xa0>
 800cf56:	bf00      	nop
 800cf58:	2001c784 	.word	0x2001c784

0800cf5c <__sfputc_r>:
 800cf5c:	6893      	ldr	r3, [r2, #8]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	b410      	push	{r4}
 800cf64:	6093      	str	r3, [r2, #8]
 800cf66:	da08      	bge.n	800cf7a <__sfputc_r+0x1e>
 800cf68:	6994      	ldr	r4, [r2, #24]
 800cf6a:	42a3      	cmp	r3, r4
 800cf6c:	db01      	blt.n	800cf72 <__sfputc_r+0x16>
 800cf6e:	290a      	cmp	r1, #10
 800cf70:	d103      	bne.n	800cf7a <__sfputc_r+0x1e>
 800cf72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf76:	f000 bb7d 	b.w	800d674 <__swbuf_r>
 800cf7a:	6813      	ldr	r3, [r2, #0]
 800cf7c:	1c58      	adds	r0, r3, #1
 800cf7e:	6010      	str	r0, [r2, #0]
 800cf80:	7019      	strb	r1, [r3, #0]
 800cf82:	4608      	mov	r0, r1
 800cf84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <__sfputs_r>:
 800cf8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	460f      	mov	r7, r1
 800cf90:	4614      	mov	r4, r2
 800cf92:	18d5      	adds	r5, r2, r3
 800cf94:	42ac      	cmp	r4, r5
 800cf96:	d101      	bne.n	800cf9c <__sfputs_r+0x12>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e007      	b.n	800cfac <__sfputs_r+0x22>
 800cf9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa0:	463a      	mov	r2, r7
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ffda 	bl	800cf5c <__sfputc_r>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d1f3      	bne.n	800cf94 <__sfputs_r+0xa>
 800cfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb0 <_vfiprintf_r>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	b09d      	sub	sp, #116	; 0x74
 800cfb8:	4614      	mov	r4, r2
 800cfba:	4698      	mov	r8, r3
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	b118      	cbz	r0, 800cfc8 <_vfiprintf_r+0x18>
 800cfc0:	6983      	ldr	r3, [r0, #24]
 800cfc2:	b90b      	cbnz	r3, 800cfc8 <_vfiprintf_r+0x18>
 800cfc4:	f000 fd38 	bl	800da38 <__sinit>
 800cfc8:	4b89      	ldr	r3, [pc, #548]	; (800d1f0 <_vfiprintf_r+0x240>)
 800cfca:	429d      	cmp	r5, r3
 800cfcc:	d11b      	bne.n	800d006 <_vfiprintf_r+0x56>
 800cfce:	6875      	ldr	r5, [r6, #4]
 800cfd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd2:	07d9      	lsls	r1, r3, #31
 800cfd4:	d405      	bmi.n	800cfe2 <_vfiprintf_r+0x32>
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	059a      	lsls	r2, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_vfiprintf_r+0x32>
 800cfdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfde:	f000 fdc9 	bl	800db74 <__retarget_lock_acquire_recursive>
 800cfe2:	89ab      	ldrh	r3, [r5, #12]
 800cfe4:	071b      	lsls	r3, r3, #28
 800cfe6:	d501      	bpl.n	800cfec <_vfiprintf_r+0x3c>
 800cfe8:	692b      	ldr	r3, [r5, #16]
 800cfea:	b9eb      	cbnz	r3, 800d028 <_vfiprintf_r+0x78>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4630      	mov	r0, r6
 800cff0:	f000 fb92 	bl	800d718 <__swsetup_r>
 800cff4:	b1c0      	cbz	r0, 800d028 <_vfiprintf_r+0x78>
 800cff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cff8:	07dc      	lsls	r4, r3, #31
 800cffa:	d50e      	bpl.n	800d01a <_vfiprintf_r+0x6a>
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	b01d      	add	sp, #116	; 0x74
 800d002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d006:	4b7b      	ldr	r3, [pc, #492]	; (800d1f4 <_vfiprintf_r+0x244>)
 800d008:	429d      	cmp	r5, r3
 800d00a:	d101      	bne.n	800d010 <_vfiprintf_r+0x60>
 800d00c:	68b5      	ldr	r5, [r6, #8]
 800d00e:	e7df      	b.n	800cfd0 <_vfiprintf_r+0x20>
 800d010:	4b79      	ldr	r3, [pc, #484]	; (800d1f8 <_vfiprintf_r+0x248>)
 800d012:	429d      	cmp	r5, r3
 800d014:	bf08      	it	eq
 800d016:	68f5      	ldreq	r5, [r6, #12]
 800d018:	e7da      	b.n	800cfd0 <_vfiprintf_r+0x20>
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	0598      	lsls	r0, r3, #22
 800d01e:	d4ed      	bmi.n	800cffc <_vfiprintf_r+0x4c>
 800d020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d022:	f000 fda8 	bl	800db76 <__retarget_lock_release_recursive>
 800d026:	e7e9      	b.n	800cffc <_vfiprintf_r+0x4c>
 800d028:	2300      	movs	r3, #0
 800d02a:	9309      	str	r3, [sp, #36]	; 0x24
 800d02c:	2320      	movs	r3, #32
 800d02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d032:	f8cd 800c 	str.w	r8, [sp, #12]
 800d036:	2330      	movs	r3, #48	; 0x30
 800d038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1fc <_vfiprintf_r+0x24c>
 800d03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d040:	f04f 0901 	mov.w	r9, #1
 800d044:	4623      	mov	r3, r4
 800d046:	469a      	mov	sl, r3
 800d048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04c:	b10a      	cbz	r2, 800d052 <_vfiprintf_r+0xa2>
 800d04e:	2a25      	cmp	r2, #37	; 0x25
 800d050:	d1f9      	bne.n	800d046 <_vfiprintf_r+0x96>
 800d052:	ebba 0b04 	subs.w	fp, sl, r4
 800d056:	d00b      	beq.n	800d070 <_vfiprintf_r+0xc0>
 800d058:	465b      	mov	r3, fp
 800d05a:	4622      	mov	r2, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	4630      	mov	r0, r6
 800d060:	f7ff ff93 	bl	800cf8a <__sfputs_r>
 800d064:	3001      	adds	r0, #1
 800d066:	f000 80aa 	beq.w	800d1be <_vfiprintf_r+0x20e>
 800d06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d06c:	445a      	add	r2, fp
 800d06e:	9209      	str	r2, [sp, #36]	; 0x24
 800d070:	f89a 3000 	ldrb.w	r3, [sl]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 80a2 	beq.w	800d1be <_vfiprintf_r+0x20e>
 800d07a:	2300      	movs	r3, #0
 800d07c:	f04f 32ff 	mov.w	r2, #4294967295
 800d080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d084:	f10a 0a01 	add.w	sl, sl, #1
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	9307      	str	r3, [sp, #28]
 800d08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d090:	931a      	str	r3, [sp, #104]	; 0x68
 800d092:	4654      	mov	r4, sl
 800d094:	2205      	movs	r2, #5
 800d096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09a:	4858      	ldr	r0, [pc, #352]	; (800d1fc <_vfiprintf_r+0x24c>)
 800d09c:	f7f3 f8a8 	bl	80001f0 <memchr>
 800d0a0:	9a04      	ldr	r2, [sp, #16]
 800d0a2:	b9d8      	cbnz	r0, 800d0dc <_vfiprintf_r+0x12c>
 800d0a4:	06d1      	lsls	r1, r2, #27
 800d0a6:	bf44      	itt	mi
 800d0a8:	2320      	movmi	r3, #32
 800d0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ae:	0713      	lsls	r3, r2, #28
 800d0b0:	bf44      	itt	mi
 800d0b2:	232b      	movmi	r3, #43	; 0x2b
 800d0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0be:	d015      	beq.n	800d0ec <_vfiprintf_r+0x13c>
 800d0c0:	9a07      	ldr	r2, [sp, #28]
 800d0c2:	4654      	mov	r4, sl
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f04f 0c0a 	mov.w	ip, #10
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d0:	3b30      	subs	r3, #48	; 0x30
 800d0d2:	2b09      	cmp	r3, #9
 800d0d4:	d94e      	bls.n	800d174 <_vfiprintf_r+0x1c4>
 800d0d6:	b1b0      	cbz	r0, 800d106 <_vfiprintf_r+0x156>
 800d0d8:	9207      	str	r2, [sp, #28]
 800d0da:	e014      	b.n	800d106 <_vfiprintf_r+0x156>
 800d0dc:	eba0 0308 	sub.w	r3, r0, r8
 800d0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	46a2      	mov	sl, r4
 800d0ea:	e7d2      	b.n	800d092 <_vfiprintf_r+0xe2>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	1d19      	adds	r1, r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	9103      	str	r1, [sp, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfbb      	ittet	lt
 800d0f8:	425b      	neglt	r3, r3
 800d0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0fe:	9307      	strge	r3, [sp, #28]
 800d100:	9307      	strlt	r3, [sp, #28]
 800d102:	bfb8      	it	lt
 800d104:	9204      	strlt	r2, [sp, #16]
 800d106:	7823      	ldrb	r3, [r4, #0]
 800d108:	2b2e      	cmp	r3, #46	; 0x2e
 800d10a:	d10c      	bne.n	800d126 <_vfiprintf_r+0x176>
 800d10c:	7863      	ldrb	r3, [r4, #1]
 800d10e:	2b2a      	cmp	r3, #42	; 0x2a
 800d110:	d135      	bne.n	800d17e <_vfiprintf_r+0x1ce>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	1d1a      	adds	r2, r3, #4
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	9203      	str	r2, [sp, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bfb8      	it	lt
 800d11e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d122:	3402      	adds	r4, #2
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d20c <_vfiprintf_r+0x25c>
 800d12a:	7821      	ldrb	r1, [r4, #0]
 800d12c:	2203      	movs	r2, #3
 800d12e:	4650      	mov	r0, sl
 800d130:	f7f3 f85e 	bl	80001f0 <memchr>
 800d134:	b140      	cbz	r0, 800d148 <_vfiprintf_r+0x198>
 800d136:	2340      	movs	r3, #64	; 0x40
 800d138:	eba0 000a 	sub.w	r0, r0, sl
 800d13c:	fa03 f000 	lsl.w	r0, r3, r0
 800d140:	9b04      	ldr	r3, [sp, #16]
 800d142:	4303      	orrs	r3, r0
 800d144:	3401      	adds	r4, #1
 800d146:	9304      	str	r3, [sp, #16]
 800d148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d14c:	482c      	ldr	r0, [pc, #176]	; (800d200 <_vfiprintf_r+0x250>)
 800d14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d152:	2206      	movs	r2, #6
 800d154:	f7f3 f84c 	bl	80001f0 <memchr>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d03f      	beq.n	800d1dc <_vfiprintf_r+0x22c>
 800d15c:	4b29      	ldr	r3, [pc, #164]	; (800d204 <_vfiprintf_r+0x254>)
 800d15e:	bb1b      	cbnz	r3, 800d1a8 <_vfiprintf_r+0x1f8>
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	3307      	adds	r3, #7
 800d164:	f023 0307 	bic.w	r3, r3, #7
 800d168:	3308      	adds	r3, #8
 800d16a:	9303      	str	r3, [sp, #12]
 800d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16e:	443b      	add	r3, r7
 800d170:	9309      	str	r3, [sp, #36]	; 0x24
 800d172:	e767      	b.n	800d044 <_vfiprintf_r+0x94>
 800d174:	fb0c 3202 	mla	r2, ip, r2, r3
 800d178:	460c      	mov	r4, r1
 800d17a:	2001      	movs	r0, #1
 800d17c:	e7a5      	b.n	800d0ca <_vfiprintf_r+0x11a>
 800d17e:	2300      	movs	r3, #0
 800d180:	3401      	adds	r4, #1
 800d182:	9305      	str	r3, [sp, #20]
 800d184:	4619      	mov	r1, r3
 800d186:	f04f 0c0a 	mov.w	ip, #10
 800d18a:	4620      	mov	r0, r4
 800d18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d190:	3a30      	subs	r2, #48	; 0x30
 800d192:	2a09      	cmp	r2, #9
 800d194:	d903      	bls.n	800d19e <_vfiprintf_r+0x1ee>
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0c5      	beq.n	800d126 <_vfiprintf_r+0x176>
 800d19a:	9105      	str	r1, [sp, #20]
 800d19c:	e7c3      	b.n	800d126 <_vfiprintf_r+0x176>
 800d19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e7f0      	b.n	800d18a <_vfiprintf_r+0x1da>
 800d1a8:	ab03      	add	r3, sp, #12
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	4b16      	ldr	r3, [pc, #88]	; (800d208 <_vfiprintf_r+0x258>)
 800d1b0:	a904      	add	r1, sp, #16
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	1c78      	adds	r0, r7, #1
 800d1bc:	d1d6      	bne.n	800d16c <_vfiprintf_r+0x1bc>
 800d1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c0:	07d9      	lsls	r1, r3, #31
 800d1c2:	d405      	bmi.n	800d1d0 <_vfiprintf_r+0x220>
 800d1c4:	89ab      	ldrh	r3, [r5, #12]
 800d1c6:	059a      	lsls	r2, r3, #22
 800d1c8:	d402      	bmi.n	800d1d0 <_vfiprintf_r+0x220>
 800d1ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1cc:	f000 fcd3 	bl	800db76 <__retarget_lock_release_recursive>
 800d1d0:	89ab      	ldrh	r3, [r5, #12]
 800d1d2:	065b      	lsls	r3, r3, #25
 800d1d4:	f53f af12 	bmi.w	800cffc <_vfiprintf_r+0x4c>
 800d1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1da:	e711      	b.n	800d000 <_vfiprintf_r+0x50>
 800d1dc:	ab03      	add	r3, sp, #12
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <_vfiprintf_r+0x258>)
 800d1e4:	a904      	add	r1, sp, #16
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f000 f880 	bl	800d2ec <_printf_i>
 800d1ec:	e7e4      	b.n	800d1b8 <_vfiprintf_r+0x208>
 800d1ee:	bf00      	nop
 800d1f0:	0801017c 	.word	0x0801017c
 800d1f4:	0801019c 	.word	0x0801019c
 800d1f8:	0801015c 	.word	0x0801015c
 800d1fc:	08010128 	.word	0x08010128
 800d200:	08010132 	.word	0x08010132
 800d204:	00000000 	.word	0x00000000
 800d208:	0800cf8b 	.word	0x0800cf8b
 800d20c:	0801012e 	.word	0x0801012e

0800d210 <_printf_common>:
 800d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	4616      	mov	r6, r2
 800d216:	4699      	mov	r9, r3
 800d218:	688a      	ldr	r2, [r1, #8]
 800d21a:	690b      	ldr	r3, [r1, #16]
 800d21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d220:	4293      	cmp	r3, r2
 800d222:	bfb8      	it	lt
 800d224:	4613      	movlt	r3, r2
 800d226:	6033      	str	r3, [r6, #0]
 800d228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d22c:	4607      	mov	r7, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b10a      	cbz	r2, 800d236 <_printf_common+0x26>
 800d232:	3301      	adds	r3, #1
 800d234:	6033      	str	r3, [r6, #0]
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	0699      	lsls	r1, r3, #26
 800d23a:	bf42      	ittt	mi
 800d23c:	6833      	ldrmi	r3, [r6, #0]
 800d23e:	3302      	addmi	r3, #2
 800d240:	6033      	strmi	r3, [r6, #0]
 800d242:	6825      	ldr	r5, [r4, #0]
 800d244:	f015 0506 	ands.w	r5, r5, #6
 800d248:	d106      	bne.n	800d258 <_printf_common+0x48>
 800d24a:	f104 0a19 	add.w	sl, r4, #25
 800d24e:	68e3      	ldr	r3, [r4, #12]
 800d250:	6832      	ldr	r2, [r6, #0]
 800d252:	1a9b      	subs	r3, r3, r2
 800d254:	42ab      	cmp	r3, r5
 800d256:	dc26      	bgt.n	800d2a6 <_printf_common+0x96>
 800d258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d25c:	1e13      	subs	r3, r2, #0
 800d25e:	6822      	ldr	r2, [r4, #0]
 800d260:	bf18      	it	ne
 800d262:	2301      	movne	r3, #1
 800d264:	0692      	lsls	r2, r2, #26
 800d266:	d42b      	bmi.n	800d2c0 <_printf_common+0xb0>
 800d268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d26c:	4649      	mov	r1, r9
 800d26e:	4638      	mov	r0, r7
 800d270:	47c0      	blx	r8
 800d272:	3001      	adds	r0, #1
 800d274:	d01e      	beq.n	800d2b4 <_printf_common+0xa4>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	68e5      	ldr	r5, [r4, #12]
 800d27a:	6832      	ldr	r2, [r6, #0]
 800d27c:	f003 0306 	and.w	r3, r3, #6
 800d280:	2b04      	cmp	r3, #4
 800d282:	bf08      	it	eq
 800d284:	1aad      	subeq	r5, r5, r2
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	6922      	ldr	r2, [r4, #16]
 800d28a:	bf0c      	ite	eq
 800d28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d290:	2500      	movne	r5, #0
 800d292:	4293      	cmp	r3, r2
 800d294:	bfc4      	itt	gt
 800d296:	1a9b      	subgt	r3, r3, r2
 800d298:	18ed      	addgt	r5, r5, r3
 800d29a:	2600      	movs	r6, #0
 800d29c:	341a      	adds	r4, #26
 800d29e:	42b5      	cmp	r5, r6
 800d2a0:	d11a      	bne.n	800d2d8 <_printf_common+0xc8>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e008      	b.n	800d2b8 <_printf_common+0xa8>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	47c0      	blx	r8
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d103      	bne.n	800d2bc <_printf_common+0xac>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2bc:	3501      	adds	r5, #1
 800d2be:	e7c6      	b.n	800d24e <_printf_common+0x3e>
 800d2c0:	18e1      	adds	r1, r4, r3
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	2030      	movs	r0, #48	; 0x30
 800d2c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2ca:	4422      	add	r2, r4
 800d2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d4:	3302      	adds	r3, #2
 800d2d6:	e7c7      	b.n	800d268 <_printf_common+0x58>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4649      	mov	r1, r9
 800d2de:	4638      	mov	r0, r7
 800d2e0:	47c0      	blx	r8
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d0e6      	beq.n	800d2b4 <_printf_common+0xa4>
 800d2e6:	3601      	adds	r6, #1
 800d2e8:	e7d9      	b.n	800d29e <_printf_common+0x8e>
	...

0800d2ec <_printf_i>:
 800d2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	7e0f      	ldrb	r7, [r1, #24]
 800d2f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2f4:	2f78      	cmp	r7, #120	; 0x78
 800d2f6:	4691      	mov	r9, r2
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	469a      	mov	sl, r3
 800d2fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d302:	d807      	bhi.n	800d314 <_printf_i+0x28>
 800d304:	2f62      	cmp	r7, #98	; 0x62
 800d306:	d80a      	bhi.n	800d31e <_printf_i+0x32>
 800d308:	2f00      	cmp	r7, #0
 800d30a:	f000 80d8 	beq.w	800d4be <_printf_i+0x1d2>
 800d30e:	2f58      	cmp	r7, #88	; 0x58
 800d310:	f000 80a3 	beq.w	800d45a <_printf_i+0x16e>
 800d314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d31c:	e03a      	b.n	800d394 <_printf_i+0xa8>
 800d31e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d322:	2b15      	cmp	r3, #21
 800d324:	d8f6      	bhi.n	800d314 <_printf_i+0x28>
 800d326:	a101      	add	r1, pc, #4	; (adr r1, 800d32c <_printf_i+0x40>)
 800d328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d32c:	0800d385 	.word	0x0800d385
 800d330:	0800d399 	.word	0x0800d399
 800d334:	0800d315 	.word	0x0800d315
 800d338:	0800d315 	.word	0x0800d315
 800d33c:	0800d315 	.word	0x0800d315
 800d340:	0800d315 	.word	0x0800d315
 800d344:	0800d399 	.word	0x0800d399
 800d348:	0800d315 	.word	0x0800d315
 800d34c:	0800d315 	.word	0x0800d315
 800d350:	0800d315 	.word	0x0800d315
 800d354:	0800d315 	.word	0x0800d315
 800d358:	0800d4a5 	.word	0x0800d4a5
 800d35c:	0800d3c9 	.word	0x0800d3c9
 800d360:	0800d487 	.word	0x0800d487
 800d364:	0800d315 	.word	0x0800d315
 800d368:	0800d315 	.word	0x0800d315
 800d36c:	0800d4c7 	.word	0x0800d4c7
 800d370:	0800d315 	.word	0x0800d315
 800d374:	0800d3c9 	.word	0x0800d3c9
 800d378:	0800d315 	.word	0x0800d315
 800d37c:	0800d315 	.word	0x0800d315
 800d380:	0800d48f 	.word	0x0800d48f
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	602a      	str	r2, [r5, #0]
 800d38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d394:	2301      	movs	r3, #1
 800d396:	e0a3      	b.n	800d4e0 <_printf_i+0x1f4>
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	6829      	ldr	r1, [r5, #0]
 800d39c:	0606      	lsls	r6, r0, #24
 800d39e:	f101 0304 	add.w	r3, r1, #4
 800d3a2:	d50a      	bpl.n	800d3ba <_printf_i+0xce>
 800d3a4:	680e      	ldr	r6, [r1, #0]
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	2e00      	cmp	r6, #0
 800d3aa:	da03      	bge.n	800d3b4 <_printf_i+0xc8>
 800d3ac:	232d      	movs	r3, #45	; 0x2d
 800d3ae:	4276      	negs	r6, r6
 800d3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b4:	485e      	ldr	r0, [pc, #376]	; (800d530 <_printf_i+0x244>)
 800d3b6:	230a      	movs	r3, #10
 800d3b8:	e019      	b.n	800d3ee <_printf_i+0x102>
 800d3ba:	680e      	ldr	r6, [r1, #0]
 800d3bc:	602b      	str	r3, [r5, #0]
 800d3be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3c2:	bf18      	it	ne
 800d3c4:	b236      	sxthne	r6, r6
 800d3c6:	e7ef      	b.n	800d3a8 <_printf_i+0xbc>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	6820      	ldr	r0, [r4, #0]
 800d3cc:	1d19      	adds	r1, r3, #4
 800d3ce:	6029      	str	r1, [r5, #0]
 800d3d0:	0601      	lsls	r1, r0, #24
 800d3d2:	d501      	bpl.n	800d3d8 <_printf_i+0xec>
 800d3d4:	681e      	ldr	r6, [r3, #0]
 800d3d6:	e002      	b.n	800d3de <_printf_i+0xf2>
 800d3d8:	0646      	lsls	r6, r0, #25
 800d3da:	d5fb      	bpl.n	800d3d4 <_printf_i+0xe8>
 800d3dc:	881e      	ldrh	r6, [r3, #0]
 800d3de:	4854      	ldr	r0, [pc, #336]	; (800d530 <_printf_i+0x244>)
 800d3e0:	2f6f      	cmp	r7, #111	; 0x6f
 800d3e2:	bf0c      	ite	eq
 800d3e4:	2308      	moveq	r3, #8
 800d3e6:	230a      	movne	r3, #10
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3ee:	6865      	ldr	r5, [r4, #4]
 800d3f0:	60a5      	str	r5, [r4, #8]
 800d3f2:	2d00      	cmp	r5, #0
 800d3f4:	bfa2      	ittt	ge
 800d3f6:	6821      	ldrge	r1, [r4, #0]
 800d3f8:	f021 0104 	bicge.w	r1, r1, #4
 800d3fc:	6021      	strge	r1, [r4, #0]
 800d3fe:	b90e      	cbnz	r6, 800d404 <_printf_i+0x118>
 800d400:	2d00      	cmp	r5, #0
 800d402:	d04d      	beq.n	800d4a0 <_printf_i+0x1b4>
 800d404:	4615      	mov	r5, r2
 800d406:	fbb6 f1f3 	udiv	r1, r6, r3
 800d40a:	fb03 6711 	mls	r7, r3, r1, r6
 800d40e:	5dc7      	ldrb	r7, [r0, r7]
 800d410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d414:	4637      	mov	r7, r6
 800d416:	42bb      	cmp	r3, r7
 800d418:	460e      	mov	r6, r1
 800d41a:	d9f4      	bls.n	800d406 <_printf_i+0x11a>
 800d41c:	2b08      	cmp	r3, #8
 800d41e:	d10b      	bne.n	800d438 <_printf_i+0x14c>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	07de      	lsls	r6, r3, #31
 800d424:	d508      	bpl.n	800d438 <_printf_i+0x14c>
 800d426:	6923      	ldr	r3, [r4, #16]
 800d428:	6861      	ldr	r1, [r4, #4]
 800d42a:	4299      	cmp	r1, r3
 800d42c:	bfde      	ittt	le
 800d42e:	2330      	movle	r3, #48	; 0x30
 800d430:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d434:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d438:	1b52      	subs	r2, r2, r5
 800d43a:	6122      	str	r2, [r4, #16]
 800d43c:	f8cd a000 	str.w	sl, [sp]
 800d440:	464b      	mov	r3, r9
 800d442:	aa03      	add	r2, sp, #12
 800d444:	4621      	mov	r1, r4
 800d446:	4640      	mov	r0, r8
 800d448:	f7ff fee2 	bl	800d210 <_printf_common>
 800d44c:	3001      	adds	r0, #1
 800d44e:	d14c      	bne.n	800d4ea <_printf_i+0x1fe>
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	b004      	add	sp, #16
 800d456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45a:	4835      	ldr	r0, [pc, #212]	; (800d530 <_printf_i+0x244>)
 800d45c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d460:	6829      	ldr	r1, [r5, #0]
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	f851 6b04 	ldr.w	r6, [r1], #4
 800d468:	6029      	str	r1, [r5, #0]
 800d46a:	061d      	lsls	r5, r3, #24
 800d46c:	d514      	bpl.n	800d498 <_printf_i+0x1ac>
 800d46e:	07df      	lsls	r7, r3, #31
 800d470:	bf44      	itt	mi
 800d472:	f043 0320 	orrmi.w	r3, r3, #32
 800d476:	6023      	strmi	r3, [r4, #0]
 800d478:	b91e      	cbnz	r6, 800d482 <_printf_i+0x196>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	f023 0320 	bic.w	r3, r3, #32
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	2310      	movs	r3, #16
 800d484:	e7b0      	b.n	800d3e8 <_printf_i+0xfc>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	f043 0320 	orr.w	r3, r3, #32
 800d48c:	6023      	str	r3, [r4, #0]
 800d48e:	2378      	movs	r3, #120	; 0x78
 800d490:	4828      	ldr	r0, [pc, #160]	; (800d534 <_printf_i+0x248>)
 800d492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d496:	e7e3      	b.n	800d460 <_printf_i+0x174>
 800d498:	0659      	lsls	r1, r3, #25
 800d49a:	bf48      	it	mi
 800d49c:	b2b6      	uxthmi	r6, r6
 800d49e:	e7e6      	b.n	800d46e <_printf_i+0x182>
 800d4a0:	4615      	mov	r5, r2
 800d4a2:	e7bb      	b.n	800d41c <_printf_i+0x130>
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	6826      	ldr	r6, [r4, #0]
 800d4a8:	6961      	ldr	r1, [r4, #20]
 800d4aa:	1d18      	adds	r0, r3, #4
 800d4ac:	6028      	str	r0, [r5, #0]
 800d4ae:	0635      	lsls	r5, r6, #24
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	d501      	bpl.n	800d4b8 <_printf_i+0x1cc>
 800d4b4:	6019      	str	r1, [r3, #0]
 800d4b6:	e002      	b.n	800d4be <_printf_i+0x1d2>
 800d4b8:	0670      	lsls	r0, r6, #25
 800d4ba:	d5fb      	bpl.n	800d4b4 <_printf_i+0x1c8>
 800d4bc:	8019      	strh	r1, [r3, #0]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	6123      	str	r3, [r4, #16]
 800d4c2:	4615      	mov	r5, r2
 800d4c4:	e7ba      	b.n	800d43c <_printf_i+0x150>
 800d4c6:	682b      	ldr	r3, [r5, #0]
 800d4c8:	1d1a      	adds	r2, r3, #4
 800d4ca:	602a      	str	r2, [r5, #0]
 800d4cc:	681d      	ldr	r5, [r3, #0]
 800d4ce:	6862      	ldr	r2, [r4, #4]
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f7f2 fe8c 	bl	80001f0 <memchr>
 800d4d8:	b108      	cbz	r0, 800d4de <_printf_i+0x1f2>
 800d4da:	1b40      	subs	r0, r0, r5
 800d4dc:	6060      	str	r0, [r4, #4]
 800d4de:	6863      	ldr	r3, [r4, #4]
 800d4e0:	6123      	str	r3, [r4, #16]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e8:	e7a8      	b.n	800d43c <_printf_i+0x150>
 800d4ea:	6923      	ldr	r3, [r4, #16]
 800d4ec:	462a      	mov	r2, r5
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	47d0      	blx	sl
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d0ab      	beq.n	800d450 <_printf_i+0x164>
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	079b      	lsls	r3, r3, #30
 800d4fc:	d413      	bmi.n	800d526 <_printf_i+0x23a>
 800d4fe:	68e0      	ldr	r0, [r4, #12]
 800d500:	9b03      	ldr	r3, [sp, #12]
 800d502:	4298      	cmp	r0, r3
 800d504:	bfb8      	it	lt
 800d506:	4618      	movlt	r0, r3
 800d508:	e7a4      	b.n	800d454 <_printf_i+0x168>
 800d50a:	2301      	movs	r3, #1
 800d50c:	4632      	mov	r2, r6
 800d50e:	4649      	mov	r1, r9
 800d510:	4640      	mov	r0, r8
 800d512:	47d0      	blx	sl
 800d514:	3001      	adds	r0, #1
 800d516:	d09b      	beq.n	800d450 <_printf_i+0x164>
 800d518:	3501      	adds	r5, #1
 800d51a:	68e3      	ldr	r3, [r4, #12]
 800d51c:	9903      	ldr	r1, [sp, #12]
 800d51e:	1a5b      	subs	r3, r3, r1
 800d520:	42ab      	cmp	r3, r5
 800d522:	dcf2      	bgt.n	800d50a <_printf_i+0x21e>
 800d524:	e7eb      	b.n	800d4fe <_printf_i+0x212>
 800d526:	2500      	movs	r5, #0
 800d528:	f104 0619 	add.w	r6, r4, #25
 800d52c:	e7f5      	b.n	800d51a <_printf_i+0x22e>
 800d52e:	bf00      	nop
 800d530:	08010139 	.word	0x08010139
 800d534:	0801014a 	.word	0x0801014a

0800d538 <iprintf>:
 800d538:	b40f      	push	{r0, r1, r2, r3}
 800d53a:	4b0a      	ldr	r3, [pc, #40]	; (800d564 <iprintf+0x2c>)
 800d53c:	b513      	push	{r0, r1, r4, lr}
 800d53e:	681c      	ldr	r4, [r3, #0]
 800d540:	b124      	cbz	r4, 800d54c <iprintf+0x14>
 800d542:	69a3      	ldr	r3, [r4, #24]
 800d544:	b913      	cbnz	r3, 800d54c <iprintf+0x14>
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fa76 	bl	800da38 <__sinit>
 800d54c:	ab05      	add	r3, sp, #20
 800d54e:	9a04      	ldr	r2, [sp, #16]
 800d550:	68a1      	ldr	r1, [r4, #8]
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	4620      	mov	r0, r4
 800d556:	f7ff fd2b 	bl	800cfb0 <_vfiprintf_r>
 800d55a:	b002      	add	sp, #8
 800d55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d560:	b004      	add	sp, #16
 800d562:	4770      	bx	lr
 800d564:	20000100 	.word	0x20000100

0800d568 <_puts_r>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	460e      	mov	r6, r1
 800d56c:	4605      	mov	r5, r0
 800d56e:	b118      	cbz	r0, 800d578 <_puts_r+0x10>
 800d570:	6983      	ldr	r3, [r0, #24]
 800d572:	b90b      	cbnz	r3, 800d578 <_puts_r+0x10>
 800d574:	f000 fa60 	bl	800da38 <__sinit>
 800d578:	69ab      	ldr	r3, [r5, #24]
 800d57a:	68ac      	ldr	r4, [r5, #8]
 800d57c:	b913      	cbnz	r3, 800d584 <_puts_r+0x1c>
 800d57e:	4628      	mov	r0, r5
 800d580:	f000 fa5a 	bl	800da38 <__sinit>
 800d584:	4b2c      	ldr	r3, [pc, #176]	; (800d638 <_puts_r+0xd0>)
 800d586:	429c      	cmp	r4, r3
 800d588:	d120      	bne.n	800d5cc <_puts_r+0x64>
 800d58a:	686c      	ldr	r4, [r5, #4]
 800d58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d58e:	07db      	lsls	r3, r3, #31
 800d590:	d405      	bmi.n	800d59e <_puts_r+0x36>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	0598      	lsls	r0, r3, #22
 800d596:	d402      	bmi.n	800d59e <_puts_r+0x36>
 800d598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d59a:	f000 faeb 	bl	800db74 <__retarget_lock_acquire_recursive>
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	0719      	lsls	r1, r3, #28
 800d5a2:	d51d      	bpl.n	800d5e0 <_puts_r+0x78>
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	b1db      	cbz	r3, 800d5e0 <_puts_r+0x78>
 800d5a8:	3e01      	subs	r6, #1
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	bb39      	cbnz	r1, 800d606 <_puts_r+0x9e>
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da38      	bge.n	800d62c <_puts_r+0xc4>
 800d5ba:	4622      	mov	r2, r4
 800d5bc:	210a      	movs	r1, #10
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f000 f858 	bl	800d674 <__swbuf_r>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d011      	beq.n	800d5ec <_puts_r+0x84>
 800d5c8:	250a      	movs	r5, #10
 800d5ca:	e011      	b.n	800d5f0 <_puts_r+0x88>
 800d5cc:	4b1b      	ldr	r3, [pc, #108]	; (800d63c <_puts_r+0xd4>)
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	d101      	bne.n	800d5d6 <_puts_r+0x6e>
 800d5d2:	68ac      	ldr	r4, [r5, #8]
 800d5d4:	e7da      	b.n	800d58c <_puts_r+0x24>
 800d5d6:	4b1a      	ldr	r3, [pc, #104]	; (800d640 <_puts_r+0xd8>)
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	bf08      	it	eq
 800d5dc:	68ec      	ldreq	r4, [r5, #12]
 800d5de:	e7d5      	b.n	800d58c <_puts_r+0x24>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f000 f898 	bl	800d718 <__swsetup_r>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0dd      	beq.n	800d5a8 <_puts_r+0x40>
 800d5ec:	f04f 35ff 	mov.w	r5, #4294967295
 800d5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5f2:	07da      	lsls	r2, r3, #31
 800d5f4:	d405      	bmi.n	800d602 <_puts_r+0x9a>
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	059b      	lsls	r3, r3, #22
 800d5fa:	d402      	bmi.n	800d602 <_puts_r+0x9a>
 800d5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5fe:	f000 faba 	bl	800db76 <__retarget_lock_release_recursive>
 800d602:	4628      	mov	r0, r5
 800d604:	bd70      	pop	{r4, r5, r6, pc}
 800d606:	2b00      	cmp	r3, #0
 800d608:	da04      	bge.n	800d614 <_puts_r+0xac>
 800d60a:	69a2      	ldr	r2, [r4, #24]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	dc06      	bgt.n	800d61e <_puts_r+0xb6>
 800d610:	290a      	cmp	r1, #10
 800d612:	d004      	beq.n	800d61e <_puts_r+0xb6>
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	6022      	str	r2, [r4, #0]
 800d61a:	7019      	strb	r1, [r3, #0]
 800d61c:	e7c5      	b.n	800d5aa <_puts_r+0x42>
 800d61e:	4622      	mov	r2, r4
 800d620:	4628      	mov	r0, r5
 800d622:	f000 f827 	bl	800d674 <__swbuf_r>
 800d626:	3001      	adds	r0, #1
 800d628:	d1bf      	bne.n	800d5aa <_puts_r+0x42>
 800d62a:	e7df      	b.n	800d5ec <_puts_r+0x84>
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	250a      	movs	r5, #10
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	6022      	str	r2, [r4, #0]
 800d634:	701d      	strb	r5, [r3, #0]
 800d636:	e7db      	b.n	800d5f0 <_puts_r+0x88>
 800d638:	0801017c 	.word	0x0801017c
 800d63c:	0801019c 	.word	0x0801019c
 800d640:	0801015c 	.word	0x0801015c

0800d644 <puts>:
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <puts+0xc>)
 800d646:	4601      	mov	r1, r0
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f7ff bf8d 	b.w	800d568 <_puts_r>
 800d64e:	bf00      	nop
 800d650:	20000100 	.word	0x20000100

0800d654 <_sbrk_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	; (800d670 <_sbrk_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f7 f91c 	bl	800489c <_sbrk>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_sbrk_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_sbrk_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	2001c790 	.word	0x2001c790

0800d674 <__swbuf_r>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	460e      	mov	r6, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	4605      	mov	r5, r0
 800d67c:	b118      	cbz	r0, 800d686 <__swbuf_r+0x12>
 800d67e:	6983      	ldr	r3, [r0, #24]
 800d680:	b90b      	cbnz	r3, 800d686 <__swbuf_r+0x12>
 800d682:	f000 f9d9 	bl	800da38 <__sinit>
 800d686:	4b21      	ldr	r3, [pc, #132]	; (800d70c <__swbuf_r+0x98>)
 800d688:	429c      	cmp	r4, r3
 800d68a:	d12b      	bne.n	800d6e4 <__swbuf_r+0x70>
 800d68c:	686c      	ldr	r4, [r5, #4]
 800d68e:	69a3      	ldr	r3, [r4, #24]
 800d690:	60a3      	str	r3, [r4, #8]
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	071a      	lsls	r2, r3, #28
 800d696:	d52f      	bpl.n	800d6f8 <__swbuf_r+0x84>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	b36b      	cbz	r3, 800d6f8 <__swbuf_r+0x84>
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	6820      	ldr	r0, [r4, #0]
 800d6a0:	1ac0      	subs	r0, r0, r3
 800d6a2:	6963      	ldr	r3, [r4, #20]
 800d6a4:	b2f6      	uxtb	r6, r6
 800d6a6:	4283      	cmp	r3, r0
 800d6a8:	4637      	mov	r7, r6
 800d6aa:	dc04      	bgt.n	800d6b6 <__swbuf_r+0x42>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f000 f92e 	bl	800d910 <_fflush_r>
 800d6b4:	bb30      	cbnz	r0, 800d704 <__swbuf_r+0x90>
 800d6b6:	68a3      	ldr	r3, [r4, #8]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	60a3      	str	r3, [r4, #8]
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	6022      	str	r2, [r4, #0]
 800d6c2:	701e      	strb	r6, [r3, #0]
 800d6c4:	6963      	ldr	r3, [r4, #20]
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	4283      	cmp	r3, r0
 800d6ca:	d004      	beq.n	800d6d6 <__swbuf_r+0x62>
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	07db      	lsls	r3, r3, #31
 800d6d0:	d506      	bpl.n	800d6e0 <__swbuf_r+0x6c>
 800d6d2:	2e0a      	cmp	r6, #10
 800d6d4:	d104      	bne.n	800d6e0 <__swbuf_r+0x6c>
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f000 f919 	bl	800d910 <_fflush_r>
 800d6de:	b988      	cbnz	r0, 800d704 <__swbuf_r+0x90>
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <__swbuf_r+0x9c>)
 800d6e6:	429c      	cmp	r4, r3
 800d6e8:	d101      	bne.n	800d6ee <__swbuf_r+0x7a>
 800d6ea:	68ac      	ldr	r4, [r5, #8]
 800d6ec:	e7cf      	b.n	800d68e <__swbuf_r+0x1a>
 800d6ee:	4b09      	ldr	r3, [pc, #36]	; (800d714 <__swbuf_r+0xa0>)
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	bf08      	it	eq
 800d6f4:	68ec      	ldreq	r4, [r5, #12]
 800d6f6:	e7ca      	b.n	800d68e <__swbuf_r+0x1a>
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 f80c 	bl	800d718 <__swsetup_r>
 800d700:	2800      	cmp	r0, #0
 800d702:	d0cb      	beq.n	800d69c <__swbuf_r+0x28>
 800d704:	f04f 37ff 	mov.w	r7, #4294967295
 800d708:	e7ea      	b.n	800d6e0 <__swbuf_r+0x6c>
 800d70a:	bf00      	nop
 800d70c:	0801017c 	.word	0x0801017c
 800d710:	0801019c 	.word	0x0801019c
 800d714:	0801015c 	.word	0x0801015c

0800d718 <__swsetup_r>:
 800d718:	4b32      	ldr	r3, [pc, #200]	; (800d7e4 <__swsetup_r+0xcc>)
 800d71a:	b570      	push	{r4, r5, r6, lr}
 800d71c:	681d      	ldr	r5, [r3, #0]
 800d71e:	4606      	mov	r6, r0
 800d720:	460c      	mov	r4, r1
 800d722:	b125      	cbz	r5, 800d72e <__swsetup_r+0x16>
 800d724:	69ab      	ldr	r3, [r5, #24]
 800d726:	b913      	cbnz	r3, 800d72e <__swsetup_r+0x16>
 800d728:	4628      	mov	r0, r5
 800d72a:	f000 f985 	bl	800da38 <__sinit>
 800d72e:	4b2e      	ldr	r3, [pc, #184]	; (800d7e8 <__swsetup_r+0xd0>)
 800d730:	429c      	cmp	r4, r3
 800d732:	d10f      	bne.n	800d754 <__swsetup_r+0x3c>
 800d734:	686c      	ldr	r4, [r5, #4]
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d73c:	0719      	lsls	r1, r3, #28
 800d73e:	d42c      	bmi.n	800d79a <__swsetup_r+0x82>
 800d740:	06dd      	lsls	r5, r3, #27
 800d742:	d411      	bmi.n	800d768 <__swsetup_r+0x50>
 800d744:	2309      	movs	r3, #9
 800d746:	6033      	str	r3, [r6, #0]
 800d748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d74c:	81a3      	strh	r3, [r4, #12]
 800d74e:	f04f 30ff 	mov.w	r0, #4294967295
 800d752:	e03e      	b.n	800d7d2 <__swsetup_r+0xba>
 800d754:	4b25      	ldr	r3, [pc, #148]	; (800d7ec <__swsetup_r+0xd4>)
 800d756:	429c      	cmp	r4, r3
 800d758:	d101      	bne.n	800d75e <__swsetup_r+0x46>
 800d75a:	68ac      	ldr	r4, [r5, #8]
 800d75c:	e7eb      	b.n	800d736 <__swsetup_r+0x1e>
 800d75e:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <__swsetup_r+0xd8>)
 800d760:	429c      	cmp	r4, r3
 800d762:	bf08      	it	eq
 800d764:	68ec      	ldreq	r4, [r5, #12]
 800d766:	e7e6      	b.n	800d736 <__swsetup_r+0x1e>
 800d768:	0758      	lsls	r0, r3, #29
 800d76a:	d512      	bpl.n	800d792 <__swsetup_r+0x7a>
 800d76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d76e:	b141      	cbz	r1, 800d782 <__swsetup_r+0x6a>
 800d770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d774:	4299      	cmp	r1, r3
 800d776:	d002      	beq.n	800d77e <__swsetup_r+0x66>
 800d778:	4630      	mov	r0, r6
 800d77a:	f7ff fb0f 	bl	800cd9c <_free_r>
 800d77e:	2300      	movs	r3, #0
 800d780:	6363      	str	r3, [r4, #52]	; 0x34
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d788:	81a3      	strh	r3, [r4, #12]
 800d78a:	2300      	movs	r3, #0
 800d78c:	6063      	str	r3, [r4, #4]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f043 0308 	orr.w	r3, r3, #8
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	6923      	ldr	r3, [r4, #16]
 800d79c:	b94b      	cbnz	r3, 800d7b2 <__swsetup_r+0x9a>
 800d79e:	89a3      	ldrh	r3, [r4, #12]
 800d7a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a8:	d003      	beq.n	800d7b2 <__swsetup_r+0x9a>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f000 fa09 	bl	800dbc4 <__smakebuf_r>
 800d7b2:	89a0      	ldrh	r0, [r4, #12]
 800d7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7b8:	f010 0301 	ands.w	r3, r0, #1
 800d7bc:	d00a      	beq.n	800d7d4 <__swsetup_r+0xbc>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60a3      	str	r3, [r4, #8]
 800d7c2:	6963      	ldr	r3, [r4, #20]
 800d7c4:	425b      	negs	r3, r3
 800d7c6:	61a3      	str	r3, [r4, #24]
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	b943      	cbnz	r3, 800d7de <__swsetup_r+0xc6>
 800d7cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7d0:	d1ba      	bne.n	800d748 <__swsetup_r+0x30>
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	0781      	lsls	r1, r0, #30
 800d7d6:	bf58      	it	pl
 800d7d8:	6963      	ldrpl	r3, [r4, #20]
 800d7da:	60a3      	str	r3, [r4, #8]
 800d7dc:	e7f4      	b.n	800d7c8 <__swsetup_r+0xb0>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	e7f7      	b.n	800d7d2 <__swsetup_r+0xba>
 800d7e2:	bf00      	nop
 800d7e4:	20000100 	.word	0x20000100
 800d7e8:	0801017c 	.word	0x0801017c
 800d7ec:	0801019c 	.word	0x0801019c
 800d7f0:	0801015c 	.word	0x0801015c

0800d7f4 <abort>:
 800d7f4:	b508      	push	{r3, lr}
 800d7f6:	2006      	movs	r0, #6
 800d7f8:	f000 fa58 	bl	800dcac <raise>
 800d7fc:	2001      	movs	r0, #1
 800d7fe:	f7f6 fff1 	bl	80047e4 <_exit>
	...

0800d804 <__sflush_r>:
 800d804:	898a      	ldrh	r2, [r1, #12]
 800d806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	4605      	mov	r5, r0
 800d80c:	0710      	lsls	r0, r2, #28
 800d80e:	460c      	mov	r4, r1
 800d810:	d458      	bmi.n	800d8c4 <__sflush_r+0xc0>
 800d812:	684b      	ldr	r3, [r1, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	dc05      	bgt.n	800d824 <__sflush_r+0x20>
 800d818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	dc02      	bgt.n	800d824 <__sflush_r+0x20>
 800d81e:	2000      	movs	r0, #0
 800d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d826:	2e00      	cmp	r6, #0
 800d828:	d0f9      	beq.n	800d81e <__sflush_r+0x1a>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d830:	682f      	ldr	r7, [r5, #0]
 800d832:	602b      	str	r3, [r5, #0]
 800d834:	d032      	beq.n	800d89c <__sflush_r+0x98>
 800d836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	075a      	lsls	r2, r3, #29
 800d83c:	d505      	bpl.n	800d84a <__sflush_r+0x46>
 800d83e:	6863      	ldr	r3, [r4, #4]
 800d840:	1ac0      	subs	r0, r0, r3
 800d842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d844:	b10b      	cbz	r3, 800d84a <__sflush_r+0x46>
 800d846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d848:	1ac0      	subs	r0, r0, r3
 800d84a:	2300      	movs	r3, #0
 800d84c:	4602      	mov	r2, r0
 800d84e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d850:	6a21      	ldr	r1, [r4, #32]
 800d852:	4628      	mov	r0, r5
 800d854:	47b0      	blx	r6
 800d856:	1c43      	adds	r3, r0, #1
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	d106      	bne.n	800d86a <__sflush_r+0x66>
 800d85c:	6829      	ldr	r1, [r5, #0]
 800d85e:	291d      	cmp	r1, #29
 800d860:	d82c      	bhi.n	800d8bc <__sflush_r+0xb8>
 800d862:	4a2a      	ldr	r2, [pc, #168]	; (800d90c <__sflush_r+0x108>)
 800d864:	40ca      	lsrs	r2, r1
 800d866:	07d6      	lsls	r6, r2, #31
 800d868:	d528      	bpl.n	800d8bc <__sflush_r+0xb8>
 800d86a:	2200      	movs	r2, #0
 800d86c:	6062      	str	r2, [r4, #4]
 800d86e:	04d9      	lsls	r1, r3, #19
 800d870:	6922      	ldr	r2, [r4, #16]
 800d872:	6022      	str	r2, [r4, #0]
 800d874:	d504      	bpl.n	800d880 <__sflush_r+0x7c>
 800d876:	1c42      	adds	r2, r0, #1
 800d878:	d101      	bne.n	800d87e <__sflush_r+0x7a>
 800d87a:	682b      	ldr	r3, [r5, #0]
 800d87c:	b903      	cbnz	r3, 800d880 <__sflush_r+0x7c>
 800d87e:	6560      	str	r0, [r4, #84]	; 0x54
 800d880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d882:	602f      	str	r7, [r5, #0]
 800d884:	2900      	cmp	r1, #0
 800d886:	d0ca      	beq.n	800d81e <__sflush_r+0x1a>
 800d888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d88c:	4299      	cmp	r1, r3
 800d88e:	d002      	beq.n	800d896 <__sflush_r+0x92>
 800d890:	4628      	mov	r0, r5
 800d892:	f7ff fa83 	bl	800cd9c <_free_r>
 800d896:	2000      	movs	r0, #0
 800d898:	6360      	str	r0, [r4, #52]	; 0x34
 800d89a:	e7c1      	b.n	800d820 <__sflush_r+0x1c>
 800d89c:	6a21      	ldr	r1, [r4, #32]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b0      	blx	r6
 800d8a4:	1c41      	adds	r1, r0, #1
 800d8a6:	d1c7      	bne.n	800d838 <__sflush_r+0x34>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0c4      	beq.n	800d838 <__sflush_r+0x34>
 800d8ae:	2b1d      	cmp	r3, #29
 800d8b0:	d001      	beq.n	800d8b6 <__sflush_r+0xb2>
 800d8b2:	2b16      	cmp	r3, #22
 800d8b4:	d101      	bne.n	800d8ba <__sflush_r+0xb6>
 800d8b6:	602f      	str	r7, [r5, #0]
 800d8b8:	e7b1      	b.n	800d81e <__sflush_r+0x1a>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	e7ad      	b.n	800d820 <__sflush_r+0x1c>
 800d8c4:	690f      	ldr	r7, [r1, #16]
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	d0a9      	beq.n	800d81e <__sflush_r+0x1a>
 800d8ca:	0793      	lsls	r3, r2, #30
 800d8cc:	680e      	ldr	r6, [r1, #0]
 800d8ce:	bf08      	it	eq
 800d8d0:	694b      	ldreq	r3, [r1, #20]
 800d8d2:	600f      	str	r7, [r1, #0]
 800d8d4:	bf18      	it	ne
 800d8d6:	2300      	movne	r3, #0
 800d8d8:	eba6 0807 	sub.w	r8, r6, r7
 800d8dc:	608b      	str	r3, [r1, #8]
 800d8de:	f1b8 0f00 	cmp.w	r8, #0
 800d8e2:	dd9c      	ble.n	800d81e <__sflush_r+0x1a>
 800d8e4:	6a21      	ldr	r1, [r4, #32]
 800d8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8e8:	4643      	mov	r3, r8
 800d8ea:	463a      	mov	r2, r7
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b0      	blx	r6
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	dc06      	bgt.n	800d902 <__sflush_r+0xfe>
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d900:	e78e      	b.n	800d820 <__sflush_r+0x1c>
 800d902:	4407      	add	r7, r0
 800d904:	eba8 0800 	sub.w	r8, r8, r0
 800d908:	e7e9      	b.n	800d8de <__sflush_r+0xda>
 800d90a:	bf00      	nop
 800d90c:	20400001 	.word	0x20400001

0800d910 <_fflush_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	690b      	ldr	r3, [r1, #16]
 800d914:	4605      	mov	r5, r0
 800d916:	460c      	mov	r4, r1
 800d918:	b913      	cbnz	r3, 800d920 <_fflush_r+0x10>
 800d91a:	2500      	movs	r5, #0
 800d91c:	4628      	mov	r0, r5
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	b118      	cbz	r0, 800d92a <_fflush_r+0x1a>
 800d922:	6983      	ldr	r3, [r0, #24]
 800d924:	b90b      	cbnz	r3, 800d92a <_fflush_r+0x1a>
 800d926:	f000 f887 	bl	800da38 <__sinit>
 800d92a:	4b14      	ldr	r3, [pc, #80]	; (800d97c <_fflush_r+0x6c>)
 800d92c:	429c      	cmp	r4, r3
 800d92e:	d11b      	bne.n	800d968 <_fflush_r+0x58>
 800d930:	686c      	ldr	r4, [r5, #4]
 800d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0ef      	beq.n	800d91a <_fflush_r+0xa>
 800d93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d93c:	07d0      	lsls	r0, r2, #31
 800d93e:	d404      	bmi.n	800d94a <_fflush_r+0x3a>
 800d940:	0599      	lsls	r1, r3, #22
 800d942:	d402      	bmi.n	800d94a <_fflush_r+0x3a>
 800d944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d946:	f000 f915 	bl	800db74 <__retarget_lock_acquire_recursive>
 800d94a:	4628      	mov	r0, r5
 800d94c:	4621      	mov	r1, r4
 800d94e:	f7ff ff59 	bl	800d804 <__sflush_r>
 800d952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d954:	07da      	lsls	r2, r3, #31
 800d956:	4605      	mov	r5, r0
 800d958:	d4e0      	bmi.n	800d91c <_fflush_r+0xc>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	059b      	lsls	r3, r3, #22
 800d95e:	d4dd      	bmi.n	800d91c <_fflush_r+0xc>
 800d960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d962:	f000 f908 	bl	800db76 <__retarget_lock_release_recursive>
 800d966:	e7d9      	b.n	800d91c <_fflush_r+0xc>
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <_fflush_r+0x70>)
 800d96a:	429c      	cmp	r4, r3
 800d96c:	d101      	bne.n	800d972 <_fflush_r+0x62>
 800d96e:	68ac      	ldr	r4, [r5, #8]
 800d970:	e7df      	b.n	800d932 <_fflush_r+0x22>
 800d972:	4b04      	ldr	r3, [pc, #16]	; (800d984 <_fflush_r+0x74>)
 800d974:	429c      	cmp	r4, r3
 800d976:	bf08      	it	eq
 800d978:	68ec      	ldreq	r4, [r5, #12]
 800d97a:	e7da      	b.n	800d932 <_fflush_r+0x22>
 800d97c:	0801017c 	.word	0x0801017c
 800d980:	0801019c 	.word	0x0801019c
 800d984:	0801015c 	.word	0x0801015c

0800d988 <std>:
 800d988:	2300      	movs	r3, #0
 800d98a:	b510      	push	{r4, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	e9c0 3300 	strd	r3, r3, [r0]
 800d992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d996:	6083      	str	r3, [r0, #8]
 800d998:	8181      	strh	r1, [r0, #12]
 800d99a:	6643      	str	r3, [r0, #100]	; 0x64
 800d99c:	81c2      	strh	r2, [r0, #14]
 800d99e:	6183      	str	r3, [r0, #24]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	305c      	adds	r0, #92	; 0x5c
 800d9a6:	f7ff f9f1 	bl	800cd8c <memset>
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <std+0x38>)
 800d9ac:	6263      	str	r3, [r4, #36]	; 0x24
 800d9ae:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <std+0x3c>)
 800d9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <std+0x40>)
 800d9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <std+0x44>)
 800d9b8:	6224      	str	r4, [r4, #32]
 800d9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	0800dce5 	.word	0x0800dce5
 800d9c4:	0800dd07 	.word	0x0800dd07
 800d9c8:	0800dd3f 	.word	0x0800dd3f
 800d9cc:	0800dd63 	.word	0x0800dd63

0800d9d0 <_cleanup_r>:
 800d9d0:	4901      	ldr	r1, [pc, #4]	; (800d9d8 <_cleanup_r+0x8>)
 800d9d2:	f000 b8af 	b.w	800db34 <_fwalk_reent>
 800d9d6:	bf00      	nop
 800d9d8:	0800d911 	.word	0x0800d911

0800d9dc <__sfmoreglue>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	2268      	movs	r2, #104	; 0x68
 800d9e0:	1e4d      	subs	r5, r1, #1
 800d9e2:	4355      	muls	r5, r2
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9ea:	f7ff fa43 	bl	800ce74 <_malloc_r>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b140      	cbz	r0, 800da04 <__sfmoreglue+0x28>
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d9f8:	300c      	adds	r0, #12
 800d9fa:	60a0      	str	r0, [r4, #8]
 800d9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da00:	f7ff f9c4 	bl	800cd8c <memset>
 800da04:	4620      	mov	r0, r4
 800da06:	bd70      	pop	{r4, r5, r6, pc}

0800da08 <__sfp_lock_acquire>:
 800da08:	4801      	ldr	r0, [pc, #4]	; (800da10 <__sfp_lock_acquire+0x8>)
 800da0a:	f000 b8b3 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800da0e:	bf00      	nop
 800da10:	2001c78d 	.word	0x2001c78d

0800da14 <__sfp_lock_release>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__sfp_lock_release+0x8>)
 800da16:	f000 b8ae 	b.w	800db76 <__retarget_lock_release_recursive>
 800da1a:	bf00      	nop
 800da1c:	2001c78d 	.word	0x2001c78d

0800da20 <__sinit_lock_acquire>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__sinit_lock_acquire+0x8>)
 800da22:	f000 b8a7 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800da26:	bf00      	nop
 800da28:	2001c78e 	.word	0x2001c78e

0800da2c <__sinit_lock_release>:
 800da2c:	4801      	ldr	r0, [pc, #4]	; (800da34 <__sinit_lock_release+0x8>)
 800da2e:	f000 b8a2 	b.w	800db76 <__retarget_lock_release_recursive>
 800da32:	bf00      	nop
 800da34:	2001c78e 	.word	0x2001c78e

0800da38 <__sinit>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	4604      	mov	r4, r0
 800da3c:	f7ff fff0 	bl	800da20 <__sinit_lock_acquire>
 800da40:	69a3      	ldr	r3, [r4, #24]
 800da42:	b11b      	cbz	r3, 800da4c <__sinit+0x14>
 800da44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da48:	f7ff bff0 	b.w	800da2c <__sinit_lock_release>
 800da4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da50:	6523      	str	r3, [r4, #80]	; 0x50
 800da52:	4b13      	ldr	r3, [pc, #76]	; (800daa0 <__sinit+0x68>)
 800da54:	4a13      	ldr	r2, [pc, #76]	; (800daa4 <__sinit+0x6c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	62a2      	str	r2, [r4, #40]	; 0x28
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	bf04      	itt	eq
 800da5e:	2301      	moveq	r3, #1
 800da60:	61a3      	streq	r3, [r4, #24]
 800da62:	4620      	mov	r0, r4
 800da64:	f000 f820 	bl	800daa8 <__sfp>
 800da68:	6060      	str	r0, [r4, #4]
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 f81c 	bl	800daa8 <__sfp>
 800da70:	60a0      	str	r0, [r4, #8]
 800da72:	4620      	mov	r0, r4
 800da74:	f000 f818 	bl	800daa8 <__sfp>
 800da78:	2200      	movs	r2, #0
 800da7a:	60e0      	str	r0, [r4, #12]
 800da7c:	2104      	movs	r1, #4
 800da7e:	6860      	ldr	r0, [r4, #4]
 800da80:	f7ff ff82 	bl	800d988 <std>
 800da84:	68a0      	ldr	r0, [r4, #8]
 800da86:	2201      	movs	r2, #1
 800da88:	2109      	movs	r1, #9
 800da8a:	f7ff ff7d 	bl	800d988 <std>
 800da8e:	68e0      	ldr	r0, [r4, #12]
 800da90:	2202      	movs	r2, #2
 800da92:	2112      	movs	r1, #18
 800da94:	f7ff ff78 	bl	800d988 <std>
 800da98:	2301      	movs	r3, #1
 800da9a:	61a3      	str	r3, [r4, #24]
 800da9c:	e7d2      	b.n	800da44 <__sinit+0xc>
 800da9e:	bf00      	nop
 800daa0:	08010124 	.word	0x08010124
 800daa4:	0800d9d1 	.word	0x0800d9d1

0800daa8 <__sfp>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	4607      	mov	r7, r0
 800daac:	f7ff ffac 	bl	800da08 <__sfp_lock_acquire>
 800dab0:	4b1e      	ldr	r3, [pc, #120]	; (800db2c <__sfp+0x84>)
 800dab2:	681e      	ldr	r6, [r3, #0]
 800dab4:	69b3      	ldr	r3, [r6, #24]
 800dab6:	b913      	cbnz	r3, 800dabe <__sfp+0x16>
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff ffbd 	bl	800da38 <__sinit>
 800dabe:	3648      	adds	r6, #72	; 0x48
 800dac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	d503      	bpl.n	800dad0 <__sfp+0x28>
 800dac8:	6833      	ldr	r3, [r6, #0]
 800daca:	b30b      	cbz	r3, 800db10 <__sfp+0x68>
 800dacc:	6836      	ldr	r6, [r6, #0]
 800dace:	e7f7      	b.n	800dac0 <__sfp+0x18>
 800dad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dad4:	b9d5      	cbnz	r5, 800db0c <__sfp+0x64>
 800dad6:	4b16      	ldr	r3, [pc, #88]	; (800db30 <__sfp+0x88>)
 800dad8:	60e3      	str	r3, [r4, #12]
 800dada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dade:	6665      	str	r5, [r4, #100]	; 0x64
 800dae0:	f000 f847 	bl	800db72 <__retarget_lock_init_recursive>
 800dae4:	f7ff ff96 	bl	800da14 <__sfp_lock_release>
 800dae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800daec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800daf0:	6025      	str	r5, [r4, #0]
 800daf2:	61a5      	str	r5, [r4, #24]
 800daf4:	2208      	movs	r2, #8
 800daf6:	4629      	mov	r1, r5
 800daf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dafc:	f7ff f946 	bl	800cd8c <memset>
 800db00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db08:	4620      	mov	r0, r4
 800db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db0c:	3468      	adds	r4, #104	; 0x68
 800db0e:	e7d9      	b.n	800dac4 <__sfp+0x1c>
 800db10:	2104      	movs	r1, #4
 800db12:	4638      	mov	r0, r7
 800db14:	f7ff ff62 	bl	800d9dc <__sfmoreglue>
 800db18:	4604      	mov	r4, r0
 800db1a:	6030      	str	r0, [r6, #0]
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1d5      	bne.n	800dacc <__sfp+0x24>
 800db20:	f7ff ff78 	bl	800da14 <__sfp_lock_release>
 800db24:	230c      	movs	r3, #12
 800db26:	603b      	str	r3, [r7, #0]
 800db28:	e7ee      	b.n	800db08 <__sfp+0x60>
 800db2a:	bf00      	nop
 800db2c:	08010124 	.word	0x08010124
 800db30:	ffff0001 	.word	0xffff0001

0800db34 <_fwalk_reent>:
 800db34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db38:	4606      	mov	r6, r0
 800db3a:	4688      	mov	r8, r1
 800db3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db40:	2700      	movs	r7, #0
 800db42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db46:	f1b9 0901 	subs.w	r9, r9, #1
 800db4a:	d505      	bpl.n	800db58 <_fwalk_reent+0x24>
 800db4c:	6824      	ldr	r4, [r4, #0]
 800db4e:	2c00      	cmp	r4, #0
 800db50:	d1f7      	bne.n	800db42 <_fwalk_reent+0xe>
 800db52:	4638      	mov	r0, r7
 800db54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db58:	89ab      	ldrh	r3, [r5, #12]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d907      	bls.n	800db6e <_fwalk_reent+0x3a>
 800db5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db62:	3301      	adds	r3, #1
 800db64:	d003      	beq.n	800db6e <_fwalk_reent+0x3a>
 800db66:	4629      	mov	r1, r5
 800db68:	4630      	mov	r0, r6
 800db6a:	47c0      	blx	r8
 800db6c:	4307      	orrs	r7, r0
 800db6e:	3568      	adds	r5, #104	; 0x68
 800db70:	e7e9      	b.n	800db46 <_fwalk_reent+0x12>

0800db72 <__retarget_lock_init_recursive>:
 800db72:	4770      	bx	lr

0800db74 <__retarget_lock_acquire_recursive>:
 800db74:	4770      	bx	lr

0800db76 <__retarget_lock_release_recursive>:
 800db76:	4770      	bx	lr

0800db78 <__swhatbuf_r>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	460e      	mov	r6, r1
 800db7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db80:	2900      	cmp	r1, #0
 800db82:	b096      	sub	sp, #88	; 0x58
 800db84:	4614      	mov	r4, r2
 800db86:	461d      	mov	r5, r3
 800db88:	da08      	bge.n	800db9c <__swhatbuf_r+0x24>
 800db8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db8e:	2200      	movs	r2, #0
 800db90:	602a      	str	r2, [r5, #0]
 800db92:	061a      	lsls	r2, r3, #24
 800db94:	d410      	bmi.n	800dbb8 <__swhatbuf_r+0x40>
 800db96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db9a:	e00e      	b.n	800dbba <__swhatbuf_r+0x42>
 800db9c:	466a      	mov	r2, sp
 800db9e:	f000 f907 	bl	800ddb0 <_fstat_r>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	dbf1      	blt.n	800db8a <__swhatbuf_r+0x12>
 800dba6:	9a01      	ldr	r2, [sp, #4]
 800dba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbb0:	425a      	negs	r2, r3
 800dbb2:	415a      	adcs	r2, r3
 800dbb4:	602a      	str	r2, [r5, #0]
 800dbb6:	e7ee      	b.n	800db96 <__swhatbuf_r+0x1e>
 800dbb8:	2340      	movs	r3, #64	; 0x40
 800dbba:	2000      	movs	r0, #0
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	b016      	add	sp, #88	; 0x58
 800dbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbc4 <__smakebuf_r>:
 800dbc4:	898b      	ldrh	r3, [r1, #12]
 800dbc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbc8:	079d      	lsls	r5, r3, #30
 800dbca:	4606      	mov	r6, r0
 800dbcc:	460c      	mov	r4, r1
 800dbce:	d507      	bpl.n	800dbe0 <__smakebuf_r+0x1c>
 800dbd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	6123      	str	r3, [r4, #16]
 800dbd8:	2301      	movs	r3, #1
 800dbda:	6163      	str	r3, [r4, #20]
 800dbdc:	b002      	add	sp, #8
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	ab01      	add	r3, sp, #4
 800dbe2:	466a      	mov	r2, sp
 800dbe4:	f7ff ffc8 	bl	800db78 <__swhatbuf_r>
 800dbe8:	9900      	ldr	r1, [sp, #0]
 800dbea:	4605      	mov	r5, r0
 800dbec:	4630      	mov	r0, r6
 800dbee:	f7ff f941 	bl	800ce74 <_malloc_r>
 800dbf2:	b948      	cbnz	r0, 800dc08 <__smakebuf_r+0x44>
 800dbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf8:	059a      	lsls	r2, r3, #22
 800dbfa:	d4ef      	bmi.n	800dbdc <__smakebuf_r+0x18>
 800dbfc:	f023 0303 	bic.w	r3, r3, #3
 800dc00:	f043 0302 	orr.w	r3, r3, #2
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	e7e3      	b.n	800dbd0 <__smakebuf_r+0xc>
 800dc08:	4b0d      	ldr	r3, [pc, #52]	; (800dc40 <__smakebuf_r+0x7c>)
 800dc0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	6020      	str	r0, [r4, #0]
 800dc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc14:	81a3      	strh	r3, [r4, #12]
 800dc16:	9b00      	ldr	r3, [sp, #0]
 800dc18:	6163      	str	r3, [r4, #20]
 800dc1a:	9b01      	ldr	r3, [sp, #4]
 800dc1c:	6120      	str	r0, [r4, #16]
 800dc1e:	b15b      	cbz	r3, 800dc38 <__smakebuf_r+0x74>
 800dc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc24:	4630      	mov	r0, r6
 800dc26:	f000 f8d5 	bl	800ddd4 <_isatty_r>
 800dc2a:	b128      	cbz	r0, 800dc38 <__smakebuf_r+0x74>
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	f023 0303 	bic.w	r3, r3, #3
 800dc32:	f043 0301 	orr.w	r3, r3, #1
 800dc36:	81a3      	strh	r3, [r4, #12]
 800dc38:	89a0      	ldrh	r0, [r4, #12]
 800dc3a:	4305      	orrs	r5, r0
 800dc3c:	81a5      	strh	r5, [r4, #12]
 800dc3e:	e7cd      	b.n	800dbdc <__smakebuf_r+0x18>
 800dc40:	0800d9d1 	.word	0x0800d9d1

0800dc44 <__malloc_lock>:
 800dc44:	4801      	ldr	r0, [pc, #4]	; (800dc4c <__malloc_lock+0x8>)
 800dc46:	f7ff bf95 	b.w	800db74 <__retarget_lock_acquire_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	2001c78c 	.word	0x2001c78c

0800dc50 <__malloc_unlock>:
 800dc50:	4801      	ldr	r0, [pc, #4]	; (800dc58 <__malloc_unlock+0x8>)
 800dc52:	f7ff bf90 	b.w	800db76 <__retarget_lock_release_recursive>
 800dc56:	bf00      	nop
 800dc58:	2001c78c 	.word	0x2001c78c

0800dc5c <_raise_r>:
 800dc5c:	291f      	cmp	r1, #31
 800dc5e:	b538      	push	{r3, r4, r5, lr}
 800dc60:	4604      	mov	r4, r0
 800dc62:	460d      	mov	r5, r1
 800dc64:	d904      	bls.n	800dc70 <_raise_r+0x14>
 800dc66:	2316      	movs	r3, #22
 800dc68:	6003      	str	r3, [r0, #0]
 800dc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6e:	bd38      	pop	{r3, r4, r5, pc}
 800dc70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc72:	b112      	cbz	r2, 800dc7a <_raise_r+0x1e>
 800dc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc78:	b94b      	cbnz	r3, 800dc8e <_raise_r+0x32>
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 f830 	bl	800dce0 <_getpid_r>
 800dc80:	462a      	mov	r2, r5
 800dc82:	4601      	mov	r1, r0
 800dc84:	4620      	mov	r0, r4
 800dc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc8a:	f000 b817 	b.w	800dcbc <_kill_r>
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d00a      	beq.n	800dca8 <_raise_r+0x4c>
 800dc92:	1c59      	adds	r1, r3, #1
 800dc94:	d103      	bne.n	800dc9e <_raise_r+0x42>
 800dc96:	2316      	movs	r3, #22
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	e7e7      	b.n	800dc6e <_raise_r+0x12>
 800dc9e:	2400      	movs	r4, #0
 800dca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dca4:	4628      	mov	r0, r5
 800dca6:	4798      	blx	r3
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e7e0      	b.n	800dc6e <_raise_r+0x12>

0800dcac <raise>:
 800dcac:	4b02      	ldr	r3, [pc, #8]	; (800dcb8 <raise+0xc>)
 800dcae:	4601      	mov	r1, r0
 800dcb0:	6818      	ldr	r0, [r3, #0]
 800dcb2:	f7ff bfd3 	b.w	800dc5c <_raise_r>
 800dcb6:	bf00      	nop
 800dcb8:	20000100 	.word	0x20000100

0800dcbc <_kill_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_kill_r+0x20>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f7f6 fd7b 	bl	80047c4 <_kill>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d102      	bne.n	800dcd8 <_kill_r+0x1c>
 800dcd2:	682b      	ldr	r3, [r5, #0]
 800dcd4:	b103      	cbz	r3, 800dcd8 <_kill_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	2001c790 	.word	0x2001c790

0800dce0 <_getpid_r>:
 800dce0:	f7f6 bd68 	b.w	80047b4 <_getpid>

0800dce4 <__sread>:
 800dce4:	b510      	push	{r4, lr}
 800dce6:	460c      	mov	r4, r1
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	f000 f894 	bl	800de18 <_read_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	bfab      	itete	ge
 800dcf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcf8:	181b      	addge	r3, r3, r0
 800dcfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcfe:	bfac      	ite	ge
 800dd00:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd02:	81a3      	strhlt	r3, [r4, #12]
 800dd04:	bd10      	pop	{r4, pc}

0800dd06 <__swrite>:
 800dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	898b      	ldrh	r3, [r1, #12]
 800dd0e:	05db      	lsls	r3, r3, #23
 800dd10:	4605      	mov	r5, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	d505      	bpl.n	800dd24 <__swrite+0x1e>
 800dd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f000 f868 	bl	800ddf4 <_lseek_r>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	f000 b817 	b.w	800dd6c <_write_r>

0800dd3e <__sseek>:
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	460c      	mov	r4, r1
 800dd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd46:	f000 f855 	bl	800ddf4 <_lseek_r>
 800dd4a:	1c43      	adds	r3, r0, #1
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	bf15      	itete	ne
 800dd50:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd5a:	81a3      	strheq	r3, [r4, #12]
 800dd5c:	bf18      	it	ne
 800dd5e:	81a3      	strhne	r3, [r4, #12]
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <__sclose>:
 800dd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd66:	f000 b813 	b.w	800dd90 <_close_r>
	...

0800dd6c <_write_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	; (800dd8c <_write_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f5 f9fc 	bl	8003178 <_write>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_write_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_write_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	2001c790 	.word	0x2001c790

0800dd90 <_close_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d06      	ldr	r5, [pc, #24]	; (800ddac <_close_r+0x1c>)
 800dd94:	2300      	movs	r3, #0
 800dd96:	4604      	mov	r4, r0
 800dd98:	4608      	mov	r0, r1
 800dd9a:	602b      	str	r3, [r5, #0]
 800dd9c:	f7f6 fd49 	bl	8004832 <_close>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_close_r+0x1a>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_close_r+0x1a>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	2001c790 	.word	0x2001c790

0800ddb0 <_fstat_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d07      	ldr	r5, [pc, #28]	; (800ddd0 <_fstat_r+0x20>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	4611      	mov	r1, r2
 800ddbc:	602b      	str	r3, [r5, #0]
 800ddbe:	f7f6 fd44 	bl	800484a <_fstat>
 800ddc2:	1c43      	adds	r3, r0, #1
 800ddc4:	d102      	bne.n	800ddcc <_fstat_r+0x1c>
 800ddc6:	682b      	ldr	r3, [r5, #0]
 800ddc8:	b103      	cbz	r3, 800ddcc <_fstat_r+0x1c>
 800ddca:	6023      	str	r3, [r4, #0]
 800ddcc:	bd38      	pop	{r3, r4, r5, pc}
 800ddce:	bf00      	nop
 800ddd0:	2001c790 	.word	0x2001c790

0800ddd4 <_isatty_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d06      	ldr	r5, [pc, #24]	; (800ddf0 <_isatty_r+0x1c>)
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4604      	mov	r4, r0
 800dddc:	4608      	mov	r0, r1
 800ddde:	602b      	str	r3, [r5, #0]
 800dde0:	f7f6 fd43 	bl	800486a <_isatty>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_isatty_r+0x1a>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_isatty_r+0x1a>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	2001c790 	.word	0x2001c790

0800ddf4 <_lseek_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d07      	ldr	r5, [pc, #28]	; (800de14 <_lseek_r+0x20>)
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7f6 fd3c 	bl	8004880 <_lseek>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_lseek_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_lseek_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	2001c790 	.word	0x2001c790

0800de18 <_read_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4d07      	ldr	r5, [pc, #28]	; (800de38 <_read_r+0x20>)
 800de1c:	4604      	mov	r4, r0
 800de1e:	4608      	mov	r0, r1
 800de20:	4611      	mov	r1, r2
 800de22:	2200      	movs	r2, #0
 800de24:	602a      	str	r2, [r5, #0]
 800de26:	461a      	mov	r2, r3
 800de28:	f7f6 fce6 	bl	80047f8 <_read>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_read_r+0x1e>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	b103      	cbz	r3, 800de36 <_read_r+0x1e>
 800de34:	6023      	str	r3, [r4, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	2001c790 	.word	0x2001c790

0800de3c <_init>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr

0800de48 <_fini>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr
